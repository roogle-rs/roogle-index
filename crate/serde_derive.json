{"root":"0:0:1603","crate_version":"1.0.137","includes_private":false,"index":{"1:6345:4594":{"id":"1:6345:4594","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6346:4925","1:6347:4926","1:6348:58701","1:6349:60129","1:6351:60133","1:6353:60130","1:6354:60131","1:6356:60132"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10427:4599","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:12256:5523":{"id":"2:12256:5523","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12257:1771","2:12258:2906"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12819:5051":{"id":"2:12819:5051","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12821:5054","2:12822:60346","2:12823:60347","2:12824:60348","2:12825:60350","2:12826:60349","2:12827:60351"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:2126:6332":{"id":"24:2126:6332","crate_id":24,"name":"IdentExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2127:63290","24:2128:63291","24:2129:1834"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"24:2144:4599","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:7707:5121":{"id":"2:7707:5121","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7708:61299","2:7709:61300","2:7710:61304","2:7711:61302","2:7712:61301","2:7713:61305","2:7714:61303"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2875:169","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3463:4396":{"id":"2:3463:4396","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3465:221","2:3466:191","2:3467:61258"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9113:3642":{"id":"2:9113:3642","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6070:62348":{"id":"5:6070:62348","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8302:200","`Box<str>`":"5:421:1770"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1770","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8061:4404","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3633:208":{"id":"2:3633:208","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3634:166","2:3635:5015","2:3636:665","2:3637:352"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3638:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3633:208","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:9112:3643":{"id":"2:9112:3643","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13222:57087":{"id":"2:13222:57087","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::split_whitespace":"1:15726:2952","`DoubleEndedIterator`":"2:8227:115","str::rsplit":"1:15726:2952","self::pattern":"2:12809:5052","prim@char":"1:15720:2947"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49122:4625","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13174:2032":{"id":"2:13174:2032","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10111:3297":{"id":"2:10111:3297","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10112:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3255:4991":{"id":"2:3255:4991","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3257:166","2:3258:869"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12748:3231":{"id":"2:12748:3231","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12749:121","2:12750:1929"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3679:3289":{"id":"2:3679:3289","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3327","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:0:1603":{"id":"0:0:1603","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[108,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2018\n# use serde_derive::{Serialize, Deserialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.137\")]","#![allow(unknown_lints, bare_trait_objects)]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: enum_variant_names, clippy ::\nmanual_map, clippy :: match_like_matches_macro, clippy ::\nneedless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: let_underscore_drop, clippy ::\nmanual_assert, clippy :: map_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:1257:1588","0:1258:1597"]}},"2:13187:57057":{"id":"2:13187:57057","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47164:161"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10710:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10710:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3621:5442":{"id":"2:3621:5442","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3327","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3552:3230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10092:105":{"id":"2:10092:105","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10093:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6771:4589":{"id":"1:6771:4589","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6772:60068"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5805:5534":{"id":"5:5805:5534","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5807:166","5:5808:34245"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13191:57059":{"id":"2:13191:57059","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10710:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10710:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13252:61697":{"id":"2:13252:61697","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"1:15726:2952","`DoubleEndedIterator`":"2:8227:115","prim@char":"1:15720:2947","self::pattern":"2:12809:5052"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49344:5367","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:5055","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3429:127":{"id":"2:3429:127","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3431:166","2:3432:361"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12828:5054":{"id":"2:12828:5054","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12830:5074","2:12831:899","2:12832:60524","2:12833:60525"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3292:5005":{"id":"2:3292:5005","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3294:1081"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13195:57079":{"id":"2:13195:57079","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15726:2952"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3012:5128":{"id":"2:3012:5128","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3011:4599","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3314:4847":{"id":"2:3314:4847","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3316:166","2:3317:339"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4899:4696":{"id":"1:4899:4696","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4900:3210","1:4901:59782"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6861:4582":{"id":"1:6861:4582","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6862:59558"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3319:3418":{"id":"2:3319:3418","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3321:166","2:3322:1203"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13293:4386":{"id":"2:13293:4386","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13265:61702":{"id":"2:13265:61702","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4621:4601":{"id":"1:4621:4601","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4622:58556","1:4623:58557","1:4624:58558","1:4626:4621","1:4627:58559","1:4629:57087","1:4630:5815"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4539:4615","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3485:3219":{"id":"2:3485:3219","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3487:731"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3327","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3481:2213","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6593:4665":{"id":"1:6593:4665","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6594:59721","1:6595:8632","1:6596:8633","1:6597:8635","1:6598:8634","1:6599:8636","1:6600:8637","1:6601:8639","1:6602:6900","1:6603:8642","1:6604:8643","1:6605:8644","1:6606:8645","1:6607:8646","1:6608:8647","1:6609:8640","1:6610:8641"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8227:115":{"id":"2:8227:115","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8228:4029","2:8229:4030","2:8230:4031","2:8231:4032","2:8235:4033","2:8238:4034"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8378:152","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:22622:4714":{"id":"2:22622:4714","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22612:4599","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13196:57080":{"id":"2:13196:57080","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15726:2952"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3185:202":{"id":"2:3185:202","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8179:131":{"id":"2:8179:131","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8181:663"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13234:61694":{"id":"2:13234:61694","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12809:5052","prim@char":"1:15720:2947","str::split_terminator":"1:15726:2952","str::split":"1:15726:2952"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49190:5360","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:5055","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2829:168":{"id":"2:2829:168","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2831:584","2:2832:884"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3327","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13225:33090":{"id":"2:13225:33090","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:15720:2947","self::pattern":"2:12809:5052"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12601:5327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10103:2206":{"id":"2:10103:2206","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10104:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13255:61698":{"id":"2:13255:61698","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"2:8227:115","prim@char":"1:15720:2947","str::rmatch_indices":"1:15726:2952","self::pattern":"2:12809:5052"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49272:5363","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10710:198":{"id":"2:10710:198","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10712:166","2:10713:1816","2:10714:57057","2:10715:57058","2:10716:57059","2:10717:730","2:10718:731"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3327","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10701:4599","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:12839:5056":{"id":"2:12839:5056","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:5055","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"20:117:1789":{"id":"20:117:1789","crate_id":20,"name":"ToTokens","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:118:2427","20:119:2168","20:120:1811"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3266:3414":{"id":"2:3266:3414","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3268:166","2:3269:1080"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10099:114":{"id":"2:10099:114","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10100:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:63:3067":{"id":"20:63:3067","crate_id":20,"name":"IdentFragment","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:64:639","20:65:2036"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13184:57060":{"id":"2:13184:57060","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15737:2961"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10042:3296":{"id":"2:10042:3296","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10043:1497","2:10044:61422","2:10046:56862"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13258:61699":{"id":"2:13258:61699","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"1:15720:2947","self::pattern":"2:12809:5052","str::match_indices":"1:15726:2952","`DoubleEndedIterator`":"2:8227:115"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49290:5364","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:5055","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13199:4783":{"id":"2:13199:4783","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49108:2700","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13299:61710":{"id":"2:13299:61710","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15720:2947"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49439:5373","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13261:61700":{"id":"2:13261:61700","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6465:4677":{"id":"1:6465:4677","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6466:59574","1:6467:59575"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13298:3306":{"id":"2:13298:3306","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15720:2947"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49430:3307","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3186:201":{"id":"2:3186:201","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3260:3393":{"id":"2:3260:3393","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3262:166","2:3263:538"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4682:4393":{"id":"2:4682:4393","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4683:1771","2:4684:60413","2:4685:4037"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2834:119":{"id":"2:2834:119","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2829:168","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13201:33223":{"id":"2:13201:33223","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15726:2952"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49405:5370","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3077:73":{"id":"2:3077:73","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3079:2147"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3327","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:8142:5129":{"id":"2:8142:5129","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8144:2843"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6698:4594":{"id":"1:6698:4594","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6699:58702"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10427:4599","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3288:5003":{"id":"2:3288:5003","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3290:539"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3086:212":{"id":"2:3086:212","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3088:122","2:3089:1384"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23465:5097":{"id":"2:23465:5097","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23466:5182"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23461:4599","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3187:102","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3331:5108":{"id":"2:3331:5108","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3333:335"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:772:206":{"id":"5:772:206","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:773:1965","5:774:1838","5:775:4075"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3276:3234":{"id":"2:3276:3234","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3278:250"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6367:4597":{"id":"1:6367:4597","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6368:59498","1:6369:8709","1:6370:59499","1:6371:59500","1:6372:59501","1:6373:59502"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10427:4599","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3426:126":{"id":"2:3426:126","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3428:360"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3429:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13183:287":{"id":"2:13183:287","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:15726:2952","`u8`":"1:15737:2961"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10351:4742":{"id":"2:10351:4742","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10352:141","2:10353:34493","2:10354:58862"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13275:15811":{"id":"2:13275:15811","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12809:5052","prim@char":"1:15720:2947"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8146:5131":{"id":"2:8146:5131","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8148:4067"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13175:61687":{"id":"2:13175:61687","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2875:169":{"id":"2:2875:169","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2877:975","2:2878:803","2:2879:769","2:2880:692","2:2881:675"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3327","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2829:168","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13194:61691":{"id":"2:13194:61691","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"1:15726:2952","`str`":"1:15726:2952","crate::ops::IndexMut":"2:3485:3219"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"21:661:3320":{"id":"21:661:3320","crate_id":21,"name":"MultiSpan","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:662:63139"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6057:62346":{"id":"5:6057:62346","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8302:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10105:3299":{"id":"2:10105:3299","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10106:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13173:770":{"id":"2:13173:770","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15720:2947"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6069:62347":{"id":"5:6069:62347","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8302:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13281:61707":{"id":"2:13281:61707","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:12809:5052","prim@char":"1:15720:2947"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:5055","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4539:4615":{"id":"1:4539:4615","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4540:4431","1:4541:59581","1:4543:59582","1:4544:59584","1:4545:4616","1:4546:59583","1:4547:59380","1:4549:59585","1:4550:4050","1:4551:4783","1:4552:2023","1:4554:2151"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13198:2257":{"id":"2:13198:2257","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15720:2947"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49098:5355","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3187:102":{"id":"2:3187:102","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"20:18:3066":{"id":"20:18:3066","crate_id":20,"name":"TokenStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:19:9169","20:21:63055","20:23:63056","20:26:63057"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"20:44:4599","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:22816:5183":{"id":"2:22816:5183","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23465:5097","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22807:4599","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"24:2858:3270":{"id":"24:2858:3270","crate_id":24,"name":"Peek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"24:2740:4599","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3189:204":{"id":"2:3189:204","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3423:125":{"id":"2:3423:125","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3425:359"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3426:126","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2565:122":{"id":"1:2565:122","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2566:58897","1:2568:2930","1:2569:59995","1:2570:59996"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10092:105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10099:114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13246:61696":{"id":"2:13246:61696","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:5055","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13214:2498":{"id":"2:13214:2498","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:15720:2947","self::pattern":"2:12809:5052","`None`":"2:47164:161"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3638:132":{"id":"2:3638:132","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3640:666"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3633:208","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8252:3329":{"id":"2:8252:3329","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8253:770","2:8254:2032"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8378:152","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5693:4667":{"id":"1:5693:4667","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5694:56840"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3335:5110":{"id":"2:3335:5110","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3337:337"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3481:2213":{"id":"2:3481:2213","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3483:166","2:3484:730"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3327","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:8653:4394":{"id":"2:8653:4394","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8378:152","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10306:137":{"id":"2:10306:137","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10307:694","2:10309:58530"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13189:57058":{"id":"2:13189:57058","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10710:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10710:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:6054:62345":{"id":"5:6054:62345","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8302:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3182:3327":{"id":"2:3182:3327","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5627:4663":{"id":"1:5627:4663","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5628:58704","1:5629:58706","1:5630:58705","1:5631:58707"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3080:144":{"id":"2:3080:144","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3082:1596"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3716:4395":{"id":"2:3716:4395","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5635:4662":{"id":"1:5635:4662","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5636:6859","1:5637:59381","1:5638:59382"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5801:5532":{"id":"5:5801:5532","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5803:166","5:5804:414"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3327","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13172":{"id":"2:13172","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12269:1310","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13173:770","2:13174:2032","2:13175:61687","2:13176:61688","2:13178:61689","2:13181:2687","2:13182:61690","2:13183:287","2:13184:57060","2:13185:1816","2:13187:57057","2:13189:57058","2:13191:57059","2:13193:4778","2:13194:61691","2:13195:57079","2:13196:57080","2:13197:2263","2:13198:2257","2:13199:4783","2:13200:33233","2:13201:33223","2:13202:5815","2:13203:61692","2:13204:33218","2:13205:1854","2:13208:57096","2:13211:57097","2:13214:2498","2:13218:4034","2:13222:57087","2:13225:33090","2:13228:57090","2:13231:61693","2:13234:61694","2:13237:57092","2:13240:57094","2:13243:61695","2:13246:61696","2:13249:3027","2:13252:61697","2:13255:61698","2:13258:61699","2:13261:61700","2:13263:61701","2:13265:61702","2:13267:61703","2:13268:61704","2:13269:61705","2:13272:61706","2:13275:15811","2:13278:57098","2:13281:61707","2:13284:1836","2:13287:61708","2:13290:1792","2:13292:4385","2:13293:4386","2:13294:4387","2:13295:4388","2:13296:61709","2:13298:3306","2:13299:61710"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2865:162":{"id":"2:2865:162","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2866:397","2:2867:4023","2:2868:4020","2:2869:4028"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2834:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2875:169","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3420:2152":{"id":"2:3420:2152","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3421:558"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:3083:3261":{"id":"24:3083:3261","crate_id":24,"name":"Parser","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:3084:166","24:3085:2127","24:3086:1792","24:3087:2128"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13240:57094":{"id":"2:13240:57094","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:12809:5052","prim@char":"1:15720:2947","str::splitn":"1:15726:2952"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49244:5334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:5055","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3297:5099":{"id":"2:3297:5099","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3298:166","2:3299:930"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3339:5112":{"id":"2:3339:5112","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3341:340"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13292:4385":{"id":"2:13292:4385","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13295:4388":{"id":"2:13295:4388","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4614:4619":{"id":"1:4614:4619","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4615:60212","1:4616:40805","1:4617:60214","1:4618:60213"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6767:4587":{"id":"1:6767:4587","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6768:58760"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13296:61709":{"id":"2:13296:61709","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15720:2947"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49421:5372","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5649:4665":{"id":"1:5649:4665","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5650:8286","1:5651:56840","1:5652:6859","1:5653:59903","1:5654:4925","1:5655:4926","1:5656:59904","1:5657:1274","1:5658:59905","1:5659:59906","1:5660:59907","1:5661:59908","1:5662:59909","1:5663:59910","1:5664:59911","1:5665:59912"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3090:211":{"id":"2:3090:211","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3092:122","2:3093:1383"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3177:195":{"id":"2:3177:195","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13269:61705":{"id":"2:13269:61705","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:12809:5052","prim@char":"1:15720:2947"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:12839:5056","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8656:4492":{"id":"2:8656:4492","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8378:152","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3272:4997":{"id":"2:3272:4997","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3273:166","2:3274:890"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3552:3230":{"id":"2:3552:3230","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3554:60610","2:3555:60611","2:3556:1854"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3327","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"5:6049":{"id":"5:6049","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5869:1310","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6050:62344","5:6051:1954","5:6054:62345","5:6057:62346","5:6069:62347","5:6070:62348","5:6071:4646","5:6072:2254","5:6073:2253"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13185:1816":{"id":"2:13185:1816","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47164:161"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10710:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10710:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13287:61708":{"id":"2:13287:61708","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15720:2947","self::pattern":"2:12809:5052"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:5055","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13181:2687":{"id":"2:13181:2687","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12280:5484"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13243:61695":{"id":"2:13243:61695","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3904:68":{"id":"2:3904:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3905:1397"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:13182:61690":{"id":"2:13182:61690","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13284:1836":{"id":"2:13284:1836","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:12809:5052","prim@char":"1:15720:2947"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2799:100":{"id":"2:2799:100","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2800:391","2:2801:393"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22771:17271":{"id":"2:22771:17271","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:22772:7791","2:22773:60983","2:22774:60984"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22764:4599","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13178:61689":{"id":"2:13178:61689","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15726:2952"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6071:4646":{"id":"5:6071:4646","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8302:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3155:110":{"id":"2:3155:110","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3156:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13203:61692":{"id":"2:13203:61692","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49386:5368","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3280:4720":{"id":"2:3280:4720","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3282:1326"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8660:5120":{"id":"2:8660:5120","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7707:5121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3083:130":{"id":"2:3083:130","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3085:660"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13537:145":{"id":"2:13537:145","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13538:166","2:13539:145","2:13540:744"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13211:57097":{"id":"2:13211:57097","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:15720:2947","self::pattern":"2:12809:5052"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:5055","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13263:61701":{"id":"2:13263:61701","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4596:3296":{"id":"1:4596:3296","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4597:2567","1:4598:56858","1:4600:56859","1:4601:5738","1:4602:56860","1:4603:56861","1:4604:56862","1:4613:4050"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6073:2253":{"id":"5:6073:2253","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15726:2952"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3409:3290":{"id":"2:3409:3290","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3410:525"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3396:111","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13268:61704":{"id":"2:13268:61704","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13278:57098":{"id":"2:13278:57098","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15720:2947","self::pattern":"2:12809:5052"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:5055","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3644:5015":{"id":"2:3644:5015","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3646:56188"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13218:4034":{"id":"2:13218:4034","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47164:161","self::pattern":"2:12809:5052","prim@char":"1:15720:2947"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:5055","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1258:1597":{"id":"0:1258:1597","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[98,0],"end":[103,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"2:3074:74":{"id":"2:3074:74","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3076:288"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3327","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3309:4001":{"id":"2:3309:4001","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3311:166","2:3312:336"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10113:3298":{"id":"2:10113:3298","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10114:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13921:136":{"id":"2:13921:136","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13922:261","2:13923:500","2:13924:264","2:13925:1057"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6377:207":{"id":"5:6377:207","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6378:1835"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12834:5055":{"id":"2:12834:5055","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12836:4029","2:12837:61478","2:12838:61479"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:12828:5054","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5697:4668":{"id":"1:5697:4668","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5698:59770"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10427:4599","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5561:4680":{"id":"1:5561:4680","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5562:6257","1:5563:2687"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10427:4599","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2777:3235":{"id":"2:2777:3235","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2779:2146"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3327","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2774:93","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13237:57092":{"id":"2:13237:57092","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:12809:5052","prim@char":"1:15720:2947","str::rsplitn":"1:15726:2952"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49226:5333","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:7685:4831":{"id":"1:7685:4831","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7686:60027"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13204:33218":{"id":"2:13204:33218","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49414:5371","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5555:4682":{"id":"1:5555:4682","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5556:58939","1:5557:3722"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10427:4599","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5643:4664":{"id":"1:5643:4664","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5644:6859","1:5645:9173"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13228:57090":{"id":"2:13228:57090","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"1:15726:2952","self::pattern":"2:12809:5052","`DoubleEndedIterator`":"2:8227:115","prim@char":"1:15720:2947"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49140:5330","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:5055","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13200:33233":{"id":"2:13200:33233","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15726:2952"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49396:5369","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5683:4666":{"id":"1:5683:4666","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5684:58942","1:5685:58943","1:5686:58944","1:5687:58945"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13272:61706":{"id":"2:13272:61706","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15720:2947","self::pattern":"2:12809:5052"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10109:174":{"id":"2:10109:174","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10110:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:2875:6333":{"id":"24:2875:6333","crate_id":24,"name":"Speculative","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2876:63194"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3284:5001":{"id":"2:3284:5001","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3286:870"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3304:4846":{"id":"2:3304:4846","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3306:166","2:3307:334"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5705:4670":{"id":"1:5705:4670","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5706:6859"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3396:111":{"id":"2:3396:111","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3397:205","2:3398:523"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3218:3328":{"id":"2:3218:3328","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13197:2263":{"id":"2:13197:2263","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15720:2947"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49092:5354","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3250:3423":{"id":"2:3250:3423","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3252:166","2:3253:1325"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13267:61703":{"id":"2:13267:61703","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3343:5114":{"id":"2:3343:5114","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3345:1204"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13290:1792":{"id":"2:13290:1792","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:12748:3231","FromStr::Err":"2:12748:3231"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47291:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12748:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12748:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6769:4588":{"id":"1:6769:4588","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6770:59473"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6050:62344":{"id":"5:6050:62344","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1770","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8061:4404","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1770","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8061:4404","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8378:152":{"id":"2:8378:152","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8379:1771","2:8380:899","2:8381:4037","2:8382:477","2:8384:2086","2:8387:4038","2:8388:4039","2:8389:4040","2:8390:2023","2:8392:2552","2:8394:4041","2:8395:4042","2:8397:818","2:8400:4043","2:8407:2385","2:8409:2380","2:8412:1785","2:8413:2838","2:8414:4044","2:8416:4045","2:8418:4046","2:8421:1278","2:8422:2151","2:8423:4047","2:8427:1772","2:8430:1767","2:8431:4048","2:8432:4049","2:8434:4050","2:8435:1778","2:8437:4051","2:8440:4052","2:8442:4053","2:8452:4054","2:8467:4055","2:8469:4056","2:8473:4057","2:8482:2842","2:8485:4058","2:8487:4059","2:8490:260","2:8497:277","2:8504:2498","2:8511:4060","2:8520:4061","2:8530:992","2:8537:4062","2:8544:4023","2:8545:4020","2:8546:4025","2:8558:4024","2:8565:4022","2:8577:4021","2:8584:4063","2:8585:4064","2:8590:4065","2:8593:2101","2:8596:4066","2:8597:2843","2:8599:4067","2:8601:397","2:8604:4068","2:8607:975","2:8610:4069","2:8613:584","2:8616:4070","2:8619:884","2:8621:803","2:8623:769","2:8625:692","2:8627:675","2:8629:4071","2:8630:4072","2:8638:4073"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3245:3233":{"id":"2:3245:3233","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3247:166","2:3248:249"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8183:146":{"id":"2:8183:146","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8184:1771","2:8185:3209","2:8186:745"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6072:2254":{"id":"5:6072:2254","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15726:2952"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:1075:2219":{"id":"1:1075:2219","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1076:1965","1:1077:4385","1:1078:2254","1:1079:2253","1:1080:4386","1:1081:4387","1:1082:4388"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13993:4403":{"id":"2:13993:4403","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13994:59399","2:13995:59400","2:13996:59401","2:13997:59402","2:13998:59403","2:13999:59404","2:14000:4050"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:2969:1793":{"id":"24:2969:1793","crate_id":24,"name":"Parse","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2970:1792"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6695:4686":{"id":"1:6695:4686","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6696:58696","1:6697:58960"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10427:4599","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10107:3300":{"id":"2:10107:3300","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10108:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1257:1588":{"id":"0:1257:1588","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[90,0],"end":[95,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"5:6051:1954":{"id":"5:6051:1954","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8302:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10101:3292":{"id":"2:10101:3292","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10102:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:153:1776":{"id":"24:153:1776","crate_id":24,"name":"Token","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"24:160:4599","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13193:4778":{"id":"2:13193:4778","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:3481:2213","str::slice_mut_unchecked":"1:15726:2952","`str`":"1:15726:2952"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13522:133":{"id":"2:13522:133","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13523:166","2:13524:991"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:2628:2437":{"id":"24:2628:2437","crate_id":24,"name":"Spanned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2629:2036"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8192:3330":{"id":"2:8192:3330","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8194:2100","2:8196:4035","2:8197:4036"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13231:61693":{"id":"2:13231:61693","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::rsplit_terminator":"1:15726:2952","prim@char":"1:15720:2947","`DoubleEndedIterator`":"2:8227:115","self::pattern":"2:12809:5052","str::split":"1:15726:2952"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49172:5359","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3325:3420":{"id":"2:3325:3420","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3327:166","2:3328:1206"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13202:5815":{"id":"2:13202:5815","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49376:4626","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13205:1854":{"id":"2:13205:1854","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:15720:2947","self::pattern":"2:12809:5052"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13249:3027":{"id":"2:13249:3027","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12809:5052","str::matches":"1:15726:2952","`DoubleEndedIterator`":"2:8227:115","prim@char":"1:15720:2947"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49326:5366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10316:141":{"id":"2:10316:141","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10317:631","2:10318:2567","2:10319:59804","2:10320:59805","2:10321:59806","2:10322:59807","2:10323:59808","2:10324:59809","2:10325:59810","2:10326:59811","2:10327:59812","2:10328:59813","2:10329:59814","2:10330:59815","2:10331:59816","2:10332:1497"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3348:5117":{"id":"2:3348:5117","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3350:1207"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9207:4711":{"id":"1:9207:4711","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9208:59455","1:9209:59456","1:9210:59457","1:9211:59458","1:9212:5400","1:9213:40336","1:9214:59454"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10427:4599","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13176:61688":{"id":"2:13176:61688","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13208:57096":{"id":"2:13208:57096","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:12809:5052","prim@char":"1:15720:2947"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2774:93":{"id":"2:2774:93","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2776:1790"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3327","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13294:4387":{"id":"2:13294:4387","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"1:1524:4730":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"24:6302:3144":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"2:3189:204":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:7216:5958":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:10200:47701":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"20:18:3066":{"crate_id":20,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"1:10559:1880":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"16:6949:6160":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:8718:4817":{"crate_id":2,"path":["core","lazy","OnceCell"],"kind":"struct"},"1:11924:3209":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:10041:47688":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:13477:7368":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:4605:59778":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:52962:5205":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:4040:8200":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:3716:4395":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:5987:8622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:50711:8876":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:7403:114":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:46461:5029":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"24:6048:3133":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"1:12533:4864":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:7119:5857":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:49838:5383":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"24:6353:3142":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"2:49386:5368":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"24:5421:3081":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"24:3395:3350":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"1:6227:4922":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:46220:6558":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"24:4205:3378":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"16:4955:7566":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:49013:5345":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:22347:4019":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:3251:4872":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:9759:47634":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:1630:8015":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:7908:4158":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"2:22375:61502":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"5:3921:4518":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"18:739:63049":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"24:4061:3374":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"12:2013:4520":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:3261:4877":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"24:661:63172":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"1:10314:6589":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"24:5362:1710":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"16:3714:7542":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:4306:8284":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:52098:5186":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:3966:8165":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:13737:4826":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:47921:2206":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:5269:8461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:7971:122":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"24:5704:3089":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"17:12234:7022":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"24:2063:3266":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"1:14330:4675":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"16:4790:7561":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"24:2496:2372":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"16:6413:5783":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"14:47:9429":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:5379:8524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"12:2309:7791":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:7453:5866":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"18:766:6716":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:49646:5066":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:1554:7966":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:49031:5347":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"21:0:1015":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"16:3041:6120":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:48495:4797":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:8653:4394":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:23938:5434":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"12:840:4722":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:6100:8662":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:11981:6982":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:9628:6584":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"17:13348:7337":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:8954:6197":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:24931:5251":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"24:1278:6348":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"24:968:2784":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"1:4267:4888":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"21:202:4278":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"2:49344:5367":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:10673:47841":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:11194:4698":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:7449:2552":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:2774:93":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"24:4941:119":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"17:13733:7451":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:6124:8674":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:23781:5281":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:2733:5838":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"0:1257:1590":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"1:1041:4160":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:9774:5313":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:9943:63028":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"21:1064:1580":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"24:3503:2106":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"1:4270:4889":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:10042:3296":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:48914:5337":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:53068:8937":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:13819:7477":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:10500:12124":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:5400:8536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:1427:4732":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"24:2442:3214":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"17:11738:6928":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"21:3148:3319":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"16:6620:6147":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:23925:5435":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"22:542:3224":{"crate_id":22,"path":["proc_macro2","LexError"],"kind":"struct"},"17:12442:7074":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:5314:6787":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:3742:3214":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:9065:47628":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"22:831:9063":{"crate_id":22,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"17:11499:6880":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:46440:5033":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:11845:4829":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:24255:5415":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:51792:5221":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"24:6410:2105":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"24:3359:3348":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"24:4241:3380":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"17:10516:6276":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:53001:5225":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:9458:6582":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:12467:7077":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:3276:3234":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:4401:8329":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:4485:5581":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"2:3218:3328":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"0:1258:1598":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"5:1458:4733":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:51206:5223":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"24:5840:3121":{"crate_id":24,"path":["syn","expr","ExprType"],"kind":"struct"},"1:1518:4729":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"24:2144:4599":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"1:10428:4173":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:8660:5120":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:9332:6270":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:5978:8621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"24:5348:2107":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"1:6605:8644":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"21:259:63101":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"17:13942:7513":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:24561:5421":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:531:7889":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:22771:17271":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"24:4223:3379":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"1:15727:2953":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"24:2550:1966":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"2:6303:5034":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"24:5969:2073":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"2:46649:4220":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"9:1075:5703":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:10099:114":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:15115:4904":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"22:919:1788":{"crate_id":22,"path":["proc_macro2","TokenTree"],"kind":"enum"},"20:0:1044":{"crate_id":20,"path":["quote"],"kind":"module"},"16:7378:5870":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:5868:4971":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:8877:3635":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:12521:7085":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"22:873:2435":{"crate_id":22,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"2:3309:4001":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:4317:8290":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:22622:4714":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:2534:5597":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:10377:6239":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"5:8093:5541":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:10656:6804":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:3272:4997":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:10439:58902":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"16:6269:5937":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:1665:8044":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:6068:8652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"12:1688:5779":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:4517:8377":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"22:855:1710":{"crate_id":22,"path":["proc_macro2","imp","Group"],"kind":"enum"},"1:5627:4663":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:14937:4774":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:6618:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:772:206":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:10543:6841":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:3743:6183":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:31987:4239":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:14793:9026":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"6:5548:8580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:53059:8936":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:9961:47638":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:2108:558":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:900:4172":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:6861:4582":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:4395:8328":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:11026:47639":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:13834:5393":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:3288:5003":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:32034:60408":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"24:5999:3128":{"crate_id":24,"path":["syn","generics","PredicateEq"],"kind":"struct"},"14:231:2250":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"24:4043:1738":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"17:10599:47838":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:15190:9027":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:48474:5175":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:12051:6991":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:4970:3284":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:52852:5222":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:49172:5359":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:8183:146":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:3440:4631":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"12:1100:4732":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:4008:47814":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:50945:5207":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"24:5796:3111":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"17:10788:47813":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:10353:6241":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:2188:4442":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"24:3611:3357":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"1:11206:4972":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"24:5028:3405":{"crate_id":24,"path":["syn","token","MulEq"],"kind":"struct"},"22:822:1580":{"crate_id":22,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"16:6101:5861":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:15730:2954":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:10584:6199":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"12:866:4520":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:1908:42069":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:7738:2059":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"24:2071:63334":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"2:53163:8944":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"24:3204:190":{"crate_id":24,"path":["syn","error","Result"],"kind":"typedef"},"2:10914:3214":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"24:3575:3355":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"1:9633:6585":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"1:14851:4835":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"24:6322:3148":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"2:52063:5204":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:3638:132":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:11665:6913":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:49846:5386":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:55844:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"24:5812:3114":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"1:14380:4618":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:47351:3209":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:2162:4520":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:4535:7554":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"21:1318:1787":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"5:8101:62862":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:8520:4929":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:5386:8525":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:51481:8886":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:13435:2096":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:10107:3300":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:4906:3281":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:10635:6802":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:10531:4737":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"16:3172:6121":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"20:44:4599":{"crate_id":20,"path":["quote","ext","private","Sealed"],"kind":"trait"},"17:11822:6956":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"24:940:63163":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"1:13198:4918":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:45981:5245":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"12:1118:4733":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:2794:5853":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:2773:6141":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"24:3791:3365":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"2:23701:8771":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:3090:211":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:7279:6165":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"24:5824:3117":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"24:6373:2400":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"24:5209:3418":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"16:3241:6124":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:1666:179":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"24:972:3131":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"24:3485:94":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"16:2912:6117":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:11539:6891":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:11640:6910":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"12:2018:4518":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"17:10502:9072":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"12:354:9117":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:12456:7076":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:3264:6125":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:13163:7291":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:11916:4757":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:46451:4623":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:6577:5944":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:15686:9246":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:11750:6929":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"24:5127:3412":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"1:12535:6591":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:9809:63029":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:4621:4601":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:12537:7087":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"18:754:63046":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"24:6360:3157":{"crate_id":24,"path":["syn","ty","Variadic"],"kind":"struct"},"2:4627:5140":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:8902:47624":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:10095:105":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"17:10128:6286":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:5213:5501":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:4598:219":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:3177:195":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"12:2315:63005":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:8076:5540":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:1204:5592":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:46360:5036":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"24:6326:3150":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"24:4259:3381":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"24:5464:1740":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"24:5816:3115":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"1:10914:4648":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:10726:3266":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:10930:4618":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:13062:7251":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:9186:6195":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:6910:8762":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"12:463:63003":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"15:230:5786":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:48709:5515":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"24:454:63160":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"16:7042:6164":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:5996:1753":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:4734:7559":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:8137:3209":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:47935:3299":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:46259:4622":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:6424:5940":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:12526:123":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:5359:8516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:2852:165":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:46687:9150":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:7575:4524":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:7571:5862":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:3772:7543":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:8849:6224":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:4112:8236":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:7250:5961":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"24:6046:3134":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"1:13562:4834":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"16:5433:5910":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:8656:4492":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:1443:4734":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:10938:4625":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:7195:5956":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:5407:8538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:8751:4949":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"24:6414:3158":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"17:12275:7028":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:49862:5380":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:8397:4519":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"24:5764:3103":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"1:11220:4905":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:15702:58755":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:11337:6271":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"24:5490:3085":{"crate_id":24,"path":["syn","data","VisPublic"],"kind":"struct"},"24:4917:3398":{"crate_id":24,"path":["syn","token","Dot3"],"kind":"struct"},"24:5387:2059":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"6:4046:8202":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:3320:6179":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:8170:4158":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"1:14906:4772":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:49396:5369":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"24:3629:1736":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"1:5683:4666":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:5815:5926":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:511:1711":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:4425:8339":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"22:0:1578":{"crate_id":22,"path":["proc_macro2"],"kind":"module"},"6:3918:8135":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"18:660:6315":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:22675:5182":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:11482:1723":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:5191:8426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:11963:4762":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:1634:4724":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:14019:4643":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:51057:8879":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:4961:3283":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:3970:5165":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:3908:4842":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:4193:8256":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:12748:3231":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:15214:5795":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:12946:7159":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:48941:5340":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"24:6356:3143":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"24:5768:3104":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"16:7185:5955":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"24:3557:110":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"6:5255:8460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:4613:6544":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:12582:7094":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"24:5303:3425":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"2:3396:111":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:45637:184":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"5:2311:5594":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:14:2567":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:4101:8231":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:7174:5954":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"12:930:4727":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:55818:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:6219:5935":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:2875:169":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:10571:47837":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:51255:5208":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"21:1095:1710":{"crate_id":21,"path":["proc_macro","bridge","client","Group"],"kind":"struct"},"1:3563:4627":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:15744:2968":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:11993:6984":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:23835:40018":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:5998:8627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:10279:6247":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:10521:4736":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:46012:5509":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:11653:6912":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:4033:8197":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"24:5990:2405":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"17:13532:7386":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"18:801:6302":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:3182:3327":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"24:6385:2091":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"1:1488:4724":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:5371:8523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:6691:5947":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:1132:4693":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:3868:8098":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:4671:7557":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:6899:8758":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"22:754:3314":{"crate_id":22,"path":["proc_macro2","fallback","LineColumn"],"kind":"struct"},"2:3185:202":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:9207:4711":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"21:3290:3315":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"2:47360:163":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:22616:4712":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:49502:5053":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:1633:4733":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:46420:5027":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:3195:6122":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:3319:3418":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:50784:5206":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:13506:7376":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:10228:1804":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:3348:5117":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:3972:8167":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"24:2864:6334":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"16:6682:5879":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:10448:6220":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:6870:8751":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:53178:8945":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:46371:5023":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:3939:7545":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"22:985:2435":{"crate_id":22,"path":["proc_macro2","Literal"],"kind":"struct"},"21:3261:1787":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"1:4346:4644":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"24:6347:3155":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"1:14687:6595":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:11100:6231":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:48282:4102":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"12:949:4729":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"24:5940:3126":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"17:10266:6216":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"24:3130:9449":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"1:4385:4640":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"24:3809:2108":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"1:1157:12129":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:10515:12127":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"12:1235:5768":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:4383:4639":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"24:160:4599":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"21:1302:1723":{"crate_id":21,"path":["proc_macro","bridge","client","Ident"],"kind":"struct"},"17:13054:7249":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:1415:3210":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"24:5852:3124":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"6:6864:8750":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:3423:125":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:13119:7286":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"24:6331:2160":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"2:23723:5286":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:11024:4699":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"1:4173:4650":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"24:5733:3096":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"21:3315:3225":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"16:5766:5924":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:12028:6988":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:5284:4904":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:22818:5182":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:12385:7062":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"12:853:4723":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:51152:5216":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:783:6586":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"6:6221:8734":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"21:3275:3314":{"crate_id":21,"path":["proc_macro","LineColumn"],"kind":"struct"},"2:5432:756":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:6367:4597":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:2834:119":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:23857:40010":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:13318:7326":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:8131:3209":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:3955:122":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:49421:5372":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:13465:7367":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:7013:3630":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:7392:5871":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:49830:5378":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"16:6208:5934":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:2395:13098":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:14950:4780":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:5632:5918":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:15726:2952":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"18:0:2928":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:11058:5329":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:14305:4687":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"12:747:3210":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"24:4007:3373":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"1:6607:8646":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:49430:3307":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:49866:116":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:7182:59367":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"24:4871:3395":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"17:13154:7287":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:7477:5887":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:7884:5873":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:49834:5381":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:2138:1028":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:11930:4760":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:51038:5184":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:0:261":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:7735:218":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:50014:8874":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:6107:4921":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:7808:4156":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"24:5233:3420":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"24:5403:1796":{"crate_id":24,"path":["syn","attr","Meta","List"],"kind":"foreign_type"},"2:10105:3299":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:46389:5024":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:7959:4819":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:13394:7347":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:23903:9130":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:49405:5370":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:2889:6135":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:3800:7544":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:2113:4238":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:10663:4675":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"22:769:1787":{"crate_id":22,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"1:10801:4840":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:11172:5333":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:4272:8268":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:1497:4726":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:12048:4850":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:7823:5877":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"18:152:53953":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:6591:5945":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"22:785:1723":{"crate_id":22,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"16:3549:7541":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:51561:8888":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:3280:4720":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:6605:5880":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:13986:7520":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:50840:5227":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:47721:81":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"24:6307:3145":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"24:4929:3399":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"16:3429:5854":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:48923:5338":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:13718:60449":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:3113:4431":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:13978:7517":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:12095:7001":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"24:4169:3376":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"2:49842:5382":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:12431:7072":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:2004:4607":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:12771:7127":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:24527:5420":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:9592:123":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"5:8264:5570":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:13429:7353":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"12:2331:3245":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:9574:6230":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"20:187:3668":{"crate_id":20,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"22:1014:3209":{"crate_id":22,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"24:5804:1988":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"2:37320:4019":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:610:7936":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:22415:61556":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:2543:6272":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:10179:6801":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:14000:7523":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:24425:5418":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:4083:8222":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"24:6044:1928":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"2:2690:559":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:10710:4884":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:9551:6225":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:15734:2958":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"24:5836:3120":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"5:2199:5549":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:616:7939":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:4639:5141":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:7151:59367":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:11962:6977":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"24:6334:3152":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"24:5069:3408":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"6:1717:8076":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"12:968:4730":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:4203:8257":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:11054:4705":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"17:13497:7375":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:5346:5864":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:3077:73":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:51404:5188":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"14:216:45979":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:5421:5909":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:13240:7307":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:9005:47626":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:53216:8947":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:2318:3291":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:5649:4665":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:13598:7401":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"24:5828:3118":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"17:12741:7122":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"22:24:9180":{"crate_id":22,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"16:4477:7552":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:46351:5022":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:5347:8511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"24:6401:2416":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"9:927:45704":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:547:6099":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:49619:5065":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"14:244:9115":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:6771:4589":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:46122:5249":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:11779:6940":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"24:3935:3371":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"6:1760:8091":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:12073:4717":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:1676:8052":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"18:790:6301":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:7342:5898":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:9616:75":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:14390:58977":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:2202:5122":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:3506:6127":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:5697:4668":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:49140:5330":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:13488:7372":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"15:269:5791":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:11157:4907":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:10962:47894":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:610:1361":{"crate_id":1,"path":["std","thread"],"kind":"module"},"6:1700:8069":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:5736:5922":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"24:4999:3403":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"6:6091:8659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:5941:174":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:4523:8380":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:4899:4696":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"1:10921:4649":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:5197:8427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"24:2988:3254":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"1:15739:2963":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:1530:4731":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"24:3431:3352":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"2:13885:186":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:49525:5057":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:14813:4716":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"16:6166:5932":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"18:620:9067":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:46658:9149":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"22:735:1580":{"crate_id":22,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"2:46471:5030":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:7685:4831":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"5:5504:5555":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"5:6377:207":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"21:3162:3318":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"17:11458:6875":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:13331:7332":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:5130:8384":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:11254:6226":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:7406:5869":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:1428:3214":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:2866:6116":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:4060:8210":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:15740:2964":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"5:3020:62994":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:15470:6596":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:8912:59377":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:52456:5230":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:6593:4665":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:9296:6789":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:11847:6960":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"22:743:3315":{"crate_id":22,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"6:5969:8615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:14761:4828":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:4066:8212":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:3292:5005":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"24:3208:6336":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"2:51333:5200":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:11057:4706":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"2:48951:5341":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:7420:5886":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"1:14774:4717":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:12566:5365":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"24:6131:3140":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"1:11226:4924":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"12:1667:5778":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"12:2045:1760":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"6:6852:8748":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:45614:182":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:10538:13104":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:9113:3642":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:4669:6544":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:45529:181":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:5292:8474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:4120:8240":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:8269:4797":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"16:4448:7551":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"24:6054:3136":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"12:0:2923":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:8355:187":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:13453:7361":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:6464:5878":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:46082:5372":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"24:5139:3413":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"16:5505:5914":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:10454:4155":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:14922:4773":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:9162:6227":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:6345:4594":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"24:4784:3389":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"17:11378:6190":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:11231:6228":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"14:56:1723":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:5841:6547":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"21:3310:1710":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"5:3307:3210":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:14097:4157":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"5:1599:3209":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"5:1655:4726":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"24:5848:3123":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"17:13272:7320":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:4377:8321":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"24:5792:3110":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"17:12598:7098":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"24:5399:1795":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"5:7221:6539":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:1459:4723":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:3978:8170":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:13282:7321":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:12118:7007":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:32186:60406":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"6:1736:8082":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:2188:1760":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:12809:5052":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:9114:3641":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:2181:6541":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:5221:8436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:8325:5530":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:696:4174":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:6021:6114":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:4262:8261":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:50111:4402":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"0:0:1603":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"1:2166:4518":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:11109:58757":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"12:784:4725":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:632:7949":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:9264:6787":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:3145:6130":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:7295:5883":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"21:3064:1788":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"24:5011:3404":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"6:5241:8449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:6014:5930":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"24:5458:3082":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"6:3881:8107":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:11460:3210":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:7545:4822":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"24:3701:3360":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"1:11875:9022":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"17:13898:7498":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:4073:8215":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:12073:7000":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:7804:6556":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"15:0:2925":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:8804:4852":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"20:424:3826":{"crate_id":20,"path":["quote","__private","RepInterp"],"kind":"struct"},"17:10887:6838":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:6554:5943":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:157:40765":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:9489:59522":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"20:47:2785":{"crate_id":20,"path":["quote","format_ident"],"kind":"macro"},"24:5788:3109":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"6:6176:8714":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:12221:7020":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"24:5729:3095":{"crate_id":24,"path":["syn","expr","ExprBox"],"kind":"struct"},"18:885:6309":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:7408:6539":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:8252:3329":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"22:739:3224":{"crate_id":22,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"1:15723:2949":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"16:2991:6129":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"24:2306:3207":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"6:5436:8546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:13699:4824":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"24:2189:1717":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"18:644:6314":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:51105:5228":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:4358:8313":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:49022:5346":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:4212:6539":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:3218:6123":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:45545:179":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:3633:208":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:3809:6539":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:6767:4587":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:12256:5523":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:14550:4829":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:13356:7340":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"24:4187:3377":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"2:46230:13715":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:11588:6902":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:5561:4680":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:13590:7400":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:5312:8490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:13363:56832":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:11802:166":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:14356:124":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:0:470":{"crate_id":2,"path":["core"],"kind":"module"},"1:7337:170":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:10827:6187":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:1675:5590":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:12247:7024":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:14343:9174":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"14:189:9429":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:50894:5219":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:3463:4396":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:13377:7344":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"9:722:5636":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"17:10938:47916":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:5580:6097":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:4506:7553":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:11466:4802":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"18:896:6310":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:46272:5032":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"5:4413:3210":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"5:8313:5529":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"24:5425:1798":{"crate_id":24,"path":["syn","attr","NestedMeta"],"kind":"enum"},"14:250:7745":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"22:958:2118":{"crate_id":22,"path":["proc_macro2","Punct"],"kind":"struct"},"2:11020:5328":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"12:2303:1710":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:5693:4667":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"18:704:6706":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:45728:5139":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:1886:2154":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:4682:4393":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"21:1219:3318":{"crate_id":21,"path":["proc_macro","bridge","client","Diagnostic"],"kind":"struct"},"1:10702:113":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:3287:6126":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:48483:141":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:1527:7955":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:15136:4911":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"22:836:54182":{"crate_id":22,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"2:3245:3233":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:4293:8280":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:10814:6186":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:10806:4635":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:10289:6587":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:2865:162":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:9769:63037":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:15721:2948":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"21:3356:1723":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"5:3278:91":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:12142:7009":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:1572:7977":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:13041:7242":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"24:2146:6691":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"17:10001:47686":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:5285:185":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:48246:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"17:13554:7391":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:12480:7079":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"24:5918:2415":{"crate_id":24,"path":["syn","generics","LifetimeDef"],"kind":"struct"},"1:8571:4932":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"24:5856:3125":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"24:6050:3135":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"21:3214:3209":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"12:429:5770":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"24:6083:2108":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"1:3110:4865":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:10796:4839":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"24:5784:3108":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"2:11200:5335":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:2362:580":{"crate_id":1,"path":["std","env"],"kind":"module"},"22:964:1786":{"crate_id":22,"path":["proc_macro2","Spacing"],"kind":"enum"},"1:13715:56833":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:45693:5136":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:4890:7564":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:12527:5361":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:31847:5472":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"24:5712:3091":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"2:53099:8940":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"24:3845:3366":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"24:2969:1793":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"1:2582:9437":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"2:8378:152":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:5472:5912":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:3118:6131":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:299:63041":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:5960:6104":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"24:3647:3358":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"24:5755:3101":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"16:7226:5959":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:49108:2700":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:15733:2957":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"24:4680:3382":{"crate_id":24,"path":["syn","token","AddEq"],"kind":"struct"},"2:49244:5334":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:46281:5035":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:15725:2951":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:11407:4799":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"5:3029:56826":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:10435:47743":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"22:791:2435":{"crate_id":22,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"12:2005:3210":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:15745:2969":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:47265:3640":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:46290:5016":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:51823:5224":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:46060:3307":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:2855:164":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:3945:8158":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:49065:5451":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:4614:7555":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:23366:4713":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:5563:8591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:3481:2213":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:10420:6234":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:4762:7560":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:11970:6979":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"24:6363:2158":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"12:877:4518":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"5:3348:4843":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"24:6406:2103":{"crate_id":24,"path":["syn","path","Binding"],"kind":"struct"},"24:3863:3367":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"1:6769:4588":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"13:120:45945":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:13613:172":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:9839:6249":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:7337:3209":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:10981:2700":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:3953:190":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:47679:86":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"24:6052:3137":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"24:5470:3087":{"crate_id":24,"path":["syn","data","Visibility"],"kind":"enum"},"1:2456:6360":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:3343:5114":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:7176:4520":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"21:1286:2118":{"crate_id":21,"path":["proc_macro","bridge","client","Punct"],"kind":"struct"},"6:6005:8631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:10653:4684":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:49854:5385":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:11132:9164":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"6:6085:8657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:11093:5330":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:2777:3235":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:47942:3300":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:5013:3286":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:4350:7548":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:10987:4625":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:8527:4931":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:11152:4906":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:11830:4828":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:4641:7556":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"24:1271:6346":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"17:11714:6924":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:9649:47632":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:7761:5963":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:9933:47637":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:11932:6968":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:51302:5196":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"21:156:4577":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"17:13574:7397":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:563:7911":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:5975:5929":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:53079:8938":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:7228:171":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:49683:5067":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:4574:4607":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"1:14665:6593":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:14956:4781":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:48863:5332":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:1018:4158":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:48505:9153":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:11245:4685":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:605:7934":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"24:5737:3097":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"6:4439:8347":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"18:650:6311":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"21:3295:1788":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"2:46642:9148":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:11030:122":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:6744:6154":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:46667:4281":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:1602:7996":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:69:4405":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:10529:9073":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"24:4859:3394":{"crate_id":24,"path":["syn","token","DivEq"],"kind":"struct"},"6:525:7886":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:49731:9279":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"1:1446:4722":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"20:117:1789":{"crate_id":20,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"16:6252:5936":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:46089:5506":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:48458:4743":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:2565:122":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"17:13780:7469":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:8179:131":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:7894:5901":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:51529:8887":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:12819:5051":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:1744:8086":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:50999:5199":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:5281:4903":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:5595:5917":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:6518:5942":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:3488:6128":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"20:521:3940":{"crate_id":20,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"1:1075:2219":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:4325:8294":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:11060:4785":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"17:10081:6247":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:22360:61502":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"12:377:5772":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:1616:4722":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:10351:4742":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:13810:4825":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:6614:8743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:23461:4599":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:12208:7019":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:3235:4868":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:7146:5952":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:10317:6237":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"12:1159:5765":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:23873:40019":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"9:469:9225":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"24:6056:3132":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"6:4410:8332":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:9659:63025":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:14373:113":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:607:47623":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:10236:6218":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:5414:8539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"24:5334:3548":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"21:3201:1580":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"2:48705:5514":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:12659:7113":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"13:232:7790":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:4023:8194":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:599:7931":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:12262:7027":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:1547:7963":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:9142:4816":{"crate_id":1,"path":["std","lazy","SyncLazy"],"kind":"struct"},"2:24459:4832":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"12:774:3209":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:1224:5593":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:14325:9168":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:13883:6592":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"5:3314:4844":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:5717:5921":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:9729:63030":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"24:5494:3086":{"crate_id":24,"path":["syn","data","VisRestricted"],"kind":"struct"},"1:12039:4941":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"24:3103:3265":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"1:8734:4220":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:1690:8063":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:1533:7958":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:2433:13109":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:4255:4923":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:49888:4721":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"2:55831:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"22:864:1723":{"crate_id":22,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"2:32086:60407":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"2:3662:5135":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:24289:4163":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:11118:47641":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"9:1020:5702":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"24:5867:2213":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"2:10223:61492":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"14:0:2924":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:49190:5360":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:11604:6903":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:46096:5507":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:10149:47636":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"24:4733:3386":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"16:6126:5931":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:12552:7091":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:50099:4691":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"24:6316:3146":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"16:7514:5885":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"21:1188:3320":{"crate_id":21,"path":["proc_macro","bridge","client","MultiSpan"],"kind":"struct"},"2:27742:5134":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:11316:4787":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:3338:6106":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:3522:6718":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:45735:3282":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"12:181:5773":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:3729:3210":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:5295:46050":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:3019:1965":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:6491:5941":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"24:6216:3141":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"16:5231:7569":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:51666:5229":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"5:6654:5565":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:1311:6290":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"18:729:6688":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:3679:3289":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:11298:3631":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:9280:6788":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:11212:4916":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:5805:5534":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"22:938:3225":{"crate_id":22,"path":["proc_macro2","Delimiter"],"kind":"enum"},"2:50759:5214":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:9719:47633":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:46066:5505":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"6:4241:8260":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"9:900:7846":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:12182:7016":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:22612:4599":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:11201:4969":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:4431:8342":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:9799:47635":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:12040:6990":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"24:5808:3113":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"24:4767:3388":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"2:51429:5189":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:0:2926":{"crate_id":16,"path":["gimli"],"kind":"module"},"24:2126:6332":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"17:11678:6914":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:591:7926":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:10304:6238":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:4300:8281":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:11030:4704":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"24:3521:101":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"7:0:1448":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:4344:4643":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:1563:7971":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:11767:6937":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:13648:34248":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:7549:5874":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:11131:5331":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:3304:4846":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"24:2549:1966":{"crate_id":24,"path":["syn","parse_quote"],"kind":"module"},"1:3529:4632":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"24:6003:1799":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"1:10427:4599":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:5672:5919":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:161:40766":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"12:556:138":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:11857:58756":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"19:117:6702":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"24:5443:1779":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"24:5893:2156":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"17:13746:7457":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:3997:8183":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:52789:5202":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:11519:6890":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:7073:5951":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:10974:4623":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:7628:4826":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:11390:4798":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:11868:59379":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"6:4459:8354":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:6200:8722":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:6695:4686":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:22394:61551":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:11367:4797":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:6935:8765":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"24:5393:3078":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"5:3319:5546":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"24:299:1723":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"2:47553:78":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:48466:9152":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"11:0:2922":{"crate_id":11,"path":["adler"],"kind":"module"},"2:46430:5028":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"21:661:3320":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"21:2753:4552":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"1:2723:4688":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:51906:5209":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:3374:1760":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"12:1144:4734":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:8085:4520":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"7:85:45607":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:6239:8737":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:49226:5333":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:421:1770":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:13824:4399":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:6106:8663":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:13537:145":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:3012:5128":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:11555:6895":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:9496:6583":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"2:47197:1771":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:8291:5607":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"1:2183:4845":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:3080:144":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"24:2971:1794":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"typedef"},"24:6376:2088":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"1:10555:9436":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"21:396:4557":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"5:1184:62922":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:9034:47627":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"5:6918:5527":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"18:169:53954":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:10224:47704":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:3485:3219":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"24:5972:1859":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"2:10710:198":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:3011:4599":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:3187:102":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"24:1160:2013":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"2:3284:5001":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:45453:4493":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:5561:5916":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:4557:4617":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:11406:6857":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"9:0:2920":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"24:3257:3210":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"3:300:190":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:6072:5836":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:1000:3210":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"18:744:63045":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:48194:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"17:13772:7466":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:1302:138":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:983:5539":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:13402:7349":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"24:3377:3349":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"17:13799:7474":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"24:5781:3107":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"1:1482:4518":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"18:829:6305":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:4387:8324":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:7236:5960":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:9621:82":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:4145:8253":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:5766:4965":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"2:11816:6564":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"24:5860:1746":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"12:2032:4844":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:13884:7496":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:1622:8010":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:3255:4991":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"24:5716:3092":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"2:3086:212":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:46399:5025":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"24:4277:221":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"24:3449:3353":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"2:5385:12132":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:48212:103":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"17:13582:7398":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:12010:6987":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:53114:8941":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"22:365:3224":{"crate_id":22,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"9:1056:5695":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:3904:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:9234:5051":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:11186:5334":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:51585:8889":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"24:4151:1760":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"24:3683:125":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"5:6730:4607":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:6718:6152":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:52599:5198":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:12307:7035":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:7573:4824":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:10489:6275":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"21:1157:3315":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"2:53193:8946":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"9:692:5635":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"17:9528:2700":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:1438:3209":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:52249:5210":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"18:720:6707":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:8061:4404":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:10890:3210":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:3205:4011":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:50807:5194":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"4:0:2918":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:2765:4689":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"24:2360:3209":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"17:13296:7322":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"9:963:5700":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"24:964:3130":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"2:7637:5010":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:13933:7511":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:15731:2955":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:10611:47839":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:38477:4690":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:47928:3292":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:13192:7298":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:11015:47918":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:1493:4725":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"24:4813:3391":{"crate_id":24,"path":["syn","token","Colon2"],"kind":"struct"},"2:6672:5037":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:12610:7100":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:23630:5410":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:3249:4871":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:49414:5371":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:4305:4641":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:2945:6140":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:48179:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"24:5499:2155":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"18:774:6706":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:3195:2356":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"20:290:2013":{"crate_id":20,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"24:948:63165":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"16:4852:7563":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:13522:133":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"24:6226:1707":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"5:1920:4518":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"16:6366:5784":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:46137:96":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:4839:3275":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"5:8278:5571":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:3183:3288":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:49326:5366":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:11477:4803":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:7360:179":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:14016:4641":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"24:3665:3359":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"1:5889:4974":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:32028:4241":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"16:6569:6149":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:3466:4518":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"24:658:6686":{"crate_id":24,"path":["syn","expr","parsing","AllowStruct"],"kind":"struct"},"6:6155:8700":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:46250:5031":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:13370:7342":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:1540:7961":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"22:934:1710":{"crate_id":22,"path":["proc_macro2","Group"],"kind":"struct"},"2:49122:4625":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:5282:8467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:6223:4524":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:4614:4619":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:5159:8408":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"12:469:63000":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:3552:3230":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"24:2973:3253":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"24:2801:6339":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"1:2027:140":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:10926:47915":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:8227:115":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"12:1651:5777":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:6644:5946":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"24:4982:3402":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"2:3155:110":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:12699:7118":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:5167:8410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:13034:9435":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"2:51356:5203":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:4347:8305":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:1619:4732":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:6881:8755":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:10160:6799":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:6780:5948":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"21:3210:3309":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"24:4905:3397":{"crate_id":24,"path":["syn","token","Dot2"],"kind":"struct"},"2:50058:5391":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"22:980:1723":{"crate_id":22,"path":["proc_macro2","Ident"],"kind":"struct"},"16:7467:5867":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:3021:8767":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:47595:85":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:9112:3643":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:50976:5195":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:10306:137":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"18:610:6312":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:10095:6283":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"24:3773:3364":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"2:49376:4626":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:2799:100":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:11082:6196":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:4651:98":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:12550:5362":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"20:185:3669":{"crate_id":20,"path":["quote","__private","HasIterator"],"kind":"struct"},"1:3617:4634":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:5488:5913":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:12280:5484":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:6391:5939":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"12:1253:4735":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:24221:5414":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:6893:8757":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:5753:5923":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:4386:7549":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:10092:105":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:12196:6360":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"21:1033:4570":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"14:194:45973":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:10028:47687":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:53255:8948":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"24:161:4086":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"1:9331:9439":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:7804:5875":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:10101:3292":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:14681:6594":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:13788:7470":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:9595:4898":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"15:248:5787":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:4183:8255":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:13172:7292":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:7303:5962":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:5707:5920":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"24:3593:3356":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"16:6176:5933":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:7707:5121":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:23817:8778":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:10211:47700":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:11616:6906":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:2758:5596":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:48185:128":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"12:1762:6537":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:8146:5131":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:569:7914":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:10468:6274":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"12:1200:5767":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:12601:5327":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"12:112:63004":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"24:4750:3387":{"crate_id":24,"path":["syn","token","Bang"],"kind":"struct"},"16:5855:5927":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:47214:3214":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:1642:4734":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:49092:5354":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"24:5438:1737":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"2:9779:5314":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:46103:5508":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:5838:4968":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:3266:3414":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:4449:8353":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:13540:7389":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:4569:6542":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"2:7943:60508":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:1152:12128":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"5:4276:3214":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:51018:8878":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:3339:5112":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:11835:6957":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"24:5772:3105":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"2:46342:5021":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"24:3881:3368":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"6:4215:8258":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:1729:4917":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:13842:7490":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:7511:4820":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:5029:7568":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:5459:8552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"24:5180:3416":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"22:716:3266":{"crate_id":22,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"24:5751:3100":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"24:4958:3400":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"2:24357:4164":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"6:1584:7986":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"24:916:63161":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"1:8665:59377":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:12885:5059":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:10623:47840":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"5:3864:5608":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:13039:40299":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"2:3325:3420":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:3957:8160":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:8302:200":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:4307:4642":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"3:0:412":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:50871:5215":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:7928:2507":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:47637:79":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"24:5777:3106":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"2:46172:5449":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:46142:5447":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:681:1804":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:11947:6972":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:3091:6178":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"24:2377:3210":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"2:47385:80":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:6110:5903":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"12:812:4726":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"9:41:5685":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"1:11853:9165":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"6:3951:8159":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:543:7894":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:2314:6240":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:8369:4759":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"24:2385:3212":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"2:2429:4398":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"24:5429:1799":{"crate_id":24,"path":["syn","attr","NestedMeta","Lit"],"kind":"foreign_type"},"6:4052:8205":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:4494:8367":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"20:299:2013":{"crate_id":20,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"2:4844:3276":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:6923:8763":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"24:5274:3423":{"crate_id":24,"path":["syn","token","Sub"],"kind":"struct"},"6:4281:8273":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:9886:47636":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"24:5492:3084":{"crate_id":24,"path":["syn","data","VisCrate"],"kind":"struct"},"16:6731:6153":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:1596:7994":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:3260:3393":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"24:5870:61":{"crate_id":24,"path":["syn","expr","parsing","raw"],"kind":"struct"},"2:47291:190":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"24:3539:3354":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"2:51745:5217":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:8142:5129":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:49540:5060":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"24:6324:3149":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"1:820:6586":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"16:6032:5856":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:47343:3214":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:12155:7012":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:9896:63027":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:7158:5953":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:10994:4626":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:4005:8185":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"20:350:2437":{"crate_id":20,"path":["quote","spanned","Spanned"],"kind":"trait"},"11:46:7795":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:23809:8777":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"24:153:1776":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"2:47231:3639":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"24:932:63162":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"21:471:6533":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"17:12373:7060":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"12:937:4728":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:4480:4281":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:46380:5038":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:4990:3285":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:13520:7383":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:12019:4937":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"24:3989:3372":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"2:12828:5054":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"24:6350:3156":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"2:47469:77":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"9:809:4797":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:15738:2962":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"9:27:5684":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:53040:5190":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"12:892:5757":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:50690:8875":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"24:5040:3406":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"18:820:6304":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"21:1126:2435":{"crate_id":21,"path":["proc_macro","bridge","client","Literal"],"kind":"struct"},"17:12287:7029":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"24:5081:3409":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"6:6185:8717":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:46043:5504":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:6603:8642":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:13258:7315":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:6636:8744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:88:40699":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:5406:5125":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"24:4709:3384":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"1:5635:4662":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:8261:4158":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"5:1625:4723":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:51985:5197":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:4470:8360":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:11726:6927":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:3233:4416":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:9245:6188":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:3331:5108":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:12044:4849":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"24:956:63164":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"1:1507:4728":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:46300:5017":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"24:3899:3369":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"1:8362:4758":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:8296:8768":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"1:15077:4903":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:55805:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"21:3206:3224":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"24:4097:208":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"24:5221:3419":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"17:10558:47836":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"18:782:6706":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:10458:6700":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:4157:6200":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:6214:8731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:11450:4800":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"24:924:63166":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"1:6465:4677":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:49708:5069":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"24:5052:3407":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"1:15741:2965":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"24:5963:2410":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"17:10061:47703":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:10356:5174":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:2397:13099":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:21:651":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:12834:5055":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:7559:4823":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"5:912:5538":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:12093:4718":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:8074:6568":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"1:12034:4855":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:5555:4682":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:9580:4897":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"1:1149:12126":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:47222:3209":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"24:4970:3401":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"16:7856:5965":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:3862:8097":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"24:5923:3127":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"16:4922:7565":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:4341:8302":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:3340:4845":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:4282:3209":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:4501:8370":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:45721:2507":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"24:5708:3090":{"crate_id":24,"path":["syn","expr","ExprAssignOp"],"kind":"struct"},"2:50067:5392":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:13637:7413":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:4230:7546":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"5:8214:97":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"5:5801:5532":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:6152:5865":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:47427:87":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"24:6418:2157":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"2:4916:3282":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"5:7597:4525":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:10109:174":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:13685:7450":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:24391:5417":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:4770:3268":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:15724:2950":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"24:5888:1731":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"1:10239:9440":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:51183:5220":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"24:5245:3421":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"24:6370:170":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"6:3990:8179":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:6087:5863":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:51381:5185":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:11001:47891":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:11027:4700":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"2:10111:3297":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:11304:47642":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:7813:56829":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"5:3353:5547":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:10140:6249":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:11794:6946":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:2458:13115":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:3186:201":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:4331:8296":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:1522:7953":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:6839:4586":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:10041:190":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"24:2872:1792":{"crate_id":24,"path":["syn","parse"],"kind":"module"},"17:12982:7190":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:46676:8862":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:13205:7303":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:10407:6235":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:48513:9154":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"24:3467:1770":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"1:5990:4913":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:22807:4599":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:13912:7505":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:11683:5349":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:13547:7390":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:10103:2206":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:7856:6568":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"6:5420:8542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:8232:5569":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:1472:4735":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:7024:6163":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:48932:5339":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"24:2875:6333":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"2:57093:8955":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:5876:4973":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:4511:8375":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"18:677:137":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"22:779:1710":{"crate_id":22,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"17:12783:7130":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:519:7883":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:50081:153":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:9404:6791":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"9:776:5682":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:46328:9144":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:49041:5348":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:13098:7281":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:2177:4844":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:11214:5336":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"24:1274:6347":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"2:55857:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:3644:5015":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:23756:8773":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"12:2009:3209":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"18:636:6706":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"18:837:5054":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:10106:6284":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:537:7891":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"24:176:4079":{"crate_id":24,"path":["syn","token","CustomToken"],"kind":"trait"},"16:3064:6177":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"14:11:9429":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:10670:4676":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:47206:3210":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:10844:6249":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"24:4663:3233":{"crate_id":24,"path":["syn","token","Add"],"kind":"struct"},"17:12795:7137":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:15225:5795":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"24:5945:2159":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"16:5273:6109":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"10:0:2921":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:5210:8428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"24:5832:3119":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"17:13865:7491":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:23910:5477":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:11628:6907":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:10718:4633":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:50004:186":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:15055:4707":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:11809:6952":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:15732:2956":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:46319:5019":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"9:603:9235":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:3429:127":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:8115:3209":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:11995:4764":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:4512:4607":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:7870:5872":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:10964:4622":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"5:5063:639":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"12:160:5769":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:294:63039":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"21:1577:176":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"24:5958:2407":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"2:55699:5093":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"5:1080:6539":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"24:4796:3390":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"16:7786:5876":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"12:761:3214":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:7075:6552":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:11277:6853":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"21:3361:2435":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"1:894:4171":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:8629:157":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"24:4025:2478":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"17:10801:47812":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:4:957":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:3335:5110":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:1236:47702":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:13306:7323":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:3650:5014":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:6768:6156":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:510:47622":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"24:6098:1581":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"12:1180:5766":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"18:136:53952":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:5756:6539":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:32022:4240":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:9440:6792":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"24:5700:3088":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"9:749:5637":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"24:6104:1728":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"2:46035:5373":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:5406:4911":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:7205:5957":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"9:234:5660":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"17:13446:7360":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:0:1301":{"crate_id":1,"path":["std"],"kind":"module"},"21:1591:9064":{"crate_id":21,"path":["proc_macro","bridge","handle","NonRandomState"],"kind":"struct"},"24:3083:3261":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"24:2628:2437":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"16:3392:6132":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:584:7923":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:10477:6273":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:50913:8877":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:5953:8603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:12839:5056":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:45660:3239":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:14320:9166":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:4273:4890":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"9:996:5701":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"9:157:5652":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"17:13620:7406":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:49000:5344":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:11146:4905":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:22392:61553":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"24:5291:3424":{"crate_id":24,"path":["syn","token","SubEq"],"kind":"struct"},"2:10981:5327":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:13993:4403":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:13344:13109":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:1651:4735":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:5705:4670":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:670:41097":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:1644:4725":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:5456:5911":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"24:5110:3411":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"17:10253:6213":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:3718:155":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"21:68:4556":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"18:849:6306":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"21:441:63100":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"6:1723:8079":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:12327:7036":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:15691:12131":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:12671:7114":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:8756:4818":{"crate_id":2,"path":["core","lazy","Lazy"],"kind":"struct"},"1:15719:2946":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"24:6328:3151":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"1:11908:3210":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"12:925:4724":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:3314:4847":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:8929:47625":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:1708:8070":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:3083:130":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:15736:2960":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:12408:7071":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:22816:5183":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:909:92":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:15743:2967":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"12:396:5771":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:38540:4012":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:7886:4648":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"11:54:5755":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"24:5800:3112":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"24:5168:3415":{"crate_id":24,"path":["syn","token","RemEq"],"kind":"struct"},"17:11358:6191":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"12:976:4731":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:48298:72":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:12053:4716":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"19:0:972":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:9210:47631":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:6887:8756":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:45968:5244":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:11089:1787":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"20:63:3067":{"crate_id":20,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"24:3206:122":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"2:3250:3423":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"24:6088:3139":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"2:53125:8942":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:11271:4585":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:13760:7463":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"5:1824:6539":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:22764:4599":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:12168:6809":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:13564:7394":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:8070:3209":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:2243:5595":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:2159:3209":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:4419:8338":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:50022:175":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:24187:5413":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"22:908:1580":{"crate_id":22,"path":["proc_macro2","TokenStream"],"kind":"struct"},"1:11979:4763":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:10658:4864":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:47274:4411":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:49697:5068":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:5383:4607":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"24:5406:1797":{"crate_id":24,"path":["syn","attr","Meta","NameValue"],"kind":"foreign_type"},"2:55792:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:10472:4157":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:10701:4599":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:4478:8362":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:10331:6249":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:52710:5218":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:15742:2966":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:6051:8650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:4227:8259":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:3539:6566":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:12645:7112":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:7535:5040":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:10316:141":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:12725:7120":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:46408:5026":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:22413:61554":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:3420:2152":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:45780:5265":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:14537:4683":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:49080:5159":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:0:775":{"crate_id":6,"path":["libc"],"kind":"module"},"24:5995:3129":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"17:9971:63035":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:5528:8566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:57114:8956":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"6:5274:8462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:24323:5416":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:4596:3296":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:1658:8040":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:4127:8242":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:14533:9436":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:1472:4520":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:45997:5247":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:1578:3210":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"8:0:2919":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"24:2740:4599":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"24:4692:3383":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"6:4364:8316":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:8192:3330":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:10950:47917":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"24:3953:3282":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"17:9689:63040":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:10564:4622":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"17:0:2927":{"crate_id":17,"path":["object"],"kind":"module"},"24:5760:3102":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"9:686:5633":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"18:866:6308":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:5927:5928":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:2211:4441":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:4823:7562":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:6638:5555":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:2829:168":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"24:4115:1707":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"24:4842:3393":{"crate_id":24,"path":["syn","token","Div"],"kind":"struct"},"13:0:2917":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:8013:4158":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"16:7264:5881":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:12685:7115":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:48987:5343":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:10403:6245":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"24:3737:3362":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"24:6319:3147":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"24:4079:2200":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"24:3971:191":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"2:48961:5342":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"24:6128:1937":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"2:49858:5379":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"21:3340:1786":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"24:3827:2434":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"17:13221:7306":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:2484:47732":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:15199:58904":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:47283:173":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:45570:180":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:13810:7475":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:12343:7041":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:3409:3290":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"18:694:6317":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:8197:3246":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:11796:4825":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:3905:8125":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:5790:5925":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:4304:7547":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:6238:5868":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"24:5320:2428":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"17:13609:7405":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:9476:6793":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"24:4721:3385":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"17:13924:7507":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:5407:5908":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:14748:4827":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:4417:7550":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:3604:6722":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:5330:6788":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:6807:5949":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:4704:7558":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:46310:5018":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:53140:8943":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:4164:8254":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:53088:8939":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:45591:183":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:15737:2961":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:5384:5907":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"24:4888:3396":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"24:6124:1935":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"1:11000:4698":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"12:1855:140":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"5:2291:5614":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:7525:4821":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:13572:60494":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:45700:4692":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:15735:2959":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"24:2333:3208":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"2:3621:5442":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:6424:60386":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"17:12507:7082":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:10071:6289":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:9600:63038":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"24:5720:3093":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"2:24493:5419":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"24:2053:3267":{"crate_id":24,"path":["syn","buffer","TokenBuffer"],"kind":"struct"},"2:49571:5064":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"5:3940:6539":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:4095:8228":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"24:3342:3426":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"17:12632:7111":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:3116:4616":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:11147:9074":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:49439:5373":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:49718:5070":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"24:3917:3370":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"2:3297:5099":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"18:857:6307":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:15720:2947":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:5522:5915":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:4133:8244":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:46022:5510":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:3074:74":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"24:6339:3153":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"5:8184:3245":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:11186:9075":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:10117:6285":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"24:4825:3392":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"6:5469:8554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:8801:4938":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:49554:5063":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"7:38:45600":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:6028:8649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:11696:6923":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:45953:3307":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:15718:2945":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:2816:6134":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:52915:5187":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:11249:8631":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:5185:8423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:1617:8008":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:55779:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:3025:3368":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:624:7944":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:12917:7139":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:23465:5097":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"24:3755:3363":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"2:52032:5201":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:9723:6586":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:2171:4843":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:46155:5448":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"18:811:6303":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:6858:8749":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:6441:4520":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:10864:6837":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:578:7920":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"24:66:1960":{"crate_id":24,"path":["syn","token"],"kind":"module"},"5:781:104":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"24:6120:1933":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"5:375:4407":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:4013:8188":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:10942:4620":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:13963:7516":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:49901:5460":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"24:5093:3410":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"2:48161:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:47763:88":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:10052:129":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:12494:7081":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"21:3171:6331":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"2:6230:5020":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:12756:7126":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:1546:90":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"24:5192:3417":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"22:913:1787":{"crate_id":22,"path":["proc_macro2","Span"],"kind":"struct"},"17:11434:6861":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"24:5417:3080":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"2:4835:2137":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"24:5747:3099":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"17:10988:47892":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"24:5151:3414":{"crate_id":24,"path":["syn","token","Rem"],"kind":"struct"},"6:5428:8544":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:11572:6897":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:11815:4827":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"12:2025:4843":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:1501:4727":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:12568:7092":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:45481:4397":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"16:4995:7567":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:3426:126":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"24:5257:3422":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"5:5855:6550":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"1:5643:4664":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"24:0:1577":{"crate_id":24,"path":["syn"],"kind":"module"},"23:0:3049":{"crate_id":23,"path":["unicode_ident"],"kind":"module"},"17:9088:47629":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"24:3413:3351":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"5:8123:179":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"24:5742:3098":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"2:47511:84":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:5522:8565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:3108:123":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:5228:8440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:6698:4594":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"24:4133:3375":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"17:13386:7345":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:4539:4615":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"21:3335:2118":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"24:5725:3094":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"17:10975:47893":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:45959:9136":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:49272:5363":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:3852:3266":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"5:4185:4520":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"24:3247:3209":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"17:11199:6852":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:2843:6115":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:2968:6118":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:11328:7127":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"24:3015:2709":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"2:48224:122":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"18:712:4019":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:12490:5358":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:3018:6119":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:8380:4518":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:5860:4970":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:23740:9127":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:542:5842":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:11159:6851":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:10113:3298":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"24:2449:3216":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"16:7843:5964":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:6812:8747":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:10684:124":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:23559:5408":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"12:2323:7793":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:8247:5448":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:2512:6236":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:1190:12130":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:7682:4830":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:6999:5950":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:37296:163":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:6357:5938":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:9133:47630":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:13921:136":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:12712:7119":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:9083:4815":{"crate_id":1,"path":["std","lazy","SyncOnceCell"],"kind":"struct"},"16:3365:6107":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:50736:5226":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:14022:4639":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"16:6964:3639":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:7779:6552":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"22:845:1787":{"crate_id":22,"path":["proc_macro2","imp","Span"],"kind":"enum"},"24:2274:3206":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"24:2858:3270":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"2:47335:3210":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:11950:4761":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:1588:3214":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:12195:7017":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"24:5426:1795":{"crate_id":24,"path":["syn","attr","NestedMeta","Meta"],"kind":"foreign_type"},"6:4371:8318":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:9849:63031":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:49098:5355":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:49290:5364":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"18:667:6316":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:23794:5282":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:7333:5884":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:2754:6108":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:10052:47689":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:11716:5350":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"24:6344:3154":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"1:2155:3210":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:5945:8598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:11045:47640":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:5360:5906":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"24:5844:3122":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"24:5820:3116":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"1:10449:4146":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"12:2039:4845":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"24:5400:170":{"crate_id":24,"path":["syn","attr","Meta","Path"],"kind":"foreign_type"},"2:49850:5384":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"24:5911:2374":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"6:3892:8115":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"24:5461:3083":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"1:14843:9175":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:6636:5882":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:13180:7293":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"24:3719:3361":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"17:13627:7408":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:6644:8746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:9501:59525":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"17:10912:47906":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:47164:161":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:6136:5904":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:9368:6790":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:11915:6962":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"}},"external_crates":{"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/1.0.98/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.19/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"23":{"name":"unicode_ident","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.39/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":15}