{"root":"0:0:1816","crate_version":"1.0.190","includes_private":false,"index":{"2:12407:33740":{"id":"2:12407:33740","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12423:26846":{"id":"2:12423:26846","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5534:34421":{"id":"5:5534:34421","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12431:9547":{"id":"2:12431:9547","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43512:2930","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:2389":{"id":"5:5537:2389","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12527:26776"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12450:4324":{"id":"2:12450:4324","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41566:196","prim@char":"1:12067:450","self::pattern":"2:12106:3780"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:15621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:2388":{"id":"5:5538:2388","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12528:26777"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12428:26869":{"id":"2:12428:26869","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12427:2808"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12532:33762":{"id":"2:12532:33762","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4571:33762"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43843:9589","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12527:26776":{"id":"2:12527:26776","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12427:2808":{"id":"2:12427:2808","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12428:26869"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12436:32226":{"id":"2:12436:32226","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43818:9647","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5523:34419":{"id":"5:5523:34419","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12410:33742":{"id":"2:12410:33742","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12408:33741"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12417:2047":{"id":"2:12417:2047","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41566:196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12426:33745":{"id":"2:12426:33745","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12073:1506","crate::ops::IndexMut":"2:3077:3389","str::slice_unchecked":"2:12425:33744"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12524:26772":{"id":"2:12524:26772","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12487:33750":{"id":"2:12487:33750","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12106:3780","`DoubleEndedIterator`":"2:7518:126","prim@char":"1:12067:450","str::rmatch_indices":"2:12490:33751"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43676:9638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12525:26773":{"id":"2:12525:26773","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39520:26783","Self::is_ascii":"2:12524:26772"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39520:26783","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12440:26888":{"id":"2:12440:26888","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:3780"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12519:33760":{"id":"2:12519:33760","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:3780"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:15621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12528:26777":{"id":"2:12528:26777","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12435:33746":{"id":"2:12435:33746","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43790:9644","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12425:33744":{"id":"2:12425:33744","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12073:1506","str::slice_mut_unchecked":"2:12426:33745","crate::ops::Index":"2:3073:2564"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12466:33748":{"id":"2:12466:33748","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12106:3780","str::split":"2:12454:26876","prim@char":"1:12067:450","str::split_terminator":"2:12463:33747"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43594:9633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:15621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12421:26845":{"id":"2:12421:26845","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:8:1931":{"id":"0:8:1931","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[216,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:12432:32216":{"id":"2:12432:32216","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12433:32221"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43800:9645","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:34420":{"id":"5:5526:34420","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12501:33757":{"id":"2:12501:33757","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:3780"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12131:15619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12404":{"id":"2:12404","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12405:872","2:12406:2158","2:12407:33740","2:12408:33741","2:12410:33742","2:12413:2920","2:12414:33743","2:12415:342","2:12416:341","2:12417:2047","2:12419:26844","2:12421:26845","2:12423:26846","2:12425:33744","2:12426:33745","2:12427:2808","2:12428:26869","2:12429:2398","2:12430:2392","2:12431:9547","2:12432:32216","2:12433:32221","2:12434:29894","2:12435:33746","2:12436:32226","2:12437:2260","2:12440:26888","2:12443:26889","2:12446:2709","2:12450:4324","2:12454:26876","2:12457:26878","2:12460:26880","2:12463:33747","2:12466:33748","2:12469:26882","2:12472:26884","2:12475:26886","2:12478:26887","2:12481:2154","2:12484:33749","2:12487:33750","2:12490:33751","2:12493:33752","2:12495:33753","2:12497:33754","2:12499:33755","2:12500:33756","2:12501:33757","2:12504:2066","2:12507:26890","2:12510:26891","2:12513:33758","2:12516:33759","2:12519:33760","2:12522:2027","2:12524:26772","2:12525:26773","2:12526:26775","2:12527:26776","2:12528:26777","2:12529:33761","2:12531:10174","2:12532:33762"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:63:375":{"id":"0:63:375","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1878,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:86-0:994:2032"],"is_stripped":false}}},"2:12531:10174":{"id":"2:12531:10174","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4574:10174"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43834:9584","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12446:2709":{"id":"2:12446:2709","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41566:196","prim@char":"1:12067:450","self::pattern":"2:12106:3780"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12484:33749":{"id":"2:12484:33749","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12106:3780","`DoubleEndedIterator`":"2:7518:126","prim@char":"1:12067:450","str::matches":"2:12481:2154"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43748:9642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:15621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12497:33754":{"id":"2:12497:33754","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12443:26889":{"id":"2:12443:26889","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:3780"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:15621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12475:26886":{"id":"2:12475:26886","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12463:33747":{"id":"2:12463:33747","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12106:3780","str::split":"2:12454:26876","prim@char":"1:12067:450","`DoubleEndedIterator`":"2:7518:126","str::rsplit_terminator":"2:12466:33748"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43576:9632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12526:26775":{"id":"2:12526:26775","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1023:2035":{"id":"0:1023:2035","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"2:12405:872":{"id":"2:12405:872","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12067:450"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12490:33751":{"id":"2:12490:33751","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12106:3780","`DoubleEndedIterator`":"2:7518:126","prim@char":"1:12067:450","str::match_indices":"2:12487:33750"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43694:9639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:15621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12500:33756":{"id":"2:12500:33756","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:964:1805":{"id":"0:964:1805","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[89,0],"end":[94,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"0:86-0:994:2032":{"id":"0:86-0:994:2032","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[21,0],"end":[21,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::internals::case::RenameRule","name":"RenameRule","id":"0:994:2032","glob":false}}},"0:965:1813":{"id":"0:965:1813","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[97,0],"end":[102,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:12457:26878":{"id":"2:12457:26878","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:3780"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11922:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12529:33761":{"id":"2:12529:33761","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4573:33761"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43825:9590","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492-0:1019:1938":{"id":"0:492-0:1019:1938","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1019:1938","glob":false}}},"5:5536:3447":{"id":"5:5536:3447","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12478:26887":{"id":"2:12478:26887","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:15621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5518":{"id":"5:5518","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5519:34418","5:5520:2188","5:5523:34419","5:5526:34420","5:5534:34421","5:5535:34422","5:5536:3447","5:5537:2389","5:5538:2388"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:493-0:404:1939":{"id":"0:493-0:404:1939","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[14,0],"end":[14,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:404:1939","glob":false}}},"2:12416:341":{"id":"2:12416:341","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12084:1612"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12433:32221":{"id":"2:12433:32221","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12432:32216"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43809:9646","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12513:33758":{"id":"2:12513:33758","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:3780"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:15621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12472:26884":{"id":"2:12472:26884","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12067:450","str::splitn":"2:12469:26882","self::pattern":"2:12106:3780"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43648:9636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:15621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12419:26844":{"id":"2:12419:26844","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41566:196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12460:26880":{"id":"2:12460:26880","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12106:3780","`DoubleEndedIterator`":"2:7518:126","prim@char":"1:12067:450","str::split":"2:12454:26876"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43544:9559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:15621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12495:33753":{"id":"2:12495:33753","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:34422":{"id":"5:5535:34422","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2002","`String`":"5:7489:248"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2002","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12507:26890":{"id":"2:12507:26890","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:3780"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12437:2260":{"id":"2:12437:2260","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:3780"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12406:2158":{"id":"2:12406:2158","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12504:2066":{"id":"2:12504:2066","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:3780"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5519:34418":{"id":"5:5519:34418","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2002","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2002","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5520:2188":{"id":"5:5520:2188","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12413:2920":{"id":"2:12413:2920","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11666:15623"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12434:29894":{"id":"2:12434:29894","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43780:9643","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12454:26876":{"id":"2:12454:26876","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12106:3780","`DoubleEndedIterator`":"2:7518:126","prim@char":"1:12067:450","str::split_whitespace":"2:12432:32216","str::rsplit":"2:12460:26880"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43526:9556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12469:26882":{"id":"2:12469:26882","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:3780","str::rsplitn":"2:12472:26884"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43630:9635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12408:33741":{"id":"2:12408:33741","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12481:2154":{"id":"2:12481:2154","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12106:3780","`DoubleEndedIterator`":"2:7518:126","prim@char":"1:12067:450","str::rmatches":"2:12484:33749"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43730:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12414:33743":{"id":"2:12414:33743","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12430:2392":{"id":"2:12430:2392","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12067:450"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43502:9627","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12522:2027":{"id":"2:12522:2027","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12067:132","`FromStr`":"2:12066:3403"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12066:3403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12066:3403","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1816":{"id":"0:0:1816","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[102,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2021\n# use serde_derive::{Deserialize, Serialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.190\")]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: derive_partial_eq_without_eq, clippy ::\nenum_variant_names, clippy :: manual_map, clippy :: match_like_matches_macro,\nclippy :: needless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: let_underscore_untyped, clippy ::\nmanual_assert, clippy :: map_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:964:1805","0:965:1813"],"is_stripped":false}}},"2:12415:342":{"id":"2:12415:342","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12416:341","`u8`":"1:12084:1612"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12429:2398":{"id":"2:12429:2398","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12067:450"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43496:9626","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12510:26891":{"id":"2:12510:26891","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:3780"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:15621","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12516:33759":{"id":"2:12516:33759","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:3780"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:15620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12493:33752":{"id":"2:12493:33752","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12499:33755":{"id":"2:12499:33755","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:10240:6479":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:6663:8617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:40068:8987":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:3519:4739":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:43594:9633":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:4848:853":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:6043:8509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:12751:209":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"5:7465:9548":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:4823:8217":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:22738:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:11423:9716":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:1842:10215":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"24:1503:3505":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"1:12089:847":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:47821:9131":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"24:4052:3674":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"16:3049:21550":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"21:1063:2021":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"21:2601:9307":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"24:4582:2215":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"2:3326:3550":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:8928:9219":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:9137:6463":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:6145:8533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:5020:8317":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:11991:6634":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:9531:116":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:5588:7332":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"24:95:4372":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"2:40783:3448":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:7939:3458":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:6083:21521":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:687:115":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:4394:8050":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:22166:9569":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"20:676:3515":{"crate_id":20,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"17:11086:22670":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"24:4785:3300":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"1:11572:10320":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"24:2222:2643":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"2:45520:9030":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:13298:6894":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:11375:9240":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:9488:35399":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:6568:10011":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:4488:8094":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:11250:9239":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"16:6456:9447":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:5013:8314":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:13973:7116":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:12422:6731":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:10456:22570":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"11:423:35332":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:3171:216":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"24:4545:3296":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"21:2578:3562":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"1:727:149":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:1140:35235":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:6622:8590":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"21:2644:3379":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"17:10126:9330":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"20:811:2021":{"crate_id":20,"path":["proc_macro2","imp","Span"],"kind":"enum"},"16:6879:7443":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:3964:10323":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:4373:8042":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:6171:211":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:5996:15984":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:11535:9365":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:12084:1612":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:6092:8522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:10878:29261":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:8072:7545":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:555:7810":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:21150:10474":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:8848:22485":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:2012:22552":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:8244:2930":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"24:4325:3693":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"5:207:4655":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:622:10004":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:22218:32158":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:4494:8097":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"24:2175:10267":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"16:7554:7344":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:43061:9017":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:12698:6779":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:45610:9034":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:8181:7349":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:9242:6466":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"24:4122:3679":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"5:1516:215":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:4407:3541":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:9070:6460":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:13024:6843":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"14:7:9990":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"21:989:257":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"17:11573:9366":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"23:235:4231":{"crate_id":23,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"1:7694:4533":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"23:11:3408":{"crate_id":23,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"2:40099:32160":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13244:6880":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:22936:184":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"24:5202:3348":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"1:3195:28956":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:12066:3403":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:9312:4813":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:21928:10464":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:42876:9622":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:43825:9590":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:22771:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:10468:10408":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"24:5470:3360":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"2:9536:125":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:11381:6555":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:2037:3515":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:6839:10459":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:21108:4674":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"16:6041:22413":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"24:4943:2564":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"17:11507:22501":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:14420:7254":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:3065:6369":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"24:4431:3701":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"17:10603:9344":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:8323:10356":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:42194:10097":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"23:150:3973":{"crate_id":23,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"17:9701:22495":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:4774:7373":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"24:3253:1937":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"17:8686:22480":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:3698:10315":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:10478:6496":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:39964:8986":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:4208:10353":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"18:113:26505":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:5121:7384":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:12576:6763":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:6826:4745":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"5:1120:34934":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"18:624:35419":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:4745:8178":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:7532:8731":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"24:4920:3331":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"2:3034:2502":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:8311:9692":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"18:766:26515":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:2884:6319":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"20:951:2640":{"crate_id":20,"path":["proc_macro2","Literal"],"kind":"struct"},"24:4474:2288":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"5:3185:35234":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:4425:8068":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:11367:6552":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"24:878:35579":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"11:1846:3379":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:2178:22547":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:10830:9151":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"24:555:6302":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"2:43576:9632":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:6186:8559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"24:4192:3684":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"3:234:231":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:11547:6574":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:8608:3952":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:11473:6428":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:582:2035":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"9:237:9013":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:8716:15620":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"24:5482:3365":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"2:2776:242":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:21463:10462":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"5:6100:6128":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"24:5504:3370":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"24:4824:3309":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"2:44325:9681":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"24:4936:1977":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"6:1682:7954":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:3523:30112":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:3010:122":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:7514:9998":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:9755:152":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:8174:3441":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:11201:9349":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:10376:30150":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:40568:3490":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:2948:6326":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:3180:9526":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:5648:22408":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:6633:8595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:12172:6666":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:40243:3466":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:5782:8377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:6910:3473":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"18:614:35420":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"24:1862:3376":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"6:4433:8070":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:8833:10408":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:10738:22638":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:13981:7117":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:4997:8309":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:5528:10406":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:504:22479":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:40554:3489":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:4033:32399":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:2696:7318":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:3457:9194":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"21:2710:2022":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"24:4168:3682":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"1:8422:3946":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"24:1135:5228":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"1:12086:1610":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:43332:9563":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:11639:6544":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:12088:1608":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:14324:7227":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:13274:6547":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:11187:15610":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:7518:126":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:8530:10397":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:7573:8740":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"5:3722:3515":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:12196:6670":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:45995:9054":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:43961:9656":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:6759:8641":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:4468:8084":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:40192:3463":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"24:4390:3698":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"24:5493:3367":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"24:3999:3670":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"2:41760:3384":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"16:2832:7324":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"20:777:26525":{"crate_id":20,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"1:12033:10105":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"21:2705:3560":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"6:4884:1065":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:3760:10319":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:9063:1948":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:22837:185":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:43834:9584":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"23:35:10267":{"crate_id":23,"path":["quote","ext","private","Sealed"],"kind":"trait"},"11:772:9524":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:12750:6786":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"24:4151:3681":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"2:0:531":{"crate_id":2,"path":["core"],"kind":"module"},"21:216:10050":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"1:8957:10431":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"13:110:35335":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:39184:215":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:41649:3950":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"24:5091:1954":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"1:9505:134":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:5808:8392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:39988:9588":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:1561:3379":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:12068:1628":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:5905:8435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:23416:241":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:4462:7364":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"24:4845:3314":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"2:5421:6128":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:2277:108":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:10196:244":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:4728:8168":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"24:2539:3623":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"6:5049:8336":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:2618:121":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:4555:8127":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:6009:8493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:10285:10410":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:400:22478":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"20:15:4944":{"crate_id":20,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"2:47848:9133":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:43080:9624":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"21:367:4764":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"17:14145:7162":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:8097:9507":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:4613:7369":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"24:870:35584":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"2:3289:3548":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:12071:339":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:9003:22490":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:2547:263":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:4770:10341":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:5833:8397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:1664:7947":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:21094:10469":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"5:2968:3643":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"24:4946:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"16:2596:7314":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:11074:22669":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:1738:4689":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:9021:4524":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"11:1850:4739":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:46855:9089":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:10962:6534":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:11848:9634":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:7261:6119":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"24:2828:3634":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"17:14118:7155":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:483:7767":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:11071:6204":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:1275:10192":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"24:1484:3392":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"6:6820:8684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:11162:6539":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:40290:9601":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:5017:7381":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:47920:9139":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"24:5498:3368":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"11:1842:3380":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"18:652:6343":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:8239:2719":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"24:4815:3307":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"1:11232:9227":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:11226:9357":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:8572:9694":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:7011:10013":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"21:2755:2020":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"17:9390:134":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"5:35:4653":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:11348:10411":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:12484:6747":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:10340:6494":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:13632:7045":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"20:839:2640":{"crate_id":20,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"18:507:6343":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"24:1486:2028":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"type_alias"},"16:2359:7304":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"18:0:3149":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:4070:10331":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:9521:22492":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:9487:231":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"5:5975:6134":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"11:796:4737":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:12671:6505":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"11:841:10188":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:7322:3379":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:47745:9129":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:3315:10300":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:30259:69":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:10588:9343":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:4548:8125":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:1576:7880":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:527:7795":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:5423:10403":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:5774:10421":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:907:4737":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"24:4869:3319":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"1:10850:124":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:9998:6451":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:1710:7967":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:42116:88":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"18:755:9329":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:6915:7339":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:30237:4602":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"21:2640:3559":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"2:45586:9033":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:11179:9215":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"0:0:1816":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"17:14469:7269":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"24:3849:3661":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"16:4889:7377":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:1642:4598":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:7503:7342":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"21:1819:4760":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"5:2143:9530":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:1058:10191":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:6944:35346":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:14221:7207":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:12073:1506":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:10165:22541":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:10214:22551":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:3915:7360":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"24:3946:3667":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"2:10669:15614":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"24:1068:2031":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"16:6687:9463":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:9233:9231":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:12126:15621":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"24:89:1948":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"1:6098:6183":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:4745:7372":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:2972:26563":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:11654:9718":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:10393:9556":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:6226:22414":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:14378:7248":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:10661:22634":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:4511:8107":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:10383:22545":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:4653:10328":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:2892:6321":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"24:1921:3378":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"1:0:1498":{"crate_id":1,"path":["std"],"kind":"module"},"2:20920:32846":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:5599:10407":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:7792:10005":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:2866:6317":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:42621:69":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"24:2709:3629":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"1:8839:203":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:10139:22540":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"24:4781:3299":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"24:4564:1959":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"16:6425:9445":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:5336:125":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:11088:6206":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:7571:3459":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"5:4350:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:7041:9488":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:14460:7265":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"24:4888:3323":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"2:46141:9058":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:11551:10318":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:5633:4743":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:4053:7361":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"11:2494:3434":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:12702:159":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:12024:6640":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:7880:5300":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"20:0:1793":{"crate_id":20,"path":["proc_macro2"],"kind":"module"},"20:924:2345":{"crate_id":20,"path":["proc_macro2","Punct"],"kind":"struct"},"5:3737:10194":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:4519:10358":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"24:4585:2295":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"16:7613:22424":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:6613:8589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:6914:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:6929:7448":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:6151:8534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"11:666:3380":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:9550:3527":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:8440:9206":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:12778:6790":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:21816:32631":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:10370:22546":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:1429:151":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"24:5144:2162":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"24:3168:2688":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"24:5456:3358":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"5:4365:6130":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:4592:8139":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:10135:30468":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"6:6171:8548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"23:272:2031":{"crate_id":23,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"24:498:3390":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"2:44562:9685":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:41958:85":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:10860:9192":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:40234:3465":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:12305:6702":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:1591:7892":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:8389:9197":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:11971:6633":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:13113:6858":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:2939:6322":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:4344:7362":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"18:538:6347":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"24:1725:10110":{"crate_id":24,"path":["syn","path","printing","span","QSelfDelimiters"],"kind":"struct"},"24:1440:26540":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"5:3219:35224":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:6792:9477":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:40221:3474":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:1076:9996":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:1817:10209":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:1697:7963":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"24:4578:3298":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"17:8594:22467":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:2173:4675":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:13667:7046":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:1557:3380":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"11:693:3379":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:40087:9596":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:44115:9661":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:13890:7097":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"24:2607:3627":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"17:8713:22481":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"24:3406:273":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"17:13422:6896":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:2382:10253":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:1781:10200":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:7439:3462":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:926:10186":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:12074:6649":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:10036:6481":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:44245:9672":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:45716:9038":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:40802:3452":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"24:4233:3687":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"2:39333:8858":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:4772:10342":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:40115:9597":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:44090:9660":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:10359:109":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"24:4402:3699":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"2:1472:2504":{"crate_id":2,"path":["core","mem"],"kind":"module"},"17:14346:7233":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:10991:10406":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"9:486:21393":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:7897:9151":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"24:4793:3302":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"17:10672:22635":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:11871:9637":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:41488:9615":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"18:582:4313":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"11:759:9523":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"24:4337:3694":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"5:2172:9532":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:824:6114":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"21:2242:3401":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"1:949:10189":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:12154:6665":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"23:345:2641":{"crate_id":23,"path":["quote","quote_spanned"],"kind":"macro"},"24:5302:2604":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"18:707:9322":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:40390:3486":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:2330:130":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:43313:9561":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"21:2730:3400":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"1:922:10093":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:21297:10267":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"11:2260:10191":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:11934:1954":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"24:4448:2633":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"1:7758:10182":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:41465:32168":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:12049:29252":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:12120:9322":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"9:507:7744":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"24:4279:3690":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"16:3888:7359":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:14056:7140":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:41709:231":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:3539:10284":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:10561:9341":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:40768:3444":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:11661:6578":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"24:5473:3361":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"6:5892:8429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:5085:8348":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"0:964:1807":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"2:43470:9020":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:40333:3482":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:9711:35412":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:2897:3680":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:4986:7380":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:2841:4300":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:2394:10259":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"5:1525:10193":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:9540:2557":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:1674:7953":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:3274:32630":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:4690:8148":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:41381:2021":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:32052:9581":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"6:4385:8045":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:2305:21547":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"6:4989:8307":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:6569:7336":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"11:992:9495":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:44464:212":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"5:3173:3380":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:1514:7845":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:3830:7358":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"11:1876:9527":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"21:404:35475":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"6:4792:8204":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:12907:6172":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:1632:7924":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"18:736:26514":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:8036:10103":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:580:7823":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:6974:32228":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:9010:10099":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:5459:10405":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:0:877":{"crate_id":6,"path":["libc"],"kind":"module"},"1:932:10187":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:2872:6327":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:2788:113":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:9085:29255":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"5:4034:6108":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:20875:32633":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"20:700:257":{"crate_id":20,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"24:3287:1991":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"1:12090:1668":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"24:2743:3630":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"24:3389:3656":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"16:2406:7306":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:9912:22513":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"11:2351:3379":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:4283:3531":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"24:336:3515":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"1:8041:10297":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:11111:22646":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:13922:7104":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"12:0:3144":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:7102:22421":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:3461:7354":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:1674:6108":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:13693:7052":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:43730:9641":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"11:2461:1942":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:1923:4647":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:21227:10470":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:9823:22509":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:40023:15663":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"16:5322:7385":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:1778:4737":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:39208:217":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:11687:22502":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:40355:3483":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:21241:4674":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"21:244:35507":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"17:14434:7256":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:2766:7321":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:8345:9196":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:5939:9405":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:46331:9064":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:4611:8140":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"24:1132:5223":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"24:3929:3666":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"5:784:6111":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"11:1855:4737":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:5474:109":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:11000:6536":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"24:3372:3655":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"2:1635:633":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:2904:6305":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:4379:8043":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:6893:7445":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:6844:7439":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"11:483:149":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:6583:9459":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:2428:7307":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:5935:8458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"24:1139:5232":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"24:2092:2577":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"2:46362:9065":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:4829:8218":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:11048:22659":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:5363:7386":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:3313:10299":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:7462:7493":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"18:636:6361":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"24:4928:3333":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"11:2479:35324":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:12081:796":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:2845:3423":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"20:728:1942":{"crate_id":20,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"1:6494:6192":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"24:4892:3324":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"2:4463:3544":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:4934:8278":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"18:719:6362":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:4921:7378":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:3125:10306":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"24:5192:3347":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"17:9762:35395":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:13228:6878":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:7828:7509":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"24:3982:130":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"6:6051:8511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:5574:7329":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:434:6414":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:7669:10267":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:5612:7334":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"24:2675:2547":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"24:5156:3340":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"24:3878:3663":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"2:42316:2557":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:501:7775":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:9512:10262":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:10494:9335":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:6415:9444":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:2472:7309":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:4949:8287":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:47575:9126":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:507:7778":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:46465:9067":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"11:868:10190":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:44158:9670":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:43932:9648":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"24:1771:1947":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"17:13101:6856":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:7555:2035":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:9752:22496":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:47859:9134":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:9972:22519":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"10:0:3142":{"crate_id":10,"path":["adler"],"kind":"module"},"24:5501:3369":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"24:4789:3301":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"17:9277:6467":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"24:1445:26541":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"17:11358:22674":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"20:830:1954":{"crate_id":20,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"17:13676:7050":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:897:4739":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:6531:9457":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"24:4110:3678":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"21:2691:2021":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"24:674:35575":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"1:1779:10199":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:11719:22503":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:574:7820":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:2914:6304":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:8205:22431":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:6586:3379":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"20:694:9309":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"17:14083:7147":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:11405:9761":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"11:1869:9526":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"24:4858:3317":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"2:41318:8991":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:45854:9044":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:11269:156":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"16:6960:22418":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:9977:6162":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:9141:240":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:7443:3461":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"24:609:3380":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"6:495:7773":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:13188:6873":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:43405:9564":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:44337:15791":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"24:2726:121":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"17:12645:6770":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"15:306:21503":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:7660:7498":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:7567:8739":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:1528:7850":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:13259:6884":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"24:3304:3651":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"2:10436:9558":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:11082:6205":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"21:2534:4762":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"6:4960:8290":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:22150:8765":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:47039:9091":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:11244:6576":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:2919:3693":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:1826:183":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:4056:10329":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:40082:104":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:10447:9528":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:11062:22668":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:8281:7551":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:15:2783":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:10410:22564":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:4721:8167":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:4411:10349":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:46284:9063":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:11636:15751":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"21:2427:2022":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"2:45632:9035":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:4021:32394":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"20:704:3398":{"crate_id":20,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"1:5596:8520":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:14296:7220":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:6901:7338":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:43526:9556":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:47973:9142":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:3671:6108":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:22258:32152":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:8490:9013":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"24:1530:2966":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"2:12111:15620":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:4259:10354":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"20:904:3400":{"crate_id":20,"path":["proc_macro2","Delimiter"],"kind":"enum"},"17:13487:6947":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"5:6816:4744":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:638:10176":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:43502:9627":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:46825:9088":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:42661:75":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:10547:9340":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:46111:9057":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:10818:9709":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"24:4810:3306":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"2:39250:219":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:40365:3484":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:1604:7899":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"24:2811:3633":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"2:42612:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"24:550:133":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"5:7330:3379":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:12776:15672":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"24:2590:3626":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"17:9564:22493":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:45835:9043":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"24:152:1948":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"20:980:3379":{"crate_id":20,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"24:5148:3341":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"24:2862:3635":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"1:7670:4542":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:40404:3487":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"24:2240:6311":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"6:6686:8618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"20:930:2020":{"crate_id":20,"path":["proc_macro2","Spacing"],"kind":"enum"},"6:6640:8599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:1505:10093":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:41624:3380":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"24:3820:3659":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"17:12765:6789":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:2526:7311":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:7310:8727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:12513:6752":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:14068:7143":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"24:4854:3316":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"6:1546:7861":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:6513:6108":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:3232:22602":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:2384:10254":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:2209:22569":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:3441:22605":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:0:3147":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:40322:3491":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:9933:22525":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:12830:6795":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:39228:220":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:44257:9675":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"24:252:9988":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"24:4180:3683":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"18:80:26503":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:7625:6200":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:4211:3517":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"5:7405:105":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:44520:175":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"24:5287:3349":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"2:9546:211":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:4631:8142":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:43676:9638":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:45872:9045":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:1496:7837":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"24:5150:3343":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"17:9867:6477":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:43790:9644":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"5:3332:4737":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"21:2303:2345":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"2:43818:9647":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"21:2015:4761":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"2:21926:10267":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:30243:4603":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:14269:7208":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"24:3032:3643":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"5:7436:32160":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:4597:10375":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:49859:10478":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:1672:1155":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:7651:22426":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:47905:9138":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:8794:22483":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:12177:15628":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:14173:7170":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:364:4541":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:22606:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:13055:6849":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:1475:9524":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"11:2368:4739":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"20:357:3398":{"crate_id":20,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"1:1895:10006":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:22870:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"16:3232:7295":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"24:3066:3645":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"24:2998:3641":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"17:8659:22465":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:42868:9621":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:11652:10002":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:4418:8064":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:5853:6182":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:1067:10192":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"24:1329:3519":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"24:5146:3342":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"6:5897:8430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:4346:8019":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:123:16065":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:9086:6461":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:11640:30474":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:7090:9494":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:47879:9136":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"24:5333:2621":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"16:6600:22416":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:4753:8182":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:8146:10263":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:41841:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:8294:133":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"11:389:6103":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:13989:7118":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:5403:6460":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"18:521:26518":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"20:802:35445":{"crate_id":20,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"2:2361:199":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:12267:6694":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:11006:29258":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:10698:22616":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"11:731:10093":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"24:926:3339":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"1:8582:3380":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:505:4520":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"11:1541:21476":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"5:5944:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:13040:6845":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"11:817:10185":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:6059:8513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:9542:3528":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:8274:10313":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:2498:10267":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:13685:7051":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:12846:6800":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:1718:7971":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:11448:22500":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:14076:7146":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:11666:15623":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:43353:9018":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"11:785:4739":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:39347:8859":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:6376:22415":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:43434:15611":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:3797:7357":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:7053:6196":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"24:5086:2610":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"17:13949:7108":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:11742:6583":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:1986:201":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:7538:8732":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:10511:6203":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:6346:10067":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"18:681:9316":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:7526:8730":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:3583:3380":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:12111:6655":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:9071:9223":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:2216:10246":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"21:478:6097":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"11:1525:21475":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:12711:6781":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:646:10178":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:5878:8428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:12685:6778":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:2992:4645":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:46187:9060":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:14134:7158":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:5712:9380":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:4867:8236":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:5816:9390":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:6204:10052":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:8887:3380":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:7937:124":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:5110:30433":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:5063:8342":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:40810:3454":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:12724:32574":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:7694:7346":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:3077:3389":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:119:16064":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:8606:3954":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:14013:7125":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:21489:10471":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:3044:3569":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"18:96:26504":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:4768:10339":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"20:874:257":{"crate_id":20,"path":["proc_macro2","TokenStream"],"kind":"struct"},"2:21365:10465":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:47497:9125":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:8250:9556":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:12543:6755":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:3206:9527":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"21:2776:2640":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"2:12999:4651":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:4954:8289":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:7555:8737":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:13897:7099":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"24:922:3014":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"16:7534:7343":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:9223:10095":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:12043:6645":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:2219:4680":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:9747:148":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:14100:7151":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:1044:9495":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"24:287:35577":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"17:11910:6620":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"9:0:3141":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"11:1036:10192":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:489:7770":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:14316:7226":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"18:564:6349":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:30203:4601":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:3429:6128":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"20:718:2021":{"crate_id":20,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"2:9548:3526":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:8115:9510":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:7920:135":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:11886:6606":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:6924:6195":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:4179:10350":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:8588:9214":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"24:5357:2506":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"6:4529:8116":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:12790:6791":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:4008:10326":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:43978:9657":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:22233:8770":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:43800:9645":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"24:5103:2296":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"24:4487:3282":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"16:5634:9374":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:22097:9568":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:12373:6706":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:42337:3529":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:44300:127":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"24:4987:2505":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"24:4558:1797":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"2:45795:9041":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:40792:3450":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:4480:8089":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:2880:6318":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"19:0:1096":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:21491:8762":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:7606:6198":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:9790:35413":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"24:1620:2029":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"2:42639:133":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:20862:4313":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:6467:9448":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:6811:8681":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:7961:3515":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:45919:9046":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:22357:10322":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"5:1428:3384":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:4992:3942":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:6560:6100":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:3958:10324":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:6332:7328":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:41632:3384":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"20:879:2021":{"crate_id":20,"path":["proc_macro2","Span"],"kind":"struct"},"2:40049:15664":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:4451:8078":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:1596:7894":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"18:671:26517":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:12554:6756":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:9172:6464":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"21:2631:257":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"2:9538:3520":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:6385:180":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"24:1488:3504":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"2:42858:9013":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:3410:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:7890:9690":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:6325:225":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"5:5137:6134":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"24:1894:3377":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"24:2692:112":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"2:39168:218":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:7568:7345":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:10628:9347":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:6156:9435":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"18:660:26516":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"24:1613:3514":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"1:4934:10382":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:2214:134":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"24:4076:3676":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"2:40777:3446":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:256:35407":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"24:4820:3308":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"17:11845:6597":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:6277:6188":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:4157:31906":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:4806:7374":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"24:0:1794":{"crate_id":24,"path":["syn"],"kind":"module"},"18:531:9313":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"24:4872:3320":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"2:4801:419":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:47943:9140":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:11327:9363":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:25818:272":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"24:4419:3700":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"17:12280:6698":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:7743:10181":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"5:7293:215":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:10795:9701":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:44249:9673":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:44277:9680":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:46589:9084":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"11:1635:6105":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:10576:10299":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:10575:9342":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"24:3236:259":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"1:9028:29058":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"24:5082:3337":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"24:3912:3665":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"24:4797:3303":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"5:7301:5519":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:7544:8733":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"24:2760:3631":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"2:43748:9642":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"24:910:35581":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"17:11215:9353":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:9650:6487":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:46233:9062":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:7722:7337":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:6741:8630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:22345:9577":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"5:3802:4737":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:41543:9001":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:43630:9635":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:6401:7330":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"13:0:3138":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:12066:999":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:13135:6869":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:39326:15697":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:2670:10230":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"24:259:9989":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"17:14499:7274":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:14090:7148":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"21:1394:2035":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"16:2969:21549":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:7436:7492":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:5905:9399":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:7476:139":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:4474:8086":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:7976:32388":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:41777:200":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:7945:29714":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:6545:7404":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"24:5154:3344":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"5:678:255":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:13202:6876":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:6334:10552":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:12473:6744":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:4849:10338":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:4045:106":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:44104:15635":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:2644:10296":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:6279:7397":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:2788:7322":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:4853:8228":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:9607:22494":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:5864:8418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"24:1746:10111":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"2:12944:147":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"11:427:35328":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:8134:9513":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"7:0:1658":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:10507:9337":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:7406:30044":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:42584:114":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"23:78:2023":{"crate_id":23,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"2:44549:4650":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:2784:3547":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:3198:29713":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:569:7818":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:43342:15606":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:536:9368":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:1376:97":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:1558:7870":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:4805:8209":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:8194:9192":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:1184:22526":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:3038:2282":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"11:860:10189":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:11193:9216":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"11:298:9518":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:6082:8519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"24:2845:2282":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"1:8206:10266":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:3236:10302":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:7715:4530":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:5995:9369":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:43424:9565":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:14163:7165":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:11295:9361":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:5443:10404":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"24:3049:3644":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"6:6856:8701":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"24:4924:3332":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"6:5851:8409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:6454:3444":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"24:4841:3313":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"16:2933:21548":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:6624:10428":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:7293:8716":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:276:2002":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"24:5314:2321":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"2:46163:9059":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"14:187:21490":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"11:1882:1991":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:10903:22604":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"24:3355:3654":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"17:10980:6487":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:32038:32410":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:22279:32150":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:4826:6180":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"11:1145:9996":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:13546:6999":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:47699:9128":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:10475:15608":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:12086:6650":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:9506:137":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:7561:8738":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"18:590:6350":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:7025:3438":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"5:897:3380":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:6809:2768":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:7489:248":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:13906:7100":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:4417:7363":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:10012:6487":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:3234:15696":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"5:7573:4737":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:9911:6159":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:10637:9348":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:2860:6316":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"24:5372:3353":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"2:42323:3520":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:7624:8752":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:2171:4674":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"23:322:2643":{"crate_id":23,"path":["quote","spanned","Spanned"],"kind":"trait"},"10:36:7683":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:41335:8993":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"24:2879:3636":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"6:542:7804":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:47868:9135":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:1639:7928":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:6002:8492":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:8953:22488":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:14308:7223":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:5384:22407":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:11887:9640":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:9886:22511":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:6604:8583":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:10513:15616":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:5419:6461":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:21357:10267":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:4497:10357":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:10573:10303":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"14:165:21483":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:4943:10383":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:2161:634":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"24:4904:3327":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"2:30807:200":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:3274:10303":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:46543:9083":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:39936:9586":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:7582:7494":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"24:5348:2549":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"2:46209:9061":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"9:426:21396":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:548:7807":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:43947:9654":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:11951:6623":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:1590:1991":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"11:2394:4737":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"11:2085:10192":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"24:2964:2335":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"1:3475:10264":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:3261:15646":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:7360:35362":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:11024:9217":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:8363:10385":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:13876:7094":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:10840:135":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:43392:15603":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:7162:31907":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:10344:3380":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:13286:6887":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:12016:9762":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"24:3134:3647":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"2:5569:3479":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:22969:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"24:5343:2548":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"17:14110:7154":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:12237:6682":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:2258:101":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"24:5060:2615":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"24:4530:2013":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"2:39978:9587":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:8237:3488":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"24:827:3501":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"1:1585:9527":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"11:0:3143":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"6:4799:8206":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"21:2636:3398":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"2:32031:2719":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"5:7389:3435":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:13174:6872":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:4719:7371":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:14536:7281":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"24:3791:3657":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"24:5514:3357":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"17:13575:7010":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:12737:6784":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:871:9523":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:47958:9141":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"20:510:3398":{"crate_id":20,"path":["proc_macro2","LexError"],"kind":"struct"},"5:3570:177":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"21:53:4763":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"1:9131:181":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:5079:30433":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:3032:7350":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:40000:9589":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:2964:8756":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:7796:2110":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"24:2896:3637":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"24:3808:3658":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"17:12437:6735":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:47839:9132":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:43843:9589":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:2787:249":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"24:5377:3352":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"1:10114:10209":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:4665:8612":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:4022:10328":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:43780:9643":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:11342:9710":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"24:902:35583":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"17:10316:6492":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"24:4876:3321":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"5:6958:6145":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:6703:8619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:4428:6130":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:2786:250":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:4640:15657":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"24:4548:3297":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"16:7342:35371":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:3865:10320":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:3655:6374":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:11922:9558":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:41682:3951":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:42821:9617":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:7474:22423":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:21707:10468":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"6:7265:8713":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:44253:9674":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:40172:10245":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"21:2725:1942":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"24:2947:3640":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"24:5507:3355":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"17:13914:7102":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:44138:9669":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"24:4982:1962":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"2:40374:3485":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"18:481:9311":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:6790:8667":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:3600:7355":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:8941:10432":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:8599:9697":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"24:5510:3356":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"24:4964:63":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"2:2793:252":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:43484:9625":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:4497:7365":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"23:0:1195":{"crate_id":23,"path":["quote"],"kind":"module"},"1:5409:10402":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"9:52:10072":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:11316:6550":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:11647:9718":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:12465:6742":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:1983:202":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:10869:29246":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:6883:8707":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:12724:6782":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:7269:35370":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:44499:9751":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:261:35404":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:10133:30151":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"20:885:2022":{"crate_id":20,"path":["proc_macro2","TokenTree"],"kind":"enum"},"6:6849:8698":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"9:177:10083":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:46779:9087":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:12079:798":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:10366:22557":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:4309:7991":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"20:740:2640":{"crate_id":20,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"24:548:231":{"crate_id":24,"path":["syn","error","Result"],"kind":"type_alias"},"17:1075:22521":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"24:2641:2002":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"2:22331:8783":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:11811:9629":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:654:16421":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:1579:9526":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:2935:6324":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:6726:8626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:3358:10292":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:21313:10461":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:12074:1593":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:10009:6167":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"11:2238:9495":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"16:7513:9499":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:4527:7366":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:20890:32633":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:11511:10319":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:7768:7335":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:12252:6688":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:2501:10295":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:1764:657":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:6217:4763":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"5:2225:35304":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:47637:9127":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"18:599:6306":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"20:734:1954":{"crate_id":20,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"2:22295:32161":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:47783:9130":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:9445:22491":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:7579:8741":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:14024:7129":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:8865:9216":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"24:4516:3283":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"16:5673:7333":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:5371:15598":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:13451:6916":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:2850:6314":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:46889:9090":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"24:1973:3382":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"2:44446:224":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:8329:10348":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:10023:22495":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"24:5485:2509":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"2:11228:4686":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:9985:22518":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:5781:10422":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:7769:9687":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:2888:6320":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:32045:3540":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"6:6023:8504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:41997:92":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:13611:7040":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:6458:10423":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"24:4221:3686":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"2:6028:3492":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:10227:22550":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:14355:7235":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:22044:9567":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"21:2379:2640":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"2:40042:9592":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:21280:10466":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:4922:8269":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"5:3144:98":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:8926:22487":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:2245:9537":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:10534:9339":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:4461:8081":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:22804:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:13010:6840":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:30437:32151":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:46065:9056":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:12983:6838":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"0:965:1814":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"17:10916:22603":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:12007:6638":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:4320:7999":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:4892:8248":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:12136:6657":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:21194:10475":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:6174:6172":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:5268:207":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:10197:22563":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:2548:7312":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"24:5338:2333":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"1:4195:10352":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:12496:6749":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"18:491:9312":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:14282:7214":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:9350:6469":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:5509:6128":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:6015:225":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:8909:9218":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:21058:10467":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"24:4828:3310":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"24:5187:2335":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"16:7006:22420":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:4862:7376":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:4016:10327":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"24:4900:3326":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"1:3994:10325":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"24:3832:3660":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"1:3763:10318":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:9921:22531":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:7597:35347":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:5866:9397":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"24:3270:3650":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"2:40304:3480":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:44537:9684":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"11:357:6101":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"24:5488:3366":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"8:0:3140":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:11390:9713":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:11761:6586":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:641:10177":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:4406:8055":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:12911:6830":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:5375:15599":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"13:226:7676":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"5:2051:10194":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:40342:3468":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:10685:22600":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:13215:6877":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"24:3321:3652":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"17:9531:35400":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:9102:6462":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"11:1051:21472":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:41919:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"11:680:3384":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"7:78:21387":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"11:1127:21474":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:7953:10010":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:41692:4663":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:40272:3477":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:4166:6128":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:4669:8145":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"23:46:3409":{"crate_id":23,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"2:2629:133":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:588:7828":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:14401:7249":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"14:202:2385":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:4968:8295":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:2604:10009":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:5727:9383":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"11:2303:21478":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:13868:7091":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:5660:6188":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:6818:9478":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:13739:7061":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"23:38:3019":{"crate_id":23,"path":["quote","format_ident"],"kind":"macro"},"16:2670:7317":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"21:1196:213":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"17:11173:22672":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:629:9997":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"5:1494:10092":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:11151:22671":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:4501:8100":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:5088:7383":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"24:5010:2579":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"1:8183:9191":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:11205:29250":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:7884:22428":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:4362:3540":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"21:1020:3560":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"6:1703:7964":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:6206:3469":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"24:1402:2026":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"11:1687:151":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:7480:160":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:12959:6835":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:2929:133":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"11:2334:3384":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"21:140:4773":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"2:47996:9143":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:149:6098":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"24:5380:1937":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"24:4880:3322":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"16:6742:9464":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:45694:9037":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:13148:6870":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:22639:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:9994:6163":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:4728:10384":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"20:821:1942":{"crate_id":20,"path":["proc_macro2","imp","Group"],"kind":"enum"},"5:4761:718":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"5:7285:3379":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:40035:9591":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:39927:9585":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:4847:8227":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"18:609:35427":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:9223:30486":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"6:4877:8242":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:41295:165":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:7566:10014":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"11:122:5948":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"24:3958:3668":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"17:12934:6831":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:10186:9333":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"16:7284:3950":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:4838:8221":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:8050:3282":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:3514:3525":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:4949:7379":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"15:394:21512":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"16:5830:9391":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:943:10188":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:6261:10051":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:10084:22517":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:2909:4234":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"24:4361:3696":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"24:4492:3281":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"1:3201:29599":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:45540:9031":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:10265:22549":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:12070:1116":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:7885:10262":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:11124:22645":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"21:2504:3561":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"6:7520:8729":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:4734:8171":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:8263:10317":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"21:0:1142":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"17:12598:6764":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:43910:15634":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:1564:4739":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:2644:7316":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:4395:6128":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:2798:2482":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:41802:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"11:2487:7681":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:9795:9554":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:7907:9691":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"21:958:4779":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"6:1650:7936":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:22:731":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"6:6588:8571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:9015:111":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:10186:10267":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:11389:22498":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"24:5519:2507":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"24:5353:3351":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"1:9058:10101":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:2838:110":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:41615:168":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:11272:9360":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:10586:15613":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:12123:6656":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"24:4551:1971":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"6:4573:8138":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"24:5363:3354":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"17:11815:6593":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"20:797:9310":{"crate_id":20,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"2:2367:206":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:41501:9692":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:41352:10314":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:22241:8771":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:13802:7075":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"24:3202:3649":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"1:8031:30420":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:4643:8143":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:43648:9636":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:11851:6212":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:9896:22512":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:40252:3475":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:7128:9223":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:41768:3379":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:10978:10005":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:44273:9679":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:2321:7296":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:2744:7320":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:11137:22644":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:2927:231":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:9136:239":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:6499:7348":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:7601:8746":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:42556:9005":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:7782:9502":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:7255:3443":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:8195:9514":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"24:3083:3646":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"20:900:1942":{"crate_id":20,"path":["proc_macro2","Group"],"kind":"struct"},"1:12083:793":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:12293:6699":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:7589:4738":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"18:548:148":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"24:4806:3305":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"9:330:7721":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:1752:8760":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"5:1484:10185":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:8269:10316":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:40162:6152":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:22324:9574":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"5:5860:4739":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:12067:450":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"24:4849:3315":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"1:4078:10333":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"24:4896:3325":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"16:6721:22417":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:5435:7387":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:5798:7390":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"9:357:21409":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"24:3100:3540":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"2:40761:3442":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:40212:3464":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:45817:9042":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:6665:6108":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:3764:7356":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:7677:215":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:13826:7077":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:10570:10301":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:534:4525":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:4288:3532":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:1521:7847":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"5:2463:8754":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:7015:7453":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:4731:10357":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:5999:6188":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:13838:7080":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:12072:1474":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:30331:32171":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:12065:401":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:20903:32841":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:10009:9612":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"16:7067:9493":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:42075:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:2538:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:21056:10267":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:10949:22601":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:11235:9358":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:11337:22673":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:43379:3463":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:13816:7076":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:21106:32421":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:8895:22486":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:11191:6544":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:5667:9686":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:5049:7382":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:5056:8339":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:416:179":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:45664:9036":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:2855:6315":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:6222:10102":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:483:6174":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"24:4204:3685":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"11:1862:9525":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"14:31:9990":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"21:648:3563":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"2:2830:4297":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:21712:10476":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"5:7422:9542":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:7492:9496":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:31991:7680":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:10929:6532":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"14:215:9515":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:5696:22409":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:12689:143":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:7391:22422":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:2223:10247":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"18:699:9320":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"24:4250:3688":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"6:7614:8750":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:7544:9501":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:21359:10463":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:475:1943":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"21:2329:1954":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"24:5034:3335":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"2:40129:10232":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:2568:6176":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:29988:10321":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:5970:8479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:2544:138":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:7862:9503":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:4835:7375":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:3949:6128":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"20:788:257":{"crate_id":20,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"2:4436:3543":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:1840:4813":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:8879:9217":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"24:2930:3639":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"24:94:10267":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"1:6638:6193":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:9201:30451":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"6:4683:8146":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"20:121:35456":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"1:11628:9241":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:7935:3457":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"24:104:4370":{"crate_id":24,"path":["syn","token","CustomToken"],"kind":"trait"},"24:4064:3675":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"2:2943:6325":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:5760:22410":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:1761:4688":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"11:1562:21477":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:9328:2930":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:8154:22429":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"24:1335:35623":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"1:12082:797":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:11393:133":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:22903:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:4333:8009":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:9544:3529":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:46017:9055":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:1931:703":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"16:4557:7367":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"24:5305:2318":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"17:9780:22497":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:3244:259":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:6720:8624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:5994:8491":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:10292:6487":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:32139:4301":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:7689:4531":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"5:1466:9523":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:14033:7132":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:918:10092":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:4913:8263":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:4859:8231":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:12810:6794":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"24:845:6309":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"16:7318:7475":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:13162:6871":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"24:4862:2297":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"2:39921:9584":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:5030:8322":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:2255:100":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:2535:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"11:2074:10191":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"24:2556:3624":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"2:46385:9066":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"24:4832:3311":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"18:515:6346":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"23:407:4112":{"crate_id":23,"path":["quote","__private","RepInterp"],"kind":"struct"},"1:4339:10355":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:21379:8762":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:62:16010":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:39294:3428":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:12621:6769":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"9:450:21394":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"21:2750:2345":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"17:12452:6740":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:22672:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:4978:8301":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"24:3117:233":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"2:43496:9626":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:11586:6575":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:863:3379":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"24:2794:1967":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"2:40414:3471":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:13567:7009":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"24:886:35580":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"15:288:21502":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"5:1304:9996":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:2962:34933":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:22206:9572":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:12131:15619":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:1568:4737":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:13723:7058":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"23:239:4233":{"crate_id":23,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"1:5156:208":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:2368:10250":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:11788:6587":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:4641:7370":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:9106:9226":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"5:5790:256":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:41880:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"5:7251:4739":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:39272:221":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"24:4035:3673":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"2:3249:140":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"11:344:35325":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"23:148:3974":{"crate_id":23,"path":["quote","__private","HasIterator"],"kind":"struct"},"1:358:4540":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"24:4296:3691":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"2:44125:9665":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:589:10173":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:7452:9545":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:11281:6546":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:6485:7331":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:5982:9408":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:9165:9227":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"5:7231:3379":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:3240:1991":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:2325:205":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:2499:15669":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:8895:10434":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:5963:22411":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:6030:8505":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:42846:152":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:3532:10265":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:14335:7232":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:12888:6821":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:2894:6179":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"24:4262:3689":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"24:4308:3692":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"5:1104:35237":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"24:4884:2222":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"2:43809:9646":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"24:1948:3379":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"6:4815:8213":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:1537:7855":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:955:10190":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:12080:795":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:5982:8484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"24:843:10267":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"2:47387:9124":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:1507:7842":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:10726:22637":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:5752:8352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:10982:7741":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:2907:7327":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"24:2573:3625":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"5:7503:9549":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:9218:32390":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:14478:7271":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"11:822:10186":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:3565:22621":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"24:3866:3662":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"24:127:1942":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"2:2783:3566":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:9959:22520":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:9207:6465":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:4004:4739":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"24:4093:3677":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"2:2551:262":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:9184:9700":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:9617:35406":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:12658:6773":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:10788:22639":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:42330:3528":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:10440:22594":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:9790:15674":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:11488:6209":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:43304:9560":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"24:3338:3653":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"24:4461:3840":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"17:12970:6836":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:4279:226":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"21:107:4770":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"5:4848:222":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:41524:9000":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"24:5055:2612":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"2:2833:3567":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:40754:9607":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"6:7590:8745":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:8978:22489":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:39067:15645":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:10616:9345":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"16:6696:7427":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:8227:3474":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:2836:1980":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:46701:9086":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"24:2658:102":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"5:1290:10191":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:2366:4665":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:30835:4313":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:46619:9085":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:10397:22592":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:5661:9378":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:10616:4530":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"5:7222:4652":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"10:44:7684":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:7792:22427":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:8903:3379":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:2284:21522":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:10059:6483":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:1734:7976":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:2380:7305":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"18:690:9319":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:6268:35373":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:6318:7400":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:13554:7002":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:40016:9590":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:2504:7310":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"11:2317:3380":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:7627:173":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:2881:7326":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:5844:8405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:12531:6753":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:4066:10330":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:42036:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:14448:7263":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:12184:6669":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:5743:9385":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"24:2777:3632":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"1:2582:6163":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:11490:6572":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:1501:7839":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"11:2467:7677":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:3255:15647":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:3041:3568":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:4196:6128":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:22182:8766":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:10800:9703":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"24:599:3379":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"17:2150:22581":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"11:2058:9495":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"24:4011:3671":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"2:9031:82":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:42155:95":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"5:5327:6108":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:3315:7353":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:11154:15609":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:2722:7319":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:10420:6338":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:12106:3780":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:10468:6495":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:9517:6202":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:1573:9525":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:2876:3424":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"14:221:7629":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:6983:6148":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:11407:22499":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:4663:8610":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"24:4908:3328":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"17:11710:6547":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:10771:6500":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:8257:9643":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:2810:7323":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:6017:22412":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:45765:9040":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:2450:7308":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:10750:6498":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:9574:35416":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:5820:8396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"24:2041:3386":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"2:12332:116":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:6865:8704":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:12876:6819":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:1570:7878":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"5:4076:3384":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"4:0:3139":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:44456:232":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"5:3596:3384":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:1924:10227":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:48035:9144":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:43076:9623":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:9146:156":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"24:3219:258":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"2:20905:32843":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:39948:32162":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"21:2771:1954":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"24:54:2030":{"crate_id":24,"path":["syn","token"],"kind":"module"},"2:4068:4644":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"24:5152:3345":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"2:6212:9552":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:40313:3481":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:4352:3539":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:563:7815":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:40262:3476":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"24:4023:3672":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"17:13778:7070":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:32027:2110":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:42829:9619":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:9455:35403":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"24:2034:3384":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"17:9852:22510":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"24:918:3338":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"16:4585:7368":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:43253:32209":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:14126:7157":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:12896:111":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"5:7377:3434":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:42837:9620":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:10097:22516":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:4561:8129":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"24:552:5656":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"24:2624:3628":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"16:2864:7325":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"24:4865:3318":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"17:10520:9338":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:8996:9222":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:7478:6135":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:39153:9582":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:2925:3695":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:6571:10426":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"5:261:6108":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:533:7798":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:47245:9123":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:12225:6679":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"11:2165:9528":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:6037:8506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:1013:6108":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:4416:3542":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"24:3151:3648":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"24:1598:3502":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"1:5808:10098":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:8318:9693":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"24:4520:3284":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"1:3276:10304":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:4655:8144":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:13851:7086":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:4441:8072":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"24:2522:3702":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"16:6189:9438":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:1549:6128":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:6243:1984":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:4400:8052":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:41701:210":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:40008:9584":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:2541:157":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"5:7239:9541":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"24:5461:3359":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"24:4498:2155":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"24:5039:2508":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"16:6386:7402":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"24:4837:3312":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"6:6735:8629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"24:1965:3380":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"24:2913:3638":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"24:4574:2171":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"2:43544:9559":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:12092:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:12087:1611":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"24:4134:3680":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"24:5480:3364":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"1:12085:1609":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:8825:22484":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:5627:3467":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"24:5299:207":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"5:1413:3380":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:8167:22430":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:6513:9449":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:44053:9659":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"5:3214:9525":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"24:4932:3334":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"17:14514:7275":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:12078:692":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:39106:4646":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"6:4775:8193":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:11325:6207":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:11023:6537":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:1912:17412":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:10278:22548":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"14:0:3145":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:7932:3455":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:5814:8395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"24:5478:3363":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"6:4523:8113":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"24:4912:3329":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"6:4900:8253":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:11213:9024":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"6:7287:8714":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:10548:9559":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:5653:225":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:44026:9658":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"3:0:475":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:4709:8160":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:6467:4739":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"21:2270:1942":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"6:596:7833":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:11261:9359":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:9036:89":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:11306:6547":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:9660:35396":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:30273:32170":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:7708:7347":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"24:5017:3336":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"2:4822:33576":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"24:2981:2639":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"17:12098:6653":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:2133:4520":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:44265:9677":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:853:3384":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:9372:6470":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:4769:8190":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:44269:9678":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:9051:22466":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"23:344:1195":{"crate_id":23,"path":["quote","quote"],"kind":"macro"},"6:5790:8379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"11:829:10187":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:10805:9690":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:44507:9027":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:840:3380":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:13966:7115":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:2339:7298":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:6753:9465":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:7523:9500":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:4168:3552":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:10193:2326":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"20:771:3401":{"crate_id":20,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"11:703:10092":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"24:5102:2031":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"2:44281:9024":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:10112:22539":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:40544:3488":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:11351:6551":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"21:433:6096":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"2:8607:3953":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:8765:22482":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:2409:3154":{"crate_id":1,"path":["std","io"],"kind":"module"},"24:4373:3697":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"23:504:4227":{"crate_id":23,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"6:4786:8201":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:7054:9490":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"24:5476:3362":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"1:8973:10433":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:10714:22636":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:20922:32844":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:41640:3379":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"24:1618:1796":{"crate_id":24,"path":["syn","parse_macro_input"],"kind":"macro"},"17:13710:7053":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"24:4525:1968":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"24:4802:3304":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"17:14001:7124":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:0:3148":{"crate_id":17,"path":["object"],"kind":"module"},"16:2574:7313":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:880:6116":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:5073:8343":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:2961:2197":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"14:40:1954":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"24:3185:1969":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"24:3970:3669":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"5:2692:8757":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:12208:6671":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:9945:6479":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"11:324:9521":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:4236:3380":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:43414:15612":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"24:3015:3642":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"17:14522:7278":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"15:327:10068":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:10368:3384":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:41564:198":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"24:344:35571":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"16:6361:9441":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:913:10185":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:3654:3379":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"21:183:4390":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"17:13071:6850":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:6968:22419":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"18:727:6365":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:9534:116":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"7:31:21380":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"11:101:9517":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:4987:6128":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:8337:10317":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:45564:9032":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:8367:8599":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:1691:7960":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:22705:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:39520:26783":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:3023:3549":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"14:160:9990":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"9:393:21395":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:8851:9215":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:4137:3551":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:12038:10183":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:43694:9639":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"24:5066:3015":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"1:4667:8614":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:11872:6605":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:7764:4805":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:42596:7523":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:10641:9636":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:41752:3380":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:10776:10386":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"24:3895:3664":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"24:5069:2089":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"2:40281:3478":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:12091:1215":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:9051:30447":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:4187:10351":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"20:946:1954":{"crate_id":20,"path":["proc_macro2","Ident"],"kind":"struct"},"6:4700:8155":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:7271:35229":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:7478:8728":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"11:2473:7678":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:6835:8689":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:4621:8141":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"24:4349:3695":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"17:13792:7074":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:43322:15607":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:884:9524":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:21458:10267":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:5915:8442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:11617:6576":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"11:2286:10192":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:10646:6560":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:7621:22425":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:6190:6187":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"11:1072:35334":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:6352:9440":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:4296:7982":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:7489:3460":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:45965:9053":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:3401:3448":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:6580:8566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:558:4527":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"24:5005:2620":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"17:12997:6839":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:11417:9715":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:308:1558":{"crate_id":1,"path":["std","thread"],"kind":"module"},"17:13758:7062":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:3234:10301":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:6797:4743":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"11:1010:10191":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:12062:6646":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"24:894:35582":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"2:45734:9039":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:12077:690":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:10655:15615":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:47894:9137":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:12945:6833":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:14042:7133":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:21482:10267":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:1259:9495":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:3073:2564":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"23:281:2031":{"crate_id":23,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"2:44261:9676":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"15:0:3146":{"crate_id":15,"path":["addr2line"],"kind":"module"},"20:708:3560":{"crate_id":20,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"20:118:9308":{"crate_id":20,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"2:4:1079":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:2931:6323":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:5079:8345":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"18:574:6343":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:13085:6852":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"24:2229:10267":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"6:4759:8184":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:780:99":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"22:0:3269":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"21:2592:3561":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"1:8513:9209":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:2618:7315":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:43512:2930":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:7776:10217":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:21804:8764":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:7736:7501":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:10430:22593":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"24:4916:3330":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"2:7195:3441":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"11:1092:21473":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:10627:9635":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"18:644:6343":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:6672:238":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:1444:3379":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:9488:3525":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:42566:69":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:4943:8284":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:11098:22647":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:14156:7163":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:4540:8121":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"}},"external_crates":{"23":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.33/"},"20":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.69/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.12/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.38/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}