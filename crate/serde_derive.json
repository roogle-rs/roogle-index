{"root":"0:0:1670","crate_version":"1.0.159","includes_private":false,"index":{"2:12005:35764":{"id":"2:12005:35764","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:14124"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11982:35757":{"id":"2:11982:35757","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12015:4412":{"id":"2:12015:4412","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5353:36414":{"id":"5:5353:36414","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1840","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6979:4427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1840","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6979:4427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12019:3370":{"id":"2:12019:3370","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4542:3370"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:42942:3371","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11986:35759":{"id":"2:11986:35759","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12017:35766":{"id":"2:12017:35766","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4541:35766"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:42933:8135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11939:4086":{"id":"2:11939:4086","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:40639:176","prim@char":"1:11864:410","self::pattern":"2:11595:14124"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11910:29213":{"id":"2:11910:29213","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5371:2300":{"id":"5:5371:2300","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12015:4412"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12002:35763":{"id":"2:12002:35763","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:14124"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11973:35754":{"id":"2:11973:35754","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11595:14124","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::matches":"2:11970:3061"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:42856:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11921:32659":{"id":"2:11921:32659","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11922:32688"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:42908:8190","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12011:1863":{"id":"2:12011:1863","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11557:126","`FromStr`":"2:11556:3236"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11556:3236","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11556:3236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5354:2020":{"id":"5:5354:2020","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7228:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11915:35748":{"id":"2:11915:35748","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11870:1374","crate::ops::IndexMut":"2:3020:3219","str::slice_unchecked":"2:11914:35747"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11916:29237":{"id":"2:11916:29237","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11917:29238"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:323-0:952:1773":{"id":"0:323-0:952:1773","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[5,0],"end":[5,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:952:1773","glob":false}},"2:11923:31965":{"id":"2:11923:31965","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:42888:8188","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11926:1920":{"id":"2:11926:1920","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:14124"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11999:29257":{"id":"2:11999:29257","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:14124"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11895:1990":{"id":"2:11895:1990","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11989:35761":{"id":"2:11989:35761","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:981:1870":{"id":"0:981:1870","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}},"5:5360:36416":{"id":"5:5360:36416","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7228:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5368:36417":{"id":"5:5368:36417","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7228:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11905:29215":{"id":"2:11905:29215","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11881:1470"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11918:2309":{"id":"2:11918:2309","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11864:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:42604:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11919:2303":{"id":"2:11919:2303","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11864:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:42610:8172","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11904:310":{"id":"2:11904:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11905:29215","`u8`":"1:11881:1470"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11952:35750":{"id":"2:11952:35750","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11595:14124","str::split":"2:11943:29245","prim@char":"1:11864:410","`DoubleEndedIterator`":"2:7203:120","str::rsplit_terminator":"2:11955:35751"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:42684:8177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12020:35767":{"id":"2:12020:35767","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4539:35767"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:42951:8129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11894:799":{"id":"2:11894:799","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11864:410"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11988:35760":{"id":"2:11988:35760","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:62:341":{"id":"0:62:341","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1796,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:84-0:956:1867"],"is_stripped":false}},"2:11990:35762":{"id":"2:11990:35762","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:14124"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11620:14120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11967:35753":{"id":"2:11967:35753","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11979:35756":{"id":"2:11979:35756","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11595:14124","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::match_indices":"2:11976:35755"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:42802:8184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:928:1664":{"id":"0:928:1664","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[100,0],"end":[105,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"5:5357:36415":{"id":"5:5357:36415","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7228:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11970:3061":{"id":"2:11970:3061","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11595:14124","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::matches":"2:11970:3061"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:42838:8186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11958:29251":{"id":"2:11958:29251","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:14124","str::rsplitn":"2:11961:29253"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:42738:8180","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11899:35745":{"id":"2:11899:35745","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11897:35744"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11925:32652":{"id":"2:11925:32652","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:42926:8192","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5370:3264":{"id":"5:5370:3264","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7228:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11984:35758":{"id":"2:11984:35758","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11908:29212":{"id":"2:11908:29212","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:40639:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:372-0:348:1774":{"id":"0:372-0:348:1774","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[8,0],"end":[8,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:348:1774","glob":false}},"2:11935:2528":{"id":"2:11935:2528","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:40639:176","prim@char":"1:11864:410","self::pattern":"2:11595:14124"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11949:29249":{"id":"2:11949:29249","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11595:14124","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::split":"2:11943:29245"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:42652:8100","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:84-0:956:1867":{"id":"0:84-0:956:1867","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[22,0],"end":[22,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"internals::case::RenameRule","name":"RenameRule","id":"0:956:1867","glob":false}},"2:11896:35743":{"id":"2:11896:35743","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11897:35744":{"id":"2:11897:35744","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11917:29238":{"id":"2:11917:29238","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11916:29237"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11920:8089":{"id":"2:11920:8089","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:42620:2732","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11924:35749":{"id":"2:11924:35749","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:42898:8189","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11961:29253":{"id":"2:11961:29253","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11864:410","str::splitn":"2:11958:29251","self::pattern":"2:11595:14124"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:42756:8181","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11964:35752":{"id":"2:11964:35752","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12014:4411":{"id":"2:12014:4411","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11955:35751":{"id":"2:11955:35751","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11595:14124","str::split":"2:11943:29245","prim@char":"1:11864:410","str::split_terminator":"2:11952:35750"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:42702:8178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1670":{"id":"0:0:1670","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[110,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2018\n# use serde_derive::{Serialize, Deserialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.159\")]","#![allow(unknown_lints, bare_trait_objects)]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: derive_partial_eq_without_eq, clippy ::\nenum_variant_names, clippy :: manual_map, clippy :: match_like_matches_macro,\nclippy :: needless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: let_underscore_untyped, clippy ::\nmanual_assert, clippy :: map_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:927:1655","0:928:1664"],"is_stripped":false}},"2:11914:35747":{"id":"2:11914:35747","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11870:1374","str::slice_mut_unchecked":"2:11915:35748","crate::ops::Index":"2:3016:2259"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11993:1902":{"id":"2:11993:1902","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:14124"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11903:35746":{"id":"2:11903:35746","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5369:36418":{"id":"5:5369:36418","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:286:1840","`String`":"5:7228:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1840","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6979:4427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12008:35765":{"id":"2:12008:35765","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:14124"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11932:29256":{"id":"2:11932:29256","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:14124"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11902:2719":{"id":"2:11902:2719","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11163:14125"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11946:29247":{"id":"2:11946:29247","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:14124"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11419:8099","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11893":{"id":"2:11893","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:11158:1374","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11894:799","2:11895:1990","2:11896:35743","2:11897:35744","2:11899:35745","2:11902:2719","2:11903:35746","2:11904:310","2:11905:29215","2:11906:1883","2:11908:29212","2:11910:29213","2:11912:29214","2:11914:35747","2:11915:35748","2:11916:29237","2:11917:29238","2:11918:2309","2:11919:2303","2:11920:8089","2:11921:32659","2:11922:32688","2:11923:31965","2:11924:35749","2:11925:32652","2:11926:1920","2:11929:29255","2:11932:29256","2:11935:2528","2:11939:4086","2:11943:29245","2:11946:29247","2:11949:29249","2:11952:35750","2:11955:35751","2:11958:29251","2:11961:29253","2:11964:35752","2:11967:35753","2:11970:3061","2:11973:35754","2:11976:35755","2:11979:35756","2:11982:35757","2:11984:35758","2:11986:35759","2:11988:35760","2:11989:35761","2:11990:35762","2:11993:1902","2:11996:26285","2:11999:29257","2:12002:35763","2:12005:35764","2:12008:35765","2:12011:1863","2:12013:4410","2:12014:4411","2:12015:4412","2:12016:4413","2:12017:35766","2:12019:3370","2:12020:35767"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12016:4413":{"id":"2:12016:4413","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:8:1771":{"id":"0:8:1771","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[202,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":false}},"2:11922:32688":{"id":"2:11922:32688","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11921:32659"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:42917:8191","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11976:35755":{"id":"2:11976:35755","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11595:14124","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::rmatch_indices":"2:11979:35756"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:42784:8183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12013:4410":{"id":"2:12013:4410","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11929:29255":{"id":"2:11929:29255","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:14124"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5352":{"id":"5:5352","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5263:1374","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5353:36414","5:5354:2020","5:5357:36415","5:5360:36416","5:5368:36417","5:5369:36418","5:5370:3264","5:5371:2300","5:5372:2299"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11996:26285":{"id":"2:11996:26285","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:14124"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11912:29214":{"id":"2:11912:29214","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:927:1655":{"id":"0:927:1655","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[92,0],"end":[97,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"2:11906:1883":{"id":"2:11906:1883","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:40639:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11943:29245":{"id":"2:11943:29245","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11595:14124","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::split_whitespace":"2:11921:32659","str::rsplit":"2:11949:29249"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:42634:8097","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5372:2299":{"id":"5:5372:2299","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12016:4413"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"1:2573:8651":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"12:1120:20008":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:10824:8647":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"24:877:36931":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"16:2389:5975":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:10202:8180":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:8926:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"12:762:4513":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:8234:8894":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:6178:4881":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:5495:8950":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"24:4937:61":{"crate_id":24,"path":["syn","expr","parsing","raw"],"kind":"struct"},"17:9820:21141":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"21:183:4156":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"2:29983:4258":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:3204:14161":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:6316:7999":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"14:215:8057":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:42933:8135":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:10704:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:41074:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:8168:8188":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:4520:6816":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"9:920:19855":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:39951:3267":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:9084:111":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"16:7093:6141":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"22:915:2173":{"crate_id":22,"path":["proc_macro2","Punct"],"kind":"struct"},"6:5902:7164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:43603:8394":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:46349:7679":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:20479:32800":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:45074:7617":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"24:917:3168":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"2:39667:3302":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:22141:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:22240:4184":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"24:4576:2125":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"16:6676:6006":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:9627:21065":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:12485:5561":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:4426:8898":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:42421:8102":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:39511:3282":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:46606:7689":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:8494:5144":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:3352:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"21:2022:4541":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"6:7446:7407":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:5690:7050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:6842:8035":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:41417:3368":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:11620:14120":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:499:6451":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:44252:7583":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:5878:20047":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:12164:5521":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:10011:8099":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:40575:8160":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"24:5328:3184":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"2:7203:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:4606:6042":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:11005:7769":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:6322:31037":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:11835:8724":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:4268:3339":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"9:676:19861":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:39913:3259":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:22075:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"16:7211:6159":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:5843:7131":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"22:802:1857":{"crate_id":22,"path":["proc_macro2","imp","Span"],"kind":"enum"},"17:1931:21055":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:48552:9049":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:1847:4598":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:40914:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"24:4879:3153":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"5:2928:3424":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:6298:7991":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:7704:8647":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:6719:36612":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:38992:33285":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"6:6548:7273":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:4696:657":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:4263:3338":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:5780:7952":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"24:1736:8662":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"6:4618:6825":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:2255:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"24:2210:2463":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"17:11217:5330":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:8089:3258":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:1527:6521":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:2869:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"22:895:3229":{"crate_id":22,"path":["proc_macro2","Delimiter"],"kind":"enum"},"1:956:8731":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"24:2751:3412":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"16:4817:6049":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:10625:5250":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"12:1029:8734":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:3626:4803":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:3159:8837":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"24:5279:2149":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"2:12177:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"5:6740:4847":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:36:4428":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:22108:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:10394:7903":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:4795:783":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:8424:7763":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:11884:1469":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:2835:5020":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:9118:36678":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:7211:8090":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"5:6421:4803":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:4568:7288":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"24:3023:3424":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"17:9283:21048":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"24:5028:2433":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"2:44584:7597":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:21793:8115":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:870:3209":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:8185:8848":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:46551:7684":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:11330:5359":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"24:5438:3191":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"17:10845:5227":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:9873:21143":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"20:281:1866":{"crate_id":20,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"14:221:6294":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:5378:8947":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:4743:6890":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:4727:4879":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:1436:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"24:5472:3185":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"17:8951:36665":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:42450:14105":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"12:822:8729":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:4981:7013":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:41699:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:12860:5744":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:11734:5184":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"22:709:1857":{"crate_id":22,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:3167:8070":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:11684:5434":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:4457:6793":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:9339:21042":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:7473:1870":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"22:691:230":{"crate_id":22,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"6:5878:7152":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:5807:14529":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:6743:20941":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:41636:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:12022:5500":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:4583:6821":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:11203:7791":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"24:3823:3441":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"16:6330:6071":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:7980:20953":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:904:4515":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:12964:5769":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:5664:7941":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"21:2524:4544":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"17:12874:5745":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:2530:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:11074:7790":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"6:4697:6867":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:40994:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:12118:5514":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:8300:7751":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:6017:20936":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:6781:20942":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:11259:5335":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:1824:8753":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:39969:3271":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:20853:8877":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"16:7659:20950":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:6926:4895":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:2759:3388":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:9090:2252":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:5614:7934":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:39610:3298":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:8744:8948":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:4451:6790":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"24:5127:3170":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"17:8212:21005":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:1645:6600":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"18:531:7871":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:31737:6344":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:46632:7691":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:3963:8866":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:3675:3332":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:2261:20048":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:39392:8142":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:6472:6094":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:7123:3279":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:11821:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:2359:8794":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:43353:8217":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:11170:8953":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:42942:3371":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"21:2699:1858":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"2:43377:8223":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:5791:4835":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"24:869:36933":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"2:6546:2583":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:5839:20935":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:43568:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"20:407:3872":{"crate_id":20,"path":["quote","__private","RepInterp"],"kind":"struct"},"1:11885:1466":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:7832:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"24:5115:1994":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"6:586:6504":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:44777:7608":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"24:5322:2199":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"17:9751:7890":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:7557:8044":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:39961:3269":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:2093:4172":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"5:2205:8079":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"18:652:5041":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:10182:5216":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:7173:3277":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:9318:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:4218:6658":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:8014:2538":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:46655:7692":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:7440:7406":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:20671:9022":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:5948:3308":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:1429:8067":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:4769:32613":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"24:5318:3181":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"1:2613:8832":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:9263:21033":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:11556:3236":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:12387:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:13459:5918":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:30011:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"5:2185:36587":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:11666:14131":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:7282:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:5447:20930":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:3901:8862":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:2772:1819":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:10385:7902":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:42542:14110":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:10360:7894":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"24:3949:3449":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"24:2921:3420":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"21:1201:193":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"2:40469:7544":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:8941:21015":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"24:1953:3210":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"6:4775:6904":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:5060:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:4313:6721":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:11939:5484":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"24:151:1846":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"2:4016:33405":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"24:1601:3319":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"5:7250:8641":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"12:2184:6342":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:42802:8184":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:7498:7420":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:9691:21079":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:2320:5972":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:13366:5892":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:10123:8100":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:6594:7292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:8643:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:8871:21014":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"24:5450:2202":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"24:93:8877":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"2:39529:3291":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:3217:33046":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:9185:4598":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:11887:1523":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:10837:8949":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:38800:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:2891:5025":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"24:5453:3196":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"17:242:36662":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:6070:6063":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:473:1783":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:13594:5950":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"24:5313:2242":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"16:6123:5996":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:5815:20934":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:39206:32671":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"24:4299:3473":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"2:44875:7611":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:41933:8162":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:3016:2259":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:12510:4426":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:1645:4254":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:4328:6728":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:6730:3255":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"24:4883:3154":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"24:4439:2454":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"6:4353:6744":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"22:731:2461":{"crate_id":22,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"24:2632:1840":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"1:8148:3304":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:2874:5022":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:2749:5990":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:44477:7592":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:8137:21003":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"21:435:4787":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"1:860:3214":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:43069:8201":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:2487:5979":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:6698:7342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:8561:5147":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:41721:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"6:6611:7294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:45097:7618":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:10950:4905":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:44547:7595":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:10630:8924":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:13214:5832":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:6146:7983":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"24:1961:3212":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"1:4669:8876":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:8333:3686":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:8991:36677":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:12630:5674":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:4673:8880":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"18:521:24825":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:10894:5263":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:38926:3244":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"18:609:36690":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:3854:6029":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:11600:14121":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"12:2053:8037":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:3201:8840":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"24:2598:3408":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"2:38860:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:20684:8877":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:7797:8786":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"21:966:4555":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"5:2932:25439":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"24:673:36847":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"2:38985:2538":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"13:226:6341":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:11161:5318":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:925:8345":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:9234:33414":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"24:2717:115":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"17:11787:5447":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:43385:8225":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:5999:4884":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:22837:7459":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:10138:8952":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:4787:6908":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:11774:5446":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:42838:8186":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:3269:3354":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:46591:7688":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"12:1859:8069":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:4064:28494":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:11748:5443":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:4501:6815":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:45331:7637":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:2894:20073":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:9712:5174":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:11617:5421":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:11093:7781":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:10121:5213":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"24:2955:2163":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"2:9776:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:2652:7428":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:7475:7414":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"12:1845:4513":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"17:10296:21152":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:4369:6749":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:7708:1946":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"6:5741:7070":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:12514:5581":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:7847:6212":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:7357:6161":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:4910:6978":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:9063:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"5:1092:35425":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:4662:6848":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:39590:3297":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:7135:3251":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:11813:5451":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:8401:7565":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:5949:7977":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:4429:6777":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:11841:5455":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:8762:7769":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:4635:6043":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:11056:7782":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"24:1909:3208":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"20:10:3099":{"crate_id":20,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"6:1716:6640":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:8796:5154":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:4149:3357":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:8493:3210":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"21:2369:2461":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"2:10050:14107":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:6496:20939":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:6903:7777":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:9831:21142":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:3559:3214":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:7637:8045":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:11547:5412":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:2878:5023":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:5698:7052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"24:126:1782":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"14:160:8633":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:3670:8854":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:4637:6837":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:10139:5165":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:62:14555":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:1638:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:20608:9020":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"6:5772:7091":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:11137:5314":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:5759:7082":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:9250:21032":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:39681:3303":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:9644:21053":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:40637:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:0:487":{"crate_id":2,"path":["core"],"kind":"module"},"1:7792:4713":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:2798:5014":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"24:4776:3130":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"21:246:36777":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"2:11609:7880":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:7948:8359":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:2709:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:2815:5026":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:4564:7284":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:5990:7193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:46670:7693":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:43040:8193":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:6094:7233":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:6186:5998":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:2784:4065":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:9539:21056":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:914:4513":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"6:5752:7078":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:8441:21013":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"5:7041:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:11875:632":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"24:3903:3446":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"6:6053:7207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"24:2217:8877":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"17:13024:5784":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"5:7076:3209":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:3969:4803":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:1541:6526":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:2521:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:5722:7068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"24:3799:3439":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"2:2156:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:39489:3281":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"24:3397:244":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"2:42951:8129":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"5:3141:8069":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"9:188:8323":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"6:1663:6612":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:10257:21155":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"24:4381:3479":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"12:985:8037":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:1997:3332":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"24:4960:2198":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"24:2547:3405":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"2:4051:4419":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:9021:21017":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:12265:5541":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:8138:3290":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"24:2227:7836":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"1:5712:8354":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"20:272:1866":{"crate_id":20,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"5:5681:4515":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"24:4887:3155":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"6:5823:7115":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:10221:21176":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:487:6446":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:40755:3694":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"21:140:4564":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"2:44428:7590":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:5916:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:12148:5517":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:11893:5460":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"24:4067:3457":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"2:42487:3280":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:43550:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"16:4144:6030":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:4217:6031":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:962:4803":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"18:507:5041":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:594:6509":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:11871:1452":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"5:7003:4515":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"24:4832:3143":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"24:251:8631":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"6:4396:6761":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:4781:6905":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:20858:9013":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"24:901:36930":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"17:10583:21023":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"12:1518:20009":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"24:94:4141":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"22:111:36833":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"16:7396:20947":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"18:699:7878":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:1520:6518":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:8776:7770":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"5:4101:4829":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:6635:3289":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"5:7198:8087":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:2882:5021":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:41660:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"6:1704:6636":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:10997:1793":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"24:5445:3194":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"12:119:4791":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"24:4516:1807":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"5:217:4430":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:42756:8181":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:44945:7614":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"24:4828:3142":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"2:2831:5019":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:13158:5820":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:8638:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:8907:7776":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:44406:7589":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:8701:5151":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"24:5270:2146":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"5:4330:4829":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"24:3937:3448":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"6:481:6443":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"24:4815:3139":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"17:9885:21144":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:12926:5760":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:9108:21018":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:11830:8361":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:962:8732":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:3929:8865":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:3316:3265":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:2852:3993":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:5005:4835":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:1550:6531":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:920:8727":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:38976:7535":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"18:590:5048":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"24:4393:3480":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"24:4923:3164":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"16:2535:5981":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"24:4002:3452":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"2:39581:3296":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:355:4191":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:10796:5256":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:12176:5523":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:630:8640":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"12:1840:4515":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"22:865:230":{"crate_id":22,"path":["proc_macro2","TokenStream"],"kind":"struct"},"24:5463:3198":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"1:4893:3685":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:39520:3283":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:3010:20075":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:8272:21007":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"24:498:3220":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"2:12429:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"17:420:5105":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:6528:8970":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"24:2683:107":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"22:876:1858":{"crate_id":22,"path":["proc_macro2","TokenTree"],"kind":"enum"},"5:4011:3214":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:8967:31021":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"24:2802:3414":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"2:39549:3293":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:8979:1846":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:2702:3387":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"24:3091:3345":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"2:9766:8877":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:39920:8152":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:0:1366":{"crate_id":1,"path":["std"],"kind":"module"},"1:11037:7576":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"6:5805:7103":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:286:1840":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"21:2319:1793":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"16:5761:20933":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"19:0:1015":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"21:2719:3229":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"2:31773:1946":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:12046:5503":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:862:4811":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:13192:5827":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:3865:8861":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"12:393:36599":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:13221:5834":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:1021:21047":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"24:5475:3186":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"6:1677:6623":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:40697:3210":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:3126:31943":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:11468:7792":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"22:779:230":{"crate_id":22,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"2:39319:8137":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:22273:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:4733:6886":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:39289:14179":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"16:5235:6055":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:39702:3304":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:638:8719":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:11343:5363":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:6000:7196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:1771:599":{"crate_id":1,"path":["std","env"],"kind":"module"},"24:3346:3435":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"2:46685:7694":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:12190:14189":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"24:826:3318":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"1:7943:31011":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:4890:6971":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"24:336:3332":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"17:13279:5876":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:20886:7434":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:46571:7686":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"24:4955:1801":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"5:5161:4803":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:4841:6940":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:10684:7705":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"16:3026:5066":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:29763:8857":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"24:2768:3413":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"17:3249:21128":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:4805:6919":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"5:2103:8072":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:10422:8835":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:11419:8099":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"21:0:1059":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"2:43134:8203":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"24:5033:2436":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"16:5793:7913":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:2819:3240":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"24:3040:3425":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"5:4285:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:4498:8913":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"21:107:4557":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"17:11125:5311":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"24:1443:24848":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"20:164:3083":{"crate_id":20,"path":["quote","__private","ext"],"kind":"module"},"17:9553:5165":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"12:1003:8733":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:21545:8109":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"24:3108:209":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"16:7278:6010":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:2423:7425":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:2300:5966":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"24:4978:2441":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"1:1586:8069":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:4363:4831":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:40688:1841":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:5660:7025":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"12:632:3210":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:6210:7987":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:5890:7157":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:12816:5731":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:1398:3209":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:6634:7301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:4327:6034":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:4757:6895":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:7201:7391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:484:4873":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"24:4511:3115":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"1:11870:1374":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:10230:14114":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:4929:6986":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:4261:6686":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:1898:8648":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:6200:7986":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"12:1832:3210":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:21136:9017":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:10357:4902":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"21:369:4546":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"17:11436:5371":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:20645:9021":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"12:751:4515":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:4812:986":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"21:2608:3228":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"6:7173:7388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:11054:5299":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:42738:8180":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:779:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"21:406:36778":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"16:2930:20074":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:44376:7588":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"24:2887:3418":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"6:4379:6755":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:1849:8759":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"24:4819:3140":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"17:12307:5545":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"24:4014:3453":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"1:2476:8831":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:9909:5177":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:44232:7582":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:8987:7777":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"21:2603:230":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"12:2198:6345":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"24:4507:3114":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"2:20725:8877":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"24:1487:3222":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"5:2011:8736":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:10721:5253":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"24:5466:3199":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"2:9589:4866":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"20:45:3100":{"crate_id":20,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"2:41194:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:5313:8943":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:5347:8945":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:4346:6740":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:1731:6647":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:3114:3235":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:4414:3348":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"24:2870:3417":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"24:2080:2398":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"2:42461:7570":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"24:4241:3469":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"17:12748:5716":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:1065:8733":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"13:110:36603":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:40486:7546":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"16:5494:20931":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"24:5074:2126":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"6:7434:7405":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:38958:14214":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"21:53:4545":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:8351:7760":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"14:187:20023":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"22:762:3233":{"crate_id":22,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"2:4340:3345":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:1723:6643":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:6488:7240":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:41410:3367":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"24:1133:7831":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"24:5479:3187":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"2:39469:3280":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:4632:8897":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:11846:26286":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:13436:5917":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"22:0:1645":{"crate_id":22,"path":["proc_macro2"],"kind":"module"},"16:7543:6003":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"24:2904:3419":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"1:9068:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:41988:8167":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"18:599:5007":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:8820:7772":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:4952:6994":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:6827:4908":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"22:685:7862":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"17:247:36671":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:43653:4425":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:45043:7616":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:11017:7770":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"9:709:7565":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"24:4990:3166":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"2:31786:4061":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:4259:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:8806:33881":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:6728:7359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:42898:8189":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:8248:8853":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:12980:5773":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"24:3278:1830":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"17:8822:36681":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:6463:8005":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:40588:8235":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"24:1338:36852":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"17:9857:21123":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:39359:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:9165:36663":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:7953:8833":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"24:4934:2259":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"21:2739:2173":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"2:44921:7613":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"18:727:5063":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:4882:6966":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"18:624:36685":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:6059:7208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:6472:8653":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"22:830:2461":{"crate_id":22,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"2:41970:7565":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:3871:8860":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"5:5615:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:2714:2387":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"24:5012:2201":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"12:0:2956":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:8790:7771":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"24:2649:99":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"24:4142:3462":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"1:929:8346":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"24:4364:3478":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"2:20439:32455":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:9223:21031":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:5981:7980":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"3:0:434":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:5122:6053":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:5951:7183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:4559:6819":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:6268:4803":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:6270:5999":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:42430:14106":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:4749:6047":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:9092:7782":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"5:1479:8735":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:7428:7404":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:11511:8261":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:8852:8972":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:10403:5254":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"12:1534:20010":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:21814:8118":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:6735:20940":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:4689:6045":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:950:8730":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:10466:7906":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:4334:6731":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:6583:4521":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"16:2411:5976":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"24:5303:2161":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"16:6241:7989":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:12278:5542":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:3430:3364":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:9422:21041":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:8974:8357":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:4224:6659":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"22:108:7861":{"crate_id":22,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"2:38999:3345":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:3439:31405":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:39194:8126":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:4921:6052":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:2842:5994":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:9897:21145":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"12:777:4799":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"6:4877:6964":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:12087:5508":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:9328:21043":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"24:2734:3411":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"17:13557:5943":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"24:4871:3152":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"1:6576:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:11034:5298":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:3177:14213":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:7372:36611":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"9:863:19853":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:8278:7273":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:21764:32658":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:39691:3287":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"10:0:2954":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:8117:8806":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:7218:7402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"20:148:3716":{"crate_id":20,"path":["quote","__private","HasIterator"],"kind":"struct"},"24:4983:2400":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"2:41654:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"16:6161:20937":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"24:5159:3177":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"2:2868:3476":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:3939:4515":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:9738:7888":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:4094:8889":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"0:0:1670":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"24:4113:3460":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"12:669:8345":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:3198:14162":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:4751:6894":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"24:3261:3431":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"1:5327:8944":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:4671:8879":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:3959:4829":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"5:7019:36506":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:3238:8835":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:40849:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:8241:21006":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:13184:5826":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"11:0:2955":{"crate_id":11,"path":["adler"],"kind":"module"},"24:4483:3112":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"2:43361:8219":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:7622:4178":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:10233:21177":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"9:649:19874":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"17:9671:21072":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:6628:7299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:3605:8851":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:6829:8032":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"24:4410:3481":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"17:13203:5831":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:5703:7943":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:40552:32646":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:4750:8875":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:3051:8842":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:12134:5515":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:1438:8727":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:11235:5331":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:12739:5715":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"5:5205:14097":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:0:804":{"crate_id":6,"path":["libc"],"kind":"module"},"24:3840:3442":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"1:4246:8893":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:7849:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:2840:3461":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:8475:20989":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:3915:8863":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:10659:8233":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:1762:4463":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:9557:4861":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:6530:7264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:7552:3272":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:5563:4882":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:5679:8963":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:40611:7553":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:5813:7108":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:13572:5944":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"12:815:8728":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"22:699:3379":{"crate_id":22,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"16:6252:7990":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:2957:2195":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:1559:6537":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:5492:7194":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:21305:32453":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"3:223:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:43560:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:7567:20949":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:5716:7065":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:7483:6015":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:6284:6016":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:5472:6001":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:21141:9040":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:11909:5465":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:6359:3261":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:7596:33882":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:38904:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:13134:5815":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:8441:8934":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"21:1071:1857":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"1:8814:3209":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:8274:8922":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:5959:7185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"18:636:5059":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:10209:8947":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"24:5458:3197":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"1:8240:8886":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:5967:7187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:6879:3258":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:42620:2732":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"24:5469:3200":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"2:46411:7680":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:5554:3284":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:2793:5013":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:45491:7639":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:10708:7910":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:11880:729":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:2857:5005":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"24:3312:3433":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"12:861:8732":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:39936:3263":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"24:3057:3426":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"6:4489:6806":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:4649:6844":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:6079:7222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:1568:3209":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:561:6491":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:12797:5730":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:39599:3307":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:13141:5816":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:11889:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:4611:6823":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:12948:5766":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:42173:7569":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:20477:32797":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:11300:5347":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:9088:3358":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"5:6979:4427":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:10729:14108":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"20:0:1088":{"crate_id":20,"path":["quote"],"kind":"module"},"24:5125:3174":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"24:4542:1810":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"5:1072:35381":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"24:1533:2741":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"16:5203:5144":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:11247:5334":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:1571:6546":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:10332:21180":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:782:4806":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:43624:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:5737:7949":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:9631:21054":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"5:2921:2031":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:46560:7685":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:11864:410":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"5:677:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:21727:32681":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:7497:6005":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:39539:3292":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:1989:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:525:6471":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:1575:4513":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:2366:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:12291:5543":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:3973:8867":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:44853:7610":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:13340:5883":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:8323:14121":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"20:239:3992":{"crate_id":20,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"12:1852:8068":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:2252:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:7584:8877":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"24:4853:2127":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"1:8884:8974":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:5556:4881":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:361:4192":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:21399:8877":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:10497:21182":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:553:6486":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:4330:3344":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:12972:5771":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"5:4884:4829":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:9947:21146":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:5219:5145":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"21:2573:7868":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"1:8096:7745":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"24:3782:3438":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"24:3961:3450":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"6:1583:6554":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"24:555:5003":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"5:7305:4513":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"22:719:1782":{"crate_id":22,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"12:300:8063":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"24:4125:3461":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"1:2361:8795":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:41949:8165":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"22:921:1856":{"crate_id":22,"path":["proc_macro2","Spacing"],"kind":"enum"},"12:646:3214":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:8510:8240":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"12:2205:3250":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:39283:3371":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"23:0:3082":{"crate_id":23,"path":["unicode_ident"],"kind":"module"},"24:3074:3427":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"1:11877:731":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:540:6480":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:4171:3210":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:9086:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:7555:3274":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:9061:5165":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:11368:5367":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:4361:6746":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"18:80:24810":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:9371:21018":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:6123:8358":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:939:8729":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:39498:3290":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:413:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"5:1420:8066":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:20727:9014":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:38785:8123":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"15:214:8313":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:531:6474":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:9475:21059":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:967:21045":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:41980:8166":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:7267:8038":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:5996:8299":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:891:8067":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:11147:4906":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"16:2557:5982":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:4871:6961":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:2868:5995":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"24:4253:3470":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"17:10642:21024":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:9943:3214":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"24:2700:3410":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"1:1083:8639":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"12:1138:8639":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:534:7912":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:1747:6652":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"24:1491:3321":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"2:45255:7635":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"24:4793:3134":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"6:4301:6719":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:10416:8837":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:22339:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:12768:5722":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"24:4927:1816":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"17:10490:5231":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:879:3210":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:5163:6054":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:38816:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"5:3744:4513":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"6:4766:6898":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"21:2663:1857":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"16:7249:20945":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:2539:4875":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:40874:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:41396:2252":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:11288:5344":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:22306:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:7601:4176":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:123:14610":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:6571:7291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:5549:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:10854:21026":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:39376:32668":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:9387:4901":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:39558:3294":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:4828:6930":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"24:4549:1647":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"16:3716:6028":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:10694:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:2788:3239":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:7541:4899":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:8162:21004":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:7435:6165":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:21748:32667":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:1074:8734":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:4849:6050":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"24:4478:3113":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"17:10270:21154":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:5900:4881":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:9700:21078":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:12103:5510":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:7288:8041":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:4:998":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:12674:5705":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"22:942:2461":{"crate_id":22,"path":["proc_macro2","Literal"],"kind":"struct"},"17:11070:5303":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:7135:36630":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:7872:8049":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:8339:21009":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:7166:20944":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"18:614:36687":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:4357:6035":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:21710:7445":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:8752:2732":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:8798:3210":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:11315:5353":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"24:4891:3156":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"17:0:2960":{"crate_id":17,"path":["object"],"kind":"module"},"24:4772:3129":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"17:8666:5150":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:8110:20988":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:588:2265":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:8056:8803":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:12337:5227":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"24:4270:3471":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"21:1396:1870":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"17:12609:5664":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:40832:3214":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:21293:7436":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:9501:5159":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:11708:5435":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:1367:3210":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:13536:5940":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:11327:4910":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:9681:5039":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:8868:8973":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:2329:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:11853:5456":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"24:5337:3183":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"18:707:7880":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:5755:4883":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:2803:5015":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:6790:6119":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:38699:14160":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:6573:4520":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:42917:8191":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:5541:7929":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:12695:5710":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:7319:8043":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:48935:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"24:4565:2000":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"24:3380:3437":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"12:274:8060":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:10672:8252":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"24:893:36928":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"12:353:4795":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"18:491:7870":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:2706:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"21:2677:3378":{"crate_id":21,"path":["proc_macro","LineColumn"],"kind":"struct"},"6:4389:6758":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:11500:5400":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:40623:7554":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"22:793:36830":{"crate_id":22,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"6:6496:7245":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:11486:7793":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:39326:14180":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:12322:5549":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:10245:21178":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:39236:8127":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:2933:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:38840:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:1244:8733":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:5786:7101":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:3293:4513":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:21619:7439":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"9:592:19872":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"17:12361:5559":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:2823:5017":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:1710:6639":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:2695:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"24:1448:24849":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"2:39246:8128":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"12:1085:20007":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:4307:6720":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:10774:5223":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:4574:6041":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:1564:3210":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"12:2080:8734":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:9119:26835":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"2:20411:4069":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:12836:5739":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:5628:7935":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:4519:6039":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"21:2616:3209":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"17:13492:5925":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:1674:1071":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:39364:8141":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:9358:8096":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:13527:5938":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:119:14609":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"21:1028:3379":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"17:13082:5798":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:12237:5537":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:2916:21109":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:10310:21179":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:3566:6024":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:40954:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"24:4860:3149":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"24:5007:3165":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"24:609:3210":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"6:4628:6832":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"24:4784:3132":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"24:53:1865":{"crate_id":24,"path":["syn","token"],"kind":"module"},"24:2564:3406":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"16:2579:5983":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:7298:8042":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:5000:7021":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:45601:7642":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:44507:7593":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:11721:5438":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:50262:7703":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:42634:8097":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"24:4555:1798":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"6:7195:7389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:9574:4862":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:9791:7893":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:2964:3389":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:1589:6556":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:10159:5215":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:41234:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:39632:3299":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:9401:5163":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"18:481:7869":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:10108:21108":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:2705:5988":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"24:1761:1787":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"21:2694:3379":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"24:4452:3607":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"5:1056:35428":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"24:3295:3432":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"6:4795:6913":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:4440:3349":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:6816:8030":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:44631:7598":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"24:4911:3161":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"22:812:1782":{"crate_id":22,"path":["proc_macro2","imp","Group"],"kind":"enum"},"2:41154:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:2217:8788":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"24:4856:3148":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"21:2765:2461":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"14:202:2296":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:11888:1108":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:7909:8055":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:6059:36614":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:11014:5288":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:6517:8006":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"9:827:19945":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"24:2819:3415":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"2:1827:3355":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:6171:6068":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:8774:5153":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:4028:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:5686:8964":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:4921:6984":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"24:5039:2817":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"2:9919:3210":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:21800:7457":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:7123:3250":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:558:4181":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:4385:3346":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:10051:2154":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:1695:6630":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:4385:6036":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"24:4823:3141":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"17:386:21001":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:4237:6668":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:43055:8199":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:39942:3265":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:6884:8656":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:2847:5006":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:11886:777":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:5917:7166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:2993:6018":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"5:2924:7427":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:31777:8122":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:4554:8865":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:7226:3276":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"24:2666:2240":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"24:4797:3135":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"22:14:24934":{"crate_id":22,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"2:2524:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:11163:14125":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"24:4539:3128":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"17:9183:21020":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:4394:3347":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:5596:6057":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:45537:7640":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:20696:9012":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"24:4867:3151":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"4:0:2951":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:2967:3390":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:40824:3210":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"24:4840:3145":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"2:43369:8221":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:10216:8181":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"24:2022:3214":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"2:1921:4422":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"24:3920:3447":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"16:2433:5977":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:11576:5417":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:12730:5711":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"24:4101:3459":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"16:7237:6160":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:7857:31005":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:6764:7376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"12:98:8059":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"12:697:8346":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:505:6454":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:7343:6013":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"22:346:3228":{"crate_id":22,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"2:41274:8350":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:679:8723":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:5014:31009":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:2527:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:12850:5743":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:6554:4519":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:3532:4515":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:10520:5235":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:42784:8183":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"24:1035:1793":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"24:1616:3331":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"2:1753:7431":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:5172:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:7059:3693":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"18:736:24823":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:4788:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:7469:7413":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:7426:20948":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:10921:5264":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:546:6483":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:8295:21008":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:40503:8850":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:11029:26296":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:13404:5902":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:6877:20943":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:9382:5161":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:1617:6575":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:46747:7696":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:29989:4259":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:11879:733":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:5184:20046":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:10226:26829":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:10476:21181":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:8881:36676":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:10654:8246":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"21:218:8297":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"17:12550:5612":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"24:1623:2032":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"2:2886:5024":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:6757:7373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:8911:36669":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:7585:4193":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:5931:7177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"24:2938:3421":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"12:659:3209":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:11868:308":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:4748:8725":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:10608:5119":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:9805:5238":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:7873:3332":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"24:0:1644":{"crate_id":24,"path":["syn"],"kind":"module"},"17:13126:5812":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"24:3193:3430":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"2:9098:3365":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:9658:21101":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:10161:14112":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:562:1870":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:43357:8218":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:4416:6771":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:6521:7263":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:834:4809":{"crate_id":5,"path":["alloc","collections","binary_heap","retain","RebuildOnDrop"],"kind":"struct"},"6:5728:7069":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:1604:6568":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:3240:8836":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:4673:6855":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"18:538:5045":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:11951:5486":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:48948:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9458:21071":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:8174:8853":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:5432:8949":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:4681:6859":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:2341:5973":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:13059:5793":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:6682:33119":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:21598:7437":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"17:11594:5418":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:44276:7584":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:39642:3300":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"24:4224:3468":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"5:1330:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"24:3811:3440":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"17:9071:36672":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:13047:5787":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:1609:6570":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:20424:32455":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"24:2513:3483":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"6:572:6496":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:2345:8791":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:7890:8052":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:20774:7434":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:534:4179":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:505:4172":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:7603:6176":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:6667:7316":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"24:3125:3428":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"16:7388:20946":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"24:2615:3409":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"2:21:670":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:307:1422":{"crate_id":1,"path":["std","thread"],"kind":"module"},"2:39185:8125":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:11881:1470":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:42412:8101":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:13100:5802":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"22:971:3209":{"crate_id":22,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"17:10321:5218":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:11251:8259":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:2208:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:11515:5405":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"24:4780:3131":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"2:45751:7643":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:9031:36670":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:39730:3306":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"24:3176:1808":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"6:4468:6798":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:3192:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:4571:6820":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:7463:7412":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:42702:8178":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"24:4569:2002":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"24:3869:3444":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"6:4900:6977":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:45957:7675":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"20:37:2818":{"crate_id":20,"path":["quote","format_ident"],"kind":"macro"},"17:9722:5175":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:9488:21058":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:13114:5809":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"24:3142:3429":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"24:1068:1866":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"2:40781:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"24:5169:3178":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"2:8216:3697":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:5374:5997":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:9022:7780":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"18:564:5047":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:8981:21016":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:2132:8074":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"24:4183:3465":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"5:1628:4803":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:41114:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:7228:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"24:4352:3477":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"1:10849:26280":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:25647:7460":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:40773:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:11974:5495":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:45301:7636":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:11368:8182":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"24:1489:1864":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"typedef"},"2:41941:8164":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"9:33:8319":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:48974:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"12:1628:4800":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:8483:8237":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:2360:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:10714:7746":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"24:5421:3188":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"17:10752:5254":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:5800:7102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"24:5484:2200":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"2:39312:8136":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:9001:26279":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:43266:8215":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:39222:7539":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:13374:5895":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:2727:5989":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"14:40:1793":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"12:1555:20011":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:12211:5535":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:10001:26827":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:8055:20990":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:11882:1467":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:42513:8105":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"5:6154:4840":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"18:96:24811":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"21:2760:1793":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"6:4422:6774":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:7688:8748":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:4262:6032":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:6654:6109":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:878:8066":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:8921:8355":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:3689:6027":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:13382:5896":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:12263:14190":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"5:1382:3214":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:2324:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:20458:32795":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"12:1065:36596":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:7521:7423":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:4727:6883":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:6475:8968":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:13031:5785":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"24:5119:3171":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"2:9304:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:43223:8206":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:12756:5717":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"0:927:1657":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"18:719:5060":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:39305:8135":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:42578:7572":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:6939:3260":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"24:5154:2163":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"16:6137:7982":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:44823:7609":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:9601:5173":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"24:4287:3472":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"2:9029:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"24:550:127":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"24:4801:3136":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"2:2615:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:42684:8177":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:43611:7579":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:46457:7681":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:4549:6818":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:5910:7165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:3763:4803":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:43086:8202":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:1509:6513":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:10455:5230":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:9111:8243":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:46099:7676":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:44899:7612":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:11174:5320":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:6091:4888":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:5240:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"18:644:5041":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:38738:4421":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"6:6743:7364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:11233:8401":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"9:111:8320":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:3977:8868":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:11345:8179":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:4962:6999":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:6359:8001":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:10434:7904":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:4476:6802":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:46580:7687":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"12:1866:8070":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:42610:8172":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:7825:3113":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:2601:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:10075:21110":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:5209:14098":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:10875:5260":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:13506:5932":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:1962:21077":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:4483:6804":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"24:4465:2118":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"21:1813:4539":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"24:258:8632":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"1:3283:8828":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:7168:8084":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:8256:7750":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:13168:5823":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:8596:5148":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:8155:2732":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"18:766:24824":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"12:834:8730":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:8222:8235":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:1732:4513":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"16:8056:6218":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"24:4159:3463":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"1:4102:8890":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"24:5264:187":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"22:788:7863":{"crate_id":22,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"16:3402:6023":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:8218:3695":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:30581:4069":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:5724:32878":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:1580:8068":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:4888:6051":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:1597:1830":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:2210:8787":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:13413:5904":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"24:3006:3423":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"9:896:19854":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:6052:8298":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"24:4026:3454":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"1:10933:4903":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"24:2530:3404":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"6:4539:6817":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:2282:5964":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:39179:3371":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:21401:9015":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:8944:26282":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"5:7151:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:20884:9018":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:43233:8210":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:13007:5777":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"9:586:6349":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"21:2260:1782":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"6:7452:7408":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:6715:4840":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:11186:5321":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"24:5055:3167":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"20:34:8877":{"crate_id":20,"path":["quote","ext","private","Sealed"],"kind":"trait"},"2:42522:14111":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:42888:8188":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:1771:21060":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:4703:6870":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:11133:14280":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:5477:3295":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:7275:28889":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:39006:7536":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:3134:3210":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:42440:8104":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:6704:6114":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:6671:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:6345:6004":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:43161:8204":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"5:6069:9051":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"20:77:1859":{"crate_id":20,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"2:10088:14115":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:12884:5746":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"24:2029:3216":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"5:271:4803":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:8932:4177":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"24:3973:124":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"6:4714:6878":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"12:1836:3209":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:7819:8234":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:8180:8852":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:9433:21040":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:21687:32675":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:43198:8205":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"24:4845:3146":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"16:153:4789":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"9:956:19856":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:30025:32670":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:2771:5991":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:4687:6861":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"24:4043:3455":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"17:12198:5534":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:10528:21021":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:10682:5252":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:3546:3210":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:7559:3275":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:11828:5454":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:12638:5675":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"24:599:3209":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"6:4656:6845":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"14:31:8633":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:11267:4908":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"24:5123:3175":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"2:9968:8097":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:8393:21011":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"21:650:3384":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"1:6542:4893":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:10283:21153":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:1051:8037":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:646:8722":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:40446:152":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"24:844:5010":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"24:4875:2054":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"17:13231:5839":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:3772:8856":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:2683:5987":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"9:505:8337":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:7044:36619":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:13478:5923":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:3599:6025":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:11639:5428":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:44729:7607":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:6376:20938":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:4945:6991":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"24:1850:3206":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"2:48922:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"12:1044:20006":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:3535:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:39345:7540":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"21:2232:3233":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"16:3632:6026":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"24:4536:3127":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"2:20733:9016":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:7127:3278":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:2809:5016":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:12909:5755":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:5510:7924":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:44996:7615":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:42908:8190":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"24:5342:3182":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"2:42361:33122":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:5363:8946":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:9293:21046":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:9375:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:7386:7403":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:39716:3305":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:39266:14178":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"6:4820:6925":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"5:3687:8736":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:11528:5407":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:11706:4913":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:3985:8870":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:9778:7892":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:21702:7444":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:11149:5315":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:8105:7746":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:4439:6784":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:29949:4257":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:43408:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"22:695:3228":{"crate_id":22,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"17:13039:5786":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"18:681:7874":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:9982:8753":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:11661:5429":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:12934:5763":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:44298:7585":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"20:504:3986":{"crate_id":20,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"2:44566:7596":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:2793:5992":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"24:4903:3159":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"21:2494:3382":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"21:2417:1858":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"5:7322:4514":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:11485:5396":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:13580:5947":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:3263:6022":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:7033:3209":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:9382:8786":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:7929:20951":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:2518:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:4545:6040":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:39258:8129":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:21651:7440":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"24:3244:1779":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"17:9274:21034":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:734:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"24:548:207":{"crate_id":24,"path":["syn","error","Result"],"kind":"typedef"},"24:4171:3464":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"2:11149:8644":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"7:79:19847":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"24:3210:2246":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"2:21492:8108":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"24:2989:3422":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"9:0:2953":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:5945:7180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"18:574:5041":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:7117:36642":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:6222:4515":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:12896:5749":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:42188:8168":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"24:5441:3192":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"2:9081:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"12:2190:36595":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:22438:7458":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"21:2714:1782":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"1:7650:8717":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"24:2581:3407":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"2:43212:14134":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:2367:5974":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:30083:32672":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:3667:3209":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:46708:7695":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:9073:7781":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:2386:2965":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:567:6494":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:48987:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"24:5059:2431":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"1:6399:4892":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"24:925:3169":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"5:4131:4829":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:11536:5409":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:44677:7605":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"12:2069:8733":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"24:1882:3207":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"16:7329:6012":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:6541:7269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"22:667:3332":{"crate_id":22,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"16:2465:5978":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:46495:7682":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:8839:7773":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:40532:1857":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"5:3180:36496":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:9877:8157":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"24:4919:3163":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"1:10828:6417":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"24:4836:3144":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"24:5308:2241":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"6:4862:6955":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:9092:3367":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"12:810:8727":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:7809:7705":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:4297:6033":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:3403:14142":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:1554:4829":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"9:622:19873":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"2:41958:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:9096:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:2534:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:578:6499":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"12:853:8731":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:7596:4166":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:10207:21167":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:7487:7416":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:7309:6011":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:933:8728":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"22:870:1857":{"crate_id":22,"path":["proc_macro2","Span"],"kind":"struct"},"1:847:3210":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"24:909:36929":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"1:11867:1033":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:9930:5179":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:45177:7619":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:8161:8097":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"22:501:3228":{"crate_id":22,"path":["proc_macro2","LexError"],"kind":"struct"},"2:40722:3693":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:4119:3356":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"24:4422:3482":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"5:3146:36501":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"18:690:7877":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:7522:4897":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:2605:5984":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"9:382:8326":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:12955:5768":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:6034:1823":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"24:4811:3138":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"2:41669:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:43441:14323":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:4994:7018":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:12238:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:493:6449":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:40713:3209":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:10244:14113":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"12:725:8066":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:6286:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:653:14966":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:11615:14122":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"11:36:6347":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:10419:8839":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:11164:8253":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:6075:4871":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:11559:5414":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:42500:14102":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"24:4806:3137":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"2:48961:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:10762:14109":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:4721:6046":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:6773:7379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:41034:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"21:2612:3373":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"1:7681:8230":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"24:4849:3147":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"2:42652:8100":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:6567:8019":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:13354:5889":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:40840:3209":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:1514:6515":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:6747:9010":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"24:1506:3322":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"24:4573:2004":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"6:7481:7415":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:4191:3334":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"24:5254:3179":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"17:12073:5505":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:3455:8823":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:11876:734":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:13071:5794":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"18:113:24812":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:2549:4862":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:8510:5145":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:3125:21112":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:8217:3696":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:1459:8346":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:6649:7305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:13327:5877":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:40705:3214":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:2703:3351":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:4786:6048":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:45413:7638":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"0:928:1665":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"2:2746:4060":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:9526:21057":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"24:1405:1862":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"16:6528:8007":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:6791:7382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:48909:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:6611:31037":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"16:3457:5070":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:42604:8171":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"12:2178:1782":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"5:6342:3209":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"5:7239:8091":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:6643:7304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"24:1936:3209":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"2:43365:8220":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"24:4055:3456":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"16:5558:20932":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:4662:6044":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:12349:5552":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:3923:8864":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:10973:5284":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:1571:4515":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:9193:36668":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:3667:8855":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:30564:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"5:2922:35388":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:4720:6881":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:487:21002":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:9446:21049":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:3175:8068":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"24:1332:3336":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"24:4788:3133":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"24:5267:2425":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"2:9040:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:12008:5498":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:4983:31009":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:4166:8892":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:11391:8854":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:41773:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:4835:8920":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:9317:21044":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"22:725:1793":{"crate_id":22,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"1:11862:367":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:10506:5232":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:2705:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:4004:33413":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:8806:8971":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"18:515:5044":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:8811:8348":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:11865:1486":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:4844:8921":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"24:4195:3466":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"7:32:19840":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:10822:21025":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:13176:5824":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:6363:8965":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:12060:5504":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"21:2550:3383":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"1:10462:4178":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:1652:6604":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:30189:32669":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:46617:7690":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:22405:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"22:821:1793":{"crate_id":22,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"17:10949:5270":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:9052:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:12617:5667":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:11350:8855":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:9094:3368":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:12398:4871":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:1534:6523":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:2946:3353":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:11087:5305":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:11595:14124":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"24:5435:3190":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"1:641:8721":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:20456:32799":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:11874:631":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"24:1089:1866":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"2:39651:3301":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"24:5426:3189":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"2:43373:8222":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:11218:8256":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"22:768:24832":{"crate_id":22,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"24:5042:1925":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"17:1903:21090":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"24:2836:2112":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"16:6109:6066":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:3448:8805":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"5:1213:8037":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"15:193:20029":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:5880:4829":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:7665:8720":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:1448:8345":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"24:3227:231":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"15:0:2958":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:2867:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"24:5121:3173":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"16:7956:6017":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"24:4899:3158":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"24:286:36911":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"1:7034:28491":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:43429:8226":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"12:1872:1830":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"5:686:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:4988:7016":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"13:0:2950":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:46287:7678":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"11:44:6348":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:8229:8236":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:46209:7677":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:42192:8169":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"14:165:20016":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"24:3886:3445":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"2:12455:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:1788:8743":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:4318:8887":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:10088:5211":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"24:4915:3162":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"2:2275:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:39567:8145":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"24:3329:3434":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"2:3187:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:11863:923":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"12:60:36597":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:7070:3209":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:11356:5364":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:39439:4851":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:43381:8224":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"24:4212:3467":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"24:5447:3195":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"2:21635:8110":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:8750:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"20:150:3715":{"crate_id":20,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"1:4566:7286":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:43018:14129":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"24:5117:3172":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"17:9155:21019":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:10420:5226":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:42926:8192":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"22:891:1782":{"crate_id":22,"path":["proc_macro2","Group"],"kind":"struct"},"12:320:4793":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:6988:3209":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:4274:6696":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:45567:7641":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"5:3105:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"5:1258:8639":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:44529:7594":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"18:0:2961":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:39619:3285":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:4604:14172":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"24:4084:3458":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"2:43641:8229":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:4248:6676":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:7484:8657":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:11106:5310":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"12:738:8067":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"5:5457:4519":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:12225:5536":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"24:4340:3476":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"17:10546:21022":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"24:2785:1806":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"2:42532:8106":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:2707:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:10062:21111":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:2862:3474":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:6593:8020":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"24:1140:7835":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"1:2343:4438":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:11199:5322":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:9303:5159":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:8526:5146":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"21:997:230":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"24:103:4134":{"crate_id":24,"path":["syn","token","CustomToken"],"kind":"trait"},"17:10374:7898":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"24:2853:3416":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"2:38882:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:9475:4858":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:4441:6038":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"24:344:36917":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"20:322:2463":{"crate_id":20,"path":["quote","spanned","Spanned"],"kind":"trait"},"2:41757:14266":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:2371:8800":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:9030:3364":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:14:2598":{"crate_id":2,"path":["core","write"],"kind":"macro"},"9:800:6401":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:7970:8056":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"20:235:3990":{"crate_id":20,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"17:9764:7891":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:11761:5444":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"21:2293:2173":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"2:11384:8185":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:11245:8258":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:2657:5986":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:21675:8113":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"24:2972:2460":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"17:11997:5496":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:11308:8174":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:41403:3358":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"24:5345:1779":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"2:44707:7606":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:5388:6000":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"24:3990:3451":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"16:7511:6168":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:11271:5336":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:8418:21012":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:13091:5801":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:3120:27156":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:10649:8244":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:6226:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:11869:1344":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:10445:5227":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:4597:6822":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:1899:15947":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"24:3159:2508":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"1:11518:8261":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:10944:4904":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:9362:5165":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"9:977:6420":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:22372:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:2825:5993":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:42856:8187":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:7865:8652":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:9100:3366":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:8631:5149":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:2509:5980":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:12251:5538":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:12781:5727":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:9577:5171":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:5938:7179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"24:4316:3474":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"16:3188:6021":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:1229:8734":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:39406:8772":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"17:9350:5139":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:1986:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"24:2163:8877":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"1:10314:8948":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:7164:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:2827:5018":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"24:5443:3193":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"2:43246:8214":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"24:842:8877":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"24:1136:7833":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"2:3415:14146":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"24:4521:1849":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"5:5771:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:43389:7576":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:2831:4878":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:20877:8877":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:4850:6946":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:6690:6007":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:11883:1468":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:4086:8888":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:40764:4433":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:12033:5501":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:4300:4831":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"24:3857:3443":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"21:480:4788":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"16:0:2959":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:3161:8838":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:6619:6105":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"24:4895:3157":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"2:7160:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"5:7182:32668":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:3123:31941":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"18:660:24821":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"24:921:2816":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"2:9353:14192":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:2213:4455":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:3199:8839":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:10670:7909":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"24:5298:2442":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"18:755:7887":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:9844:21107":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:3391:8804":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:3201:1830":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"5:7011:4814":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:7469:6014":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"24:3363:3436":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"24:4907:3160":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"2:21826:8858":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:4322:6726":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:10867:7771":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:3373:7748":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:42592:8170":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:8499:7768":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"7:0:1513":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:2631:5985":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:7511:7421":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:1687:6629":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"21:2744:1856":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"2:2998:4420":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:41687:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"16:6865:8036":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:11800:5449":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:4413:6037":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:11412:8856":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:4402:6763":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:12211:33193":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"14:7:8633":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:7942:20952":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"12:387:36598":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:6668:6111":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"24:4489:1988":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"24:552:7830":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"1:4629:8923":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:13393:5901":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:5525:7927":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"5:1470:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"15:175:20028":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:2961:2112":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:1739:4464":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:10350:5223":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:50283:7704":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"5:6994:8082":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:5433:7918":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:6512:7257":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:39449:8785":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:7671:4588":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:1592:8070":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:4115:8891":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"18:671:24822":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:13518:5934":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:3232:3352":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:1927:8770":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:7049:8083":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:11606:5420":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:11873:5459":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"18:582:4069":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:5411:6002":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"24:885:36932":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"2:46533:7683":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:1786:8742":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:8368:21010":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"24:4863:3150":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"2:39927:3261":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:2481:8877":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:4408:6766":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"8:0:2952":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:10724:26290":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:44344:7587":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:621:8646":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:7802:8233":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:44446:7591":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"14:0:2957":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:3020:3219":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:2482:14185":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:4404:8897":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:22207:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"24:4328:3475":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"17:13148:5817":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:11878:732":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"22:937:1793":{"crate_id":22,"path":["proc_macro2","Ident"],"kind":"struct"},"1:3346:4829":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"24:88:1846":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"2:44322:7586":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:1476:2197":{"crate_id":2,"path":["core","mem"],"kind":"module"},"6:6719:7356":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"9:19:8317":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:22174:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:5460:7922":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"21:2564:3382":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"}},"external_crates":{"23":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.8/"},"20":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.26/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.55/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.13/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}