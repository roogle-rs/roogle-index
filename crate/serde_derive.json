{"root":"0:0:1811","crate_version":"1.0.190","includes_private":false,"index":{"2:12405:2154":{"id":"2:12405:2154","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12498:33866":{"id":"2:12498:33866","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12512:33869":{"id":"2:12512:33869","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:3778"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:14599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12449:4322":{"id":"2:12449:4322","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41559:194","prim@char":"1:12066:447","self::pattern":"2:12105:3778"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41557:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:14599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12496:33865":{"id":"2:12496:33865","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:372":{"id":"0:63:372","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1878,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:86-0:994:2028"],"is_stripped":false}}},"2:12413:33854":{"id":"2:12413:33854","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12506:26293":{"id":"2:12506:26293","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:3778"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41557:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12500:33868":{"id":"2:12500:33868","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:3778"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12130:14597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:2385":{"id":"5:5535:2385","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12526:27522"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12409:33853":{"id":"2:12409:33853","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12407:33852"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12474:28149":{"id":"2:12474:28149","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41557:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12407:33852":{"id":"2:12407:33852","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12442:27674":{"id":"2:12442:27674","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:3778"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:14599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12420:28108":{"id":"2:12420:28108","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12518:33871":{"id":"2:12518:33871","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:3778"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:14599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12445:2706":{"id":"2:12445:2706","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41559:194","prim@char":"1:12066:447","self::pattern":"2:12105:3778"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41557:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12525:27524":{"id":"2:12525:27524","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5534:3445":{"id":"5:5534:3445","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12453:28139":{"id":"2:12453:28139","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12105:3778","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12066:447","str::split_whitespace":"2:12431:31860","str::rsplit":"2:12459:28143"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43519:8531","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12468:28145":{"id":"2:12468:28145","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:3778","str::rsplitn":"2:12471:28147"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43623:8611","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12486:33861":{"id":"2:12486:33861","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12105:3778","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12066:447","str::rmatch_indices":"2:12489:33862"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43669:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:964:1800":{"id":"0:964:1800","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[89,0],"end":[94,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:12431:31860":{"id":"2:12431:31860","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12432:31863"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43793:8621","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12424:33855":{"id":"2:12424:33855","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12072:1502","str::slice_mut_unchecked":"2:12425:33856","crate::ops::Index":"2:3072:2561"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12432:31863":{"id":"2:12432:31863","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12431:31860"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43802:8622","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12434:33857":{"id":"2:12434:33857","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43783:8620","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12489:33862":{"id":"2:12489:33862","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12105:3778","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12066:447","str::match_indices":"2:12486:33861"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43687:8615","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:14599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12530:9152":{"id":"2:12530:9152","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4573:9152"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43827:8559","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12412:2917":{"id":"2:12412:2917","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11665:14601"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12494:33864":{"id":"2:12494:33864","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492-0:1019:1933":{"id":"0:492-0:1019:1933","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1019:1933","glob":false}}},"2:12503:2062":{"id":"2:12503:2062","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:3778"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12531:33873":{"id":"2:12531:33873","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4570:33873"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43836:8564","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12480:2150":{"id":"2:12480:2150","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12105:3778","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12066:447","str::rmatches":"2:12483:33860"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43723:8617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5518:2184":{"id":"5:5518:2184","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:2384":{"id":"5:5536:2384","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12527:27521"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5516":{"id":"5:5516","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5517:34529","5:5518:2184","5:5521:34530","5:5524:34531","5:5532:34532","5:5533:34533","5:5534:3445","5:5535:2385","5:5536:2384"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12416:2043":{"id":"2:12416:2043","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41559:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41557:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5532:34532":{"id":"5:5532:34532","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12459:28143":{"id":"2:12459:28143","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12105:3778","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12066:447","str::split":"2:12453:28139"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43537:8534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:14599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12404:868":{"id":"2:12404:868","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12066:447"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12477:28150":{"id":"2:12477:28150","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41557:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:14599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12428:2394":{"id":"2:12428:2394","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12066:447"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43489:8602","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:493-0:404:1934":{"id":"0:493-0:404:1934","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[14,0],"end":[14,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:404:1934","glob":false}}},"0:0:1811":{"id":"0:0:1811","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[102,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2021\n# use serde_derive::{Deserialize, Serialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.190\")]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: derive_partial_eq_without_eq, clippy ::\nenum_variant_names, clippy :: manual_map, clippy :: match_like_matches_macro,\nclippy :: needless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: let_underscore_untyped, clippy ::\nmanual_assert, clippy :: map_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:964:1800","0:965:1808"],"is_stripped":false}}},"0:1023:2031":{"id":"0:1023:2031","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"2:12427:28132":{"id":"2:12427:28132","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12426:2805"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12439:27672":{"id":"2:12439:27672","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:3778"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12492:33863":{"id":"2:12492:33863","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12456:28141":{"id":"2:12456:28141","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:3778"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11921:8533","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12429:2388":{"id":"2:12429:2388","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12066:447"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43495:8603","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12403":{"id":"2:12403","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12404:868","2:12405:2154","2:12406:33851","2:12407:33852","2:12409:33853","2:12412:2917","2:12413:33854","2:12414:339","2:12415:338","2:12416:2043","2:12418:28107","2:12420:28108","2:12422:28109","2:12424:33855","2:12425:33856","2:12426:2805","2:12427:28132","2:12428:2394","2:12429:2388","2:12430:8521","2:12431:31860","2:12432:31863","2:12433:29559","2:12434:33857","2:12435:31856","2:12436:2256","2:12439:27672","2:12442:27674","2:12445:2706","2:12449:4322","2:12453:28139","2:12456:28141","2:12459:28143","2:12462:33858","2:12465:33859","2:12468:28145","2:12471:28147","2:12474:28149","2:12477:28150","2:12480:2150","2:12483:33860","2:12486:33861","2:12489:33862","2:12492:33863","2:12494:33864","2:12496:33865","2:12498:33866","2:12499:33867","2:12500:33868","2:12503:2062","2:12506:26293","2:12509:28151","2:12512:33869","2:12515:33870","2:12518:33871","2:12521:2023","2:12523:27523","2:12524:28049","2:12525:27524","2:12526:27522","2:12527:27521","2:12528:33872","2:12530:9152","2:12531:33873"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5521:34530":{"id":"5:5521:34530","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5533:34533":{"id":"5:5533:34533","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:1997","`String`":"5:7487:246"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:1997","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:4650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12415:338":{"id":"2:12415:338","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12083:1608"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12515:33870":{"id":"2:12515:33870","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:3778"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12418:28107":{"id":"2:12418:28107","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41559:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41557:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12406:33851":{"id":"2:12406:33851","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12430:8521":{"id":"2:12430:8521","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43505:2927","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12433:29559":{"id":"2:12433:29559","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43773:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12462:33858":{"id":"2:12462:33858","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12105:3778","str::split":"2:12453:28139","prim@char":"1:12066:447","`DoubleEndedIterator`":"2:7517:125","str::rsplit_terminator":"2:12465:33859"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43569:8608","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12422:28109":{"id":"2:12422:28109","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12471:28147":{"id":"2:12471:28147","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12066:447","str::splitn":"2:12468:28145","self::pattern":"2:12105:3778"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43641:8612","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:14599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12509:28151":{"id":"2:12509:28151","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:3778"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41557:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:14599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12523:27523":{"id":"2:12523:27523","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8:1926":{"id":"0:8:1926","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[216,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:12483:33860":{"id":"2:12483:33860","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12105:3778","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12066:447","str::matches":"2:12480:2150"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43741:8618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:14599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12527:27521":{"id":"2:12527:27521","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12425:33856":{"id":"2:12425:33856","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12072:1502","crate::ops::IndexMut":"2:3076:3387","str::slice_unchecked":"2:12424:33855"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:965:1808":{"id":"0:965:1808","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[97,0],"end":[102,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:12426:2805":{"id":"2:12426:2805","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12427:28132"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12528:33872":{"id":"2:12528:33872","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4572:33872"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43818:8565","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86-0:994:2028":{"id":"0:86-0:994:2028","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[21,0],"end":[21,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::internals::case::RenameRule","name":"RenameRule","id":"0:994:2028","glob":false}}},"5:5524:34531":{"id":"5:5524:34531","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12521:2023":{"id":"2:12521:2023","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12066:131","`FromStr`":"2:12065:3401"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41702:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12065:3401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12065:3401","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12436:2256":{"id":"2:12436:2256","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:3778"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12414:339":{"id":"2:12414:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12415:338","`u8`":"1:12083:1608"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12524:28049":{"id":"2:12524:28049","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39513:28042","Self::is_ascii":"2:12523:27523"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41557:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39513:28042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12465:33859":{"id":"2:12465:33859","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12105:3778","str::split":"2:12453:28139","prim@char":"1:12066:447","str::split_terminator":"2:12462:33858"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43587:8609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:14598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:14599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12526:27522":{"id":"2:12526:27522","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:34529":{"id":"5:5517:34529","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:1997","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:4650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:1997","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:4650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12499:33867":{"id":"2:12499:33867","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12435:31856":{"id":"2:12435:31856","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43811:8623","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:11351:5504":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:7792:8982":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:5878:7381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:7011:8990":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:12645:5723":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:44492:8727":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:40165:9223":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:11921:8533":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:4641:6323":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:31984:6633":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"24:4250:3686":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"2:10008:5120":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:21462:9440":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"24:609:3378":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"2:4800:416":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:40547:3487":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:9505:136":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:9564:21471":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"24:5034:3333":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"24:2726:120":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"17:12208:5624":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:9028:26290":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"24:5478:3361":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"2:43346:7972":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"24:5066:3012":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"24:4912:3327":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"5:629:8974":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:6808:2765":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:7920:134":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"24:2930:3637":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"1:2382:9231":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:22869:184":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:11661:5531":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"24:2240:5264":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"1:11071:5157":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:9541:3526":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:4806:6327":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:46058:8010":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"5:2966:3641":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"24:1402:2022":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"1:9512:9240":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"24:127:1937":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"2:3653:3377":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:45788:7995":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:12065:3401":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:8294:132":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:7651:21404":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"21:2329:1949":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"2:21356:9245":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:5474:108":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:42029:85":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:42589:6476":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"24:4431:3699":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"11:483:148":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:12089:1664":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:12305:5655":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:9505:133":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"18:681:8288":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:7694:4531":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:5110:29713":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:22704:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:918:9069":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:5743:8357":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:8146:9241":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"5:3217:34829":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:6568:8988":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:13989:6071":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:22:728":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:43398:8539":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:13611:5993":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:1776:4735":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:12737:5737":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:5596:7473":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:7579:7694":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:4690:7101":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:11006:26677":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:4385:6998":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"24:4373:3695":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"1:4665:7565":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"24:5476:3360":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"2:22096:8543":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:4877:7195":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"24:1445:25519":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"23:281:2027":{"crate_id":23,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"24:5470:3358":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"2:2896:3678":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:21105:32408":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"20:830:1949":{"crate_id":20,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"6:7310:7680":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:6511:5057":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:5897:7383":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"24:3100:3538":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"6:4709:7113":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:41795:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:22344:8552":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:3195:26654":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:4683:7099":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:12110:14598":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:7782:8474":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:8794:21461":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:2548:6265":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:9136:237":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:10818:8685":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:4167:3550":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"5:0:310":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:44530:8660":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:5833:7350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"20:121:35080":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"5:676:253":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:12906:5125":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:10440:21572":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"24:5519:2503":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"23:150:3971":{"crate_id":23,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"23:11:3406":{"crate_id":23,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"17:10726:21615":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:3964:9301":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"11:2238:8467":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:4008:9304":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:1118:33846":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:41951:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:40075:103":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:47841:8087":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:9790:35017":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:4474:7039":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:4731:9335":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:5013:7267":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:871:8496":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"24:1894:3375":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"6:1591:6845":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:8041:9275":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:12701:158":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:1521:6800":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:534:4523":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"24:2222:2640":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"2:30800:198":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"11:1541:20454":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:4585:6321":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"24:4884:2218":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"2:40326:3480":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"24:4820:3306":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"2:10654:14593":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:4259:9332":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:20904:31813":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:21107:4672":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:2366:204":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:11742:5536":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:3441:21583":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:1067:9170":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:10214:21529":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:49852:9456":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:932:9165":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"21:2644:3377":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"16:2810:6276":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:12184:5622":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:2618:6268":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"5:2962:7709":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:12465:5695":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:7442:3459":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:11870:8613":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:12136:5610":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:42068:92":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:4282:3529":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:10478:5449":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:3183:34825":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:2243:8510":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:3248:139":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:4821:32693":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:5373:14577":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"20:874:255":{"crate_id":20,"path":["proc_macro2","TokenStream"],"kind":"struct"},"6:7532:7684":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:45828:7997":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:5963:21389":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"11:1525:20453":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"18:609:35051":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"24:3338:3651":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"16:2788:6275":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:13567:5962":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:8422:3944":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:12079:791":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"24:1068:2027":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"1:5660:5141":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:39221:218":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:1734:6929":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:12943:146":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:6002:7445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:7573:7693":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:4669:7098":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:2321:6249":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:1682:6907":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:8895:21464":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:2883:5272":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:5648:21386":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:4745:6325":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"24:2794:1962":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"16:6583:8431":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:44258:8653":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:12983:5791":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:14335:6185":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"14:187:20468":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:39265:219":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:14378:6201":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:12945:5786":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:21803:7718":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:14134:6111":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:7360:34982":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:21226:9448":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"5:3581:3378":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:2305:20525":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"5:3669:5057":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:1840:4811":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"24:89:1943":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"11:2334:3382":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"24:1503:3503":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"24:4052:3672":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"6:4867:7189":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"5:7501:8523":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"5:2959:2193":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:3764:6309":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"21:2710:2018":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"2:10668:14592":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:4960:7243":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:1674:6906":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"24:2777:3630":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"2:42577:113":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:44293:126":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"24:5060:2612":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"16:4053:6314":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:3288:3546":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:1641:4596":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:7561:7691":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:43477:8601":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:2930:5276":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:13487:5900":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"24:1746:9088":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"17:9762:35027":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"11:992:8467":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"24:3049:3642":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"17:12237:5635":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:9780:21475":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:11971:5586":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:40185:3461":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:43773:8619":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:7570:3457":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:11490:5525":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"20:694:8281":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"2:40561:3488":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:41753:3382":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"11:2165:8501":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:6385:178":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"24:4908:3326":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"17:13906:6053":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:11111:21624":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:4208:9331":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:11023:5490":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:46818:8042":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"24:5005:2617":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"2:22770:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:40803:3452":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"18:652:5296":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"20:885:2018":{"crate_id":20,"path":["proc_macro2","TokenTree"],"kind":"enum"},"1:4187:9329":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:2339:6251":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:863:3377":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:40407:3469":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:22330:7737":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:12765:5742":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:400:21456":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:8329:9326":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:6580:7519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"24:3287:1986":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"2:30324:32252":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:641:9155":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:6839:9437":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"23:407:4110":{"crate_id":23,"path":["quote","__private","RepInterp"],"kind":"struct"},"16:2406:6259":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:2670:6270":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:7582:6447":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:47898:8092":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"24:599:3377":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"17:14110:6107":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:43519:8531":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"23:344:1191":{"crate_id":23,"path":["quote","quote"],"kind":"macro"},"1:5156:206":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"24:4946:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"1:8174:3439":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:13451:5869":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"24:5055:2609":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"6:1697:6916":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"24:4872:3318":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"24:5152:3343":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"21:1394:2031":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"17:10278:21526":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"11:1850:4737":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"24:5202:3346":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"24:287:35258":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"16:6332:6281":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:35:4651":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"24:4023:3670":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"17:11934:1949":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"5:5631:4741":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:7828:6462":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:9242:5419":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:7403:104":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:9070:5413":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:5892:7382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:8851:8169":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"18:660:25494":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:2360:197":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"20:839:2637":{"crate_id":20,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"5:7220:4650":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:10795:8677":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:2766:6274":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"24:2760:3629":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"2:42830:8596":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:1075:21499":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:8227:3472":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"24:2981:2636":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"2:4462:3542":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:5673:6286":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:3212:8498":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:3238:1986":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:12071:1470":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:39981:8563":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:2472:6262":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:11407:21477":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:4799:7159":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"24:4806:3303":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"11:1882:1986":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"24:4461:3838":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"24:4982:1957":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"21:2771:1949":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"2:40155:5105":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"24:4865:3316":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"6:1650:6889":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:41873:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:6569:6289":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"11:1145:8973":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:10685:21578":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:4527:6319":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"21:1063:2017":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"11:2074:9169":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:11024:8171":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:3655:5327":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:39929:8561":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:1671:1151":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:44439:222":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"11:2473:6631":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:10023:21473":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:9521:21470":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:44083:8636":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"24:4192:3682":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"24:3849:3659":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"1:10850:123":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"16:7318:6428":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:11151:21649":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:7884:21406":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:6386:6355":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:1986:199":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:43463:7974":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:7054:8462":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:3040:3566":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:30430:32253":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"24:5461:3357":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"17:11162:5492":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:11295:8333":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"5:7229:3377":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"9:52:9049":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:3539:9262":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:5995:8341":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:12225:5632":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:3142:97":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:4805:7162":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"24:4964:62":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"2:21815:33303":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:11316:5503":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:1537:6808":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:39914:8559":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:6174:5125":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:29981:9299":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:11348:9389":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:9660:35038":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"24:5480:3362":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"24:1135:8247":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"2:42632:132":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"5:1288:9169":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:364:4539":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"24:4932:3332":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"6:5814:7348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"24:104:4368":{"crate_id":24,"path":["syn","token","CustomToken"],"kind":"trait"},"5:1473:8497":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:9933:21503":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:10410:21542":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"5:1426:3382":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:10616:4528":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:1573:8498":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"14:160:8967":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"24:845:5262":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"2:41458:32965":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:11375:8194":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:43741:8618":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:646:9156":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:9539:2554":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:6901:6291":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:45625:7989":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:1922:4645":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:12513:5705":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:7555:7690":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:4433:7023":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:11687:21480":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:8605:3952":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:13040:5798":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:11232:8181":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:10561:8313":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:4339:9333":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:12998:4649":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:12496:5702":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:878:5065":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"24:152:1943":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"1:6222:9079":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:10383:21523":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:4333:6962":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:4074:3382":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:6820:7637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:10133:27359":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:8659:21443":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:3065:5322":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:9102:5415":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:8833:9386":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"5:2049:9172":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:2582:5116":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"0:965:1809":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"2:20921:31812":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:12091:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:542:6757":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:3033:2498":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:43925:8624":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:5970:7432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"14:7:8967":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:22240:7725":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"24:94:9245":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"2:43427:14589":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:41557:196":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:5363:6339":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:39146:8557":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"21:2640:3557":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"2:39287:3426":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"9:177:9060":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:8941:9410":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"20:777:25503":{"crate_id":20,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"18:699:8292":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"18:531:8285":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:6663:7570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:3994:9303":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"21:216:9027":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"20:930:2016":{"crate_id":20,"path":["proc_macro2","Spacing"],"kind":"enum"},"2:21296:9245":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"24:4802:3302":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"16:6243:1979":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:533:6751":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:10340:5447":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:42330:3527":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:42316:3518":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:43802:8622":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:7194:3439":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:8134:8485":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:44318:8657":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:30236:4601":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:10292:5440":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"24:3015:3640":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"11:1869:8499":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:555:6763":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:2209:21547":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:6792:8449":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:13162:5824":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:5727:8355":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:43325:8538":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:12775:14650":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:40227:3463":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:6186:7512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:7438:3460":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:43385:14581":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:14324:6180":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:2380:6258":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:1558:6823":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:7479:159":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:45603:7988":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:12997:5792":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:12778:5743":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:6973:32990":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:12062:5599":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:4511:7060":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:2214:133":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"24:2175:9245":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"6:4529:7069":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:2141:8503":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:21312:9439":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"20:0:1788":{"crate_id":20,"path":["proc_macro2"],"kind":"module"},"1:9165:8181":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"5:6098:5081":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:39177:213":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"24:498:3388":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"1:949:9167":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"18:727:5318":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:12067:1624":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:3763:9296":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:10420:5291":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"24:3895:3662":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"17:11215:8325":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"21:53:4761":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"5:1514:213":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:4913:7216":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:40306:3479":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"24:4035:3671":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"1:9058:9078":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"5:5325:5057":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"20:879:2017":{"crate_id":20,"path":["proc_macro2","Span"],"kind":"struct"},"17:12452:5693":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:10672:21613":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:7476:5088":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"24:1484:3390":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"2:44270:8656":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"24:2828:3632":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"24:4349:3693":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"11:2467:6630":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"24:5473:3359":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"1:8996:8176":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:10097:21494":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:2534:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"11:0:3140":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"24:5498:3366":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"1:10840:134":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"24:4815:3305":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"16:3315:6306":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"21:478:5044":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"1:7890:8666":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:13876:6047":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:7669:9245":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:10435:8533":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:7517:125":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:9650:5440":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:7614:7703":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:40383:3484":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:9217:33110":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:6663:5057":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:12267:5647":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:0:528":{"crate_id":2,"path":["core"],"kind":"module"},"2:21240:4672":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:42851:7967":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:11327:8335":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:22737:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:12176:14606":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"9:507:6697":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"24:1948:3377":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"17:14469:6222":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:1044:8467":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"15:288:20480":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"24:2964:2331":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"2:1548:5081":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:11358:21652":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:7736:6454":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:11137:21622":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:4934:9360":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:45865:7999":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:10661:21612":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:12621:5722":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"24:1335:35199":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"6:6759:7594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:22294:32247":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:7492:8468":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:11173:21650":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:12888:5774":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:9754:151":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:7475:138":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:8195:8486":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:21193:9453":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"5:6795:4741":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:41536:7955":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:7128:8177":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:4287:3530":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:6604:7536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:7544:8473":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:22257:32254":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"11:423:34958":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:10949:21579":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:39941:32250":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:4775:7146":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"24:4498:2151":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"2:21378:7716":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:42309:2554":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"24:3185:1964":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"17:13816:6029":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:7053:5149":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:41374:2017":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:5653:223":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:5982:7437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:9010:9076":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:4774:6326":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"11:2085:9170":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:4922:7222":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:2849:5267":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:9487:3523":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:2526:6264":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:5588:6285":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:6726:7579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:2257:100":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:3274:9281":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:40348:3481":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:40001:8559":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:11367:5505":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:6494:5145":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:14460:6218":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:4:1075":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:10978:8982":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"18:624:35044":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:8263:9295":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:149:5045":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:4400:7005":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"21:2750:2341":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"6:6865:7657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:8865:8170":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:43372:3461":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:2223:9225":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:12830:5748":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"24:2709:3627":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"2:46277:8017":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:47738:8083":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:853:3382":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:14296:6173":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:4320:6952":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:6467:8420":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"24:2692:111":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"1:7907:8667":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:4769:7143":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:11635:14729":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"24:4448:2630":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"14:215:8487":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:13422:5849":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"21:2601:8279":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"5:4426:5083":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:43811:8623":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:4519:9336":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:8072:6498":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"24:4888:3321":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"17:10534:8311":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:4943:9361":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"5:7328:3377":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:4210:3515":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"11:2494:3432":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:7764:4803":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:8765:21460":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:41990:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:10240:5432":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"24:2641:1997":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"9:450:20372":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:9617:35012":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:10878:26670":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"24:4789:3299":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"24:4545:3294":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"21:2578:3560":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"2:43954:8632":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:0:1494":{"crate_id":1,"path":["std"],"kind":"module"},"18:644:5296":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:5994:7444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:358:4538":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:9051:21444":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:12119:8294":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:30230:4600":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"24:4361:3694":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"6:588:6781":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:12876:5772":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:7708:6300":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:9146:155":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"20:118:8280":{"crate_id":20,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"16:7597:34971":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"11:101:8489":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"24:4325:3691":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"1:8490:7967":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:2150:21559":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"24:5144:2158":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"24:259:8966":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"17:12422:5684":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:2428:6260":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"24:4828:3308":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"21:2379:2637":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"17:10547:8312":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:6944:34970":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"11:2479:34947":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:3457:8148":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:8311:8668":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"24:3270:3648":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"2:41912:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:11910:5573":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:4557:6320":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:8167:21408":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:45709:7992":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:32031:32639":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:47568:8080":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"24:2607:3625":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"24:5485:2505":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"1:11325:5160":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:2832:3565":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:6171:209":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:5798:6343":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:12080:792":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:2546:260":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:43315:14585":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"24:4233:3685":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"18:507:5296":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:13071:5803":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:4753:7135":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:5049:7289":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:6571:9404":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:8686:21458":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:4296:6935":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:9051:29733":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:2840:4298":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:40770:3444":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:501:6728":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:12293:5652":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"24:4337:3692":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"5:778:98":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:22605:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:9141:238":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:39319:14675":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:2284:20500":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:922:9070":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"24:5380:1932":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"10:0:3139":{"crate_id":10,"path":["adler"],"kind":"module"},"1:12084:1605":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:536:8340":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:44118:8641":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:13188:5826":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:45912:8000":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:41745:3378":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:6458:9401":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:12172:5619":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:1585:8500":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:5973:5087":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:7601:7699":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:1501:6792":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:9896:21490":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:3032:6303":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:43836:8564":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"24:5187:2331":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"24:2092:2574":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"17:11719:21481":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:41288:164":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"24:5482:3363":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"11:759:8496":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"23:46:3407":{"crate_id":23,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"24:1139:8249":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"24:4824:3307":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"2:5508:5081":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"18:0:3146":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:4846:220":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:47832:8086":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:574:6773":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:5782:7330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:11269:155":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"24:5333:2618":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"2:23415:239":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"18:590:5303":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:39957:7940":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:47852:8088":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:8318:8669":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:13101:5809":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:1604:6852":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:42109:87":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"24:918:3336":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"2:41642:3948":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:1576:6833":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:6672:236":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:42559:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:9985:21496":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"23:322:2640":{"crate_id":23,"path":["quote","spanned","Spanned"],"kind":"trait"},"2:46378:8020":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"24:4204:3683":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"1:7670:4540":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:12015:8738":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"5:261:5057":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"24:1862:3374":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"6:4949:7240":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:42605:72":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:2854:5268":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:7284:3948":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:46536:8037":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:11417:8691":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:7406:26448":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"22:0:3266":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"2:42861:8597":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:4411:9327":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:43971:8633":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:8183:8145":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:12074:5602":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"14:221:6582":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:40108:8572":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:527:6748":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:7269:34815":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:14448:6216":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:10376:27358":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:12048:26673":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"24:4168:3680":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"17:10771:5453":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:6687:8435":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"21:2725:1937":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"24:54:2026":{"crate_id":24,"path":["syn","token"],"kind":"module"},"2:15:2780":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:7953:8987":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:47238:8077":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:505:4518":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:10640:8612":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"24:894:35369":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"1:1058:9169":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:8513:8163":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"11:122:5048":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:11250:8193":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"24:3253:1932":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"24:827:3499":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"1:3698:9293":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:22671:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:2837:109":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"16:6513:8421":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:22181:7720":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:1076:8973":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"11:1635:5054":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:9085:26674":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:4351:3537":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:21057:9445":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:10343:3378":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:40358:3482":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:5322:6338":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"24:5353:3349":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"17:13546:5952":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"24:4064:3673":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"20:718:2017":{"crate_id":20,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"24:5493:3365":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"2:42839:151":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"23:35:9245":{"crate_id":23,"path":["quote","ext","private","Sealed"],"kind":"trait"},"24:5017:3334":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"2:9535:124":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:12088:843":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:5063:7295":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:5435:6340":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"20:924:2341":{"crate_id":20,"path":["proc_macro2","Punct"],"kind":"struct"},"16:6545:6357":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:42187:9074":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:1528:6803":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"24:4582:2211":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"24:4492:3279":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"5:1302:8973":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"11:1855:4735":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:483:5127":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"9:393:20373":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"24:3372:3653":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"2:43623:8611":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:44262:8654":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"24:886:35364":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"24:5086:2607":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"16:5760:21388":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:5999:5141":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:6456:8419":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:39971:8562":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:10637:8320":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:4639:14635":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:9277:5420":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:12437:5688":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:2504:6263":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"24:4936:1972":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"17:10916:21581":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:5853:5135":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:11213:7978":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:13868:6044":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"24:926:3337":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"17:13010:5793":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:21093:9447":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"2:44555:8661":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:12090:1211":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:6098:5136":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:1564:4737":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:12077:689":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:14033:6085":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:9794:8529":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:3888:6312":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"24:3970:3667":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"2:44238:8648":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:11381:5508":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:3198:27483":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:4989:7260":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:9312:4811":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:5599:9385":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:2596:6267":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:25817:269":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:10800:8679":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"5:7237:8514":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:10165:21519":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:9233:8185":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"18:582:4311":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:42549:7959":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:2913:5257":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:11342:8686":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:6600:21394":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:10570:9279":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"24:5501:3367":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"20:510:3396":{"crate_id":20,"path":["proc_macro2","LexError"],"kind":"struct"},"9:357:20387":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:5079:29713":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:5073:7296":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:1482:9163":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:21706:9446":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"16:2696:6271":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:22278:32263":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"11:1846:3377":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:43903:14612":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"24:878:35368":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"2:40028:8566":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:6277:5141":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:11639:5497":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:14163:6118":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:3830:6311":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:13685:6004":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:1102:34834":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:6204:9029":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:47861:8089":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:10359:108":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"24:5299:205":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"2:2879:5271":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:6017:21390":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:6741:7583":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"9:330:6674":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:4394:7003":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:13922:6057":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:1257:8467":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"5:6332:9530":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:11665:14601":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:5667:8662":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"11:1036:9170":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"24:252:8965":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"6:6588:7524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:7513:8471":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:40214:3472":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"24:4474:2284":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"2:46180:8014":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:13135:5822":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:7677:213":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:3429:5081":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:4631:7095":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:9137:5416":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:10982:6694":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"20:788:255":{"crate_id":20,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"1:3315:9278":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:7102:21399":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"24:4093:3675":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"18:636:5314":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"3:0:472":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:6261:9028":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:30266:32249":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:6216:4761":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:9547:3524":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:22935:182":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"24:550:132":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"1:7566:8991":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:21490:7716":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:20874:33305":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:11124:21623":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:6318:6353":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:2929:132":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:7689:4529":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:5443:9382":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"5:1011:5057":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:10575:8314":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:9003:21468":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"11:2260:9169":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:7897:8105":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:8606:3951":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:5790:7332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"24:1921:3376":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"2:6211:8527":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"16:4921:6331":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:10869:26678":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"5:1442:3377":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:4728:9362":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"23:504:4225":{"crate_id":23,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"21:2776:2637":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"24:4781:3297":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"2:11227:4684":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:14173:6123":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:12331:115":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:256:35041":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:4759:7137":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:11640:29739":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:14308:6176":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:10036:5434":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:12078:794":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:43818:8565":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:1492:9069":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:6735:7582":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:8363:9363":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:40009:8565":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:7715:4528":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:7523:8472":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:3409:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"24:4832:3309":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"2:3233:14674":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:21925:9245":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:7512:8975":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:2254:99":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:9746:147":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"18:671:25495":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:11507:21479":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:6059:7466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:13966:6068":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:1737:4687":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:45727:7993":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"23:78:2019":{"crate_id":23,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"24:2845:2278":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"2:2783:3545":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:8239:2716":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:9021:4522":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:2537:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"11:666:3378":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"24:4854:3314":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"21:2755:2016":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"18:690:8291":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:3260:14624":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:14346:6186":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"24:870:35365":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"2:39340:7813":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"23:345:2638":{"crate_id":23,"path":["quote","quote_spanned"],"kind":"macro"},"17:8713:21459":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:12724:5735":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"7:78:20365":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:7694:6299":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:4417:6316":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"18:113:25483":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:5774:9399":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:5634:8346":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:4435:3541":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:7265:7666":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:13174:5825":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:9030:81":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"13:226:6629":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"24:1440:25518":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"2:46134:8012":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:5851:7362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"24:4419:3698":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"16:6041:21391":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"24:4296:3689":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"1:11205:26675":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:8909:8172":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"24:336:3513":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"2:21358:9441":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:11850:5165":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:1557:3378":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:14024:6082":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"24:5305:2314":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"2:20861:4311":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:4772:9320":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"11:1862:8498":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"24:4578:3296":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"1:4497:9335":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"21:2631:255":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"17:12810:5747":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:7567:7692":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"24:3066:3643":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"17:13575:5963":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"24:4122:3677":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"6:6703:7572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:8928:8173":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"24:4862:2293":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"17:10370:21524":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:44449:230":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:13113:5811":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"24:5146:3340":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"2:6909:3471":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:41625:3382":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:3461:6307":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:2131:4518":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:42822:8595":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:14434:6209":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:10576:9277":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:46772:8041":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"9:237:7967":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:1546:6814":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"13:110:34960":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"18:707:8294":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:4835:6328":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:4451:7031":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"24:4793:3300":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"16:7768:6288":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:45533:7985":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"0:964:1802":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"11:1842:3378":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:7961:3513":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:3125:9284":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:41328:7947":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:3273:33302":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:4425:7021":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:9976:5115":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:12698:5732":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:22638:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:558:4525":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:12073:1589":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:2574:6266":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"11:860:9167":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:4194:5081":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"24:4564:1954":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"23:148:3972":{"crate_id":23,"path":["quote","__private","HasIterator"],"kind":"struct"},"1:7743:9159":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:5661:8350":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"18:736:25492":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:4523:7066":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"21:0:1138":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"9:486:20371":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"15:394:20490":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:2938:5275":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:6893:6398":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:4728:7121":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:4663:7563":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:14100:6104":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:3401:3446":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:43407:14590":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:44254:8652":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:6037:7459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:12598:5717":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"10:44:6637":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:489:6723":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:13914:6055":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:10447:8501":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:22165:8544":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"24:843:9245":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"1:7945:27360":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:41702:229":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:46355:8019":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:30828:4311":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:11535:8337":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:11647:8694":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:7450:8519":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:10991:9384":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:12543:5708":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:44500:7981":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:9574:35013":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"24:4520:3282":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"5:6814:4742":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"24:1486:2024":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"type_alias"},"17:12252:5641":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"11:1051:20450":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:10776:9364":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:10585:14591":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:32045:8556":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:8582:3378":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:7660:6451":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:2960:33845":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:5864:7371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:11191:5497":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:12688:142":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"11:298:8490":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:12087:1604":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:2450:6261":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:589:9151":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:6043:7462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:11390:8689":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:11488:5162":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:2927:229":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:4548:7078":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:10646:5513":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:4497:6318":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:2628:132":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:6454:3442":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:2969:20527":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:5420:5081":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"16:6361:8413":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:6696:6380":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"24:5091:1949":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"2:46582:8038":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:43073:8600":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:42614:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"16:3600:6308":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:5788:254":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:569:6771":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"24:3389:3654":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"2:32132:4299":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:10367:3382":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:10547:8534":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:6156:8407":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"24:4011:3669":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"5:2690:7710":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:6279:6350":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:4815:7166":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:2924:3693":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:4157:31143":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:1764:654":{"crate_id":1,"path":["std","env"],"kind":"module"},"21:404:35139":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"21:107:4768":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"11:357:5050":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:6205:3467":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:22217:32969":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:2797:2478":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"11:2286:9170":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:11788:5540":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:4934:7231":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:6531:8429":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"11:1072:34953":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:13228:5831":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:8903:3377":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:1931:700":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:12658:5726":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:8887:3378":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"18:491:8284":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:2359:6257":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:6425:8417":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"11:427:34954":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:2875:3422":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:2887:5273":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:13897:6052":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:6401:6283":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"24:3929:3664":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"17:9959:21498":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:9607:21472":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:44242:8649":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"11:344:34950":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:43783:8620":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:22323:8549":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:4621:7094":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:4655:7097":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"5:4002:4737":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:5612:6287":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:43054:7971":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:5915:7395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:14013:6078":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:21364:9443":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:119:15042":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:9131:179":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:9945:5432":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:7880:4918":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:43793:8621":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:3313:9277":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:3043:3567":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:6352:8412":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"24:4928:3331":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"1:2644:9274":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:8323:9334":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:4997:7262":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:43723:8617":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:12970:5789":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:2859:5269":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"24:5192:3345":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"2:4067:4642":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:43335:14584":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:11628:8195":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"24:4585:2291":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"24:674:35195":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"17:13838:6033":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:0:3144":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:13758:6015":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:10714:21614":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:14056:6093":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:42148:94":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"5:7463:8522":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:20919:31807":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:3254:14625":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"15:327:9045":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:6083:20499":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"24:5338:2329":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"6:5905:7388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:6622:7543":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:8345:8150":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"14:165:20461":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:8250:8531":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:4838:7174":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:10903:21582":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:3797:6310":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:5409:9380":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:580:6776":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:22356:9300":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:13792:6027":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:11551:9296":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:44542:4648":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:46104:8011":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"24:1488:3502":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"2:41494:8668":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:4862:6329":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:8181:6302":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:12082:789":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:5056:7292":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"24:1613:3512":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"17:13973:6069":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:12064:398":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"24:4110:3676":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"16:7006:21398":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:4786:7154":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:41694:208":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"24:4076:3674":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"5:5858:4737":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:40335:3466":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:62:14988":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:10392:8531":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:2324:203":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:44131:8645":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:1691:6913":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:13949:6061":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:4847:849":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:12531:5706":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:2644:6269":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:7387:3433":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"20:951:2637":{"crate_id":20,"path":["proc_macro2","Literal"],"kind":"struct"},"5:7259:5068":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:5942:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:11193:8170":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:10195:242":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:3735:9172":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:21055:9245":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:9701:21473":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:10185:9245":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:11448:21478":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:43569:8608":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:8154:21407":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"24:4876:3319":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"24:5082:3335":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"17:14536:6234":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:4468:7037":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"24:4551:1966":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"6:4847:7180":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"5:6956:5098":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:7478:7681":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:45958:8007":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:2540:156":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"4:0:3136":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:11423:8692":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:1639:6881":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:11235:8330":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:685:114":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:9223:31314":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:9910:5112":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:11405:8737":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"24:1965:3378":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"14:0:3142":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:47936:8094":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"21:2534:4760":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"24:4134:3678":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"24:4869:3317":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"1:10193:2322":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"24:4558:1792":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"16:5403:5413":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:45513:7984":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:8825:21462":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"24:5154:3342":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"17:13024:5796":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:5808:9075":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:5088:6336":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"18:719:5315":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:10929:5485":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:5808:7345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:3232:6248":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:3232:21580":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:12484:5700":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:1523:9171":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:1579:8499":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:47989:8097":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:43827:8559":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:11547:5527":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"24:548:229":{"crate_id":24,"path":["syn","error","Result"],"kind":"type_alias"},"11:2351:3377":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"17:11244:5529":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:7931:3453":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:13632:5998":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:11086:21648":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:5336:124":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"5:1503:9070":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"24:5039:2504":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"24:3946:3665":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"2:40367:3483":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"20:797:8282":{"crate_id":20,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"16:8115:8482":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:9921:21509":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:5121:6337":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:8269:9294":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"11:1010:9169":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:2871:5280":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"24:3168:2685":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"24:1771:1942":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"16:7090:8466":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:47380:8078":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:2894:5132":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"24:4810:3304":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"2:46226:8016":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:3958:9302":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"18:515:5299":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:2329:129":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:12790:5744":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:12846:5753":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"18:564:5302":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:1817:9187":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"5:4234:3378":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"24:2862:3633":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"1:5528:9384":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:44246:8650":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"21:2691:2017":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"17:10962:5487":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:7283:3377":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"24:5156:3338":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"6:7538:7685":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"24:3820:3657":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"7:0:1654":{"crate_id":7,"path":["unwind"],"kind":"module"},"24:5314:2317":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"2:2785:248":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:7067:8465":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"24:4180:3681":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"1:3201:27486":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:955:9168":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"11:868:9168":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:7434:32968":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"24:5287:3347":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"1:9015:110":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"11:680:3382":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"24:5150:3341":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"21:244:35125":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"2:39920:8560":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:45988:8008":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:2829:4295":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:1568:4735":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"23:239:4231":{"crate_id":23,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"17:13055:5802":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:4992:3940":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:8895:9412":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"21:2015:4759":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"14:31:8967":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:9455:35039":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:8926:21465":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:7041:8460":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:2543:137":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:7862:8475":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:7625:5153":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:8097:8479":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:7249:4737":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:5384:21385":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:12196:5623":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:5085:7301":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:6915:6292":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"24:344:35360":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"1:11179:8169":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"11:822:9164":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:3523:26329":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"18:548:147":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:22232:7724":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:7534:6296":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"24:3832:3658":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"6:4954:7242":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:14126:6110":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:4770:9319":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:3865:9298":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:10285:9388":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:9390:133":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:897:4737":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:9201:29728":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"6:4480:7042":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:2368:9228":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:13693:6005":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:7621:21403":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:46458:8021":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:2947:5279":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:7938:3456":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"11:2394:4735":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:4066:9308":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:2550:259":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:6924:5148":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:654:15399":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:10227:21528":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"24:2658:101":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"16:2864:6278":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:4461:7034":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"20:740:2637":{"crate_id":20,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"1:8257:8619":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:8973:9411":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:11306:5500":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:884:8497":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"24:3134:3645":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"17:10456:21548":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:9549:3525":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"21:1196:211":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"5:4032:5057":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:11272:8332":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:2903:5258":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"24:4530:2009":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"17:13826:6030":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"15:0:3143":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:9328:2927":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:12723:33251":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:907:4735":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:30252:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:7544:7686":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:4597:9353":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:22902:185":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:6638:5146":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:14316:6179":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"11:796:4735":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"11:2058:8467":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:6268:34986":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:40747:8583":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"24:3791:3655":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"24:4916:3328":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"17:14221:6160":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:4853:7181":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:39060:14623":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:6640:7552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"20:980:3377":{"crate_id":20,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"1:308:1554":{"crate_id":1,"path":["std","thread"],"kind":"module"},"5:822:5063":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:41770:198":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"24:5514:3355":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"6:7287:7667":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"24:5069:2085":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"11:1092:20451":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:6824:4743":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:9035:88":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"24:2229:9245":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"2:41685:4661":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"24:4574:2167":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"2:40265:3475":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"24:3808:3656":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"16:5049:6335":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:2170:4672":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"16:4462:6317":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:6171:7501":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:6811:7634":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:13710:6006":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:10860:8146":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"21:2303:2341":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"24:5148:3339":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"2:47032:8045":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:3594:3382":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:8274:9291":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:12125:14599":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"24:95:4370":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"21:2730:3398":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"24:5507:3353":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"17:14118:6108":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:11886:5559":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:563:6768":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:13085:5805":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:8879:8171":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:22043:8542":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:8839:201":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:13215:5830":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"9:426:20374":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:42654:74":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"20:704:3396":{"crate_id":20,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"2:21457:9245":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:12280:5651":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:9488:35040":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:475:1938":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:6624:9406":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:3276:9282":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:6189:8410":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:10059:5436":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:11847:8610":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:4016:9305":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"21:2427:2018":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"2:40297:3478":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:11886:8616":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:1273:9170":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:12911:5783":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:7488:3458":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:8237:3486":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:14145:6115":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"20:734:1949":{"crate_id":20,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"17:10738:21616":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"11:817:9163":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:8594:21445":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:32038:3538":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"1:4653:9306":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:1779:9177":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:40315:3489":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:6613:7542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:3760:9297":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"3:234:229":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:5017:6334":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:926:9164":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:9222:9072":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:10265:21527":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:4363:5083":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:4070:9309":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"24:2998:3639":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"18:599:5259":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"21:989:255":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"2:40537:3486":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"24:5102:2027":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"6:123:15043":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:6883:7660":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"24:4390:3696":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"6:1912:16390":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"24:4487:3280":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"2:47776:8084":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:4406:7008":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:2384:9232":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:4611:7093":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:44019:8634":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:14355:6188":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:4721:7120":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:2160:631":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:12373:5659":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:11845:5550":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:41633:3377":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"20:676:3513":{"crate_id":20,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"2:2172:4673":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:41617:3378":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"5:2035:3513":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:13202:5829":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:4415:3540":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:45579:7987":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:4195:9330":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:6485:6284":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:9531:35032":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:2012:21530":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:12098:5606":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:44097:14613":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:11048:21637":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:43495:8603":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:5079:7298":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:13148:5823":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:10626:8611":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:207:4653":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"11:2368:4737":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:8389:8151":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:9207:5418":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:4540:7074":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:7568:6298":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:3915:6313":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:9543:3527":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:8957:9409":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:14282:6167":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"24:4845:3312":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"2:43587:8609":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"23:272:2027":{"crate_id":23,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"2:44250:8651":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:7024:3436":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"24:4920:3329":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"2:44151:8646":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"24:4892:3322":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"1:1842:9193":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:11991:5587":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"24:2539:3621":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"24:3982:129":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"17:1184:21504":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"5:7299:8515":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:11710:5500":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:43505:2927":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:42869:8598":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:4900:7206":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:11393:132":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:5369:14576":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:30196:4599":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:4734:7124":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:1781:9178":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"21:183:4388":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"16:6929:6401":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:2881:6279":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:40245:3473":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:2942:5278":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:8715:14598":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:40761:3442":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:11651:8979":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:4573:7091":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:8337:9295":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:6960:21396":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:40080:8571":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"20:821:1937":{"crate_id":20,"path":["proc_macro2","imp","Group"],"kind":"enum"},"17:9172:5417":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:11511:9297":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:7613:21402":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:2669:9208":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:12750:207":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:6030:7458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:7590:7698":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:6499:6301":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"24:4900:3324":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"18:614:35043":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"24:5504:3368":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"2:21279:9444":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"5:6584:3377":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:12072:1502":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:12130:14597":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"10:36:6636":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"24:5488:3364":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"2:6027:3490":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:6560:5047":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:12076:687":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:10628:8319":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:10805:8666":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:2178:21525":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:840:3378":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"21:648:3561":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"2:10474:14586":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:4379:6996":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:3049:20528":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:11074:21647":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:45758:7994":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"24:3321:3650":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"2:40205:3462":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:11654:8694":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:6082:7472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:40754:3440":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:43940:8630":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:434:5367":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"24:1530:2963":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"5:4164:5081":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:42323:3526":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:5994:14962":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:7503:6295":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:32020:2106":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"11:324:8493":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:1760:4686":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:3236:9280":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:5696:21387":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:14083:6100":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:12065:995":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"24:922:3011":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"2:39993:8564":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"11:772:8497":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:8036:9080":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:12024:5593":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:10520:8310":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:9086:5414":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:504:21457":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:9867:5430":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:2744:6273":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:10698:21594":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:4136:3549":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:2461:7707":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:10573:9281":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"5:3178:8499":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:4561:7082":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:13298:5847":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:39326:7812":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:21488:9449":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"12:0:3141":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:7934:3455":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:7474:21401":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"21:367:4762":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"2:44513:173":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:46612:8039":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:11186:14588":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:4745:7131":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:7320:3377":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:2934:5277":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:40236:3464":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"18:481:8283":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"11:841:9166":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:4985:5081":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:14420:6207":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:3358:9270":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:11815:5546":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:4361:3538":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:21149:9452":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:4406:3539":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:43306:8536":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:11153:14587":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:3170:214":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"21:1020:3558":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"2:3022:3547":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"24:3999:3668":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"2:22968:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:46848:8043":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:5905:8371":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:10084:21495":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:4056:9307":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:0:873":{"crate_id":6,"path":["libc"],"kind":"module"},"1:10135:29723":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"17:14090:6101":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"9:0:3138":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:10009:8588":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:4823:7170":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:1718:6924":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:7342:34998":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:12066:447":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:1825:181":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:9184:8676":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:8599:8673":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:6981:5101":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:913:9163":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:12123:5609":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:6686:7571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:5939:8377":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:46324:8018":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"11:389:5052":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"11:1562:20455":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:14269:6161":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:3171:3378":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:20902:31810":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:13802:6028":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"24:4924:3330":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"24:4841:3311":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"20:708:3558":{"crate_id":20,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"17:10494:8307":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"24:3236:256":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"17:12111:5608":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:2497:9245":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:12081:793":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:12671:5458":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:13981:6070":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"24:2811:3631":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"2:2498:14647":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:13259:5837":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"24:3958:3666":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"1:7555:2031":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:6376:21393":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"24:3117:231":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"16:8050:3280":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:3800:4735":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:6753:8437":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:41311:7945":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:9071:8177":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"23:0:1191":{"crate_id":23,"path":["quote"],"kind":"module"},"16:6844:6392":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:4759:715":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:8572:8670":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:6879:6396":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:2907:6280":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:10588:8315":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:21481:9245":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:42814:8593":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:43537:8534":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:3330:4735":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:40785:3448":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"24:4151:3679":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"18:96:25482":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:14001:6077":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"18:521:25496":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:2409:3151":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:622:8981":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:4986:6333":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"21:2504:3559":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"17:0:3145":{"crate_id":17,"path":["object"],"kind":"module"},"17:11951:5576":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:596:6786":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"24:4943:2561":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"2:47692:8082":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:8607:3950":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:9752:21474":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:7885:9240":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:10750:5451":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"24:5372:3351":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"6:7520:7682":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:3948:5081":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:41481:8591":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:9886:21489":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:11082:5158":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"24:5357:2502":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"17:10366:21535":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:12711:5734":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"24:2879:3634":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"5:4393:5081":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"20:728:1937":{"crate_id":20,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"1:2604:8986":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:4978:7254":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"24:5103:2292":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"2:44457:210":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:1751:7713":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"24:5456:3356":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"5:3720:3513":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:2394:9237":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"21:433:5043":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"24:5363:3352":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"16:5816:8362":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:47814:8085":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:9789:14652":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"24:4987:2501":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"6:4968:7248":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:40122:9210":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:10012:5440":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:4179:9328":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"24:3219:2549":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"24:4904:3325":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"17:11872:5558":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:6325:223":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:638:9154":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:4889:6330":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:1672:5057":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:11226:8329":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"24:1620:2025":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"18:755:8301":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"24:910:35367":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"17:10980:5440":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:6190:5140":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:5752:7305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:4488:7047":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:14514:6228":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:13851:6039":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:7526:7683":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"24:3083:3644":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"6:6720:7577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:4022:9306":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:507:6731":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:12070:336":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:14042:6086":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:11000:5489":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"24:1329:3517":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"17:14068:6096":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:1703:6917":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"24:4849:3313":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"24:0:1789":{"crate_id":24,"path":["syn"],"kind":"module"},"16:6721:21395":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:8440:8160":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"24:4402:3697":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"2:46156:8013":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:47951:8095":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:11586:5528":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:10511:5156":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:4643:7096":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"24:1132:8246":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"5:1411:3378":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:10126:8302":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:39099:4644":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:9533:115":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"11:2303:20456":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:46202:8015":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:13739:6014":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:7487:246":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:2782:3564":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:6092:7475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:10112:21517":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:45847:7998":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:12473:5697":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:9372:5423":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:21927:9442":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:8031:29751":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:2835:1975":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:2722:6272":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:2216:9224":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:13286:5840":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:12043:5598":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:9852:21488":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:2775:240":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:41345:9292":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"24:2896:3635":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"2:2792:250":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"24:4548:3295":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"6:4700:7108":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:14401:6202":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:782:5060":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"24:5377:3350":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"1:3234:9279":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:7937:123":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:7796:2106":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"18:80:25481":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:14499:6227":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"0:0:1811":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"5:7375:3432":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:9537:3518":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:44266:8655":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"21:2242:3399":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"16:7462:6446":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:7587:4736":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:4373:6995":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:22205:8547":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:9998:5404":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:7792:21405":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:727:148":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:4418:7017":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:11337:21651":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:5568:3477":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:10197:21541":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:3325:3548":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"24:5510:3354":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"11:2317:3378":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"21:140:4771":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"2:3037:2278":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"5:6465:4737":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:12032:9082":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:1471:2500":{"crate_id":2,"path":["core","mem"],"kind":"module"},"17:13274:5500":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:4494:7050":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:2223:34861":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:1596:6847":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"14:202:2381":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:6415:8416":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:5866:8369":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:2568:5129":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:6742:8436":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"11:1687:150":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:46010:8009":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"20:946:1949":{"crate_id":20,"path":["proc_macro2","Ident"],"kind":"struct"},"1:5781:9400":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:7776:9195":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:2366:4663":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:8588:8168":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:548:6760":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:1496:6790":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:40092:32968":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:2832:6277":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"11:703:9069":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"21:2705:3558":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"21:2270:1937":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"6:4892:7201":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:4792:7157":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:11617:5529":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:495:6726":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:12086:1607":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:11572:9298":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"24:4516:3281":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"17:13723:6011":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:39201:215":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:1138:34832":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"21:958:4777":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"16:2933:20526":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:582:2031":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:8978:21467":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"24:1973:3380":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"1:9106:8180":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:2501:9273":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:9530:115":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:4943:7237":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"11:829:9165":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:43687:8615":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:2219:4678":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:7436:6445":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"14:40:1949":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"24:4221:3684":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"17:8953:21466":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:45687:7991":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"24:2556:3622":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"24:5010:2576":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"6:6009:7446":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:14478:6224":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:416:177":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:4949:6332":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:8206:9244":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:9912:21491":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:9350:5422":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:6912:266":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:22836:183":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:14156:6116":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:14522:6231":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:9486:229":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"6:4501:7053":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:40035:8567":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:13676:6003":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:11098:21625":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"24:3406:270":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"2:48028:8098":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:4020:33124":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:4829:7171":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:43069:8599":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:1570:6831":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"24:3878:3661":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"17:8848:21463":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"11:785:4737":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:44330:14769":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:2844:3421":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:40274:3476":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"24:4279:3688":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"2:1634:630":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:40061:7941":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:6023:7457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:11201:8321":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:47913:8093":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:8205:21409":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:11761:5539":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:40255:3474":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:13244:5833":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:10139:21518":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"24:555:5255":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"11:693:3377":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:41608:1998":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:12959:5788":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:12086:5603":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:10830:8105":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"24:5348:2545":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"17:9445:21469":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:276:1997":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"24:4262:3687":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"24:4308:3690":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"6:6835:7642":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"24:2947:3638":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"24:552:8245":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"2:47966:8096":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:8367:7552":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:6790:7620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:3076:3387":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:11062:21646":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"7:31:20358":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:22149:7719":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:7554:6297":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:3204:8500":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:11389:21476":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:22803:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:7606:5151":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"11:2461:1937":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:2865:5270":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"24:4858:3315":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"6:4884:1061":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:12085:1606":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:5830:8363":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"24:2573:3623":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"6:1514:6798":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:1561:3377":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:47872:8090":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:12934:5784":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"24:3912:3663":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"2:4278:224":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"24:4797:3301":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"6:5935:7411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:4849:9316":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"21:2592:3559":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"17:13554:5955":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:1507:6795":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:1924:9205":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"24:5343:2544":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"6:7293:7669":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"21:1819:4758":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"1:4826:5133":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:12069:1112":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:12083:1608":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"24:3866:3660":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"24:2743:3628":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"2:41517:7954":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:7975:33108":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:10316:5445":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:8194:8146":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:41675:3949":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:10788:21617":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:9972:21497":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"20:700:255":{"crate_id":20,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"23:38:3016":{"crate_id":23,"path":["quote","format_ident"],"kind":"macro"},"2:40397:3485":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:45657:7990":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:46694:8040":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"11:731:9070":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:12750:5739":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:7626:171":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"11:1876:8500":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:4344:6315":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:43641:8612":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"5:3568:175":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:1983:200":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:41834:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:2787:112":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:4346:6972":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:45557:7986":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:8281:6504":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:40795:3450":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:5626:3465":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:2991:4643":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:3475:9242":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:943:9166":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"11:2487:6634":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:5574:6282":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:2617:120":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"20:900:1937":{"crate_id":20,"path":["proc_macro2","Group"],"kind":"struct"},"2:43246:32994":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:1664:6900":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"18:574:5296":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:13890:6050":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:4592:7092":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"24:4880:3320":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"2:43297:8535":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:32024:2716":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:10468:9386":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:39243:217":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:6818:8450":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:3009:121":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:6346:9044":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:21711:9454":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:40776:3446":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:12576:5716":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:4348:267":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:5982:8380":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:4613:6322":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"23:235:4229":{"crate_id":23,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"1:5459:9383":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:46882:8044":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:9545:209":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:10114:9187":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:6849:7651":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"5:2970:25931":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"18:766:25493":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:7015:6406":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:10430:21571":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:5820:7349":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:7769:8663":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:10468:5448":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"24:902:35366":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"2:43669:8614":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:4719:6324":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"24:2590:3624":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"2:44108:8637":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:3243:256":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"20:771:3399":{"crate_id":20,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"17:11281:5499":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"5:1464:8496":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"21:2636:3396":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"24:1618:1791":{"crate_id":24,"path":["syn","parse_macro_input"],"kind":"macro"},"24:4525:1963":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"17:13667:5999":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"15:306:20481":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:3518:4737":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"5:7291:213":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:6151:7487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:12007:5591":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:11261:8331":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:4859:7184":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:4309:6944":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:2918:3691":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:5419:5414":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:1429:150":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"24:3355:3652":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"20:811:2017":{"crate_id":20,"path":["proc_macro2","imp","Span"],"kind":"enum"},"6:1710:6920":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:8244:2927":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:12037:9161":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:10397:21570":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:6226:21392":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:7162:31144":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:1632:6877":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:1590:1986":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:5423:9381":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:2891:5274":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:5844:7358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:7391:21400":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:12154:5618":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:6856:7654":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:7722:6290":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:9517:5155":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:47630:8081":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"24:2041:3384":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"17:13778:6023":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"24:3202:3647":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"2:47490:8079":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:39161:216":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"24:5302:2601":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"6:4555:7080":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"19:0:1092":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:5712:8352":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:39513:28042":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"5:2170:8505":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:4032:33119":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"24:3032:3641":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"2:45810:7996":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:11573:8338":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:43417:8540":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:12105:3778":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:5268:205":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:6015:223":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:7624:7705":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:2786:247":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:7758:9160":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:1895:8983":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:12554:5709":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"24:2034:3382":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"5:7571:4735":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:10512:14594":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:8530:9375":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:41761:3377":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:3565:21599":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:9063:1943":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"8:0:3137":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:6633:7548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"24:4896:3323":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"2:11810:8605":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:5020:7270":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"24:2675:2543":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"6:483:6720":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"24:1725:9087":{"crate_id":24,"path":["syn","path","printing","span","QSelfDelimiters"],"kind":"struct"},"2:9993:5116":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:43489:8602":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:40042:14642":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:4441:7025":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:3072:2561":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"24:3304:3649":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"5:7420:8516":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"24:2624:3626":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"2:44274:7978":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"20:15:25520":{"crate_id":20,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"17:11473:5381":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:20889:33305":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:10507:8309":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:6051:7464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:44046:8635":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:6145:7486":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"13:0:3135":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:12895:110":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:261:35023":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:3532:9243":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"20:357:3396":{"crate_id":20,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"17:10186:8305":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:2276:107":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"18:538:5300":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:9823:21487":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"24:1598:3500":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"17:10616:8317":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"20:904:3398":{"crate_id":20,"path":["proc_macro2","Delimiter"],"kind":"enum"},"2:40283:8576":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"24:3151:3646":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"17:14076:6099":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"24:2522:3700":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"2:40016:14641":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:47887:8091":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:895:3378":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:7254:3441":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"20:802:35069":{"crate_id":20,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"1:3514:3523":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:10603:8316":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:4078:9311":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:2908:4232":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:5135:5087":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:11088:5159":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"24:4837:3310":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"11:1127:20452":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:4768:9317":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:6968:21397":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:7269:34984":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:4044:105":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:9711:35011":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:12685:5731":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:4667:7567":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"24:2913:3636":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"24:4785:3298":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"6:5030:7275":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:1374:96":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"}},"external_crates":{"23":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.33/"},"20":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.69/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.12/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.38/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}