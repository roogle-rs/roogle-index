{"root":"0:0:1671","crate_version":"1.0.159","includes_private":false,"index":{"2:11967:35594":{"id":"2:11967:35594","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:14123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11935:2529":{"id":"2:11935:2529","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:40639:176","prim@char":"1:11864:410","self::pattern":"2:11595:14125"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11916:29259":{"id":"2:11916:29259","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11917:29260"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5341:36256":{"id":"5:5341:36256","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7210:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:323-0:952:1774":{"id":"0:323-0:952:1774","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[5,0],"end":[5,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:952:1774","glob":false}},"2:12005:35605":{"id":"2:12005:35605","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:14125"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12011:1864":{"id":"2:12011:1864","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11557:126","`FromStr`":"2:11556:3237"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11556:3237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11556:3237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11984:35599":{"id":"2:11984:35599","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11906:1884":{"id":"2:11906:1884","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:40639:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11970:3062":{"id":"2:11970:3062","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11595:14125","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::matches":"2:11970:3062"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:42838:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5344:36257":{"id":"5:5344:36257","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7210:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11990:35603":{"id":"2:11990:35603","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:14125"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11620:14121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11976:35596":{"id":"2:11976:35596","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11595:14125","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::rmatch_indices":"2:11979:35597"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:42784:8184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11952:35591":{"id":"2:11952:35591","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11595:14125","str::split":"2:11943:29267","prim@char":"1:11864:410","`DoubleEndedIterator`":"2:7203:120","str::rsplit_terminator":"2:11955:35592"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:42684:8178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11993:1903":{"id":"2:11993:1903","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:14125"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5352:36258":{"id":"5:5352:36258","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7210:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11925:32709":{"id":"2:11925:32709","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:42926:8193","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11996:26295":{"id":"2:11996:26295","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:14125"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11908:29234":{"id":"2:11908:29234","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:40639:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5354:3265":{"id":"5:5354:3265","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7210:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11964:35593":{"id":"2:11964:35593","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11902:2720":{"id":"2:11902:2720","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11163:14126"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11923:31979":{"id":"2:11923:31979","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:42888:8189","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11939:4087":{"id":"2:11939:4087","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:40639:176","prim@char":"1:11864:410","self::pattern":"2:11595:14125"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:14123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11903:35587":{"id":"2:11903:35587","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11904:310":{"id":"2:11904:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11905:29237","`u8`":"1:11881:1471"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11946:29269":{"id":"2:11946:29269","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:14125"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11419:8100","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12017:35607":{"id":"2:12017:35607","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4541:35607"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:42933:8136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11894:799":{"id":"2:11894:799","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11864:410"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12013:4411":{"id":"2:12013:4411","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:62:341":{"id":"0:62:341","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1796,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:84-0:956:1868"],"is_stripped":false}},"5:5338:2021":{"id":"5:5338:2021","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7210:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12020:35608":{"id":"2:12020:35608","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4539:35608"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:42951:8130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5353:36259":{"id":"5:5353:36259","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:286:1841","`String`":"5:7210:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1841","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6961:4428","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:372-0:348:1775":{"id":"0:372-0:348:1775","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[8,0],"end":[8,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:348:1775","glob":false}},"2:11929:29277":{"id":"2:11929:29277","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:14125"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:927:1656":{"id":"0:927:1656","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[92,0],"end":[97,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"2:11955:35592":{"id":"2:11955:35592","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11595:14125","str::split":"2:11943:29267","prim@char":"1:11864:410","str::split_terminator":"2:11952:35591"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:42702:8179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:14123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11914:35588":{"id":"2:11914:35588","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11870:1374","str::slice_mut_unchecked":"2:11915:35589","crate::ops::Index":"2:3016:2260"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11919:2304":{"id":"2:11919:2304","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11864:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:42610:8173","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11986:35600":{"id":"2:11986:35600","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11895:1991":{"id":"2:11895:1991","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12014:4412":{"id":"2:12014:4412","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5337:36255":{"id":"5:5337:36255","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1841","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6961:4428","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1841","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6961:4428","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11899:35586":{"id":"2:11899:35586","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11897:35585"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11989:35602":{"id":"2:11989:35602","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12015:4413":{"id":"2:12015:4413","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5336":{"id":"5:5336","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5247:1374","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5337:36255","5:5338:2021","5:5341:36256","5:5344:36257","5:5352:36258","5:5353:36259","5:5354:3265","5:5355:2301","5:5356:2300"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11922:32697":{"id":"2:11922:32697","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11921:32666"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:42917:8192","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1671":{"id":"0:0:1671","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[110,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2018\n# use serde_derive::{Serialize, Deserialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.159\")]","#![allow(unknown_lints, bare_trait_objects)]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: derive_partial_eq_without_eq, clippy ::\nenum_variant_names, clippy :: manual_map, clippy :: match_like_matches_macro,\nclippy :: needless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: let_underscore_untyped, clippy ::\nmanual_assert, clippy :: map_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:927:1656","0:928:1665"],"is_stripped":false}},"2:11912:29236":{"id":"2:11912:29236","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5355:2301":{"id":"5:5355:2301","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12015:4413"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11961:29275":{"id":"2:11961:29275","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11864:410","str::splitn":"2:11958:29273","self::pattern":"2:11595:14125"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:42756:8182","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:14123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11988:35601":{"id":"2:11988:35601","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:981:1871":{"id":"0:981:1871","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}},"5:5356:2300":{"id":"5:5356:2300","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12016:4414"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11896:35584":{"id":"2:11896:35584","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11897:35585":{"id":"2:11897:35585","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11926:1921":{"id":"2:11926:1921","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:14125"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11973:35595":{"id":"2:11973:35595","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11595:14125","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::matches":"2:11970:3062"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:42856:8188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:14123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:84-0:956:1868":{"id":"0:84-0:956:1868","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[22,0],"end":[22,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"internals::case::RenameRule","name":"RenameRule","id":"0:956:1868","glob":false}},"0:8:1772":{"id":"0:8:1772","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[202,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":false}},"2:12019:3371":{"id":"2:12019:3371","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4542:3371"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:42942:3372","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11999:29279":{"id":"2:11999:29279","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:14125"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:14123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11958:29273":{"id":"2:11958:29273","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:14125","str::rsplitn":"2:11961:29275"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:42738:8181","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11979:35597":{"id":"2:11979:35597","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11595:14125","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::match_indices":"2:11976:35596"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:42802:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:14123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11915:35589":{"id":"2:11915:35589","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11870:1374","crate::ops::IndexMut":"2:3020:3220","str::slice_unchecked":"2:11914:35588"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:12008:35606":{"id":"2:12008:35606","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:14125"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:14123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11982:35598":{"id":"2:11982:35598","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:928:1665":{"id":"0:928:1665","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[100,0],"end":[105,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"2:11893":{"id":"2:11893","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:11158:1374","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11894:799","2:11895:1991","2:11896:35584","2:11897:35585","2:11899:35586","2:11902:2720","2:11903:35587","2:11904:310","2:11905:29237","2:11906:1884","2:11908:29234","2:11910:29235","2:11912:29236","2:11914:35588","2:11915:35589","2:11916:29259","2:11917:29260","2:11918:2310","2:11919:2304","2:11920:8090","2:11921:32666","2:11922:32697","2:11923:31979","2:11924:35590","2:11925:32709","2:11926:1921","2:11929:29277","2:11932:29278","2:11935:2529","2:11939:4087","2:11943:29267","2:11946:29269","2:11949:29271","2:11952:35591","2:11955:35592","2:11958:29273","2:11961:29275","2:11964:35593","2:11967:35594","2:11970:3062","2:11973:35595","2:11976:35596","2:11979:35597","2:11982:35598","2:11984:35599","2:11986:35600","2:11988:35601","2:11989:35602","2:11990:35603","2:11993:1903","2:11996:26295","2:11999:29279","2:12002:35604","2:12005:35605","2:12008:35606","2:12011:1864","2:12013:4411","2:12014:4412","2:12015:4413","2:12016:4414","2:12017:35607","2:12019:3371","2:12020:35608"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11910:29235":{"id":"2:11910:29235","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11921:32666":{"id":"2:11921:32666","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11922:32697"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:42908:8191","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11949:29271":{"id":"2:11949:29271","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11595:14125","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::split":"2:11943:29267"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:42652:8101","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:14123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11932:29278":{"id":"2:11932:29278","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:14125"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:14123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11917:29260":{"id":"2:11917:29260","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11916:29259"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12002:35604":{"id":"2:12002:35604","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:14125"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:14123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11943:29267":{"id":"2:11943:29267","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11595:14125","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::split_whitespace":"2:11921:32666","str::rsplit":"2:11949:29271"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:42634:8098","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:14122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11918:2310":{"id":"2:11918:2310","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11864:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:42604:8172","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11924:35590":{"id":"2:11924:35590","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:42898:8190","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12016:4414":{"id":"2:12016:4414","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11920:8090":{"id":"2:11920:8090","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:42620:2733","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11905:29237":{"id":"2:11905:29237","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11881:1471"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"17:12972:5772":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:30581:4070":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:2714:2388":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:653:14967":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:2878:5024":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:29989:4260":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:8926:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:4882:6967":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:3346:4830":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:7201:7392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"24:5298:2443":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"24:4937:61":{"crate_id":24,"path":["syn","expr","parsing","raw"],"kind":"struct"},"2:45751:7644":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:1509:6514":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"24:3363:3437":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"1:1786:8743":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"24:4907:3161":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"1:10704:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:41074:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:5772:7092":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:21793:8116":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:10875:5261":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:10121:5214":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:5759:7083":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:9084:111":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"17:9250:21033":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:42592:8171":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:3403:14143":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"6:5752:7079":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:2905:2032":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:3519:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:43357:8219":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"21:2744:1857":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"24:4183:3466":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"17:8981:21017":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:6536:4520":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:2815:5027":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:11412:8857":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:505:6455":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:22141:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:7681:8231":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:13148:5818":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"24:3782:3439":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"2:2784:4066":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:3125:21113":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:679:8724":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:10849:26296":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:9422:21042":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"24:4422:3483":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"24:4489:1989":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"1:8056:8804":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:4191:3335":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:5843:7132":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"24:2870:3418":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"2:3352:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"5:1228:8734":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"24:3811:3441":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"1:8234:8895":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"5:1463:8736":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:40840:3210":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:11093:7782":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:1541:6527":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:586:6505":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:7704:8648":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:8217:3697":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:29763:8858":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:8868:8974":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:11288:5345":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:7203:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:1534:6524":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:4628:6833":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:6330:6072":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:12211:33186":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:5664:7942":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:4618:6826":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:41980:8167":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:7372:36625":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:36:4429":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:22075:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:7665:8721":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"14:160:8634":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"21:140:4565":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"17:11893:5461":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"24:5119:3172":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"10:0:2955":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:8393:21012":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:9283:21049":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:3671:8737":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:40914:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"24:5154:2164":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"17:12674:5706":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:43653:4426":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:7166:20945":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:43611:7580":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:4981:7014":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:2255:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:2869:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:10497:21183":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:7819:8235":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:44322:7587":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:553:6487":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:40588:8236":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:21136:9018":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"16:6472:6095":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:933:8729":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:12177:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:12617:5668":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:847:3211":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"12:1085:20008":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:44921:7614":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:22108:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:39558:3295":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:1520:6519":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:8776:7771":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:4795:783":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:38992:33288":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"6:4583:6822":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:13158:5821":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:46606:7690":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:6363:8966":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:3204:14162":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:2727:5990":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:7567:20950":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:11595:14125":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:10403:5255":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:41970:7566":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:10416:8838":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:540:6481":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"24:5012:2202":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"16:7557:8045":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:12874:5746":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:1903:21091":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:43603:8395":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:9108:21019":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:505:4173":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:6530:7265":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:6322:31025":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"16:7872:8050":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:11106:5311":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:1436:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:8907:7777":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:20725:8878":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"24:4159:3464":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"2:41699:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:39667:3303":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:9031:36682":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:9293:21047":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:11511:8262":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:7659:20951":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:10642:21025":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:2116:8075":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:11556:3237":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"24:498:3221":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"17:8494:5145":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:42578:7573":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"5:2407:7426":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"22:703:3380":{"crate_id":22,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"1:621:8647":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:4439:6785":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:4945:6992":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:41417:3369":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"24:5303:2162":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"2:41636:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"5:1612:4804":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:11186:5322":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:7275:28904":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:4893:3686":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"21:2760:1794":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"2:42450:14106":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:7150:8085":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:6985:4516":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:4781:6906":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:6528:8971":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:11835:8725":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:8295:21009":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:2530:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"24:1601:3320":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"17:10088:5212":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"12:2184:6343":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:40994:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:10708:7911":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:10854:21027":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:10123:8101":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"24:4043:3456":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"2:4394:3348":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:6070:6064":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:6743:20942":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:4274:6697":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:7622:4179":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:8339:21010":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:2386:2966":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:11828:5455":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:6123:5997":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"24:4911:3162":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"2:12510:4427":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"24:826:3319":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"2:1762:4464":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"24:1736:8663":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"17:13279:5877":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:20774:7435":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"24:3261:3432":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"6:7440:7407":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:2749:5991":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"24:2751:3413":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"24:4899:3159":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"5:4269:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:2957:2196":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:11821:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"24:4516:1808":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"17:8911:36695":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:5716:7066":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:9165:36678":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:3089:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"24:4410:3482":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"21:2694:3380":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"2:43568:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"12:1044:20007":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"11:0:2956":{"crate_id":11,"path":["adler"],"kind":"module"},"1:11486:7794":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:7832:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:11199:5323":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:499:6452":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:39439:4852":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"7:32:19841":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:10822:21026":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:4313:6722":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:46551:7685":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:2759:3389":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:7127:3279":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:7498:7421":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:9475:4859":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:4385:3347":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:7469:7414":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:41757:14267":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:2371:8801":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:9318:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"22:766:3234":{"crate_id":22,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"1:3865:8862":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:11997:5497":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"24:4084:3459":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"2:12387:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"5:3610:4804":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:6757:7374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:30011:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"5:5789:14530":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:12816:5732":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:45331:7638":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:7282:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"12:751:4516":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:4353:6745":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"22:806:1858":{"crate_id":22,"path":["proc_macro2","imp","Span"],"kind":"enum"},"24:2785:1807":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"6:4871:6962":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:42532:8107":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"18:652:5042":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"21:1201:193":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"16:2930:20075":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:10445:5228":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"12:810:8728":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:7585:4194":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:5060:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:956:8732":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:6730:3256":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"21:2524:4545":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"1:7865:8653":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"24:5458:3198":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"16:3689:6028":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:39590:3298":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:21710:7446":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"5:5862:4830":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:11074:7791":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"24:336:3333":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"17:9263:21034":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"14:7:8634":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:13134:5816":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:8839:7774":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:4635:6044":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:8643:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:2827:5019":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"22:880:1859":{"crate_id":22,"path":["proc_macro2","TokenTree"],"kind":"enum"},"16:7929:20952":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"11:44:6349":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"6:6521:7264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:13059:5794":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:38800:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"24:2904:3420":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"1:3973:8868":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:39969:3272":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:4649:6845":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:13340:5884":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:5948:3309":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:6903:7778":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"18:609:36701":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:39610:3299":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:4346:6741":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"24:921:2817":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"2:44707:7607":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"24:2666:2241":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"24:1936:3210":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"2:21305:32589":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:7637:8046":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:4766:6899":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"24:5127:3171":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"24:4539:3129":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"17:13374:5896":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:11161:5319":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:4085:4830":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:12211:5536":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:10244:14114":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"21:480:4789":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"1:3161:8839":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:6463:8006":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:31737:6345":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:39392:8143":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:5347:8946":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:41721:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"6:487:6447":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"24:3159:2509":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"6:4787:6909":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:11247:5335":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:20608:9021":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:39716:3306":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:44677:7606":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:3373:7749":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:43134:8204":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:46560:7686":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:8351:7761":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"5:3118:3211":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:3747:4804":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:1065:8734":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:39406:8773":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"2:11609:7881":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:12896:5750":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:11885:1467":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:4322:6727":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:2481:8878":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:3020:3220":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:4900:6978":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:44777:7609":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:38860:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"21:369:4547":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"17:9751:7891":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:6186:5999":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"18:719:5061":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:8806:33811":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"24:5115:1995":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"16:5122:6054":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:646:8723":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:11883:1469":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"5:7290:4514":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:13436:5918":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:4749:6048":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:21687:32698":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:13327:5878":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"24:2717:115":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"2:9092:3368":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:40722:3694":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"12:2080:8735":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"5:5753:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:41949:8166":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"12:1518:20010":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:11706:4914":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:4689:6046":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:11594:5419":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"24:3074:3428":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"12:853:8732":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:2411:5977":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:9776:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:9061:5166":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:4921:6053":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"22:723:1783":{"crate_id":22,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"24:1953:3211":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"1:7671:4589":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"22:874:1858":{"crate_id":22,"path":["proc_macro2","Span"],"kind":"struct"},"6:4301:6720":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:1592:8071":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"18:690:7878":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:6571:7292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"12:0:2957":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:9063:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:2798:5015":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:42500:14103":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:9223:21032":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:5737:7950":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:630:8641":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:39529:3292":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:4144:6031":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"5:5189:14098":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"24:1491:3322":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"17:9644:21054":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:45255:7636":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"24:5313:2243":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"1:7792:4714":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"12:1534:20011":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:4094:8890":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:41933:8163":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:13413:5905":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:11774:5447":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:12514:5582":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:7135:36633":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:9094:3369":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:286:1841":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:4844:8922":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"24:2632:1841":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"1:9092:7783":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:5495:8951":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:5755:4884":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:6541:7270":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:45097:7619":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:1638:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:10630:8925":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"12:1120:20009":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"24:1961:3213":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"6:4877:6965":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"24:4549:1648":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"2:39632:3300":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:12884:5747":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:40637:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:0:487":{"crate_id":2,"path":["core"],"kind":"module"},"1:2539:4876":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:38926:3245":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"5:1413:8068":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:8117:8807":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:2709:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"24:917:3169":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"2:2703:3352":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:5703:7944":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:10828:6418":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"24:4478:3114":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"20:148:3717":{"crate_id":20,"path":["quote","__private","HasIterator"],"kind":"struct"},"17:10608:5120":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"24:4863:3151":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"2:39927:3262":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"20:272:1867":{"crate_id":20,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"18:736:24824":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:21399:8878":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:3277:4514":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"5:1995:8737":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:11875:632":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:38985:2539":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:11547:5413":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:567:6495":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:5990:7194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:2535:5982":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"24:5267:2426":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"2:2521:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:2156:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:6051:9052":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"24:4270:3472":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"2:22837:7460":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"24:3397:244":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"21:2564:3383":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"1:8185:8849":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:4004:33289":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:4318:8888":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"24:1506:3323":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"6:5910:7166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:2217:8789":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"24:5337:3184":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"1:3605:8852":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:1716:4514":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:8241:21007":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:42917:8192":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:12322:5550":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"22:941:1794":{"crate_id":22,"path":["proc_macro2","Ident"],"kind":"struct"},"24:3380:3438":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"2:50262:7704":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"17:13354:5890":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:1788:8744":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:5916:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:43550:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:11873:5460":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:12278:5543":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:4263:3339":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:6654:6110":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:11056:7783":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"24:1909:3209":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"12:2069:8734":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:4237:6669":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:7857:31023":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"21:2612:3374":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"1:4983:31028":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:11345:8180":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:39319:8138":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:9885:21145":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:6884:8657":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"18:0:2962":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:8796:5155":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"9:382:8327":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:9501:5160":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"12:815:8729":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:5014:31028":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:2169:36601":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:9968:8098":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:43365:8221":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"22:14:24935":{"crate_id":22,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"2:39599:3308":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"24:3006:3424":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"24:4521:1850":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"2:42421:8103":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:39305:8136":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"24:258:8633":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"2:39511:3283":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:7552:3273":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"21:2663:1858":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"12:98:8060":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:20886:7435":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"22:919:2174":{"crate_id":22,"path":["proc_macro2","Punct"],"kind":"struct"},"17:11259:5336":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:3026:5067":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"24:5055:3168":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"2:40575:8161":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:3929:8866":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"24:5328:3185":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"2:41660:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:10724:26310":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:2868:3477":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:39681:3304":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"24:4776:3131":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"24:2734:3412":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"16:5793:7914":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:10845:5228":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:7224:8092":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:8441:8935":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:2835:5021":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:40532:1858":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:8638:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:7211:6160":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"5:781:4807":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"20:45:3101":{"crate_id":20,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"17:12033:5502":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:8323:14122":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"24:3949:3450":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"24:4212:3468":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"17:420:5106":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"24:5447:3196":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"2:6879:3259":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:8240:8887":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:1771:21061":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:7278:6011":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:5597:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"24:251:8632":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"24:5007:3166":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"16:2300:5967":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"14:40:1794":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:6961:4428":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:44507:7594":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:5219:5146":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"9:709:7566":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:6210:7988":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:10011:8100":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:9100:3367":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:4327:6035":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:11734:5185":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:13192:5828":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:3923:4516":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"22:816:1783":{"crate_id":22,"path":["proc_macro2","imp","Group"],"kind":"enum"},"2:10729:14109":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:12022:5501":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:9401:5164":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:39489:3282":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:6200:7987":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"12:1832:3211":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"18:660:24822":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:12429:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"1:534:4180":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:7473:1871":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"12:387:36615":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:20645:9022":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"24:4452:3608":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"24:2683:107":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"5:7031:8084":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:4697:6868":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"24:4960:2199":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"21:2765:2462":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"1:0:1366":{"crate_id":1,"path":["std"],"kind":"module"},"1:8300:7752":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:21619:7440":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:12934:5764":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"19:0:1015":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"24:3023:3425":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"18:636:5060":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:5145:4804":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"24:2227:7837":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"12:777:4800":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:8774:5154":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:12850:5744":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:1443:8347":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:12118:5515":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:62:14556":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"16:2557:5983":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:40755:3695":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:44428:7591":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:11576:5418":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:2868:5996":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:1575:4514":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:20439:32586":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:4330:3345":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"18:590:5049":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:12361:5560":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"12:1138:8640":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:9030:3365":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:11871:1453":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:43641:8230":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:14:2599":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:22273:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"5:1314:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:10520:5236":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:44406:7590":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:5556:4882":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:12046:5504":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:1771:599":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:7943:31018":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"20:164:3084":{"crate_id":20,"path":["quote","__private","ext"],"kind":"module"},"6:4451:6791":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:6634:7302":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:10075:21111":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"24:5117:3173":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"18:531:7872":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:1609:6571":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:8979:1847":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:10230:14115":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:4929:6987":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"24:4840:3146":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"2:43369:8222":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"18:80:24811":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:1617:6576":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:11615:14123":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:6123:8359":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"21:0:1059":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"2:44945:7615":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:7173:7389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:12251:5539":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:13091:5802":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:43055:8200":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"24:4828:3143":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"2:7555:3275":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"18:521:24826":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:7117:3252":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:4379:6756":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:21748:32677":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"24:3937:3449":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"2:9943:3215":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:41410:3368":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"24:5443:3194":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"2:1739:4465":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:7543:6004":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:42784:8184":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"24:1035:1794":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"24:1616:3332":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"24:901:36947":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"24:3108:209":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"17:11330:5360":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:247:36679":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"21:2719:3230":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"6:6000:7197":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:10490:5232":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:8174:8854":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:6204:4516":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:4086:8889":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"20:77:1860":{"crate_id":20,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"24:4393:3481":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"2:3016:2260":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:534:7913":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:4673:8881":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:11536:5410":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"22:869:230":{"crate_id":22,"path":["proc_macro2","TokenStream"],"kind":"struct"},"2:2788:3240":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:11870:1374":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:6719:7357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:9382:5162":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:13459:5919":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:1366:3215":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:43441:14324":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:3114:3236":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"9:188:8324":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"24:4934:2260":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"17:11661:5430":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:4812:986":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:10752:5255":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:7522:4898":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:39920:8153":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:10226:26835":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:5494:20932":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:5660:7026":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:13366:5893":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:7825:3114":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"24:2938:3422":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"6:6628:7300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:31773:1947":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"21:2232:3234":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"18:96:24812":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:9627:21066":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:6773:7380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"21:2603:230":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"2:40697:3211":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:13382:5897":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:6488:7241":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"15:214:8314":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:11468:7793":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:10108:21109":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:9185:4599":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:46655:7693":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:5878:20048":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:9371:21019":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:8148:3305":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"5:6653:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:4888:6052":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:39702:3305":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:41194:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:4261:6687":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:1898:8649":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:11070:5304":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:2573:8652":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"24:552:7831":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"17:10546:21023":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:43246:8215":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:21814:8119":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:1645:4255":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:46685:7695":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:13536:5941":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:21401:9016":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:46571:7687":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:4549:6819":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:11620:14121":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"24:2921:3421":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"6:4681:6860":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:7105:3251":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:8483:8238":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:4051:4420":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"18:538:5046":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:2803:5016":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"24:2513:3484":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"12:2190:36609":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:42361:33112":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:40469:7545":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"22:713:1858":{"crate_id":22,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"16:2842:5995":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"12:1872:1831":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"24:3799:3440":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"2:30083:32700":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:5663:4516":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:11800:5450":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"24:5033:2437":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"1:8987:7778":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:3448:8806":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"12:274:8061":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:42802:8185":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:10050:14108":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"24:5279:2150":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"17:10434:7905":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:42412:8102":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"24:5450:2203":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"13:226:6342":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:12695:5711":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:21635:8111":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"24:4780:3132":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"18:727:5064":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"24:5453:3197":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"1:9068:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:1731:6648":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:10139:5166":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:45957:7676":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:4468:6799":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:4571:6821":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"18:491:7871":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"5:813:4810":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:9722:5176":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:42634:8098":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"5:6697:4841":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:4259:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:11559:5415":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"24:4883:3155":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"24:4439:2455":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"24:599:3210":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"9:977:6421":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:11419:8100":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:12748:5717":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"3:229:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:44477:7593":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:8822:36681":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:2487:5980":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:39359:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"24:4352:3478":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"2:8218:3696":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:10357:4903":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:9446:21050":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:12756:5718":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"12:1836:3210":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"21:2608:3229":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"5:1056:35420":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:42738:8181":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:6816:8031":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:10466:7907":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"5:3130:36540":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:44376:7589":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"24:2887:3419":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"17:9820:21142":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:6829:8033":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:43266:8216":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"24:4819:3141":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"7:79:19848":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:1213:8735":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:6517:8007":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:6053:7208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:39289:14180":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"6:4520:6817":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:4307:6721":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:4662:6849":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:1564:3211":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"13:110:36616":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:42513:8106":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:10159:5216":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"24:2649:99":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"17:13557:5944":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:2946:3354":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:46349:7680":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:39449:8786":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"24:609:3211":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"24:4507:3115":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"1:8278:7274":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"3:0:434":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:1527:6522":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:6791:7383":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"9:920:19856":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:1716:6641":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"22:350:3229":{"crate_id":22,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"6:4656:6846":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:9574:4863":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:10332:21181":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:9021:21018":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:5996:8300":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:1589:6557":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"24:877:36943":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"16:6252:7991":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"24:909:36944":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"2:3959:4830":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:4687:6862":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:10138:8953":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:42838:8187":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:9001:26293":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:5596:6058":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"24:2080:2399":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"16:7483:6016":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:6284:6017":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:5472:6002":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:21141:9041":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:5690:7051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:6567:8020":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:9712:5175":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:46457:7682":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"24:126:1783":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"5:961:4804":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:40486:7547":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:42461:7571":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"14:202:2297":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:20696:9013":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:9601:5174":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:11014:5289":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:42898:8190":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:3871:8861":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:40552:32708":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:484:4874":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"5:7210:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:13506:5933":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:860:3215":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:2823:5018":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:6094:7234":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:5378:8948":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:11233:8402":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"24:4101:3460":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"1:5686:8965":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:7446:7408":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"9:676:19862":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:6576:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:4921:6985":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:9539:21057":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:8762:7770":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:13114:5810":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:4314:4830":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:1568:3210":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:10774:5224":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:4564:7285":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"12:1003:8734":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"24:4879:3154":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"17:13024:5785":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:473:1784":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:12909:5756":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:41654:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"1:8852:8973":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:20456:32792":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"22:695:230":{"crate_id":22,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"2:45043:7617":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:7596:33812":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:11017:7771":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:9183:21021":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:39961:3270":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:3439:31419":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"5:4868:4830":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:5813:7109":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:8256:7751":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"11:36:6348":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"6:5722:7069":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:8974:8358":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:40849:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:5203:5145":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:8138:3291":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:7484:8658":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:925:8346":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:11054:5300":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:1597:1831":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:48552:9050":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:1663:6613":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:2967:3391":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"12:697:8347":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:7497:6006":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:3915:8864":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:12265:5542":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:13478:5924":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:4568:7289":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"16:6316:8000":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"18:507:5042":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"24:5028:2434":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"2:1921:4423":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:6926:4896":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:11882:1468":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:5712:8355":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:7123:3280":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:0:804":{"crate_id":6,"path":["libc"],"kind":"module"},"1:1051:8038":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"24:4364:3479":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"17:12730:5712":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"12:1852:8069":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:7849:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:2359:8795":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:4539:6818":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"24:5472:3186":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"24:88:1847":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"17:8212:21006":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"24:3903:3447":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"2:1753:7432":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:6079:7223":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:43198:8206":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"20:322:2464":{"crate_id":20,"path":["quote","spanned","Spanned"],"kind":"trait"},"6:1704:6637":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"22:689:7863":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"2:9919:3211":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:4750:8876":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"12:2205:3251":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:5945:7181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:43560:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:11639:5429":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:12948:5767":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:5878:7153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"24:5123:3176":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"5:2636:7429":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:13404:5903":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:38904:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"21:2550:3384":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"16:5839:20936":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"12:1845:4514":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"16:6270:6000":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:38999:3346":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:39194:8127":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:3051:8843":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"6:1571:6547":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:7559:3276":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:10419:8840":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:20727:9015":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:7948:8360":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:5938:7180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:1899:15948":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:13126:5813":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:4115:4830":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"5:4284:4832":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:12926:5761":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:7267:8039":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:3177:14214":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:43361:8220":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:43429:8227":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:11880:729":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:2852:3994":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:4416:6772":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:1550:6532":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:4680:657":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"24:1338:36906":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"1:6359:3262":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:3667:3210":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:11300:5348":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:4673:6856":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:2793:5014":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"24:3329:3435":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"1:2343:4439":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:3010:20076":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:4862:6956":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:11528:5408":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"24:5254:3180":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"24:4797:3136":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"6:5959:7186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:0:2960":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:5163:6055":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:11889:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"24:4536:3128":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"24:4113:3461":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"2:3198:14163":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"20:0:1088":{"crate_id":20,"path":["quote"],"kind":"module"},"17:10796:5257":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:44996:7616":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:8941:21016":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:42926:8193":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:5724:32871":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:8274:8923":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:9155:21020":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"24:5445:3195":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"1:8510:8241":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:43624:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:42942:3372":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:5967:7188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:3716:6029":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:11864:410":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:9844:21108":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:7435:6166":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"12:1859:8070":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:12955:5769":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:9766:8878":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:1989:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"12:2178:1783":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:4369:6750":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:2916:21110":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"5:677:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:2366:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:10933:4904":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:2345:8792":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:6667:7317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:4849:6051":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"24:4241:3470":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"17:8368:21011":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:4733:6887":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:7288:8042":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:2252:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:9073:7782":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"12:822:8730":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:44298:7586":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:45074:7618":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:11974:5496":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:870:3210":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:4357:6036":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:38976:7536":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:9488:21059":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:271:4804":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"5:6136:4841":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"6:4402:6764":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:11515:5406":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"24:4002:3453":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"2:39581:3297":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:10670:7910":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:6676:6007":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:11436:5372":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"24:4895:3158":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"24:5463:3199":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"2:39520:3284":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:21293:7437":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:9877:8158":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"16:6137:7983":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:11877:731":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:2819:3241":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"24:2802:3415":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"2:9086:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:8967:31027":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:13071:5795":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"24:2581:3408":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:9458:21072":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:11125:5312":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:413:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:46708:7696":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:10867:7772":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:10649:8245":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"18:614:36698":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:9387:4902":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:7319:8044":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:42620:2733":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"24:5059:2432":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"1:8884:8975":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"24:5469:3201":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"24:5475:3187":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"17:8162:21005":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:21800:7458":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:13047:5788":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:10233:21178":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"5:4155:3211":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"21:2699:1859":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"2:12263:14191":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"24:1882:3208":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"2:39936:3264":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:1571:4516":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"24:3057:3427":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"12:1866:8071":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:9700:21079":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:5741:7071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:6109:6067":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"14:0:2958":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:22339:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"24:4381:3480":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"24:5308:2242":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"1:4404:8898":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:39236:8128":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:38816:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"23:0:3083":{"crate_id":23,"path":["unicode_ident"],"kind":"module"},"17:10973:5285":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:5890:7158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"18:766:24825":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:920:8728":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:40874:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:30189:32680":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:22306:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:10455:5231":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:3402:6024":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:8561:5148":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:4669:8877":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:5549:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:6939:3261":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:2831:5020":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:7809:7706":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:6496:20940":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:8820:7773":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:11170:8954":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:4574:6042":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:10694:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"9:33:8320":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"17:9317:21045":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"18:644:5042":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:6052:8299":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:11884:1470":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:5628:7936":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"9:586:6350":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"1:1847:4599":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"12:2053:8038":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:481:6444":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:9691:21080":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:2906:35421":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:4:998":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:7797:8787":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:6704:6115":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:3566:6025":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"12:353:4796":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:2579:5984":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:7298:8043":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:4483:6805":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:8814:3210":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"21:2573:7869":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"6:4389:6759":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:12398:4872":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:9234:33280":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:9589:4867":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:4102:8891":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:6496:7246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:6993:4815":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:9930:5180":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:1422:8728":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:10625:5251":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"12:834:8731":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:5432:8950":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"24:869:36942":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"16:2705:5989":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"22:899:3230":{"crate_id":22,"path":["proc_macro2","Delimiter"],"kind":"enum"},"2:39283:3372":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:8881:36693":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:5823:7116":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:10476:21182":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:13168:5824":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:2329:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"24:2955:2164":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"5:4989:4836":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:3667:8856":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:3125:8070":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:4637:6838":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:7909:8056":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:6171:6069":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:7452:7409":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:38785:8124":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:48935:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:1432:8346":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:11147:4907":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"24:4253:3471":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"17:12073:5506":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:13007:5778":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:4385:6037":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:2706:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:8798:3211":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"24:1487:3223":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"6:7195:7390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:8248:8854":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:2993:6019":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:525:6472":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:42604:8172":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:4703:6871":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:4952:6995":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"24:4793:3135":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"9:956:19857":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:38840:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"24:5345:1780":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"24:2598:3409":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"1:3977:8869":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"24:4815:3140":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"24:4927:1817":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"2:21598:7438":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:2933:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:3923:8865":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:11034:5299":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:12237:5538":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:4714:6879":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:9328:21044":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:5773:4836":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:1981:3333":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:41396:2253":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:2695:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"24:5074:2127":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"6:5000:7022":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"24:4788:3134":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"2:43353:8218":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"18:582:4070":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:42856:8188":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:3772:8857":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:8424:7764":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:2433:5978":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:6161:20938":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"22:925:1857":{"crate_id":22,"path":["proc_macro2","Spacing"],"kind":"enum"},"16:7237:6161":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:4720:6882":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:6059:7209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:46591:7689":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:7343:6014":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:5951:7184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:1674:1071":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"21:650:3385":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"2:39469:3281":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:42430:14107":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:43040:8194":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:4795:6914":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:7059:3694":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:40954:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:9118:36677":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:10997:1794":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:8272:21008":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"12:119:4792":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"12:60:36614":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:11164:8254":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:11350:8856":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:1695:6631":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"24:4990:3167":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"6:572:6497":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:31786:4062":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"7:0:1514":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:6376:20939":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"24:4891:3157":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"17:8666:5151":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:9873:21144":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:7428:7405":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:1710:6640":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:41234:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:9071:36686":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:153:4790":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:3430:3365":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"24:3278:1831":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"12:1840:4516":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"21:1396:1871":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"2:40832:3215":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:21651:7441":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:6735:20941":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:21492:8109":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"24:5042:1926":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"2:11384:8186":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:1083:8640":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:6059:36652":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"24:885:36945":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"17:12087:5509":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"20:150:3716":{"crate_id":20,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:9681:5040":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:41154:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:4457:6794":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:861:4812":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:11888:1108":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:2367:5975":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:8105:7747":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:12781:5728":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:4028:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:1559:6538":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:5441:4520":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"24:4887:3156":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"21:1813:4540":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"24:4142:3463":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"1:5492:7195":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:3316:3266":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"20:37:2819":{"crate_id":20,"path":["quote","format_ident"],"kind":"macro"},"5:6970:3210":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:10672:8253":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:3985:8871":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"24:5121:3174":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"6:7386:7404":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:10182:5217":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"24:344:36941":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"20:504:3987":{"crate_id":20,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"21:2677:3379":{"crate_id":21,"path":["proc_macro","LineColumn"],"kind":"struct"},"24:3886:3446":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"1:11886:777":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"18:681:7875":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:2465:5979":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:40623:7555":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"21:2616:3210":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"1:5327:8945":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"24:4832:3144":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"16:6668:6112":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:2916:25454":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:42951:8130":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:12176:5524":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:2341:5974":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:2524:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"5:3164:36535":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:11666:14132":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:12964:5770":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:7117:36653":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"12:738:8068":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"8:0:2953":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:5447:20931":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"9:649:19875":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"17:10385:7903":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:3185:1831":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:2213:4456":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:4224:6660":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:4841:6941":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"5:1040:35460":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:5433:7919":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:4396:6762":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:7890:8053":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:39246:8129":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:588:2266":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:42756:8182":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"9:827:19946":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:45567:7642":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:7603:6177":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:7052:3210":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:11939:5485":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"18:755:7888":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:2605:5985":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:7396:20948":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:9671:21073":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:6034:1824":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:4519:6040":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:3238:8836":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:939:8730":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:8701:5152":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:2527:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:12134:5516":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"0:927:1658":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"1:11251:8260":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:6399:4893":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:13572:5945":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:5172:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:5815:20935":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:44344:7588":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:2840:3462":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"24:4784:3133":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"24:2564:3407":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"24:1140:7836":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"24:842:8878":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"17:9738:7889":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"24:4555:1799":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"1:5563:4883":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:7193:8091":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:4721:6047":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:5374:5998":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:42487:3281":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"18:481:7870":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:4597:6823":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:9658:21102":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:25647:7461":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"9:111:8321":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"2:11368:8183":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:9764:7892":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"20:239:3993":{"crate_id":20,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"5:7023:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:10202:8181":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"12:1628:4801":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:6512:7258":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:11909:5466":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:11879:733":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:6764:7377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"24:4856:3149":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"5:7164:32683":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:7015:3210":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:950:8731":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"12:861:8733":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:11868:308":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:9303:5160":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"20:34:8878":{"crate_id":20,"path":["quote","ext","private","Sealed"],"kind":"trait"},"6:119:14610":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:4119:3357":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:7034:28505":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"12:2198:6346":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:9362:5166":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:4262:6033":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:2857:5006":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:12797:5731":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:6976:8083":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:10051:2155":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:4757:6896":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:39942:3266":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:9577:5172":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"5:2087:8073":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:4489:6807":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"12:725:8067":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:3457:5071":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:9088:3359":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"24:2163:8878":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"24:5270:2147":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"2:48948:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:31777:8123":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:10257:21156":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:10310:21180":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"24:1136:7834":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"20:10:3100":{"crate_id":20,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"17:10583:21024":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"5:2189:8080":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:4890:6972":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:45537:7641":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:8137:21004":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:42684:8178":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:40764:4434":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"24:4923:3165":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"17:10221:21177":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:4440:3350":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:5931:7178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:42173:7570":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:10283:21154":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:11005:7770":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"24:2022:3215":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"6:6649:7306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:6747:9011":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:21:670":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:307:1422":{"crate_id":1,"path":["std","thread"],"kind":"module"},"2:41274:8351":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:2746:4061":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:6359:8002":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:8096:7746":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:10721:5254":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:2208:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"22:671:3333":{"crate_id":22,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"2:46580:7688":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:6298:7992":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:8493:3211":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"24:94:4142":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"2:3192:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:2077:4173":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:40688:1842":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"24:4919:3164":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"17:9947:21147":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:40503:8851":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:7249:20946":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:40781:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:904:4516":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:12485:5562":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:5313:8944":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:6475:8969":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"24:5125:3175":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"2:41114:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"24:4542:1811":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"6:7434:7406":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:8056:6219":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:3123:31894":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"9:800:6402":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:46747:7697":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:40773:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"12:646:3215":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"22:0:1646":{"crate_id":22,"path":["proc_macro2"],"kind":"module"},"6:6643:7305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:3530:3211":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:4268:3340":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:12008:5499":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:48974:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:2894:20074":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:8790:7772":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:2360:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"16:7388:20947":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:7511:7422":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:10654:8247":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"24:1623:2033":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"6:1723:6644":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"21:2319:1794":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"2:39539:3293":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:10506:5233":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:9111:8244":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:962:8733":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:2282:5965":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:10321:5219":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"24:4014:3454":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"2:20884:9019":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:2961:2113":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:29949:4258":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"5:3728:4514":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:44853:7611":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:9805:5239":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:9909:5178":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:4166:8893":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:4835:8921":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"24:3193:3431":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"2:44584:7598":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:11708:5436":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:355:4192":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:6345:6005":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:13393:5902":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:8811:8349":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:12307:5546":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:2324:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:4334:6732":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"24:4806:3138":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"24:3961:3451":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"5:7307:4515":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"22:772:24833":{"crate_id":22,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"2:39691:3288":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:46533:7684":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:9304:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:8951:36680":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:10949:5271":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:2771:5992":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:21545:8110":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:12768:5723":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:1404:8067":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"24:4849:3148":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"17:9897:21146":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:44276:7585":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:39642:3301":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"24:4224:3469":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"2:9029:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"24:550:127":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"2:20877:8878":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:2615:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:561:6492":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:44446:7592":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:11600:14122":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"15:0:2959":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:8921:8356":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:1076:35462":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"24:4328:3476":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"1:5240:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"24:3125:3429":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"17:8510:5146":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:39498:3291":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:4828:6931":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:2683:5988":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:5999:4885":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:493:6450":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:2210:8788":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:3599:6026":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:39185:8126":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:11881:1471":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:7218:7403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:44729:7608":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"24:1133:7832":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"24:93:8878":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"24:5479:3188":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"1:1074:8735":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"24:2700:3411":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"17:12103:5511":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:0:2961":{"crate_id":17,"path":["object"],"kind":"module"},"17:8441:21014":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:8110:20989":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:2601:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:39730:3307":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"24:3176:1809":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"24:3869:3445":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"1:8168:8189":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:12337:5228":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:42702:8179":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"24:4569:2003":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"6:4910:6979":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:3854:6030":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"13:0:2951":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:546:6484":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:8229:8237":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:4988:7017":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:3632:6027":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:20733:9017":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:8401:7566":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:44232:7583":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"24:1068:1867":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"18:515:5045":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"24:5169:3179":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"1:11846:26308":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:4441:6039":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:6178:4882":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:5510:7925":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:6548:7274":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"22:735:2462":{"crate_id":22,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"16:7970:8057":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"24:5264:187":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"17:11356:5365":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:38699:14161":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:45301:7637":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:10714:7747":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:6743:7365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:2657:5987":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"24:5421:3189":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"16:5388:6001":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:10420:5227":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:4248:6677":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"18:624:36699":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"24:5484:2201":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"2:39312:8137":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:44823:7610":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:21702:7445":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:20458:32789":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:1962:21078":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:20424:32586":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:11721:5439":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"21:2022:4542":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"1:3159:8838":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:1687:6630":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"12:669:8346":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:12225:5537":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:12164:5522":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:1849:8760":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:8014:2539":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:2793:5993":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"5:2908:7428":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:8752:2733":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"9:592:19873":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"24:3973:124":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"16:6017:20937":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:5235:6056":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:8155:2733":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"24:4903:3160":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"16:6781:20943":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:3263:6023":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:4769:32605":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:39326:14181":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:43223:8207":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:4545:6041":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:1580:8069":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:11235:5332":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"5:3659:3333":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:11761:5445":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:11149:8645":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:5786:7102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:8944:26300":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:9090:2253":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:11327:4911":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"24:4801:3137":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"2:46099:7677":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:22438:7459":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"5:1454:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:44899:7613":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:11271:5337":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"24:2210:2464":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"17:12739:5716":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:40446:152":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:38738:4422":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:4246:8894":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:42522:14112":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"24:4565:2001":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"17:10207:21168":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:3199:8840":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"14:187:20024":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:4566:7287":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:10824:8648":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"24:925:3170":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"6:5728:7070":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:9358:8097":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:13527:5939":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:8418:21013":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:13082:5799":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:10837:8950":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:7329:6013":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:42610:8173":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:8180:8853":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:9433:21041":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"20:407:3873":{"crate_id":20,"path":["quote","__private","RepInterp"],"kind":"struct"},"2:48922:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"15:193:20030":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"24:5159:3178":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"1:638:8720":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:10270:21155":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:7980:20954":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:10296:21153":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:4297:6034":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"24:5438:3192":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"6:4751:6895":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:5554:3285":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"14:221:6295":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"12:659:3210":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:8596:5149":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"21:53:4546":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"1:878:8067":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:7309:6012":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"0:928:1666":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"1:9375:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:2831:4879":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:20479:32787":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"24:2530:3405":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"2:39364:8142":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:6241:7990":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:43233:8211":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"18:699:7879":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:50283:7705":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"24:3823:3442":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"2:43408:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"21:2260:1783":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"2:42440:8105":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:5917:7167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:2882:5022":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:3391:8805":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:42888:8189":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:5761:20934":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:4554:8866":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:4817:6050":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:43161:8205":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:13203:5832":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:45601:7643":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:8499:7769":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:40611:7554":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:2809:5017":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"24:4845:3147":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"2:2518:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:11149:5316":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:734:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"24:548:207":{"crate_id":24,"path":["syn","error","Result"],"kind":"typedef"},"2:11163:14126":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:11267:4909":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:9081:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:2998:4421":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"24:3990:3452":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"2:44631:7599":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:12291:5544":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:929:8347":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"24:3142:3430":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"1:914:4514":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"6:7487:7417":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"18:113:24813":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:8475:20990":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:7847:6213":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"24:4875:2055":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"2:46632:7692":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:9982:8754":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:7584:8878":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"24:4483:3113":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"2:48987:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:4629:8924":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:6611:7295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:4805:6920":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:4786:6049":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:4115:8892":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:11518:8262":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"24:3312:3434":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"2:43377:8224":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:6528:8008":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:3232:3353":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:3532:4516":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:11606:5421":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:29983:4259":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"22:797:36844":{"crate_id":22,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"2:39222:7540":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"24:1850:3207":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"2:41988:8168":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:4361:6747":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:4498:8914":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:878:3211":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:39345:7541":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:21727:32689":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:4662:6045":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:11029:26306":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:10762:14110":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:41958:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:11368:5368":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:42908:8191":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:9096:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:2534:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:40824:3211":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:12550:5613":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"24:5342:3183":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"2:4016:33292":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:2886:5025":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:43212:14135":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"24:1533:2742":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"9:505:8338":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"24:3857:3444":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"6:1747:6653":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"24:4772:3130":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"2:4748:8726":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:45491:7640":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:4408:6767":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:11867:1033":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"24:5318:3182":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"1:7873:3333":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"24:0:1645":{"crate_id":24,"path":["syn"],"kind":"module"},"17:8631:5150":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:7044:36645":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:7180:8088":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:41669:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"17:10528:21022":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:9778:7893":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:3269:3355":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:9350:5140":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:7173:3278":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:4340:3346":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"14:31:8634":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:6842:8036":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:12238:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:4671:8880":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:39549:3294":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:1604:6569":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"9:622:19874":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"9:19:8318":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"17:11841:5456":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:6286:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:7942:20953":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:11037:7577":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:3240:8837":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:10161:14113":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:562:1871":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:3455:8824":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:2964:3390":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:44566:7597":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:39376:32683":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:3953:4804":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:46411:7681":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:48961:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:1583:6555":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"21:183:4157":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"21:2494:3383":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"17:10350:5224":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"21:2417:1859":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"17:11951:5487":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:41034:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:4772:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"24:4125:3462":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"24:4171:3465":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"16:5558:20933":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:12349:5553":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"24:3210:2247":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"6:5902:7165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"21:2293:2174":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"24:2989:3423":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"2:42188:8169":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"24:4299:3474":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"2:44875:7612":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:4426:8899":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:1927:8771":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"21:966:4556":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"0:0:1671":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"21:2714:1783":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"1:11876:734":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:4328:6729":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:2361:8796":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:11748:5444":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:5900:4882":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:2891:5026":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:967:21046":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:10209:8948":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:7956:6018":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:43069:8202":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:3670:8855":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:11787:5448":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"12:1029:8735":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:12609:5665":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:11137:5315":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:10950:4906":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:44547:7596":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:6075:4872":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:8806:8972":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:45177:7620":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:4217:6032":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:46209:7678":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:48909:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13176:5825":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"18:707:7881":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:1652:6605":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:46495:7683":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"24:4836:3145":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"6:578:6500":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:40713:3210":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:11315:5354":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:6635:3290":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"12:762:4514":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"24:4860:3150":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"18:599:5008":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:9022:7781":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:1514:6516":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:30564:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:11087:5306":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"4:0:2952":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"6:7481:7416":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:9857:21124":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:1931:21056":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:5800:7103":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:4429:6778":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:2549:4863":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:7601:4177":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:123:14611":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:9040:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:12980:5774":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:8055:20991":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:43385:8226":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:41773:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"22:699:3229":{"crate_id":22,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"17:9193:36674":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:11862:367":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:4414:3349":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"21:246:36791":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"2:2705:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:9526:21058":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:11217:5331":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:6722:4848":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:4064:28500":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:8089:3259":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"24:4811:3139":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"1:7953:8834":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"22:112:36847":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"1:10001:26834":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"22:783:230":{"crate_id":22,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"2:42933:8136":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:7521:7424":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:4727:6884":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:6472:8654":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:13031:5786":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:6593:8021":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:22405:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:7708:1947":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"6:4422:6775":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:7688:8749":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:38958:14215":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:9052:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:10394:7904":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:11617:5422":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:12148:5518":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:13184:5827":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:11874:631":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:8991:36688":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:11887:1524":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"24:1489:1865":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"typedef"},"2:41941:8165":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:6611:31025":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"5:1382:3210":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"21:2369:2462":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"2:42652:8101":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"20:281:1867":{"crate_id":20,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"9:0:2954":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:6827:4909":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"24:4576:2126":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"2:11308:8175":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:4743:6891":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:5614:7935":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:7058:3210":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:6565:4522":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"24:4573:2005":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"17:11853:5457":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"24:3227:231":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"17:12860:5745":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:11174:5321":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:6091:4889":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:12190:14190":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:9475:21060":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:7511:6169":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:44252:7584":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:361:4193":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:4476:6803":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:2867:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:12060:5505":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:40705:3215":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"12:985:8038":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:45413:7639":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:9339:21043":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"24:893:36946":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"16:2825:5994":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"22:946:2462":{"crate_id":22,"path":["proc_macro2","Literal"],"kind":"struct"},"5:686:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:10682:5253":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"24:1405:1863":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"16:2509:5981":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"24:3244:1780":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"2:2847:5007":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:12455:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:11500:5401":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:3188:6022":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"22:825:1794":{"crate_id":22,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"1:11863:923":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:2275:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:3187:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"9:863:19854":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:6403:4804":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"5:6555:4521":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:20858:9014":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:46670:7694":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"24:4055:3457":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"2:20684:8878":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:1554:4830":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:3283:8829":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:8750:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:2772:1820":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"24:4287:3473":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"1:8744:8949":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:4559:6820":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:3120:27160":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:6690:6008":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:487:21003":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:1824:8754":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:6728:7360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:531:6475":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:8222:8236":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:43086:8203":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"24:1332:3337":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"2:1827:3356":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:891:8068":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"24:2217:8878":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"2:39206:32656":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:20671:9023":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:10216:8182":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"24:1448:24850":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"5:5193:14099":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:1586:8070":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"12:1065:36610":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:1645:6601":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:3963:8867":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:6619:6106":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:3217:33052":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:11391:8855":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:39258:8130":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"22:792:7864":{"crate_id":22,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"2:30025:32667":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:7226:3277":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:5477:3296":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"9:896:19855":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:10088:14116":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:242:36691":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:13492:5926":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"22:834:2462":{"crate_id":22,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"1:11865:1487":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"22:729:1794":{"crate_id":22,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"1:8932:4178":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"24:4195:3467":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"24:5322:2200":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"2:2707:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:2261:20049":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"24:2547:3406":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"1:10462:4179":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:6790:6120":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:5541:7930":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:46617:7691":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:11133:14281":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:7469:6015":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:21826:8859":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"12:320:4794":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:11684:5435":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"5:3995:3215":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"21:997:230":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"24:4465:2119":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"24:286:36930":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"2:38882:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:2631:5986":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:4727:4880":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:2320:5973":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:12638:5676":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:9791:7894":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"24:4067:3458":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"24:5435:3191":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"16:6865:8037":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:4413:6038":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:12836:5740":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"24:1089:1867":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"2:42192:8170":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:39651:3302":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:43373:8223":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:12198:5535":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:6542:4894":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:11218:8257":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:6324:3210":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"24:1761:1788":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"24:2836:2113":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"1:5679:8964":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"24:844:5011":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"2:21675:8114":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"21:2739:2174":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"17:9631:21055":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"21:1028:3380":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"5:2912:3425":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:4850:6947":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"21:406:36792":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"24:4026:3455":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"6:4218:6659":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:5525:7928":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:39179:3372":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"15:175:20029":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:3901:8863":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"24:2819:3416":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"17:13580:5948":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"5:7235:8642":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"22:109:7862":{"crate_id":22,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"1:11203:7792":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:6226:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:39006:7537":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:3249:21129":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:2862:3475":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:11869:1344":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"24:5039:2818":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"16:6146:7984":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"18:671:24823":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:4775:6905":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:22372:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"24:151:1847":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"1:3126:31895":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"24:103:4135":{"crate_id":24,"path":["syn","token","CustomToken"],"kind":"trait"},"17:10374:7899":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:46287:7679":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:386:21002":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"24:4871:3153":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"14:165:20017":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:42542:14111":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:20411:4070":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"24:2615:3410":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"16:5184:20047":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"21:107:4558":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"1:7541:4900":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"24:4915:3163":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"2:39567:8146":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:1986:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:2702:3388":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:5411:6003":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:7164:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:6719:36626":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"24:4823:3142":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"17:10360:7895":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:5805:7104":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"20:235:3991":{"crate_id":20,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"24:2029:3217":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"22:505:3229":{"crate_id":22,"path":["proc_macro2","LexError"],"kind":"struct"},"2:43381:8225":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"24:4983:2401":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"2:6682:33115":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:6546:2584":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:11830:8362":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:39266:14179":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"24:4867:3152":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"17:1021:21048":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:6877:20944":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:9557:4862":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:11343:5364":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:8871:21015":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:2482:14186":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:13231:5840":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:4611:6824":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:5363:8947":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:2874:5023":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:44529:7595":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"24:3920:3448":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"6:6698:7343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:641:8722":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:13221:5835":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:39619:3286":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:7160:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:4820:6926":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:4604:14173":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:5460:7923":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:1677:6624":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:13214:5833":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"24:5466:3200":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"16:2389:5976":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"24:3295:3433":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"2:20477:32791":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"24:4340:3477":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"2:43018:14130":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:4962:7000":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:10245:21179":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"24:3091:3346":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"17:13039:5787":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:11485:5397":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:9382:8787":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:2613:8833":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:39951:3268":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"22:895:1783":{"crate_id":22,"path":["proc_macro2","Group"],"kind":"struct"},"16:7357:6162":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:8526:5147":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:13518:5935":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:7093:6142":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:7426:20949":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:8333:3687":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:10921:5265":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"24:2853:3417":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"12:393:36611":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:12630:5675":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:3543:3215":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"24:555:5004":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"16:5949:7978":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:7133:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"12:300:8064":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:6250:4804":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"24:3840:3443":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"17:10894:5264":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:41687:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"17:13100:5803":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:7650:8718":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"22:975:3210":{"crate_id":22,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"1:3201:8841":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:9274:21035":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:8161:8098":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:22240:4185":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:11245:8259":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"24:2972:2461":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"2:41403:3359":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"18:574:5042":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:7463:7413":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"24:3346:3436":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"17:13141:5817":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"21:218:8298":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"6:6594:7293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"24:53:1866":{"crate_id":24,"path":["syn","token"],"kind":"module"},"24:4955:1802":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"5:7001:36527":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:10684:7706":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"24:2768:3414":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"2:9098:3366":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"24:4853:2128":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"21:435:4788":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"1:4632:8898":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:10944:4905":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:10659:8234":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"16:4606:6043":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:5981:7981":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:13594:5951":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:10422:8836":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:4501:6816":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"12:632:3211":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:3151:8071":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:1242:8640":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:8216:3698":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:594:6510":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:11813:5452":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"24:4316:3475":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"18:564:5048":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:39913:3260":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"24:3040:3426":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"6:7475:7415":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:1351:3211":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:10314:8949":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"24:1443:24849":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"17:9553:5166":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:3415:14147":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"17:10062:21112":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:20853:8878":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:2476:8832":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:9831:21143":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"24:4978:2442":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"2:43389:7577":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:1476:2198":{"crate_id":2,"path":["core","mem"],"kind":"module"},"24:5441:3193":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"5:4347:4832":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"14:215:8058":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:5780:7953":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"12:1555:20012":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:7596:4167":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:22207:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"5:3159:8069":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"21:1071:1858":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"6:4994:7019":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:4149:3358":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:21764:32674":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:558:4182":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"24:4511:3116":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"5:217:4431":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:5698:7053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:7802:8234":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"24:673:36905":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"5:1197:8038":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:11878:732":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:22174:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:9119:26840":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"24:5426:3190":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"2:9353:14193":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"}},"external_crates":{"23":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.8/"},"20":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.26/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.56/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.13/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}