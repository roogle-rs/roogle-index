{"root":"0:0:1638","crate_version":"1.0.143","includes_private":false,"index":{"5:6104:63230":{"id":"5:6104:63230","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:432:1806","`String`":"5:8368:216"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1806","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3581:3255":{"id":"2:3581:3255","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3583:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3577:2248","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8602:157":{"id":"2:8602:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8603:1807","2:8604:922","2:8605:4075","2:8608:4076","2:8609:495","2:8611:2121","2:8614:4077","2:8615:4078","2:8616:4079","2:8617:2058","2:8619:2586","2:8621:4080","2:8622:4081","2:8624:841","2:8627:4082","2:8634:2419","2:8636:2415","2:8639:1821","2:8640:2874","2:8641:4083","2:8643:4084","2:8645:4085","2:8648:1308","2:8649:2186","2:8650:4086","2:8654:1808","2:8657:1803","2:8658:4087","2:8659:4088","2:8661:4089","2:8662:1814","2:8664:4090","2:8667:4091","2:8669:4092","2:8679:4093","2:8694:4094","2:8696:4095","2:8700:4096","2:8709:2878","2:8712:4097","2:8714:4098","2:8717:276","2:8724:294","2:8731:2532","2:8738:4099","2:8747:4100","2:8757:1014","2:8764:4101","2:8771:4061","2:8772:4058","2:8773:4063","2:8785:4062","2:8792:4060","2:8804:4059","2:8811:4102","2:8812:4103","2:8817:4104","2:8820:2136","2:8823:4105","2:8824:2879","2:8826:4106","2:8828:415","2:8831:4107","2:8834:997","2:8837:4108","2:8840:604","2:8843:4109","2:8846:907","2:8848:826","2:8850:792","2:8852:713","2:8854:696","2:8856:4110","2:8857:4111","2:8865:4112"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3279:106":{"id":"2:3279:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13482:57800":{"id":"2:13482:57800","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"1:16010:2988","prim@char":"1:16004:2983","self::pattern":"2:13054:5072"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49566:5436","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:117:1825":{"id":"20:117:1825","crate_id":20,"name":"ToTokens","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:118:2461","20:119:2203","20:120:1847"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3178:228":{"id":"2:3178:228","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3180:127","2:3181:1417"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13514:62587":{"id":"2:13514:62587","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:16004:2983","self::pattern":"2:13054:5072"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13084:5076","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10575:4799":{"id":"2:10575:4799","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10576:146","2:10577:34633","2:10578:59749"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1257:1623":{"id":"0:1257:1623","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[91,0],"end":[96,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"2:13488:62577":{"id":"2:13488:62577","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6106:2289":{"id":"5:6106:2289","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:16010:2988"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13418:793":{"id":"2:13418:793","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:16004:2983"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3166:75":{"id":"2:3166:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3168:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13450:1889":{"id":"2:13450:1889","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:16004:2983","self::pattern":"2:13054:5072"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8887:5172":{"id":"2:8887:5172","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7928:5173","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3104:5150":{"id":"2:3104:5150","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3103:4740","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13427:62572":{"id":"2:13427:62572","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3717:5532":{"id":"2:3717:5532","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3648:3267","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10301:3333":{"id":"2:10301:3333","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10302:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6107:2288":{"id":"5:6107:2288","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:16010:2988"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:7928:5173":{"id":"2:7928:5173","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7929:61398","2:7930:61399","2:7931:61396","2:7932:61394","2:7933:61400","2:7934:61397","2:7935:61395"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2967:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"24:2864:3307":{"id":"24:2864:3307","crate_id":24,"name":"Peek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"24:2746:4740","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13503:62581":{"id":"2:13503:62581","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"1:16004:2983","self::pattern":"2:13054:5072","`DoubleEndedIterator`":"2:8448:120","str::match_indices":"1:16010:2988"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49630:5467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:5075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13526:62589":{"id":"2:13526:62589","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13054:5072","prim@char":"1:16004:2983"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:5075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:3089:3298":{"id":"24:3089:3298","crate_id":24,"name":"Parser","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:3090:181","24:3091:2162","24:3092:1828","24:3093:2163"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3411:3459":{"id":"2:3411:3459","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3413:181","2:3414:1233"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8883:5170":{"id":"2:8883:5170","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2957:177":{"id":"2:2957:177","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2958:415","2:2959:4061","2:2960:4058","2:2961:4066"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2926:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2967:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4666:4672":{"id":"1:4666:4672","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4667:4495","1:4668:59533","1:4670:59534","1:4671:59535","1:4672:4673","1:4673:59536","1:4674:59532","1:4676:59537","1:4677:4089","1:4678:4840","1:4679:2058","1:4681:2186"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6105:4703":{"id":"5:6105:4703","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23470:17395":{"id":"2:23470:17395","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23471:61306","2:23472:61307","2:23473:61308"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialOrd","id":"2:23465:5185","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23089:17376":{"id":"2:23089:17376","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23090:7887","2:23091:61633","2:23092:61634"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23082:4740","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13443:2292":{"id":"2:13443:2292","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:16004:2983"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49438:5458","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13512:62585":{"id":"2:13512:62585","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13436:57767":{"id":"2:13436:57767","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3358:3455":{"id":"2:3358:3455","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3360:181","2:3361:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3384:5126":{"id":"2:3384:5126","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3386:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:601:1744":{"id":"0:601:1744","crate_id":0,"name":"symbol","span":{"filename":"src/internals/symbol.rs","begin":[1,0],"end":[68,1]},"visibility":{"restricted":{"parent":"0:7:1614","path":"::internals"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1311:1840"],"is_stripped":true}},"2:3734:137":{"id":"2:3734:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3736:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3729:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23137:5274":{"id":"2:23137:5274","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23774:5183","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23128:4740","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:8:1737":{"id":"0:8:1737","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[202,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":false}},"2:8448:120":{"id":"2:8448:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8449:4067","2:8450:4068","2:8451:4069","2:8452:4070","2:8456:4071","2:8459:4072"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13517:62588":{"id":"2:13517:62588","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:16004:2983","self::pattern":"2:13054:5072"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:504":{"id":"0:504","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[8,0],"end":[8,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:480:1740","glob":false}},"2:13420:62569":{"id":"2:13420:62569","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13079:5075":{"id":"2:13079:5075","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13081:4067","2:13082:61467","2:13083:61468"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13073:5074","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13442:2298":{"id":"2:13442:2298","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:16004:2983"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49432:5457","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13446:33337":{"id":"2:13446:33337","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:16010:2988"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49745:5473","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:2132:6430":{"id":"24:2132:6430","crate_id":24,"name":"IdentExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2133:64116","24:2134:64117","24:2135:1870"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"24:2150:4740","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13064:5071":{"id":"2:13064:5071","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13066:5074","2:13067:61788","2:13068:61789","2:13069:61790","2:13070:61792","2:13071:61791","2:13072:61793"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10303:2241":{"id":"2:10303:2241","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10304:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6859:4748":{"id":"1:6859:4748","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6860:59416"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3775:3327":{"id":"2:3775:3327","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:6863:4751":{"id":"1:6863:4751","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6864:60705"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10934:214":{"id":"2:10934:214","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10936:181","2:10937:1852","2:10938:57765","2:10939:57766","2:10940:57767","2:10941:753","2:10942:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10925:4740","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13541:62591":{"id":"2:13541:62591","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:16004:2983"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49761:5475","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12993:3268":{"id":"2:12993:3268","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12994:126","2:12995:1964"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3342:3464":{"id":"2:3342:3464","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3344:181","2:3345:1355"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13513:62586":{"id":"2:13513:62586","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13073:5074":{"id":"2:13073:5074","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13075:5094","2:13076:922","2:13077:62016","2:13078:62017"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3519:130":{"id":"2:3519:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3521:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3522:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13449:33332":{"id":"2:13449:33332","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49754:5474","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5727:4759":{"id":"1:5727:4759","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5728:6955","1:5729:59779","1:5730:59780"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3281:220":{"id":"2:3281:220","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13453:57804":{"id":"2:13453:57804","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:16004:2983","self::pattern":"2:13054:5072"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9259:3684":{"id":"2:9259:3684","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3347:5112":{"id":"2:3347:5112","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3349:181","2:3350:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10242:3337":{"id":"2:10242:3337","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10243:1533","2:10244:59715","2:10246:59716"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6091:63228":{"id":"5:6091:63228","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13467:57795":{"id":"2:13467:57795","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13054:5072","`DoubleEndedIterator`":"2:8448:120","str::rsplit":"1:16010:2988","str::split_whitespace":"1:16010:2988","prim@char":"1:16004:2983"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49462:4682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1258:1632":{"id":"0:1258:1632","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[99,0],"end":[104,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"2:9260:3683":{"id":"2:9260:3683","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14242:4467":{"id":"2:14242:4467","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14243:59272","2:14244:59273","2:14245:59274","2:14246:59275","2:14247:59276","2:14248:59277","2:14249:4089"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4723:3337":{"id":"1:4723:3337","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4724:2601","1:4725:60396","1:4727:60397","1:4728:5834","1:4729:60398","1:4730:60399","1:4731:59716","1:4740:4089"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3247:115":{"id":"2:3247:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3248:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5741:4762":{"id":"1:5741:4762","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5742:8382","1:5743:57596","1:5744:6955","1:5745:60658","1:5746:5003","1:5747:5004","1:5748:60659","1:5749:1304","1:5750:60660","1:5751:60661","1:5752:60662","1:5753:60663","1:5754:60664","1:5755:60665","1:5756:60666","1:5757:60667"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10305:3340":{"id":"2:10305:3340","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10306:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6083":{"id":"5:6083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5903:1340","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6084:63226","5:6085:1989","5:6088:63227","5:6091:63228","5:6103:63229","5:6104:63230","5:6105:4703","5:6106:2289","5:6107:2288"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13494:3063":{"id":"2:13494:3063","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13054:5072","prim@char":"1:16004:2983","str::matches":"1:16010:2988","`DoubleEndedIterator`":"2:8448:120"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49666:5469","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3376:5122":{"id":"2:3376:5122","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3378:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13500:62580":{"id":"2:13500:62580","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"2:8448:120","prim@char":"1:16004:2983","str::rmatch_indices":"1:16010:2988","self::pattern":"2:13054:5072"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49612:5466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13479:62576":{"id":"2:13479:62576","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"prim@char":"1:16004:2983","str::split_terminator":"1:16010:2988","self::pattern":"2:13054:5072","str::split":"1:16010:2988"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49530:5463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:5075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6861:4750":{"id":"1:6861:4750","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6862:60081"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3372:4933":{"id":"2:3372:4933","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3374:1356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4051:4783":{"id":"2:4051:4783","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4052:60377"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3431:5128":{"id":"2:3431:5128","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3433:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4741:4658":{"id":"1:4741:4658","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4742:60272","1:4743:40865","1:4744:60274","1:4745:60273"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3423:5138":{"id":"2:3423:5138","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3425:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4748:4678":{"id":"1:4748:4678","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4749:60716","1:4750:60717","1:4751:60718","1:4753:4677","1:4754:60719","1:4756:57795","1:4757:5910"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4666:4672","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8363:5188":{"id":"2:8363:5188","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8365:2879"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13084:5076":{"id":"2:13084:5076","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:5075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8400:136":{"id":"2:8400:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8402:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3516:2187":{"id":"2:3516:2187","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3517:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4000:68":{"id":"2:4000:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4001:1429"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:10292:109":{"id":"2:10292:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10293:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13441:57788":{"id":"2:13441:57788","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:16010:2988"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10530:142":{"id":"2:10530:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10531:715","2:10533:59328"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5719:4760":{"id":"1:5719:4760","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5720:57650","1:5721:57652","1:5722:57651","1:5723:57653"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10540:146":{"id":"2:10540:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10541:652","2:10542:2601","2:10543:60903","2:10544:60904","2:10545:60905","2:10546:60906","2:10547:60907","2:10548:60908","2:10549:60909","2:10550:60910","2:10551:60911","2:10552:60912","2:10553:60913","2:10554:60914","2:10555:60915","2:10556:1533"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14166:141":{"id":"2:14166:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14167:277","2:14168:518","2:14169:280","2:14170:1079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3364:5118":{"id":"2:3364:5118","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3365:181","2:3366:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13432:57765":{"id":"2:13432:57765","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47495:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6084:63226":{"id":"5:6084:63226","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1806","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1806","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13421:62570":{"id":"2:13421:62570","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13439:62573":{"id":"2:13439:62573","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:16010:2988","str::slice_unchecked":"1:16010:2988","crate::ops::IndexMut":"2:3581:3255"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3368:3271":{"id":"2:3368:3271","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3370:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2572:127":{"id":"1:2572:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2573:57578","1:2575:60844","1:2576:60845","1:2577:60377"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10292:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10299:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3396:4800":{"id":"2:3396:4800","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3398:181","2:3399:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3559:4460":{"id":"2:3559:4460","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3561:237","2:3562:206","2:3563:61556"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:2881:6429":{"id":"24:2881:6429","crate_id":24,"name":"Speculative","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2882:64008"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3740:5151":{"id":"2:3740:5151","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3742:56751"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6411:223":{"id":"5:6411:223","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6412:1397"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6085:1989":{"id":"5:6085:1989","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5789:4765":{"id":"1:5789:4765","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5790:60160"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:4740","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:144":{"id":"0:144","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[23,0],"end":[23,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"internals::case::RenameRule","name":"RenameRule","id":"0:1286:1836","glob":false}},"2:13440:57787":{"id":"2:13440:57787","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:16010:2988"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13538:4450":{"id":"2:13538:4450","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23465:5185":{"id":"2:23465:5185","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23466:1270","2:23467:1269","2:23468:1267","2:23469:1266"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialEq","id":"2:22877:5184","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13543:3347":{"id":"2:13543:3347","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:16004:2983"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49770:3348","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13491:62578":{"id":"2:13491:62578","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:5075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5008:4719":{"id":"1:5008:4719","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5009:3246","1:5010:59823"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13444:4840":{"id":"2:13444:4840","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49448:2734","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5797:4767":{"id":"1:5797:4767","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5798:6955"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10313:3339":{"id":"2:10313:3339","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10314:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:153:1812":{"id":"24:153:1812","crate_id":24,"name":"Token","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"24:160:4740","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3172:149":{"id":"2:3172:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3174:1631"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8367:5190":{"id":"2:8367:5190","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8369:4106"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3440:5146":{"id":"2:3440:5146","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3442:1237"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5775:4763":{"id":"1:5775:4763","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5776:59507","1:5777:59508","1:5778:59509","1:5779:59510"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10299:119":{"id":"2:10299:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10300:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3380:5124":{"id":"2:3380:5124","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3382:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13544:62592":{"id":"2:13544:62592","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:16004:2983"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49779:5476","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3274:3368":{"id":"2:3274:3368","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13506:62582":{"id":"2:13506:62582","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5837:5627":{"id":"5:5837:5627","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5839:181","5:5840:34389"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3525:132":{"id":"2:3525:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3527:181","2:3528:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3277:218":{"id":"2:3277:218","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2926:124":{"id":"2:2926:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2921:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3522:131":{"id":"2:3522:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3524:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3525:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3492:116":{"id":"2:3492:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3493:221","2:3494:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6557:4792":{"id":"1:6557:4792","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6558:60217","1:6559:60218"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"21:808:3361":{"id":"21:808:3361","crate_id":21,"name":"MultiSpan","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:809:63923"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:7:1614":{"id":"0:7:1614","crate_id":0,"name":"internals","span":{"filename":"src/internals/mod.rs","begin":[1,0],"end":[28,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:8:1737","0:74:334","0:409","0:504"],"is_stripped":true}},"2:13767:138":{"id":"2:13767:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13768:181","2:13769:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3169:74":{"id":"2:3169:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3171:2182"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3175:135":{"id":"2:3175:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3177:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10309:189":{"id":"2:10309:189","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10310:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23774:5183":{"id":"2:23774:5183","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23775:5182"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23770:4740","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8473:3370":{"id":"2:8473:3370","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8474:793","2:8475:2067"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"20:63:3103":{"id":"20:63:3103","crate_id":20,"name":"IdentFragment","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:64:660","20:65:2071"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3269:211":{"id":"2:3269:211","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:74:334":{"id":"0:74:334","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1952,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:144"],"is_stripped":false}},"1:5735:4761":{"id":"1:5735:4761","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5736:6955","1:5737:9277"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13429:57768":{"id":"2:13429:57768","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:16021:2997"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22840:5177":{"id":"2:22840:5177","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22841:61674","2:22842:1227","2:22843:1228","2:22844:61675","2:22845:61676","2:22846:61677","2:22847:61678","2:22848:61679","2:22849:61680","2:22850:61681"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22853:4740","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:22804:5197":{"id":"2:22804:5197","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22805:5182","2:22806:61674","2:22807:1227","2:22808:1228","2:22809:43852","2:22810:61737","2:22811:61738","2:22812:61739","2:22813:61740","2:22814:61741","2:22815:61675","2:22816:61676","2:22817:61677","2:22818:61678","2:22819:61679","2:22820:61680","2:22821:61681"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22853:4740","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3417:3461":{"id":"2:3417:3461","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3419:181","2:3420:1236"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13485:57802":{"id":"2:13485:57802","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:13054:5072","str::splitn":"1:16010:2988","prim@char":"1:16004:2983"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49584:5437","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:5075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9343:4736":{"id":"1:9343:4736","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9344:60358","1:9345:60359","1:9346:60360","1:9347:60361","1:9348:60362","1:9349:40462","1:9350:60357"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:4740","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3310:3369":{"id":"2:3310:3369","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2921:183":{"id":"2:2921:183","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2923:604","2:2924:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13540:4452":{"id":"2:13540:4452","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13430:1852":{"id":"2:13430:1852","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47495:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13426:2721":{"id":"2:13426:2721","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12525:5576"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6088:63227":{"id":"5:6088:63227","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2863:97":{"id":"2:2863:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2865:1826"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3435:5143":{"id":"2:3435:5143","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3437:1234"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:18:3102":{"id":"20:18:3102","crate_id":20,"name":"TokenStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:19:9273","20:21:63901","20:23:63902","20:26:63903"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"20:44:4740","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13419:2067":{"id":"2:13419:2067","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10311:3338":{"id":"2:10311:3338","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10312:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6437:4742":{"id":"1:6437:4742","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6438:5003","1:6439:5004","1:6440:57472","1:6441:57473","1:6443:57477","1:6445:57474","1:6446:57475","1:6448:57476"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:4740","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:22751:5181":{"id":"2:22751:5181","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22752:5182","2:22753:61674","2:22754:61837","2:22755:61838","2:22756:61839","2:22757:43852","2:22758:61840","2:22759:61841","2:22760:61842","2:22761:61843","2:22762:61844","2:22763:61845","2:22764:61846","2:22765:61847","2:22766:61848","2:22767:61849","2:22768:61741","2:22769:61850","2:22770:61307","2:22771:61306","2:22772:61308","2:22773:61675","2:22774:61676","2:22775:61677","2:22776:61678"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22853:4740","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8880:4458":{"id":"2:8880:4458","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13520:15892":{"id":"2:13520:15892","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:16004:2983","self::pattern":"2:13054:5072"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13463:4072":{"id":"2:13463:4072","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"prim@char":"1:16004:2983","`None`":"2:47495:176","self::pattern":"2:13054:5072"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:5075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1638":{"id":"0:0:1638","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[109,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2018\n# use serde_derive::{Serialize, Deserialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.143\")]","#![allow(unknown_lints, bare_trait_objects)]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: derive_partial_eq_without_eq, clippy ::\nenum_variant_names, clippy :: manual_map, clippy :: match_like_matches_macro,\nclippy :: needless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: let_underscore_drop, clippy ::\nmanual_assert, clippy :: map_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:1257:1623","0:1258:1632"],"is_stripped":false}},"2:13445:33347":{"id":"2:13445:33347","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:16010:2988"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49736:5472","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:409":{"id":"0:409","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[5,0],"end":[5,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1282:1739","glob":false}},"2:3401:3982":{"id":"2:3401:3982","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3403:181","2:3404:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3505:3328":{"id":"2:3505:3328","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3506:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3492:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:783:222":{"id":"5:783:222","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:2000","5:785:1873","5:786:4114"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8404:151":{"id":"2:8404:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8405:1807","2:8406:3245","2:8407:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13428:304":{"id":"2:13428:304","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:16021:2997","str::as_mut_ptr":"1:16010:2988"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6459:4745":{"id":"1:6459:4745","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6460:60120","1:6461:8804","1:6462:60121","1:6463:60122","1:6464:60123","1:6465:60124"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:4740","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13423:62571":{"id":"2:13423:62571","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:16010:2988"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13417":{"id":"2:13417","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12514:1340","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13418:793","2:13419:2067","2:13420:62569","2:13421:62570","2:13423:62571","2:13426:2721","2:13427:62572","2:13428:304","2:13429:57768","2:13430:1852","2:13432:57765","2:13434:57766","2:13436:57767","2:13438:4835","2:13439:62573","2:13440:57787","2:13441:57788","2:13442:2298","2:13443:2292","2:13444:4840","2:13445:33347","2:13446:33337","2:13447:5910","2:13448:62574","2:13449:33332","2:13450:1889","2:13453:57804","2:13456:57805","2:13459:2532","2:13463:4072","2:13467:57795","2:13470:33204","2:13473:57798","2:13476:62575","2:13479:62576","2:13482:57800","2:13485:57802","2:13488:62577","2:13491:62578","2:13494:3063","2:13497:62579","2:13500:62580","2:13503:62581","2:13506:62582","2:13508:62583","2:13510:62584","2:13512:62585","2:13513:62586","2:13514:62587","2:13517:62588","2:13520:15892","2:13523:57806","2:13526:62589","2:13529:1871","2:13532:62590","2:13535:1828","2:13537:4449","2:13538:4450","2:13539:4451","2:13540:4452","2:13541:62591","2:13543:3347","2:13544:62592"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13508:62583":{"id":"2:13508:62583","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22877:5184":{"id":"2:22877:5184","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22878:5182","2:22879:1247","2:22880:1272"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13782:150":{"id":"2:13782:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13783:181","2:13784:150","2:13785:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3812:4459":{"id":"2:3812:4459","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13438:4835":{"id":"2:13438:4835","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:3577:2248","str::slice_mut_unchecked":"1:16010:2988","`str`":"1:16010:2988"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:22940:4739":{"id":"2:22940:4739","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22930:4740","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13470:33204":{"id":"2:13470:33204","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:13054:5072","prim@char":"1:16004:2983"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12846:5430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1311:1840":{"id":"0:1311:1840","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:3182:227":{"id":"2:3182:227","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3184:127","2:3185:1416"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3389:5129":{"id":"2:3389:5129","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3390:181","2:3391:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5647:4788":{"id":"1:5647:4788","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5648:59504","1:5649:3760"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:4740","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13434:57766":{"id":"2:13434:57766","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:5653:4790":{"id":"1:5653:4790","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5654:6332","1:5655:2721"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:4740","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3278:217":{"id":"2:3278:217","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3729:224":{"id":"2:3729:224","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3730:181","2:3731:5151","2:3732:686","2:3733:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3734:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3729:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:7795:4905":{"id":"1:7795:4905","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7796:60393"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3427:5140":{"id":"2:3427:5140","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3429:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4783:4457":{"id":"2:4783:4457","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4784:1807","2:4785:61984","2:4786:4076"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12501:5612":{"id":"2:12501:5612","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12502:1807","2:12503:2942"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2967:184":{"id":"2:2967:184","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2969:997","2:2970:826","2:2971:792","2:2972:713","2:2973:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2921:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2866:3272":{"id":"2:2866:3272","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2868:2181"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2863:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"24:2975:1829":{"id":"24:2975:1829","crate_id":24,"name":"Parse","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2976:1828"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:1075:2254":{"id":"1:1075:2254","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1076:2000","1:1077:4449","1:1078:2289","1:1079:2288","1:1080:4450","1:1081:4451","1:1082:4452"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13459:2532":{"id":"2:13459:2532","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:13054:5072","prim@char":"1:16004:2983","`None`":"2:47495:176"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8413:3371":{"id":"2:8413:3371","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8415:2135","2:8417:4073","2:8418:4074"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3577:2248":{"id":"2:3577:2248","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3579:181","2:3580:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13476:62575":{"id":"2:13476:62575","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"`DoubleEndedIterator`":"2:8448:120","str::rsplit_terminator":"1:16010:2988","prim@char":"1:16004:2983","self::pattern":"2:13054:5072","str::split":"1:16010:2988"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49512:5462","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5833:5625":{"id":"5:5833:5625","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5835:181","5:5836:432"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:6787:4776":{"id":"1:6787:4776","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6788:8842","1:6789:59525"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:4740","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6685:4762":{"id":"1:6685:4762","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6686:60168","1:6687:8727","1:6688:8728","1:6689:8730","1:6690:8729","1:6691:8731","1:6692:8732","1:6693:8734","1:6694:6996","1:6695:8737","1:6696:8738","1:6697:8739","1:6698:8740","1:6699:8741","1:6700:8742","1:6701:8735","1:6702:8736"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6103:63229":{"id":"5:6103:63229","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13473:57798":{"id":"2:13473:57798","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"prim@char":"1:16004:2983","self::pattern":"2:13054:5072","`DoubleEndedIterator`":"2:8448:120","str::split":"1:16010:2988"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49480:5433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:5075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10307:3341":{"id":"2:10307:3341","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10308:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13497:62579":{"id":"2:13497:62579","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"1:16010:2988","prim@char":"1:16004:2983","self::pattern":"2:13054:5072","`DoubleEndedIterator`":"2:8448:120"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49684:5470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:5075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13529:1871":{"id":"2:13529:1871","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:16004:2983","self::pattern":"2:13054:5072"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3648:3267":{"id":"2:3648:3267","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3650:61268","2:3651:61269","2:3652:1889"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13537:4449":{"id":"2:13537:4449","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13510:62584":{"id":"2:13510:62584","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13456:57805":{"id":"2:13456:57805","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:13054:5072","prim@char":"1:16004:2983"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:5075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13447:5910":{"id":"2:13447:5910","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49716:4683","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3337:3270":{"id":"2:3337:3270","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3339:181","2:3340:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13532:62590":{"id":"2:13532:62590","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:16004:2983","self::pattern":"2:13054:5072"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:5075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3406:4801":{"id":"2:3406:4801","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3408:181","2:3409:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13539:4451":{"id":"2:13539:4451","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3352:3434":{"id":"2:3352:3434","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3354:181","2:3355:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:2634:2471":{"id":"24:2634:2471","crate_id":24,"name":"Spanned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2635:2071"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13523:57806":{"id":"2:13523:57806","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13054:5072","prim@char":"1:16004:2983"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:5075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2888:104":{"id":"2:2888:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2889:408","2:2890:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6959:4747":{"id":"1:6959:4747","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6960:60143"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13535:1828":{"id":"2:13535:1828","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12993:3268","`FromStr`":"2:12993:3268"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12993:3268","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12993:3268","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13448:62574":{"id":"2:13448:62574","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49726:5471","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6790:4742":{"id":"1:6790:4742","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6791:57449"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:4740","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5785:4764":{"id":"1:5785:4764","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5786:57596"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"17:13377:7440":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:52246:5300":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"24:2077:64115":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"2:13858:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:51869:8991":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"18:812:6398":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:5363:8606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:10200:48085":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:9961:48022":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"24:5846:3157":{"crate_id":24,"path":["syn","expr","ExprType"],"kind":"struct"},"19:0:994":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:49405:5543":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"24:4964:3441":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"16:7264:5971":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:46486:5538":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:11640:7006":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:2866:3272":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"12:1682:5874":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"24:6412:2138":{"crate_id":24,"path":["syn","path","Binding"],"kind":"struct"},"2:3178:228":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"24:3797:3406":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"16:5433:6001":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"12:162:5865":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:11575:4877":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"5:1663:4848":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:12744:6684":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:46751:5245":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:49842:5073":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:7477:5978":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:14804:9544":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:5564:8675":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:3981:8261":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:24771:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:586:8019":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:4670:4664":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"24:3977:206":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"24:5753:3135":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"5:3044:3409":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:6652:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:7732:4900":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:51769:5280":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:11993:7080":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:1674:4849":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:6859:4748":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:7670:2586":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:7226:6050":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:11932:7064":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"3:321:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:51925:8993":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:10301:3333":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:11232:4726":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"12:764:3250":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"21:2659:4619":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"2:10241:205":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"24:5239:3461":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"16:7420:5977":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"16:5421:6000":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:4741:4658":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:513:1749":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:2889:6230":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:46111:5339":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:22583:62409":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"24:964:3166":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"14:244:9218":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:32500:61617":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"17:10864:6933":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:13933:7607":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:46284:3348":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:11406:6953":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:3039:62562":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:5927:6019":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:9280:6884":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:14601:4943":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"16:5960:6199":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"13:120:46328":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:4748:4678":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"24:3671:3400":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"17:12118:7103":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"24:4831:3433":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"1:6459:4745":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:5522:6006":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:49260:5441":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:2794:5942":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:3323:4480":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:4516:8466":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:9063:4915":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:2171:4795":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"15:248:5883":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:53302:5296":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"5:3759:3246":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:10529:9176":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:4526:8471":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:13532:7482":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:45784:5157":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:11685:4883":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:10447:61299":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:10661:12042":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:4287:8364":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:3406:4801":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:9634:6676":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"2:50362:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"24:5354:2142":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"24:5834:3154":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"24:4756:3428":{"crate_id":24,"path":["syn","token","Bang"],"kind":"struct"},"2:56403:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:15032:4902":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:52796:5321":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"12:466:63850":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:12275:7124":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:13465:7463":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:3440:5146":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:3320:6274":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:47537:3246":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:4061:8298":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:11086:4675":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"24:5714:3126":{"crate_id":24,"path":["syn","expr","ExprAssignOp"],"kind":"struct"},"24:3455:3394":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"12:432:5866":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:9264:6883":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:11835:7053":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:24533:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:10874:4690":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:51595:5299":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"24:4727:3426":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"1:13923:4898":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:13942:7609":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:4641:7652":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"18:783:6802":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"24:5435:1835":{"crate_id":24,"path":["syn","attr","NestedMeta","Lit"],"kind":"foreign_type"},"17:9133:48014":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:10566:4210":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"24:932:64108":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"2:24222:5569":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:10543:6937":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"24:6322:3182":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"2:52438:5277":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:11479:4749":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"24:0:1612":{"crate_id":24,"path":["syn"],"kind":"module"},"1:12257:4920":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:24839:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:52085:5308":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:8132:4197":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"16:5672:6010":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"24:4947:124":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"2:46328:5328":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:22853:4740":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"21:3157:1759":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"12:1703:5875":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:3427:5140":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:50439:4781":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"22:1074:2469":{"crate_id":22,"path":["proc_macro2","Literal"],"kind":"struct"},"1:4639:4664":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:7185:6046":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"12:2052:4795":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:1626:8106":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:4160:8349":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:4704:7654":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"24:6330:3185":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"2:3277:218":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:46603:5228":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:12203:4820":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:3351:4955":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"12:1666:5873":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:9368:6886":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:37651:4057":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"24:5309:3466":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"2:46771:5247":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:11409:5051":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:1740:8178":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:2921:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"21:3096:1824":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"2:2194:4275":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"24:5761:3137":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"24:6130:1970":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"2:24237:5525":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:10623:48224":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"24:3689:130":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"5:3336:4796":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:49512:5462":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"20:47:2819":{"crate_id":20,"path":["quote","format_ident"],"kind":"macro"},"2:48258:2241":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:13760:7559":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:2283:5174":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"24:6328:3184":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"2:5030:2172":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:6004:8716":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:51147:5285":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:2512:6311":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:6014:6021":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:13446:7456":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:7453:5956":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:6688:5637":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:10117:6380":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:11616:7002":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:7824:6645":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:45991:3276":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:49630:5467":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"24:4013:3414":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"1:7441:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:10081:6322":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:8474:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:4308:8376":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"12:971:4853":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:565:8007":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:49666:5469":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:2314:6315":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:7756:5204":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:11277:6949":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:5360:5997":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:4599:6635":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"1:2572:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"1:12124:4813":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:8391:5632":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:9769:63873":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:10571:48221":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"24:3815:2143":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"6:1694:8159":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:8488:4815":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:49352:5448":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:5766:6015":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:12158:4817":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:49462:4682":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:50048:5089":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"24:5498:3120":{"crate_id":24,"path":["syn","data","VisCrate"],"kind":"struct"},"17:13272:7416":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"24:2383:3246":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"2:24873:5511":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"24:5406:185":{"crate_id":24,"path":["syn","attr","Meta","Path"],"kind":"foreign_type"},"5:6672:5636":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:8289:4197":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"24:5978:1894":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"17:10266:6282":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:7549:5964":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"18:740:63891":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:1497:4849":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:10575:4799":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:8639:5007":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:6491:6032":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"22:920:9169":{"crate_id":22,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"2:11114:3246":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:4434:4699":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:7117:3671":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:50398:5494":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:51523:5311":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:9718:4975":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"16:5707:6011":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"6:1680:8148":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"24:5929:3163":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"2:52372:5292":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:11588:6998":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"24:5710:3125":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"2:47682:3245":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:46468:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:3338:6201":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:3341:4950":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:12302:4931":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:10420:6309":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:15754:6689":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:4762:7656":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:15975:12046":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:5579:8686":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:22536:4057":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"4:0:2954":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"24:2339:3244":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"2:1944:2189":{"crate_id":2,"path":["core","mem"],"kind":"module"},"6:5430:8634":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:3882:3303":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:9440:6888":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:13819:7573":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"24:5505:2190":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"1:4300:4707":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"6:4075:8306":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:45901:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"24:5116:3452":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"2:24215:9234":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:11668:3246":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:11519:6986":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:11915:7058":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:49865:5077":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"12:869:4580":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:47674:3250":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"24:2132:6430":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"2:53595:9052":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"24:6362:3179":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"12:559:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:4032:4927":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"24:5735:3131":{"crate_id":24,"path":["syn","expr","ExprBox"],"kind":"struct"},"5:8344:5659":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"19:117:6798":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"2:5208:3324":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:9719:48017":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:6366:5880":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"13:0:2953":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:11143:4682":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"24:5058:3448":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"2:3431:5128":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:1531:8051":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:16016:2992":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"24:6005:3164":{"crate_id":24,"path":["syn","generics","PredicateEq"],"kind":"struct"},"6:607:8030":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:49880:5080":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:11150:4683":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:6136:5995":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:32696:4279":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:11365:4985":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:47968:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:5727:4759":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:12610:7196":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:57678:9059":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"6:6024:8722":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"24:3995:3413":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"1:9861:6679":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:11340:9268":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"16:7870:5962":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:56338:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:618:8035":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"24:3707:3401":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"7:38:45684":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:4356:8398":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"24:5778:3141":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"21:3136:2153":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"1:1438:3245":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"15:230:5882":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:52939:5289":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"24:5251:3462":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"17:11328:7223":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"20:191:3710":{"crate_id":20,"path":["quote","__private","HasIterator"],"kind":"struct"},"24:2391:3248":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"1:5741:4762":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:15391:4982":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:32400:61616":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"18:745:63888":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"18:0:2964":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:6226:8817":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:10962:48278":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"24:5706:3124":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"16:7928:2541":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:4515:5676":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"6:1727:8175":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:23139:5182":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"21:523:63922":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"17:10353:6316":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:4277:8357":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:51124:5297":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:3933:8231":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:48795:4862":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:47596:3681":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:22993:5182":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:6718:6247":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"12:353:9220":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"9:157:5748":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"2:47622:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"24:924:64105":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"2:3358:3455":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"12:1881:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:24147:40185":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:12645:7208":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:10799:4774":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:7677:4898":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:5815:6017":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"24:3089:3298":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"2:11206:5430":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"9:776:5778":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:9551:6299":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:3104:5150":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:6697:8739":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"24:3905:3410":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"2:46427:5599":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:0:1331":{"crate_id":1,"path":["std"],"kind":"module"},"16:4230:7642":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:16028:3004":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"24:5034:3446":{"crate_id":24,"path":["syn","token","MulEq"],"kind":"struct"},"2:52403:5295":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"24:3109:3302":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"9:1056:5791":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:3740:5151":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:50421:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:13547:7486":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:545:7990":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"24:4157:1796":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"1:3736:4691":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:4116:8327":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"21:3162:2469":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"1:15970:9352":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:16019:2995":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:8880:4458":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:8368:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:1748:8182":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"21:2238:4614":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"16:3241:6219":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:3519:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:3411:3459":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:46059:5203":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"24:2556:2001":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"1:10701:9544":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:47495:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:14643:57438":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:4535:7650":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:13422:4996":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:1558:8062":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"18:645:6409":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"24:5340:3589":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"2:46343:5601":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:8646:5009":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:3392:6227":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"5:2262:5695":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:12982:7286":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:22564:62036":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:52163:5315":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:4088:8311":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:13540:7485":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:45945:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:12208:7115":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"24:176:4118":{"crate_id":24,"path":["syn","token","CustomToken"],"kind":"trait"},"9:1020:5798":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:13163:7387":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:12598:7194":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:22940:4739":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:11653:7008":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:4410:8424":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"22:1002:1823":{"crate_id":22,"path":["proc_macro2","Span"],"kind":"struct"},"12:2066:4797":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:13240:7403":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:8263:3283":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:49754:5474":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:11120:4679":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:12685:7211":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"24:4802:3431":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"14:194:46356":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:7642:4585":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:14034:4899":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:14808:4791":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:6695:8737":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:12917:7235":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:46998:4323":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:16015:2991":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:56351:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:13817:61910":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:5298:8562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:4242:8355":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"20:193:3709":{"crate_id":20,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"17:10279:6322":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:9343:4736":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:2866:6211":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:11604:6999":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"22:944:1748":{"crate_id":22,"path":["proc_macro2","imp","Group"],"kind":"enum"},"2:51445:5319":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"24:3136:9557":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"16:3064:6272":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:4885:3330":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:2155:3246":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"24:3563:115":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"21:1222:1615":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"17:13564:7490":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"12:2412:7889":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"24:5227:3460":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"6:5213:8523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:47614:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:6202:8809":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:12221:7116":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:4179:8350":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:10827:6348":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:12671:7210":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:10407:6310":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:51673:5291":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"22:1023:1748":{"crate_id":22,"path":["proc_macro2","Group"],"kind":"struct"},"6:4454:8443":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:13221:7402":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:10804:4941":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"24:3581:3396":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"17:10458:6796":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:15053:4930":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"6:3993:8266":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:12010:7083":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:13893:34392":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:48265:3333":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:28054:5193":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:10705:1915":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:16009:2987":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:2397:3329":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:8298:5657":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:14958:6688":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"21:1191:4642":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"17:13598:7497":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:4434:8434":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:6557:4792":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:11658:4880":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"9:927:45788":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:9574:6305":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:5273:6204":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:51397:8983":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:16005:2984":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:4386:8414":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:12004:4899":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"16:3549:7637":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:3287:2391":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:10052:48073":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:3682:4684":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:5376:4982":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:994:5662":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"24:5876:61":{"crate_id":24,"path":["syn","expr","parsing","raw"],"kind":"struct"},"17:12195:7113":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:6964:8867":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:22930:4740":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:3812:4459":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:10502:9175":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:11847:7056":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:5717:6012":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:11499:6976":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:57699:9060":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"16:2773:6236":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:13064:5071":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:46631:5231":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"24:2870:6427":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"24:5862:3161":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"1:4732:59748":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:1524:4853":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:3401:3982":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:6132:8758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:12053:4903":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:6790:4742":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:4485:8456":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"24:6376:185":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"24:5731:3130":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"12:777:3245":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:5384:5998":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:49745:5473":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:4135:8336":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:15412:4989":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:10305:3340":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:49371:5450":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:2484:48116":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:6577:6035":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:8954:6353":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:12287:7125":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:6094:8747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:50182:5485":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:45860:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:6863:4751":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"12:880:4578":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"24:3253:3245":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"1:5960:5053":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:3376:5122":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:11458:6971":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:25243:5379":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:4607:4323":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:7303:6053":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:3197:4495":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:13497:7471":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:5231:7665":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:7360:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:3269:211":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:32299:4276":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:9849:63884":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:15474:9131":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:3287:6221":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:6780:6039":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:12132:3245":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"12:1256:4858":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:3194:4942":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:10975:48277":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:4790:7657":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:46473:5537":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:48516:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:3423:5138":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:1132:4785":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:9259:3684":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:299:63870":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:13986:7616":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:12552:7187":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:6072:5974":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"21:3011:3350":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"1:12076:60620":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"24:2502:2407":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"12:2253:4855":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"14:11:9538":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:24093:5366":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"24:4211:3419":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"24:6058:3173":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"5:8203:3245":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:11414:5054":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"24:3617:3398":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"6:539:7987":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:1482:4578":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:11180:4722":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"2:11924:5452":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"12:2398:7887":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"9:722:5732":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:4512:4697":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"24:3545:3395":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"2:51744:5279":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"21:3091:3356":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"6:5237:8532":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:3341:5652":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:1501:4850":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"24:5444:1773":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"2:3417:3461":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:13939:57626":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:4477:7648":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:13799:7570":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"12:114:63846":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:11026:48023":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:50194:5488":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"0:1258:1633":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"5:8106:4468":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"5:7111:6645":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"16:7295:5973":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:3960:8254":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:11118:48025":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:3200:4673":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:9245:6283":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:12442:7170":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"24:5818:3150":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"2:3581:3255":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:49339:5447":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:11957:5453":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:14633:4675":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:8690:5010":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"11:46:7891":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:11402:4721":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:23137:5274":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"24:4698:3424":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"2:47562:3680":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:11138:3250":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:1149:12041":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:13963:7612":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:3365:6202":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:4208:8352":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:9174:60624":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:16003:2982":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:12028:7084":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"24:6345:3189":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"16:2754:6203":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:1843:6632":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:8168:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"24:4894:3437":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"5:3839:6632":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:1694:5690":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:51253:8981":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:10179:6897":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:51358:8982":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:11318:5433":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"0:1257:1625":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"22:858:1823":{"crate_id":22,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"1:4723:3337":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:3275:3326":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:580:8016":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:3325:4946":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:6699:8741":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:4509:8463":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:46980:4256":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:10950:48301":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:4051:4783":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:6319:5000":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:5797:4767":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:4440:8435":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:521:7979":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:1621:8104":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:9088:48013":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:6101:5951":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:47842:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"24:6050:1963":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"2:5408:5593":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:13786:4907":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:46973:9252":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:13767:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"5:7379:3245":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:6685:4762":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"12:2404:63851":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:8400:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:3987:8263":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:46066:3320":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"24:5770:3139":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"5:3329:3246":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:10540:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:12507:7178":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:4538:8476":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:50344:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"21:3015:3245":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"5:4628:235":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:2912:6212":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:12659:7209":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:6999:6041":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:7786:5966":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:9766:6677":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"12:1162:5861":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:12811:5468":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:12456:7172":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:533:7985":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:5789:4765":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:3118:6226":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:46711:5241":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:4752:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"5:8130:4580":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"7:0:1481":{"crate_id":7,"path":["unwind"],"kind":"module"},"5:8138:5664":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"24:5794:3145":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"21:300:9330":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"22:868:1748":{"crate_id":22,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"6:601:8027":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:50037:5088":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:56390:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:6807:6040":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"24:5842:3156":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"2:7928:5173":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:22602:62408":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:13963:61640":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"16:3218:6218":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"24:3761:3404":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"1:12171:4818":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:51901:8992":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:3018:6214":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:4340:8390":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:3389:5129":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:16027:3003":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:1551:8059":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:10516:6371":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:14079:5496":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:5981:5056":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:16025:3001":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:6269:6028":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:4373:8409":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:5653:4790":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:16018:2994":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:50174:5484":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"24:5722:3128":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"1:10366:1840":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"24:5810:2023":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"24:5975:2108":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"1:3192:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:10558:48220":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:3951:4578":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"24:3212:127":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"1:9639:57620":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"5:8250:3282":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:1764:8187":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:10801:48196":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"24:6325:3183":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"5:1472:4856":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:9649:48016":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:46730:5243":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:2863:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"21:200:4650":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"1:7507:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:7406:5959":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:4416:8425":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:12327:7132":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:46691:5237":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"18:858:6402":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:50190:5487":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:9528:2734":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:11045:48024":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:11015:48302":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"24:454:64153":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"5:8313:5538":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"24:968:2818":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"1:4080:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:8883:5170":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:5505:6005":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:11947:7068":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:527:7982":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:10656:6900":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:10041:48072":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:6949:6255":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:4394:4966":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:10912:48290":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:13073:5074":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:5968:5055":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"12:2045:4578":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:11297:1823":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"24:5850:3158":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"12:2269:4856":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:10311:3338":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"20:44:4740":{"crate_id":20,"path":["quote","ext","private","Sealed"],"kind":"trait"},"24:4247:3421":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"6:3966:8255":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:1635:4845":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:1669:8140":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:5008:4719":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"16:5790:6016":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:5580:6192":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:14626:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:9729:63881":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"12:1238:5864":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:23082:4740":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:16014:2990":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"18:136:54336":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:3396:1796":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:4473:4701":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:51339:5290":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:4995:7663":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"24:5399:3114":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"24:916:64103":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"16:6591:6036":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"24:4085:2235":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"24:5718:3127":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"6:5423:8633":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:9162:6301":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:23465:5185":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:10952:4924":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:6150:8769":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:4270:5001":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:13782:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:1600:8090":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:3920:8221":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"10:0:2957":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:50451:4466":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:24185:40186":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:48583:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"6:6240:8826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"11:0:2958":{"crate_id":11,"path":["adler"],"kind":"module"},"2:2926:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"24:5838:3155":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"12:928:4847":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:15122:9279":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:9799:48019":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:8929:48009":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"22:0:1613":{"crate_id":22,"path":["proc_macro2"],"kind":"module"},"6:157:40825":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"24:5787:3143":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"24:2634:2471":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"24:3635:1772":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"24:6089:2143":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"17:13386:7441":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:16008:2986":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:15483:57589":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:14821:4903":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:13788:7566":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"15:0:2961":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:22877:5184":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"16:7804:5965":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"24:3491:98":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"16:7073:6042":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:3800:7640":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:49716:4683":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:12501:5612":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"24:6313:3181":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"1:1157:12044":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:2777:5696":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:4321:8380":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:4346:8392":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"22:911:1615":{"crate_id":22,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"2:24013:8875":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:50178:5486":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:12373:7156":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"24:658:6779":{"crate_id":24,"path":["syn","expr","parsing","AllowStruct"],"kind":"struct"},"1:12083:9126":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"1:5500:4989":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:6787:4776":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"12:2036:3245":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:3169:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:6861:4750":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"9:1075:5799":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:14069:4463":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:14103:6685":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"24:6332:3186":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"2:3347:5112":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"7:85:45691":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:7042:6259":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"21:3062:1823":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"17:9296:6885":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:53380:5281":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"24:5917:2409":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"2:4000:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:45968:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"24:5432:1831":{"crate_id":24,"path":["syn","attr","NestedMeta","Meta"],"kind":"foreign_type"},"6:6211:8812":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"9:27:5780":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"12:0:2959":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"16:2991:6224":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:5185:3323":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:1939:4578":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"16:7195:6047":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:13609:7501":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:23942:5508":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"21:1315:3359":{"crate_id":21,"path":["proc_macro","bridge","client","Diagnostic"],"kind":"struct"},"17:8902:48008":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:3743:6344":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:10840:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"21:553:6626":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"16:7342:5989":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:8388:4877":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"1:11506:3672":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:49894:5083":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:9689:63875":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:161:40826":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:10452:6682":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"5:2330:5694":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:11186:9178":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:696:4211":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:6413:5879":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:10307:3341":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:2945:6235":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"24:2280:3242":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"1:12735:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:53408:9041":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:0:2962":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:9261:3682":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:38871:4052":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:49381:5451":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:2187:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"5:8379:5631":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:4955:7662":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:10635:6898":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:22751:5181":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"18:611:6407":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"24:5368:1748":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"17:12307:7131":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:5488:6004":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:13282:7417":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:2816:6229":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"22:824:1615":{"crate_id":22,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"1:8410:5684":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"17:12431:7168":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"24:2864:3307":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"14:231:2285":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:10611:48223":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:11428:4983":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:13279:9543":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"1:11354:4983":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"12:787:4848":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:11555:6991":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:53503:9048":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:6605:5970":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:4304:7643":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:56377:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:6111:8752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:53255:5278":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:11809:7048":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"5:7620:4584":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:6893:5238":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"24:5822:3151":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"6:1634:8111":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"24:5739:3132":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"1:15092:4825":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"24:3263:3246":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"2:5101:3319":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:6911:8855":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"24:6340:3188":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"24:948:64104":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"5:8330:5658":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:593:8022":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:7629:4895":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"24:3365:3389":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"2:50354:8978":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:6464:5968":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:12846:5430":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:1415:3246":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"12:379:5868":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:46659:9248":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:23089:17376":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"12:2419:3282":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:14952:6687":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:12073:7096":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:12247:7120":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"22:880:2469":{"crate_id":22,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"2:49448:2734":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"24:6353:3191":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"17:11254:6300":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:13554:7487":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"24:6094:3175":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"24:5858:3160":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"1:15229:4837":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:6934:8861":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:10331:6324":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"24:3743:3403":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"2:8180:3312":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:24737:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"5:3038:2000":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:3772:3250":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:6166:6023":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:8115:3245":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"24:4193:3418":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"1:16029:3005":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"21:2963:3359":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"1:12010:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:3247:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:12168:6905":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:820:6679":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"2:49326:5446":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:49438:5458":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:5029:7664":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"13:232:7886":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"24:5924:2449":{"crate_id":24,"path":["syn","generics","LifetimeDef"],"kind":"struct"},"2:47545:3250":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"12:750:3246":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:46739:5244":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"24:5802:3147":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"16:5736:6013":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:6252:6027":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:46782:4680":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:6959:4747":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:1544:8057":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:8413:3371":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:3172:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"24:4067:3415":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"17:1311:6385":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:8367:5190":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"24:6308:3180":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"21:3141:1822":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"1:12187:4819":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:5452:8641":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:48811:5196":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:13084:5076":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:4315:8377":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:23770:4740":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:8176:5624":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:47884:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:51316:5286":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"24:6369:2193":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"1:4432:4698":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"22:832:3356":{"crate_id":22,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"1:7975:6661":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"6:1733:4995":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:10957:4925":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"14:250:7841":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:45922:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:1653:4847":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:12061:9269":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"22:818:9168":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"1:11077:4706":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"21:1284:3361":{"crate_id":21,"path":["proc_macro","bridge","client","MultiSpan"],"kind":"struct"},"1:6437:4742":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:12756:7222":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:7823:5967":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:53419:9042":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:5632:6009":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:4038:8290":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:5952:5052":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:11082:6304":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"24:3383:3390":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"16:3604:6818":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:10071:6384":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:50206:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"12:2059:4796":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:23871:5506":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"5:1486:4858":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:46353:5602":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:3734:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:13394:7443":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:2027:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"24:6359:3178":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"2:4965:3305":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"24:4865:3435":{"crate_id":24,"path":["syn","token","DivEq"],"kind":"struct"},"1:11268:4842":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"5:8280:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:3274:3368":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"24:5830:3153":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"1:15216:4831":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:6899:8853":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"11:54:5851":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:22581:62406":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:10377:9548":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:3091:6273":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:11439:5439":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:13772:7562":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:5346:5954":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:8404:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:13119:7382":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:6110:5994":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"18:802:6397":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:14:2601":{"crate_id":2,"path":["core","write"],"kind":"macro"},"24:6052:3170":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"24:4686:3423":{"crate_id":24,"path":["syn","token","AddEq"],"kind":"struct"},"12:2032:3246":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:5971:8693":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"14:189:9538":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:55967:5221":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:10001:48070":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:8027:4197":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"12:1203:5863":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"18:169:54338":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:51051:8980":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:4028:8284":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:3658:6659":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"24:2150:4740":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"16:7514:5976":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:52325:5288":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"24:5405:1831":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"1:7649:4896":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:12632:7207":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:9943:63885":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"22:158:54575":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"2:52006:5320":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:4922:7661":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:2967:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:1041:4199":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:46792:5248":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"24:2455:3252":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"17:10236:6288":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:11434:5002":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:47800:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:3939:7641":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:8380:4197":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"2:48531:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"21:2923:4620":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"17:13582:7494":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:11397:5436":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"9:809:4877":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:12467:7173":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:13733:7547":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:11231:6302":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"12:1121:4856":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:3577:2248":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:294:63883":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:4386:7645":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"12:940:4851":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:3175:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:3907:8211":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:24499:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"16:5753:6014":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"12:2072:1796":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"6:5285:8556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"24:161:4125":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"2:3559:4460":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"6:672:41157":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"22:1053:1822":{"crate_id":22,"path":["proc_macro2","Spacing"],"kind":"enum"},"17:10140:6324":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"12:952:4852":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:11822:7052":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:48832:4877":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:6199:4999":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:542:5930":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:10106:6379":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"22:828:3261":{"crate_id":22,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"17:13453:7457":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:9768:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"9:692:5731":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:5735:4761":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:8107:4705":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:14236:4698":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:12155:7108":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:47666:3246":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:24106:5367":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:900:4209":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:5395:8619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:13865:7587":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:7257:6632":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:49986:5086":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:5996:1789":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"24:5757:3136":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"2:4921:3331":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"5:8160:3245":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:14317:4196":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:3278:217":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:11981:7078":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:13810:7571":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:48279:3341":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:11283:5432":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:13488:7468":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"24:4923:3439":{"crate_id":24,"path":["syn","token","Dot3"],"kind":"struct"},"1:9467:9547":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:45876:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:1302:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:24121:8881":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:2397:13048":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:5330:6884":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:10926:48299":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:48820:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:6082:4991":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:11001:48275":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:13318:7422":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:2188:1796":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"24:5409:1832":{"crate_id":24,"path":["syn","attr","Meta","List"],"kind":"foreign_type"},"2:53129:5293":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:2937:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:13205:7399":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:3040:8871":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:16004:2983":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:50071:9385":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"24:3473:1806":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"2:49279:5443":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:14000:7619":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"24:6420:3194":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"5:1685:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:32348:61614":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"1:11524:4867":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:7216:6049":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:11304:48026":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:10317:6312":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"18:713:4057":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:8193:6661":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"2:3352:3434":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:11137:2734":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:2395:13047":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:10489:6370":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:6511:5236":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:9979:5417":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"12:1183:5862":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:46391:3348":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"24:6222:3177":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"1:1446:4845":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:4402:8420":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:3396:4800":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"24:6407:2450":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"17:10095:6378":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:2751:4778":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:14550:4777":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:24635:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:51821:8990":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:5375:8611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"21:107:4621":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"5:69:4469":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:12138:4816":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:8363:5188":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:5875:6640":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"16:7894:5992":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:16010:2988":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:6644:6037":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:10448:6290":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:4157:6356":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:12582:7190":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:11378:6349":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:7843:6055":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"12:843:4845":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:15331:4728":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:1618:3245":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"9:963:5796":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:5295:46433":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:634:8045":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"5:1011:3246":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:50058:5090":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:24601:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:45812:4461":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"24:4976:3442":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"5:5415:4664":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"21:478:4622":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"1:15130:4908":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:3166:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"24:3021:2743":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"2:8164:61734":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:13884:7592":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"24:2878:1828":{"crate_id":24,"path":["syn","parse"],"kind":"module"},"1:7927:4195":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"21:3002:1615":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"22:925:54568":{"crate_id":22,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"24:5449:1815":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"1:16020:2996":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:5930:5050":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"21:3111:1748":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"24:6009:1835":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"5:1215:5692":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:3300:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:11738:7024":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:6126:8757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:7158:6044":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"9:0:2956":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:1526:8049":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"22:799:3303":{"crate_id":22,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"17:13062:7347":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:48850:9258":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"24:6054:3169":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"6:6247:8829":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:46702:5240":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:12023:4901":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:13590:7496":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"18:721:6803":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:11358:6350":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:51030:8979":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:5111:3320":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:13370:7438":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"18:621:9170":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:5328:8585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"21:2972:6426":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"1:16024:3000":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:9332:6365":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"22:1047:2153":{"crate_id":22,"path":["proc_macro2","Punct"],"kind":"struct"},"12:472:63847":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"22:623:3261":{"crate_id":22,"path":["proc_macro2","LexError"],"kind":"struct"},"2:53480:9047":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:11457:8726":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:5536:5636":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:1190:12045":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:50023:5087":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:610:1391":{"crate_id":1,"path":["std","thread"],"kind":"module"},"24:2994:3291":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"16:3506:6222":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:571:8010":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:13637:7509":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:7849:6649":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:13296:7418":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:10710:4679":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"1:2456:6454":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:2219:1050":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:13054:5072":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:15019:4901":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:47018:9254":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:12385:7158":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:48522:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:22604:62404":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"24:6062:3168":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"2:3648:3267":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:0:2963":{"crate_id":17,"path":["object"],"kind":"module"},"24:4175:3417":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"16:6620:6242":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:2553:5697":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"24:4877:3436":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"16:6554:6034":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:13130:5079":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:12795:7233":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"24:5996:2439":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"1:11453:4775":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:49761:5475":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:5979:8698":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"24:6382:2123":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"6:6077:8745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"24:5133:3453":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"1:5785:4764":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:5387:8618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"5:7212:4580":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:9896:63869":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:13348:7433":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:13258:7411":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:50241:5552":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"21:2448:4616":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"2:49420:5169":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:13180:7389":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:6636:5972":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:11665:7009":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:3648:4689":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:15045:57444":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:11208:4725":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"2:7858:5273":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:11628:7003":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"18:678:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"24:5198:3458":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"6:1567:8067":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:10565:4740":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:11070:4705":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:9971:63868":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:9600:63876":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:53192:5313":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:13429:7449":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"24:2312:3243":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"1:11130:4680":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:16022:2998":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:10592:4194":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:53399:9040":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"24:6137:3176":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"24:6060:3172":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"21:808:3361":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"6:4142:8338":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:607:48007":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:10530:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"5:1644:4846":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:7467:5957":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:4510:4696":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:4474:8450":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"24:5866:1782":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"17:10304:6313":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:13079:5075":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:16026:3002":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:13978:7613":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:8448:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"24:3887:3409":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"24:6337:2195":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"2:24805:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:10299:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"16:7250:6052":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:22840:5177":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:5719:4760":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:5407:5999":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:15353:4981":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:11193:4723":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"2:51546:5314":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"18:775:6802":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:10224:48088":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:1236:48086":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:49612:5466":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:1576:8073":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"24:5005:3444":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"24:3214:6431":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"17:2543:6367":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:5544:8661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:49300:5445":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"24:3599:3397":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"20:63:3103":{"crate_id":20,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"16:5561:6007":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:5308:8569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:10887:6934":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:9763:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:9476:6889":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"21:1509:191":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"2:46551:6651":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:12480:7175":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:51285:5298":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:6634:61257":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"6:6662:8839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:46312:5326":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:5034:3313":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"24:5899:2191":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"2:23664:4738":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:3748:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"24:1278:6443":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"1:12262:4825":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"24:6391:2126":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"1:2433:13058":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:7024:6258":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:13627:7504":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:24669:4202":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:3279:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"24:5726:3129":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"24:5783:3142":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"5:2310:5710":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:24169:40177":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:24068:8877":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"24:4283:237":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"21:1358:1823":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"17:11794:7042":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"24:4103:224":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"16:6208:6025":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:47691:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:2362:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:4823:7658":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:3488:4578":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:4666:4672":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:51378:5275":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:4218:8353":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:6685:8850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:10577:57587":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"21:1730:1840":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"9:469:9331":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:49911:5084":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"18:637:6802":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:14609:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"16:6176:6024":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:1091:6632":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:48272:3340":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"24:3527:105":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"6:6922:8859":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:11337:6366":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:13659:2131":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:10814:6347":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"24:2975:1829":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"1:10684:13053":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:46761:5246":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:48842:9257":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"5:4242:6632":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:12741:7218":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:3264:6220":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"24:4988:3443":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"1:14570:9272":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"6:5244:8536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"24:5157:3455":{"crate_id":24,"path":["syn","token","Rem"],"kind":"struct"},"17:13520:7479":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"24:5854:3159":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"2:46682:5239":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"22:962:2469":{"crate_id":22,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"1:5858:5047":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"24:3869:3408":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"2:47553:3245":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:510:48006":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:5373:4981":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:6219:6026":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:4332:8386":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:50407:5495":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:49726:5471":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:3883:8194":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:10826:4773":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:48549:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"24:4790:3430":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"24:4715:3425":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"1:2183:4797":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:12725:7216":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"21:2797:2469":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"24:2977:1830":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"typedef"},"6:612:8032":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"18:730:6781":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"24:5046:3447":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"1:16002:2981":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:14936:6686":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:46052:2541":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:12783:7226":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:11147:9177":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:4067:8301":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:5475:8647":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:15986:57441":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"21:3007:3261":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"5:4215:4580":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:24250:5524":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"5:432:1806":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:47716:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:51099:5305":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"24:3833:2468":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"17:12494:7177":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:5788:6632":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"24:5748:3134":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"2:22804:5197":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:11750:7025":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:3342:3464":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"24:3509:2141":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"5:3048:57396":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:1712:8166":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:7663:4897":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"12:979:4854":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:1597:3246":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:7932:57625":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"2:53439:9044":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:10403:6320":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:2793:4779":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:5416:8631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:14575:4772":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"16:6518:6033":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:15185:4829":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:53465:9046":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:5183:8506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"24:4121:1745":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"2:3729:224":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:2843:6210":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:14166:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"9:749:5733":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"5:5837:5627":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:14588:9278":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:1459:4846":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:5472:6003":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:13331:7428":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:47528:1807":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:32340:4278":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"6:5207:8522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:15201:4830":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:24567:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:3522:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:3380:5124":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:9005:48010":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:8481:4814":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:3894:5685":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"3:0:430":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"24:5798:3146":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"16:2733:6187":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:10242:3337":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:11615:4879":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"23:0:3085":{"crate_id":23,"path":["unicode_ident"],"kind":"module"},"24:2979:3290":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"16:6744:6249":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:6031:8726":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"12:1147:4857":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:4362:8401":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:50202:5483":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:6569:6244":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:6257:4584":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"24:6379:2434":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"1:12252:4919":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"24:5280:3464":{"crate_id":24,"path":["syn","token","Sub"],"kind":"struct"},"17:11159:6947":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:7333:5975":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"12:1784:6630":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"24:2152:6784":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"2:14242:4467":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"24:5470:1776":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"5:3370:4795":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:5444:8639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:1017:4197":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:4098:8318":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:626:8040":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"24:5087:3450":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"1:8738:5019":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"14:0:2960":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:8973:4929":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:7174:6045":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:24703:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:4464:8449":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:11674:4882":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"14:216:46362":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:12234:7118":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"24:5476:3123":{"crate_id":24,"path":["syn","data","Visibility"],"kind":"enum"},"21:2720:2153":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"17:12262:7123":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"9:603:9341":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:5226:8524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:1642:4857":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:6893:8852":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"24:2746:4740":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"24:2448:3250":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"17:11539:6987":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:3041:6215":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:47007:8966":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:12095:7097":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"5:1235:5693":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:4148:8340":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:51492:5307":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:12242:4911":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:38808:4780":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:8473:3370":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"24:4265:3422":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"1:16021:2997":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"24:5075:3449":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"2:46366:5476":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:7884:5963":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"12:815:4849":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:8197:3245":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:16017:2993":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"24:4819:3432":{"crate_id":24,"path":["syn","token","Colon2"],"kind":"struct"},"16:6126:6022":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:11245:5431":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:53518:9049":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:10253:6279":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:5584:12047":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:8803:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:11100:6306":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:16011:2989":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:12343:7137":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:12735:5461":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:9260:3683":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:10866:4962":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:9210:48015":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:11360:4984":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:12142:7105":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:3522:6814":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:11767:7033":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:48010:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:7236:6051":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:9404:6887":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:2594:9545":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"2:50198:5482":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:6668:8841":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:5595:6008":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"24:3210:205":{"crate_id":24,"path":["syn","error","Result"],"kind":"typedef"},"6:6640:8838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:6976:8869":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:10377:6314":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:2177:4796":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"20:18:3102":{"crate_id":20,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"12:2280:4857":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:4078:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:3492:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:9034:48011":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"24:6001:3165":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"6:5995:8710":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:13506:7472":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:1075:2254":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"12:399:5867":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:49584:5437":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:4890:7660":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:3896:8203":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:2292:4506":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:3182:227":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"18:767:6812":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:6928:8860":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:2888:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:10309:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:3877:8193":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"24:160:4740":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"24:5806:3148":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"17:10061:48087":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:10468:6369":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:24035:5371":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:3714:7638":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:7738:2094":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:10844:6324":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:53533:9050":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"24:5186:3457":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"24:6350:3190":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"6:6853:8851":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:49289:5444":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:11482:1759":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:37627:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"21:2687:1748":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"24:6424:2192":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"17:12051:7087":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"24:4911:3438":{"crate_id":24,"path":["syn","token","Dot2"],"kind":"struct"},"16:7279:6260":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:13402:7445":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:47926:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:10435:48127":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"24:5951:2194":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"2:48619:4141":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"17:13477:7464":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:5257:8545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"22:843:3355":{"crate_id":22,"path":["proc_macro2","fallback","LineColumn"],"kind":"struct"},"2:12772:5464":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"24:5743:3133":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"16:6691:6038":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:1472:4580":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:3435:5143":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:547:6194":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:4506:7649":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:50170:5481":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"24:5017:3445":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"16:6021:6209":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"22:1069:1759":{"crate_id":22,"path":["proc_macro2","Ident"],"kind":"struct"},"17:13746:7553":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:7119:5947":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"5:374:4471":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:681:1840":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:10160:6895":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"21:251:4320":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"1:12038:4902":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:13172:7388":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:6238:5958":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:49779:5476":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"5:1457:4857":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"24:5412:1833":{"crate_id":24,"path":["syn","attr","Meta","NameValue"],"kind":"foreign_type"},"16:6424:6031":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:3364:5118":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:4740:5200":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:5201:8519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:23676:62040":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:10295:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"16:2968:6213":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:1152:12043":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"5:1441:4855":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:7332:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:12116:3246":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"24:6104:1616":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"2:12993:3268":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:4198:8351":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"5:8146:62535":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:10677:4859":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:10816:4943":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"20:296:2048":{"crate_id":20,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"24:2059:3304":{"crate_id":24,"path":["syn","buffer","TokenBuffer"],"kind":"struct"},"16:4350:7644":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:2062:4664":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"24:956:64107":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"17:11696:7019":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:13961:4900":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"6:4493:8458":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:4055:8296":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:9771:6678":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"2:3505:3328":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"24:5964:2441":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"6:5175:8504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:7255:60618":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:10673:48225":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:49200:5435":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"24:5145:3454":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"18:821:6399":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:46024:5156":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:6768:6251":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:6951:8866":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:6682:5969":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:4378:3245":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"24:5423:3116":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"6:5485:8649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:16007:2985":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"24:5263:3463":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"1:13587:57622":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:5775:4763":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:24052:9231":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"20:0:1066":{"crate_id":20,"path":["quote"],"kind":"module"},"2:47758:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:46420:5598":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:12795:5465":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"24:1271:6441":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"2:51211:5306":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"21:2846:1824":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"18:791:6396":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:51076:5317":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:46802:5206":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:2769:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:11714:7020":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:10858:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:12182:7112":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:6964:3680":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:8362:8872":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"17:10988:48276":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:4:979":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:53428:9043":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"24:3437:3393":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"2:10313:3339":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"24:4669:3270":{"crate_id":24,"path":["syn","token","Add"],"kind":"struct"},"2:8887:5172":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:5975:6020":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:15498:5891":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"18:152:54337":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"24:5464:3118":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"17:9839:6324":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:1704:8165":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:5833:5625":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"18:695:6412":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:46397:5597":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:13154:7383":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:9381:5071":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:7856:6056":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:7795:4905":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:4728:5199":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:48052:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"24:4229:3420":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"1:15235:4838":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:4532:8473":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:10809:4772":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:3775:3327":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:12699:7214":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:8849:6298":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:46581:5227":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:46290:9240":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:10618:4196":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"24:5427:3117":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"2:10252:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:4008:48198":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:3561:4688":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:3339:4949":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:4643:6637":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:0:798":{"crate_id":6,"path":["libc"],"kind":"module"},"6:1721:8172":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"14:56:1759":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"8:0:2955":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:5314:6883":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:53556:9051":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"24:2366:3245":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"2:6438:5235":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:4734:7655":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:3281:220":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:11411:5437":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:4110:8324":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:23470:17395":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:5402:8620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:1651:4858":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"9:234:5756":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"5:1607:3250":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:6054:8744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:51642:5287":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"18:867:6403":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:11572:6993":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"24:972:3167":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"5:923:5661":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:46621:5230":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"18:838:5074":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"18:830:6400":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:2166:4578":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"16:3488:6223":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"24:5297:3465":{"crate_id":24,"path":["syn","token","SubEq"],"kind":"struct"},"2:48094:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"20:431:3864":{"crate_id":20,"path":["quote","__private","RepInterp"],"kind":"struct"},"5:3375:5653":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:13842:7586":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:11962:7073":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:48136:5542":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:10962:4692":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"21:165:4644":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"2:8602:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"12:933:4850":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:49432:5457":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:9594:6675":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:5093:660":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:7615:4894":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"22:1103:3245":{"crate_id":22,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"24:5766:3138":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"1:2458:13064":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:52589:5301":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:3172:6216":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"24:2807:6434":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"17:9186:6352":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"12:895:5853":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"24:2069:3303":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"22:997:1615":{"crate_id":22,"path":["proc_macro2","TokenStream"],"kind":"struct"},"24:5969:2444":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"2:5165:3322":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"24:2881:6429":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"1:1518:4852":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:2934:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:10584:6355":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:10477:6368":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:894:4208":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:22934:4737":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:56364:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:12282:4930":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:49770:3348":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:49480:5433":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:46031:4784":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"24:5790:3144":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"16:7571:5952":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"22:448:3261":{"crate_id":22,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"2:10580:5195":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:5039:3314":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"22:1027:3262":{"crate_id":22,"path":["proc_macro2","Delimiter"],"kind":"enum"},"2:5156:3321":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:6087:5953":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:13192:7394":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"24:4139:3416":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"24:4935:3440":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"12:183:5869":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:4397:4967":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"24:5826:3152":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"17:11970:7075":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"21:3116:3262":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"2:9974:5416":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:46561:13676":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:12525:5576":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"18:886:6404":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"24:1274:6442":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"2:10934:214":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:49736:5472":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:4425:8428":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:6152:5955":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:49959:5085":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:6391:6030":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:6265:8832":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"9:686:5729":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"6:4020:8281":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"24:5496:3121":{"crate_id":24,"path":["syn","data","VisPublic"],"kind":"struct"},"5:8121:5663":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:3972:8256":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:12057:6657":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"6:6013:8717":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"24:6134:1972":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"6:4048:8293":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:6032:5946":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:46299:5325":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:32159:5564":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:46641:5232":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:11779:7036":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:1537:8054":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:16023:2999":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"24:6356:3192":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"17:13041:7338":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:11598:4878":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"24:5774:3140":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"16:4448:7647":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:3337:3270":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"21:0:1037":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"1:1428:3250":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:1493:4848":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:13620:7502":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:4392:8417":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:4230:8354":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:53050:5309":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:48803:9256":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:4699:6637":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:49046:5616":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"5:8446:4578":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:3368:3271":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:10646:12039":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"5:6475:4580":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:4446:8438":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"24:5814:3149":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"2:49566:5436":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:7205:6048":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:11434:6957":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:46989:9253":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:3758:5155":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:3717:5532":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:13912:7601":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:12408:7167":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:15072:9130":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"15:269:5887":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"24:3959:3320":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"5:1195:63821":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:46590:4679":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:3297:4051":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"24:6126:1968":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"17:13054:7345":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"20:305:2048":{"crate_id":20,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"1:1619:4855":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:12227:5015":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:2200:6634":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"24:5873:2248":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"5:6411:223":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"12:856:4846":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:10788:48197":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:5315:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:48561:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"24:5393:2094":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"1:9060:5016":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:3746:5154":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"21:1253:3356":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"2:49684:5470":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:46650:5233":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:3516:2187":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"24:4773:3429":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"22:155:9167":{"crate_id":22,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"17:12521:7181":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:9627:57624":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"1:6937:4752":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:46434:5600":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:5538:8660":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"21:3076:3355":{"crate_id":21,"path":["proc_macro","LineColumn"],"kind":"struct"},"1:12773:60623":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"2:22549:62036":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:5605:5159":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"24:3419:3392":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"21:2746:1759":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"6:4296:8369":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:7792:4904":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:13306:7419":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:7780:234":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"12:2392:1748":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:53454:9045":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:8908:4256":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"24:4739:3427":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"0:0:1638":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"6:88:40759":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:10028:48071":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"18:755:63890":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:4614:7651":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"24:66:1995":{"crate_id":24,"path":["syn","token"],"kind":"module"},"5:3970:6632":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:51721:5276":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:11356:5434":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:12537:7183":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:7286:60618":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:46453:5330":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:3372:4933":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:14242:4696":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:10211:48084":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"24:3941:3412":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"17:13574:7493":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:9659:63877":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:12771:7223":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:9139:3676":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:1662:8136":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:3525:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:50228:4934":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"24:3348:3467":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"2:3310:3369":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:2508:4462":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:2162:4580":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:7453:6632":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"5:3362:4797":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:7146:6043":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:1530:4854":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:3195:6217":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:10587:4185":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"18:705:6802":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:13898:7594":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:9933:48021":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:12247:5021":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"24:4049:1774":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"24:6416:2140":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"6:6940:8862":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:3384:5126":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:4081:8308":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"18:668:6411":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:1633:4856":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:53341:5316":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"24:5431:1834":{"crate_id":24,"path":["syn","attr","NestedMeta"],"kind":"enum"},"2:51696:5294":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:51180:5318":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:1488:4847":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"12:2040:4580":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"22:934:1823":{"crate_id":22,"path":["proc_macro2","imp","Span"],"kind":"enum"},"2:13284:40425":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"18:661:6410":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:48498:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"24:6334:3187":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"2:2957:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:4783:4457":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:783:6679":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"17:13356:7436":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:1588:8082":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"9:996:5797":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:13568:13058":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:4066:4782":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"16:4417:7646":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"18:897:6405":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:11726:7023":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:11156:4721":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"17:12568:7188":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"24:5099:3451":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"6:4012:8279":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:52132:5312":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:2218:5655":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"18:850:6401":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:4306:3250":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:11199:6948":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:4852:7659":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:48635:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"24:940:64106":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"24:3779:3405":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"16:6357:6029":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:46374:5596":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"9:41:5781":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"21:344:63944":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"24:3725:3402":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"24:5467:3119":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"24:5500:3122":{"crate_id":24,"path":["syn","data","VisRestricted"],"kind":"struct"},"22:24:9285":{"crate_id":22,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"2:3103:4740":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:5456:6002":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:3145:6225":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:12712:7215":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:23128:4740":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:51234:5310":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:9733:4976":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:4671:7653":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"24:153:1812":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"6:4127:8332":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:4471:4700":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:15509:5891":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:7378:5960":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"22:1008:1824":{"crate_id":22,"path":["proc_macro2","TokenTree"],"kind":"enum"},"2:46720:5242":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"24:299:1759":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"24:2555:2001":{"crate_id":24,"path":["syn","parse_quote"],"kind":"module"},"1:8839:60624":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"16:6731:6248":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:4443:3246":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"24:3653:3399":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"2:46673:5234":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:11678:7010":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:11425:5438":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"22:953:1759":{"crate_id":22,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"1:14565:9270":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"24:5894:1767":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"16:5855:6018":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"24:5326:2462":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"9:900:7942":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"24:5215:3459":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"24:6366:3193":{"crate_id":24,"path":["syn","ty","Variadic"],"kind":"struct"},"6:4256:8356":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"20:528:3978":{"crate_id":20,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"24:6056:3171":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"24:3851:3407":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"21:2949:3360":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"2:46413:5475":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:11098:4676":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"24:5174:3456":{"crate_id":24,"path":["syn","token","RemEq"],"kind":"struct"},"5:6954:5619":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:13685:7546":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:12040:7086":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:0:277":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:10667:4803":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"24:6110:1764":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"1:2159:3245":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"24:4031:2512":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"24:661:64003":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"17:10599:48222":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"24:1160:2048":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"1:11317:57440":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"2:32334:4277":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"24:3401:3391":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"16:3429:5943":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"5:783:222":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:3772:7639":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:11420:4994":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:5146:8480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:23774:5183":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:5436:8637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:13098:7377":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:12405:6454":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:9886:48020":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:49361:5449":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:5290:8557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:10925:4740":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:10292:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:10427:6680":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:9065:48012":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:10128:6381":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:49269:5442":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:5631:779":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:9759:48018":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:47605:4475":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:4379:8412":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"24:4848:3434":{"crate_id":24,"path":["syn","token","Div"],"kind":"struct"},"24:3923:3411":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"1:4684:4674":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:49042:5617":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:1912:42131":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"5:8463:4579":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:13780:7565":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:9809:63871":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:4005:8275":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:5271:8555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:6181:8795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"24:2195:1753":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"2:50186:5489":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"20:357:2471":{"crate_id":20,"path":["quote","spanned","Spanned"],"kind":"trait"},"5:6764:4664":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:6905:8854":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:10938:48300":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:1606:8092":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"24:6232:1745":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"24:5946:3162":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"2:14130:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:24129:8882":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:12946:7255":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"18:651:6406":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:11250:4727":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"1:12065:57442":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"1:8925:5029":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"2:46503:5539":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"20:117:1825":{"crate_id":20,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"2:56325:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13924:7603":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:6117:8754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:7761:6054":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:4400:4968":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:46612:5229":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"12:1103:4855":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:5647:4788":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"14:47:9538":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:49530:5463":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:11163:4682":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"5:5889:6643":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"1:10882:3303":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"22:874:1759":{"crate_id":22,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"1:1507:4851":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:10303:2241":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:10149:48020":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:14239:4700":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:12742:4941":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:7392:5961":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:49251:5440":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:2269:4507":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"}},"external_crates":{"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.21/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"23":{"name":"unicode_ident","html_root_url":null},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/1.0.99/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.43/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":17}