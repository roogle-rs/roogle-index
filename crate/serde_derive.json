{"root":"0:0:1840","crate_version":"1.0.193","includes_private":false,"index":{"2:12862:29677":{"id":"2:12862:29677","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12503:3808","`DoubleEndedIterator`":"2:7895:127","prim@char":"1:12032:450","str::split":"2:12856:29673"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43932:9695","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12523:15742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12901:34544":{"id":"2:12901:34544","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12934:34550":{"id":"2:12934:34550","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4739:34550"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44213:9726","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12833:9683":{"id":"2:12833:9683","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43900:2954","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12897:34542":{"id":"2:12897:34542","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12806":{"id":"2:12806","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12807:872","2:12808:2182","2:12809:34529","2:12810:34530","2:12812:34531","2:12815:2944","2:12816:34532","2:12817:339","2:12818:29644","2:12819:2071","2:12821:29641","2:12823:29642","2:12825:29643","2:12827:34533","2:12828:34534","2:12829:2832","2:12830:29666","2:12831:2422","2:12832:2416","2:12833:9683","2:12834:32697","2:12835:32698","2:12836:31939","2:12837:34535","2:12838:32974","2:12839:2284","2:12842:29114","2:12845:29116","2:12848:2734","2:12852:4354","2:12856:29673","2:12859:29675","2:12862:29677","2:12865:34536","2:12868:34537","2:12871:29679","2:12874:29681","2:12877:29683","2:12880:29684","2:12883:2178","2:12886:34538","2:12889:34539","2:12892:34540","2:12895:34541","2:12897:34542","2:12899:34543","2:12901:34544","2:12902:34545","2:12903:34546","2:12906:2090","2:12909:28541","2:12912:29685","2:12915:34547","2:12918:34548","2:12921:34549","2:12924:2051","2:12926:29464","2:12927:30835","2:12928:29465","2:12929:29463","2:12930:29462","2:12931:30838","2:12932:30839","2:12933:30840","2:12934:34550","2:12936:10291","2:12937:34551"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12842:29114":{"id":"2:12842:29114","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12503:3808"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12871:29679":{"id":"2:12871:29679","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12503:3808","str::rsplitn":"2:12874:29681"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44018:9771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12807:872":{"id":"2:12807:872","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12032:450"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535":{"id":"5:5535","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5536:35221","5:5537:2212","5:5540:35222","5:5543:35223","5:5551:35224","5:5552:35225","5:5553:3473","5:5554:2413","5:5555:2412"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:492-0:1019:1962":{"id":"0:492-0:1019:1962","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1019:1962","glob":false}}},"2:12827:34533":{"id":"2:12827:34533","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12038:1534","str::slice_mut_unchecked":"2:12828:34534","crate::ops::Index":"2:3227:2589"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:8:1955":{"id":"0:8:1955","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[216,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:12874:29681":{"id":"2:12874:29681","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12032:450","str::splitn":"2:12871:29679","self::pattern":"2:12503:3808"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44036:9772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12523:15742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12889:34539":{"id":"2:12889:34539","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12503:3808","`DoubleEndedIterator`":"2:7895:127","prim@char":"1:12032:450","str::rmatch_indices":"2:12892:34540"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44064:9774","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12895:34541":{"id":"2:12895:34541","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12823:29642":{"id":"2:12823:29642","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10592:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10592:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12838:32974":{"id":"2:12838:32974","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44206:9783","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12829:2832":{"id":"2:12829:2832","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12830:29666"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12808:2182":{"id":"2:12808:2182","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12906:2090":{"id":"2:12906:2090","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12503:3808"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12830:29666":{"id":"2:12830:29666","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12829:2832"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12845:29116":{"id":"2:12845:29116","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12503:3808"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12523:15742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12924:2051":{"id":"2:12924:2051","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12464:133","`FromStr`":"2:12463:3429"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42161:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12463:3429","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12463:3429","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:35221":{"id":"5:5536:35221","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2026","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2026","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12915:34547":{"id":"2:12915:34547","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12503:3808"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12523:15742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12918:34548":{"id":"2:12918:34548","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12503:3808"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12933:30840":{"id":"2:12933:30840","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:37089"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:2212":{"id":"5:5537:2212","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5543:35223":{"id":"5:5543:35223","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5551:35224":{"id":"5:5551:35224","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12886:34538":{"id":"2:12886:34538","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12503:3808","`DoubleEndedIterator`":"2:7895:127","prim@char":"1:12032:450","str::matches":"2:12883:2178"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44136:9778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12523:15742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:375":{"id":"0:63:375","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1878,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:86-0:994:2056"],"is_stripped":false}}},"2:12834:32697":{"id":"2:12834:32697","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12835:32698"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44188:9781","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:493-0:404:1963":{"id":"0:493-0:404:1963","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[14,0],"end":[14,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:404:1963","glob":false}}},"2:12899:34543":{"id":"2:12899:34543","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12848:2734":{"id":"2:12848:2734","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42018:197","prim@char":"1:12032:450","self::pattern":"2:12503:3808"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42016:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12835:32698":{"id":"2:12835:32698","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12834:32697"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44197:9782","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12859:29675":{"id":"2:12859:29675","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12503:3808"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12319:9694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12809:34529":{"id":"2:12809:34529","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1023:2059":{"id":"0:1023:2059","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"2:12831:2422":{"id":"2:12831:2422","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12032:450"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43884:9762","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86-0:994:2056":{"id":"0:86-0:994:2056","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[21,0],"end":[21,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::internals::case::RenameRule","name":"RenameRule","id":"0:994:2056","glob":false}}},"2:12909:28541":{"id":"2:12909:28541","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12503:3808"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42016:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12903:34546":{"id":"2:12903:34546","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12503:3808"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12528:15740","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12852:4354":{"id":"2:12852:4354","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42018:197","prim@char":"1:12032:450","self::pattern":"2:12503:3808"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42016:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12523:15742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12926:29464":{"id":"2:12926:29464","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12937:34551":{"id":"2:12937:34551","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4737:34551"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44231:9725","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12818:29644":{"id":"2:12818:29644","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12049:1639"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12856:29673":{"id":"2:12856:29673","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12503:3808","`DoubleEndedIterator`":"2:7895:127","prim@char":"1:12032:450","str::split_whitespace":"2:12834:32697","str::rsplit":"2:12862:29677"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43914:9692","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12816:34532":{"id":"2:12816:34532","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12912:29685":{"id":"2:12912:29685","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12503:3808"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42016:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12523:15742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12921:34549":{"id":"2:12921:34549","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12503:3808"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12523:15742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12817:339":{"id":"2:12817:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12818:29644","`u8`":"1:12049:1639"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12815:2944":{"id":"2:12815:2944","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12058:15744"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12936:10291":{"id":"2:12936:10291","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4740:10291"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44222:9720","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12927:30835":{"id":"2:12927:30835","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39965:30808","Self::is_ascii":"2:12926:29464"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42016:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39965:30808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12880:29684":{"id":"2:12880:29684","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42016:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12523:15742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12819:2071":{"id":"2:12819:2071","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42018:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42016:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10592:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10592:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12892:34540":{"id":"2:12892:34540","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12503:3808","`DoubleEndedIterator`":"2:7895:127","prim@char":"1:12032:450","str::match_indices":"2:12889:34539"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44082:9775","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12523:15742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12868:34537":{"id":"2:12868:34537","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12503:3808","str::split":"2:12856:29673","prim@char":"1:12032:450","str::split_terminator":"2:12865:34536"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43982:9769","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12523:15742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12877:29683":{"id":"2:12877:29683","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42016:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12865:34536":{"id":"2:12865:34536","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12503:3808","str::split":"2:12856:29673","prim@char":"1:12032:450","`DoubleEndedIterator`":"2:7895:127","str::rsplit_terminator":"2:12868:34537"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43964:9768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12832:2416":{"id":"2:12832:2416","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12032:450"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43890:9763","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:2412":{"id":"5:5555:2412","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12930:29462"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12883:2178":{"id":"2:12883:2178","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12503:3808","`DoubleEndedIterator`":"2:7895:127","prim@char":"1:12032:450","str::rmatches":"2:12886:34538"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44118:9777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12931:30838":{"id":"2:12931:30838","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:37089"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12837:34535":{"id":"2:12837:34535","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44178:9780","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5552:35225":{"id":"5:5552:35225","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2026","`String`":"5:7534:249"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2026","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:964:1829":{"id":"0:964:1829","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[89,0],"end":[94,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"0:965:1837":{"id":"0:965:1837","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[97,0],"end":[102,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:12825:29643":{"id":"2:12825:29643","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10592:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10592:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12839:2284":{"id":"2:12839:2284","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12503:3808"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5540:35222":{"id":"5:5540:35222","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12508:15741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5553:3473":{"id":"5:5553:3473","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12930:29462":{"id":"2:12930:29462","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1840":{"id":"0:0:1840","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[102,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2021\n# use serde_derive::{Deserialize, Serialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.193\")]","#![allow(clippy::branches_sharing_code, clippy::cognitive_complexity,\nclippy::collapsible_match, clippy::derive_partial_eq_without_eq,\nclippy::enum_variant_names, clippy::manual_map,\nclippy::match_like_matches_macro, clippy::needless_pass_by_value,\nclippy::too_many_arguments, clippy::trivially_copy_pass_by_ref,\nclippy::used_underscore_binding, clippy::wildcard_in_or_patterns,\nclippy::unnested_or_patterns,)]","#![allow(clippy::cast_possible_truncation, clippy::checked_conversions,\nclippy::doc_markdown, clippy::enum_glob_use, clippy::indexing_slicing,\nclippy::items_after_statements, clippy::let_underscore_untyped,\nclippy::manual_assert, clippy::map_err_ignore, clippy::match_same_arms,\nclippy::match_wildcard_for_single_variants, clippy::module_name_repetitions,\nclippy::must_use_candidate, clippy::option_if_let_else, clippy::similar_names,\nclippy::single_match_else, clippy::struct_excessive_bools,\nclippy::too_many_lines, clippy::unseparated_literal_suffix,\nclippy::unused_self, clippy::use_self, clippy::wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:964:1829","0:965:1837"],"is_stripped":false}}},"2:12932:30839":{"id":"2:12932:30839","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:37089"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12929:29463":{"id":"2:12929:29463","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12836:31939":{"id":"2:12836:31939","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44168:9779","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12928:29465":{"id":"2:12928:29465","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12810:34530":{"id":"2:12810:34530","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12812:34531":{"id":"2:12812:34531","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12810:34530"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5554:2413":{"id":"5:5554:2413","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12929:29463"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12902:34545":{"id":"2:12902:34545","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12828:34534":{"id":"2:12828:34534","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12038:1534","crate::ops::IndexMut":"2:3231:3415","str::slice_unchecked":"2:12827:34533"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12821:29641":{"id":"2:12821:29641","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42018:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42016:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10592:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10592:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:9813:22684":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:4566:8240":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:1550:9661":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:11088:6518":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:48205:9269":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:12028:15882":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:4798:6215":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:15200:7157":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:945:10307":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:7284:3979":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"24:4799:3328":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"23:235:4261":{"crate_id":23,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"2:32478:2743":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"24:4508:2179":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"2:46525:9196":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:40686:3492":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:30884:33012":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:4647:8272":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:11197:9363":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:32499:9717":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"24:5070:2640":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"17:14373:6910":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:23408:8922":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"5:3155:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"24:3956:3695":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"2:40704:3502":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"11:2231:9664":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:9651:22680":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:12872:6617":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:5049:7516":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"24:4272:3717":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"1:3160:32292":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"11:2326:10309":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:44082:9775":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:6263:8698":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:4497:7499":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:2654:15791":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:7006:22615":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:44294:15755":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"24:2600:3654":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"2:44410:9794":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:13334:6695":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"21:2442:2046":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"2:4184:32981":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:10535:10423":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:7492:9632":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:7534:249":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:48342:9279":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:7534:7477":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:12572:22878":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:22391:10663":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"6:5859:8516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:22331:10671":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:40756:3507":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:14021:6833":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:2939:3577":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:12784:9502":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:13695:6786":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:22643:8904":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"24:54:2054":{"crate_id":24,"path":["syn","token"],"kind":"module"},"17:11817:22835":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:8330:8738":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"21:2607:3591":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"17:11536:9473":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:3278:10419":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"24:3830:3687":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"6:6159:8658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:46078:9175":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:6901:7472":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:45970:9171":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"24:2102:2602":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"17:15842:6645":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"24:4535:1992":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"24:4120:3706":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"24:5079:2113":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"1:482:6209":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:39717:222":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:12057:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:2931:243":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:9467:135":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"5:7296:4770":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:10940:10141":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:6368:3519":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:11593:9377":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:5322:7519":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:44542:9806":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:48380:9281":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:11590:9477":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:12574:15749":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:44206:9783":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"24:4045:3701":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"24:5065:2637":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"18:531:9449":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"24:3876:3690":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"1:3201:10422":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:21956:33036":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:2574:7447":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:6596:10548":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"16:7128:9359":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:16146:7421":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"11:2554:35825":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"10:44:7818":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:5240:209":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:7782:9638":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:3510:10404":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:13787:6802":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:12047:796":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:6070:6218":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:13663:6779":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:15125:7141":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:11619:9854":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:43838:15732":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:7026:6231":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:6013:16113":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"11:1896:4768":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"16:7462:7627":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:12797:6614":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"20:843:2665":{"crate_id":20,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"24:4584:2195":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"17:13478:6733":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:7866:3487":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:3166:29049":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"24:2583:3653":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"24:0:1818":{"crate_id":24,"path":["syn"],"kind":"module"},"16:4949:7513":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:42751:3550":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:22627:9705":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:10881:22706":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:44064:9774":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:21919:10587":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"16:6485:7465":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:7610:8870":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:40381:9722":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"24:3042:3671":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"17:2169:22777":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:2450:7442":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:22289:33200":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"21:2646:258":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"6:62:16139":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:44488:15756":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"24:4335:3721":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"24:2753:3658":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"2:23160:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:8385:3975":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:1527:216":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:3479:3580":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:45904:9168":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"20:889:2046":{"crate_id":20,"path":["proc_macro2","TokenTree"],"kind":"enum"},"17:14122:6869":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:39778:8996":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:30652:4632":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"11:396:6138":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:5969:8568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"24:921:3365":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"2:40794:3495":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:14969:7101":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:12244:9489":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"11:742:10229":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"9:426:21591":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:6813:8768":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"24:5162:3372":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"2:13156:211":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"24:5520:3382":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"16:7067:9629":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:4519:3569":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:43708:9696":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:1760:10318":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:12335:6582":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:6083:21716":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:21516:10584":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:22694:8908":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"24:3314:3679":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"16:2321:7430":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:637:10293":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:557:4556":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:8213:9692":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:1538:3405":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:43304:9758":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"18:614:35922":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:12208:9765":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:1501:7972":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:11537:10440":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:4914:8364":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:7436:7626":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:15133:7143":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"24:3365:3682":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"16:7884:22623":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:15384:7209":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:7544:9637":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:5435:7521":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:11743:22832":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:6545:7538":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:5921:8544":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:23222:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:8205:22626":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:3797:7491":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"0:0:1840":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"1:4625:10448":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"24:5312:2629":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"1:9034:9359":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:12396:6587":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:4378:3544":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:1576:8013":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:1639:8061":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:7895:125":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:6100:8643":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:12459:6514":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"5:7450:4563":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"11:2469:4768":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"24:4795:3327":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"1:9026:1972":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:16098:7411":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"16:2504:7444":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:6357:182":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:40532:9732":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:9949:3558":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"18:755:9465":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:3343:4768":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:12052:1638":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"24:5202:3374":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"1:8891:9355":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:4777:716":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"21:2655:3589":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"6:6798:8763":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:42410:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"13:226:7810":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"24:5348:2357":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"17:11041:6522":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:43726:15728":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:43067:134":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:7923:10146":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:46238:9182":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"24:4834:3336":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"24:3212:3677":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"2:41220:3470":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:3315:7487":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:21255:33039":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"5:3230:35682":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:1687:6163":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:10736:3406":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"24:5486:3388":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"17:16004:7387":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"14:221:7763":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:40513:9125":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:2972:2221":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:44499:9797":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:10812:125":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"15:394:21707":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"18:538:6382":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:44222:9720":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:3195:138":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:4496:8205":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:42449:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:5743:9521":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"24:5498:3392":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"2:46715:9202":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:7668:4562":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:8239:2743":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:8326:10505":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:9891:22664":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"24:4890:3349":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"1:6297:226":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:13754:6794":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:12560:22907":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:40574:10350":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:11657:9483":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:44018:9771":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:3049:21745":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:2996:4330":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:15535:7266":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"11:2352:10310":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:11155:9466":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:6844:7573":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"24:4934:3359":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"24:2250:6346":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"17:15108:7138":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:41833:2045":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"12:0:3169":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:12029:6571":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:1558:8003":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"24:550:232":{"crate_id":24,"path":["syn","error","Result"],"kind":"type_alias"},"17:4928:22884":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:8006:10239":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"20:806:35932":{"crate_id":20,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"24:4260:3716":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"21:2651:3424":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"2:42994:3547":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:12180:22867":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"24:261:10125":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"6:5004:8420":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:2938:3596":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:42161:232":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"24:4526:3310":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"1:9094:183":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:511:22679":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"24:4886:3348":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"17:2228:22765":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:621:10140":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:12310:6581":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"18:636:6396":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:4557:7501":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"21:990:258":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"24:925:3038":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"17:12356:9499":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:415:181":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:7582:7628":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:1406:152":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"20:984:3405":{"crate_id":20,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"6:5891:8534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:13765:6795":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:3232:7429":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"11:1923:2015":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"18:507:6378":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"11:883:10308":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:42067:170":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:6332:7462":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:22154:10667":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:2413:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"24:4400:3726":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"1:2370:10372":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:44345:9792":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:5798:7524":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:1545:4768":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:5415:10524":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"24:1142:5267":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"17:12474:6522":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:3387:15825":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"24:4812:3331":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"17:13436:6718":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:2942:250":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"5:2979:3671":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:16170:6689":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"24:2232:2668":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"1:1054:10309":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"21:1064:2045":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"2:3043:6355":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:3408:15768":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:5832:3506":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:3324:217":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:30720:33009":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:5044:8440":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"11:832:10303":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:8320:3485":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:40765:3508":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:3500:10383":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"5:1536:10311":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:12850:6579":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:2236:35716":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:23067:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"5:903:3406":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:40664:3491":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:12048:792":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:4806:15779":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:8300:10437":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:14426:6916":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"5:4050:6143":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:10762:9839":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"21:140:4804":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"17:13182:6672":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:41770:9129":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:46973:9222":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:3015:6351":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"11:2304:9631":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:5381:10522":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:15689:7310":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:4986:7514":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"24:2804:1991":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"6:4610:8260":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"11:2140:10309":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"11:844:10305":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:12432:22876":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"6:6837:8780":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"24:4441:3729":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"1:12042:690":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:12517:9458":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:11439:22760":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:10390:6198":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:14843:7084":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:3098:6360":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:951:10308":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:12037:1501":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:10944:7875":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:10307:6194":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:15287:7185":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:7663:4560":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:23346:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:3670:10435":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:1819:4844":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:42092:3405":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"23:281:2055":{"crate_id":23,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"17:15659:7302":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"21:1021:3590":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"2:8004:175":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:43964:9768":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:12127:22843":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:8842:9353":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:7540:10150":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:21299:33042":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:6426:3470":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"11:299:9654":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:9968:22687":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"24:5015:2645":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"2:8989:3982":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:3581:179":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:9186:31748":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:11563:9475":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:4182:6163":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:939:10306":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:4238:15770":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:867:9659":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:13516:6741":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:9678:22668":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:6804:8765":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"24:4906:3352":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"1:6430:10543":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"24:2651:2026":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"2:9955:3556":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:15345:7197":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:4529:8219":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:12758:6613":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:3188:2526":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:2088:4678":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:12418:22883":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:11632:9480":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:15049:7119":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:6346:10203":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:2202:10364":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:12659:22665":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:30425:10441":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:4755:8288":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:9730:22681":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"20:722:2045":{"crate_id":20,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"17:11932:22800":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:13145:1978":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:4535:8222":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:5939:9541":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:10852:22705":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:11800:6535":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:9895:3555":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:10538:10419":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"24:554:5691":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"6:6128:8650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:6162:6222":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"24:3025:3670":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"2:21313:33046":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:8292:10468":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:10840:28882":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"14:187:21685":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:32492:3570":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"24:5113:2319":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"2:43858:9158":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:3397:260":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:32474:2134":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:12268:9773":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"24:4318:3720":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"2:46118:9177":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"24:3008:3669":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"2:43296:9757":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:41940:9751":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:13407:6709":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:12614:22696":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:13285:6688":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:8207:2954":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:4491:10478":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"24:4825:3334":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"16:6753:9601":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:10067:6497":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:3837:10440":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:7754:10141":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:11226:22759":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:8978:113":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:7556:8867":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"21:2765:2369":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"24:4953:2589":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"2:43757:9156":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:12166:22840":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"24:929:3366":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"1:903:4768":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"13:0:3163":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:30708:3547":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:6929:7582":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:42488:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:3482:3555":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:13419:6710":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:43736:9699":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:4364:8124":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:3594:3406":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:4977:8402":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"21:2720:3590":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"1:2209:10365":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:47273:9228":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:3164:123":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:6415:9580":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:12324:9497":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:5910:8536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:11178:9162":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"24:5503:3393":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"21:478:6132":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"1:10767:9825":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:8286:10476":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:8181:7483":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:13056:6636":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:15631:7293":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"11:1891:4770":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:4488:8203":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:46048:9174":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:4167:10472":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:10154:149":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:1966:204":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:2825:10348":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"24:5343:2646":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"6:6666:8710":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"14:31:10126":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:43982:9769":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:44891:9165":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:2197:22743":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:8453:9151":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:43900:2954":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:40724:3504":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"11:123:5983":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:48419:9282":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"5:4020:4770":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"4:0:3164":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:46303:9184":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:46849:9205":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"9:330:7855":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:11294:22745":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:4523:8217":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"24:129:1966":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"23:322:2668":{"crate_id":23,"path":["quote","spanned","Spanned"],"kind":"trait"},"16:5648:22603":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"18:491:9448":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"11:2124:9631":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:15480:7247":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:15645:7295":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:15013:7114":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:11045:6240":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:7644:4573":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:40695:3493":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"11:1025:10309":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"5:6861:4775":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"24:4306:3719":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"21:2257:3427":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"1:8226:10437":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:7657:8880":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:0:877":{"crate_id":6,"path":["libc"],"kind":"module"},"2:40785:3509":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:46201:9180":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"24:1071:2055":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"17:10950:22727":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:7931:3542":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"24:5096:2635":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"24:846:10385":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"5:3607:3410":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:46495:9195":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:11388:9852":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"11:490:150":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:12220:6579":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:7365:8853":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:4585:7502":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:2618:7449":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:6261:10187":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:4700:10504":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"20:908:3426":{"crate_id":20,"path":["proc_macro2","Delimiter"],"kind":"enum"},"24:5324:2344":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"17:13395:6708":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"11:1603:21672":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:4988:33353":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:14887:7089":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:3052:3708":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:2696:159":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:12046:795":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:15527:7265":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"20:119:9444":{"crate_id":20,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"24:2617:3655":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"16:3888:7493":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:9941:117":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:8358:32905":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:13832:6808":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:2948:253":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:22:730":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:2062:10312":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:11141:22735":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:1604:8032":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"24:3818:3686":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"17:12701:6611":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"24:5158:3368":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"6:5982:8574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:5446:111":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:41917:32994":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"24:4595:2318":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"2:22291:4705":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:1562:9663":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:3442:3578":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:7668:8884":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:8828:9352":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"11:1883:3406":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:4603:3573":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:1496:7970":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:7694:7480":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:5588:7466":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:5877:4770":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:3425:9330":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:3080:3723":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:7853:142":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:44657:9815":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:6318:7534":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:4549:8230":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:12930:22699":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:830:6149":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:3966:10445":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:3735:10438":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:39600:9718":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"5:3251:2015":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:893:4770":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:11370:9897":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:9479:6237":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"20:934:2044":{"crate_id":20,"path":["proc_macro2","Spacing"],"kind":"enum"},"20:904:1966":{"crate_id":20,"path":["proc_macro2","Group"],"kind":"struct"},"1:5987:226":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:15311:7190":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"24:2906:3665":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"1:909:10303":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:10293:2954":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:7523:9636":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:7717:10298":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:48357:9280":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:2911:6214":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:14385:6911":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:7054:9626":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"24:5483:3387":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"20:792:258":{"crate_id":20,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"24:5358:2574":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"1:0:1526":{"crate_id":1,"path":["std"],"kind":"module"},"5:1486:9660":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:41804:10434":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:7286:3500":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"5:7276:3405":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:13297:6689":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:7843:10380":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:10962:22721":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:13162:6662":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:5661:6163":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"24:4558:3324":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"1:8476:9345":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:3443:10382":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:44331:9790":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:40527:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"9:450:21589":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:3065:6404":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"9:237:9151":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:13097:6645":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"11:1007:9631":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:8796:10528":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"16:7041:9624":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:6017:22607":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:7554:7478":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:2690:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:363:4572":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:47423:9229":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:14778:7048":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:4628:8271":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:8562:9833":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:6361:9577":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"18:548:149":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"24:1975:3406":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"2:41254:3478":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"24:4803:3329":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"24:5092:3364":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"6:5152:8487":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:1063:10310":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:14399:6912":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:2941:251":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"23:150:4002":{"crate_id":23,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"2:45994:9172":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:6552:3496":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"5:3217:9663":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:40637:10381":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:15566:7274":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:39695:220":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:44474:9796":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"24:3888:3691":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"2:9415:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:4947:8381":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:9021:10237":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"20:122:35948":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"17:11978:22797":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:12245:9770":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:11170:28869":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"24:4847:3339":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"16:2744:7454":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:13882:6540":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:3094:6357":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:11617:9479":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:3427:33361":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:7343:8852":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"21:2593:3592":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"6:1521:7980":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:8195:9650":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"11:2369:21673":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"24:4868:3344":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"5:1115:34237":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:44178:9780":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:5104:8469":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:7572:3467":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:12284:9776":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"18:719:6397":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:15374:7204":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:44633:9809":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:11412:22741":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:14698:6986":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"18:707:9458":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:9951:3559":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:6352:9576":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:3930:10444":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"11:1051:10310":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"24:5367:2530":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"24:3195:1993":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"10:0:3167":{"crate_id":10,"path":["adler"],"kind":"module"},"5:1505:10228":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:10559:22690":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"24:4974:63":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"2:46927:9221":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:40807:3510":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:4383:10469":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:14041:6834":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"24:1138:5263":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"17:14765:7041":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"11:1107:21668":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:12003:10300":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:8237:10433":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"24:5164:3371":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"24:4842:3338":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"1:9069:9362":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:40673:3501":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:6558:9688":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:1556:9662":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:12255:9493":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:44665:9162":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"11:2383:3406":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:44933:4681":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:4808:8315":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:11998:10241":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:44709:9817":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:1534:3406":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:11779:6533":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:5727:9519":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"24:4791:3326":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"17:11027:6486":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"21:216:10186":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"24:2957:3668":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"2:47629:9261":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"14:0:3170":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:1387:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:11052:22692":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:10102:6498":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:5146:8484":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:5885:8531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:8137:3467":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"24:5514:3396":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"2:5756:6163":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:13948:6823":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"5:7338:216":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:6386:7536":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:1439:3410":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:9860:22685":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"11:2536:1966":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:1514:7978":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:4862:7510":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:4830:8326":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:12009:6522":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:8169:10384":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:4574:3571":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:16049:7396":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"24:4820:3333":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"24:4359:3723":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"2:46746:9203":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:21638:8901":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:45948:9170":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:4446:227":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"24:5387:3379":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"5:634:10133":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"24:4879:3346":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"2:42153:4564":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:11215:9375":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:21457:10585":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"6:563:7949":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:40826:3512":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:4304:3581":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:5825:6217":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:13724:6791":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:5403:6495":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:2670:7451":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"24:4992:1986":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"24:611:3406":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"6:6718:8738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:4764:8293":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:1734:8109":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"24:5524:3383":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"20:775:3427":{"crate_id":20,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"2:1810:1185":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"5:2474:8893":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:10202:9690":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:22238:10669":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:2953:2506":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:3461:7488":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:40423:9723":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:4841:8334":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:786:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:42212:3410":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:22345:4705":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:4:1111":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"21:959:4810":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"24:4956:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"2:22199:10668":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"11:1676:6140":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"24:4555:3323":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"17:10896:6512":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"18:96:26881":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"23:148:4003":{"crate_id":23,"path":["quote","__private","HasIterator"],"kind":"struct"},"2:2702:264":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:10578:4559":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:4710:8277":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:42332:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:6120:8648":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:13935:6821":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:8984:4553":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:5830:9527":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:10430:10528":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"24:897:36090":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"6:4939:1098":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:3031:3450":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"24:4930:3358":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"21:2659:3405":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"18:727:6400":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"24:5166:3367":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"1:4703:10477":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:3732:10439":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"24:99:3860":{"crate_id":24,"path":["syn","token","private","CustomToken"],"kind":"trait"},"18:582:4343":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:2380:10377":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:595:2059":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:11321:6522":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:4351:8115":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:7318:7609":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:11816:6247":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:32586:4331":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:8858:10554":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:44168:9779":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:4740:10459":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:2784:134":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:495:7907":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:42016:200":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:11290:6242":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"6:6071:8630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"24:2838:3662":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"16:6960:22613":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:7102:22616":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:2988:3597":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:8011:10417":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:11714:22796":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:14413:6915":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:5760:22605":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:8308:9332":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:14208:6878":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"21:2725:2046":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"24:4859:3342":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"24:4540:2037":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"24:4062:3702":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"2:23191:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"16:5612:7468":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:4595:8254":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:4860:8342":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:2352:4696":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:836:3406":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:266:6143":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:4603:8258":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:4480:8201":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:1969:203":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:7639:8877":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:533:7932":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"24:3229:259":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"2:43932:9695":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:256:35894":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:41006:3516":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"18:609:35931":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:4773:22879":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:15087:7133":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:11666:9484":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:4151:10470":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:22785:9710":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:11767:22834":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"11:875:10307":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:11549:9474":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:6466:6227":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"10:36:7817":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"22:0:3295":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"11:1160:10132":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:44649:9813":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"24:5490:3390":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"2:43257:9755":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"24:2821:3661":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"17:13202:6673":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:21510:10581":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:6194:10238":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:645:10295":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:5982:9544":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:4989:8411":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:4637:8751":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:13254:6684":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"14:160:10126":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:4450:3561":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:4884:8351":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:43504:9759":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:7906:9827":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:15990:7383":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"6:5974:8569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:12999:6626":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:6499:7482":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:15235:7168":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:1909:703":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:12091:22864":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"24:1601:3529":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"5:7375:3405":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:43286:9151":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:2662:10416":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:4806:7508":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:9602:10231":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:3366:3474":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"5:2975:8895":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:12301:9496":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"24:4838:3337":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"6:4893:8354":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"5:5961:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:7523:6170":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"24:5511:3395":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"17:10803:22694":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:14170:6874":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:42744:2582":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:5746:10541":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"24:5076:3039":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"17:12103:22865":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:4401:8152":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:23315:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"5:2154:9666":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"24:5044:3362":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"17:13856:6809":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:3764:7490":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:14099:6860":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:9945:3550":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:1902:10345":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:3988:10447":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:6560:6135":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"24:1756:10247":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"2:21944:8902":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:8802:205":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:12035:1148":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:918:10229":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:4543:8227":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"24:3842:3688":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"2:22806:9713":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:8281:7685":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"24:5363:3378":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"5:7003:6180":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:119:16193":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:9196:9367":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"9:0:3166":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:8232:10436":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:3146:4676":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:40560:9733":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"24:3992:131":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"17:12898:22698":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"24:5390:1961":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"24:4371:3724":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"16:8115:9646":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:12264:9494":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"24:2923:3666":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"24:3968:3696":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"16:2380:7439":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:7651:8879":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"24:905:36089":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"6:5992:8581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"20:0:1817":{"crate_id":20,"path":["proc_macro2"],"kind":"module"},"24:1735:10246":{"crate_id":24,"path":["syn","path","printing","span","QSelfDelimiters"],"kind":"struct"},"17:16016:7389":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"5:2183:9668":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"24:881:36091":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"24:289:36076":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"2:40617:10363":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:15725:7314":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:13448:6721":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:42229:202":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:43089:3549":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:2435:110":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:9759:22682":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"24:5112:2055":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"21:2791:2665":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"11:1566:21670":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:8991:28544":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:13633:6770":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:7738:10335":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:10828:9694":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:7632:3469":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"24:1506:3532":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"17:11269:6514":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:10726:35901":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:10988:22716":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:6721:22612":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:39739:3454":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:4375:8132":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:12058:15744":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:5075:8450":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:7848:9825":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:8154:22624":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:4814:8317":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:41213:3468":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"21:2770:2044":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"2:45924:9169":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"24:4855:3341":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"17:11523:9471":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:2773:122":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:9099:240":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:6658:8705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:44188:9781":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:1710:8100":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:11194:22737":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"16:2810:7457":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"24:4347:3722":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"2:43746:15727":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:5384:22602":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:2983:26941":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:790:6146":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:22702:8909":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:3199:10421":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:42765:3559":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:16062:7402":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:3241:10424":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:5780:10234":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:7838:5335":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:7633:8876":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:40817:3511":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:44118:9777":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:149:6133":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:7136:28409":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"24:2940:3667":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"1:9104:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"24:4894:2246":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"16:2428:7441":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:22611:8903":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"24:4074:3703":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"1:3239:10423":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:11307:9846":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:15212:7163":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:40366:9720":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:40733:3505":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"24:4938:3360":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"1:11355:9849":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:2339:7432":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:13129:32682":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:4878:8350":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"24:5027:3363":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"1:922:10304":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"5:1477:9659":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"24:3905:3692":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"21:2786:1978":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"24:1135:5258":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"16:6792:9613":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:3394:6163":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"24:4178:3710":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"2:3806:3405":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:13309:6207":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:2993:112":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:43040:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:10155:2349":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:30692:4634":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:13976:6828":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:4038:10450":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:1072:10132":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:7645:8878":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:40:4684":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:10471:35911":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:14087:6858":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:43872:9761":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:4578:8246":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:5154:6169":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:5431:10525":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:2653:10385":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:2864:7459":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"24:2549:3651":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"6:4968:8396":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:40453:9720":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:4028:10449":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:11065:6516":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:8535:9830":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:2991:2004":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:4847:8337":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:10051:6496":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:44136:9778":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:9410:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"24:3939:3694":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"5:7028:6183":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:3563:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:47163:9225":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:41262:3480":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:10162:153":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"5:5650:4774":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:2985:4327":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"5:5392:15720":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"18:574:6378":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:23377:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"16:4719:7505":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:14266:6888":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:6189:9574":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:1455:3405":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:42084:3410":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"21:183:4419":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"17:12536:22874":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:13707:6788":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:8134:9649":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:281:2026":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:0:3173":{"crate_id":17,"path":["object"],"kind":"module"},"5:4252:3406":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:8936:10553":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:13896:6817":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:4455:3562":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:5052:8442":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:3323:10412":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:43249:9753":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:8904:10552":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:4613:7503":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"24:2702:114":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"16:6687:9599":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:22505:9703":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:40461:9726":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:15253:7172":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:46571:9198":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:4783:8301":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:6781:8758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:3753:10312":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:5419:6496":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:6764:8757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:2907:7461":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:574:7954":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:12053:1635":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"11:856:10306":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:15329:7194":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"24:676:36081":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"20:738:1978":{"crate_id":20,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"2:43717:9697":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:6513:9585":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:15868:7338":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:880:9660":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:7901:4836":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:12014:28878":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:11051:6241":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:4129:28412":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"21:1401:2059":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"17:16076:7405":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"5:6871:4776":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:43489:9155":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:15224:7164":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"24:3922:3693":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"6:1703:8097":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:5928:8548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:7722:7471":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"11:700:3405":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:40372:9721":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:32485:32472":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:16134:7418":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:11345:6527":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:2699:141":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:2524:208":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:12140:22842":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:2586:6211":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:1691:8093":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:5639:9822":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"24:97:4401":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"11:2562:7815":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:7915:29060":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:22066:10385":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:1878:4720":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:1301:10309":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:7895:127":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"21:107:4801":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"5:7618:4768":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:15546:7271":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"20:878:258":{"crate_id":20,"path":["proc_macro2","TokenStream"],"kind":"struct"},"17:10242:6502":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"11:434:35833":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:4835:7509":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:4889:7511":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:1873:10142":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"18:660:26893":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:1516:10229":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:11476:9664":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:5004:6163":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:11399:22742":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:6913:8828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"20:732:1966":{"crate_id":20,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"11:1142:21669":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:13181:15794":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:10355:135":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"24:3331:3680":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"17:15680:7308":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:4824:8323":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:41229:3472":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:10097:31704":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"1:6543:10546":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:7391:22617":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:8403:9342":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:8545:3406":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:2881:7460":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:10016:22662":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:42984:9143":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:41244:3476":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:7634:4769":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"24:4918:3355":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"17:15184:7155":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:2031:22748":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:2622:10145":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:13809:6803":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"24:1904:3403":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"17:14359:6909":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"19:0:1128":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:11382:9851":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:7434:3461":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:10035:6495":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:41976:9138":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:6644:239":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:42607:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:12153:22841":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:13504:6738":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:12410:6590":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"24:2719:3657":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"17:15192:7156":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:9147:9836":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:15747:7320":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:11579:15731":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:5111:8472":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:11449:6373":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:14989:7109":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:43265:9756":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:1773:633":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:3090:6359":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:2722:7453":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:42527:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"20:834:1978":{"crate_id":20,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"20:928:2369":{"crate_id":20,"path":["proc_macro2","Punct"],"kind":"struct"},"17:12052:6572":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"24:2855:137":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"17:12202:22868":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"24:5492:3391":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"6:6961:8846":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:6934:8840":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:44661:9816":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:14001:6830":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:16032:7394":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"21:433:6131":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"6:5123:8478":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"24:2736:122":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"2:46379:9192":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"24:5480:3386":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"11:2542:7811":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:3738:3542":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:261:35910":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:15301:7187":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:723:150":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"24:5101:1978":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"1:1040:9631":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"24:1616:3541":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"17:10775:22693":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:1718:8104":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:7367:3405":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:12746:9501":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:15:2807":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:5941:8557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:5308:126":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:14485:6582":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"24:5309:209":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"24:4588:3325":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"24:5517:66":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"21:2616:9443":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"2:40866:3498":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"24:346:36088":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"16:7651:22621":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:5140:8482":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"18:0:3174":{"crate_id":18,"path":["memchr"],"kind":"module"},"9:507:7878":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"20:15:4979":{"crate_id":20,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"24:889:36094":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"1:12031:1031":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:43884:9762":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:11113:22713":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"21:367:4795":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"24:4816:3332":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"16:2596:7448":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"24:4429:3728":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"17:12718:22697":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:1913:17542":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:9128:9363":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:44036:9772":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"24:4202:3712":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"16:6204:10188":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:41995:9139":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:123:16194":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:580:7957":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:7306:6154":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:15003:7113":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:10785:9692":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:21301:33044":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"24:3859:3689":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"1:12045:794":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:9957:3557":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:42220:3405":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"24:873:36093":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"1:11516:10438":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:6600:22611":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:3980:10446":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"20:698:9445":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"6:1528:7983":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:3192:137":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:4231:10474":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:15943:6662":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"9:486:21588":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:13322:6694":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"7:31:21575":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"24:2770:3659":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"2:4583:3572":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:47959:9264":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"20:950:1978":{"crate_id":20,"path":["proc_macro2","Ident"],"kind":"struct"},"17:13869:6812":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"20:708:3424":{"crate_id":20,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"2:3198:139":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:11453:6244":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:22262:10385":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"24:5529:2531":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"24:4574:1983":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"2:43796:15724":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"24:1338:36078":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"17:13235:6679":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:15117:7139":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:4635:8749":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:10095:28413":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"24:2889:3664":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"1:10780:9845":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:46617:9200":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"24:4412:3727":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"24:5495:2533":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"2:42293:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:5395:10523":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:14251:6884":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:47771:9262":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:10532:10421":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"24:4882:3347":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"18:590:6385":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:7643:10385":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:11497:6530":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:10940:9695":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:21245:4343":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:5712:9516":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:22558:9704":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:40742:9737":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"24:1623:2053":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"17:14221:6879":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:5753:10542":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:7503:7476":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:5571:10527":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:6226:22609":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:14439:6917":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:13909:6818":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:8281:9829":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:5067:853":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:7689:4559":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:7736:7635":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:542:7938":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:48223:9270":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:5033:8434":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:3915:7494":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:4865:223":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"5:1424:3406":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:39613:219":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:7284:9677":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:10373:6197":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:5128:210":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:8959:9358":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:42254:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:4964:3971":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:475:1967":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:8814:9351":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"18:699:9456":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:5905:9535":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:555:7944":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:5130:8481":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"24:4875:3345":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"16:0:3172":{"crate_id":16,"path":["gimli"],"kind":"module"},"9:52:10208":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:10422:22688":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:41787:9131":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:1541:4770":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"14:165:21678":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:1591:8025":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:11313:10531":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:6059:8623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"24:4033:3700":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"2:42076:3406":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:41235:3474":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:12036:338":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:12033:1655":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:10667:35918":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:1567:2015":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"20:680:3542":{"crate_id":20,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"2:11033:9772":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"20:360:3424":{"crate_id":20,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"6:1650:8069":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:8220:9779":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:4159:10471":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"18:521:26895":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:44848:213":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:2526:7445":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:2319:634":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:22719:32982":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:2048:3542":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"11:2403:3410":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:44904:177":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:46179:9179":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:15321:7193":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:14181:6875":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:6248:8687":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:11047:15736":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:7342:35877":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:7613:22619":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:5829:8491":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"24:3093:3674":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"17:10315:6504":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:1537:7988":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:15980:7382":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:44830:225":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:14904:7091":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"14:40:1978":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:4053:7495":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:6249:6223":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:3227:2589":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"21:2519:3591":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"1:4180:10473":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:44437:9795":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:41206:9743":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"16:6456:9583":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:30778:33007":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:10738:10506":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"5:1286:10310":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:48278:9275":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:4411:6163":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:3074:3721":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:4908:8361":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"23:239:4263":{"crate_id":23,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"2:43274:153":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:11234:158":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"1:12043:692":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:6879:7577":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:7180:2792":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:4902:8360":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:3231:3415":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:8072:7679":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:46547:9197":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"21:2740:1966":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"17:14662:6955":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"11:787:9660":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:3027:6362":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"24:4902:3351":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"6:6682:8722":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:48327:9278":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:7269:35879":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:1743:657":{"crate_id":1,"path":["std","env"],"kind":"module"},"5:2256:9673":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:16180:6694":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"16:6376:22610":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"24:338:3542":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"6:6169:8661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:3064:4264":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:40468:15785":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:22277:10670":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"5:7346:5554":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"18:113:26882":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:2518:10415":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:21627:10385":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:11620:4717":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:483:7901":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:21282:33034":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"18:766:26892":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"24:4807:3330":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"17:15160:7147":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:40644:3490":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:8157:9328":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:640:10294":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:12049:1639":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:44645:9812":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"24:4922:3356":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"8:0:3165":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:7474:22618":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"20:704:258":{"crate_id":20,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"2:3414:15767":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:11019:9771":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:13491:6737":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:44522:9805":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"21:2394:2665":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"5:4366:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:9014:31699":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:12115:22866":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"21:2318:2369":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"20:825:1966":{"crate_id":20,"path":["proc_macro2","imp","Group"],"kind":"enum"},"2:7820:3488":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:10657:6522":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:12463:3429":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"24:4568:1821":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"24:2532:3730":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"23:407:4142":{"crate_id":23,"path":["quote","__private","RepInterp"],"kind":"struct"},"2:4529:3570":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"24:5353:2573":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"2:44883:9887":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"23:344:1224":{"crate_id":23,"path":["quote","quote"],"kind":"macro"},"24:2185:10385":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"17:12921:6582":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:47209:9226":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:7090:9630":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:5632:6223":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:7948:3486":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"24:4561:1995":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"23:0:1224":{"crate_id":23,"path":["quote"],"kind":"module"},"2:1613:2528":{"crate_id":2,"path":["core","mem"],"kind":"module"},"5:1151:34238":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:5625:226":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"24:3110:3570":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"2:44213:9726":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:15367:7202":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:11459:22789":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"24:1489:2052":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"type_alias"},"6:4434:8176":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:569:7952":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:11168:22736":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"5:7481:32963":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"24:4872:2320":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"1:8866:3405":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:44231:9725":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:3936:10443":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:12380:6586":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:40842:3513":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:43914:9692":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:1674:8086":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:8990:3981":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:46016:9173":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:6700:8729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"24:2991:2664":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"1:5500:10526":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"23:35:10385":{"crate_id":23,"path":["quote","ext","private","Sealed"],"kind":"trait"},"11:710:10228":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:1507:7975":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"24:5471:3385":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"2:10978:15734":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:8872:9354":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:44653:9814":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:11469:22790":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:22818:10442":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:11612:9854":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:46100:9176":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:14324:6897":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:11690:22830":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:6711:8734":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:10802:136":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:14786:7049":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:6136:8652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:7597:35849":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:4050:10453":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:3600:7489":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:4100:6163":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"15:327:10204":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:4455:8185":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:7371:8855":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:6927:8837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"23:38:3043":{"crate_id":23,"path":["quote","format_ident"],"kind":"macro"},"21:244:36014":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"5:4381:6165":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:48252:9273":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:10337:6505":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"20:955:2665":{"crate_id":20,"path":["proc_macro2","Literal"],"kind":"struct"},"24:5466:3384":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"6:6898:8823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:1758:10317":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:10986:9353":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:43508:9760":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"5:4212:6163":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:3163:29063":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:15733:7317":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"24:5297:3376":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"17:14235:6882":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:42568:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:588:10290":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:15177:7154":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"24:5154:2186":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"6:4428:8175":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:10076:10327":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:6944:35850":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:10592:245":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"24:5160:3370":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"2:22740:32995":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:48263:9274":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:3251:22798":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:22667:9708":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"24:2051:3412":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"2:9943:126":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:4172:32998":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"24:4103:3705":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"2:39629:216":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:7660:7632":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:12503:3808":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:42371:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:12523:15742":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:3280:10420":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:11369:6529":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:12508:15741":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:3402:143":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:4906:10502":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"24:3178:2713":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"16:7768:7469":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:2973:35663":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:12319:9694":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:4584:8249":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"23:11:3434":{"crate_id":23,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"24:4009:3698":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"5:6484:4770":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:43024:7657":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:401:22678":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:22792:8921":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:6968:22614":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:14757:7038":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"24:254:10124":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"17:15557:7272":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:11604:9478":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:11755:22833":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"5:4444:6165":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"24:4497:3309":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"16:2832:7458":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"24:3980:3697":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"24:4231:3714":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"16:6268:35868":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:527:7929":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:5897:8535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:10321:111":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:10569:35903":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"24:2044:3410":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"5:3687:6143":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:533:4554":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"24:4458:2658":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"24:5156:3369":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"6:501:7909":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:1821:10333":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"14:202:2409":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:44721:15921":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:44362:9793":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"11:687:3410":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:41747:167":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:7402:3464":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"5:6604:3405":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:5082:31715":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:6583:9595":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"15:288:21697":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"5:692:116":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"24:3059:3672":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"6:1546:7994":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:4724:8278":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:2933:21743":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:6896:6230":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"18:564:6384":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:7621:22620":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"20:815:2045":{"crate_id":20,"path":["proc_macro2","imp","Span"],"kind":"enum"},"1:357:4571":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:7360:35875":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:21284:33038":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"11:673:3406":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"20:744:2665":{"crate_id":20,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"6:4616:8262":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:8294:134":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:15903:7368":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"16:4462:7498":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"24:1781:1971":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"2:9938:117":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:5634:9510":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:596:7966":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:44629:9808":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"24:4898:3350":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"5:3818:4768":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"18:652:6378":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"14:215:9651":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"24:4289:3718":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"21:0:1172":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"2:4196:107":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:32438:7814":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"5:6842:4774":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:46401:9193":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:12584:22877":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"5:3184:3406":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:46769:9204":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:12050:1636":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:5963:22606":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"18:481:9447":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:14346:6908":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:14194:6877":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:7510:9684":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:8097:9643":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:7692:8889":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:2644:7450":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:15855:6659":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"5:3191:9662":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:12734:117":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:3000:3449":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:22068:10583":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:6171:212":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:40409:9124":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:15507:7259":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:3047:6356":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:12600:134":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:10608:22691":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:12510:6593":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:11645:9481":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:3491:28439":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"11:774:9659":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:4641:7504":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"24:3280:3678":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"6:1632:8057":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:12044:10138":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:40393:32996":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:3584:22817":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"11:1917:9663":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:10760:3410":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:6531:9593":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:4821:10458":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:10473:6238":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:14934:7097":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:10247:10530":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:9101:15741":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:12039:1620":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:21529:8901":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:15519:7262":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"24:4926:3357":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"17:12486:6592":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"11:837:10304":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:7677:216":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:10925:22708":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"0:964:1831":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"1:4311:10475":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:11701:22831":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:11485:22766":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:7702:8891":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"24:3416:273":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"1:5051:31715":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:14896:7090":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:2359:7438":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:6401:7464":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:9943:22667":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:4998:8417":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:2368:10371":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:3460:22801":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:3086:6358":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:13584:6745":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"24:4132:3707":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"17:10716:22692":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"24:3297:2015":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"16:5816:9526":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:7865:9826":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:7862:9639":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:14145:6870":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"3:0:477":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"13:110:35838":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:13676:6781":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"24:2634:3656":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"5:7422:3460":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"11:1910:9662":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"24:5197:2359":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"2:2331:4706":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:3059:6340":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:8850:3406":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"24:2872:3663":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"2:31254:202":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"24:2685:2572":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"2:44637:9810":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:13273:6685":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:6610:6228":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:5971:6223":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"24:1958:3405":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"1:6540:10147":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:48129:9267":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:12230:9485":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"5:7548:9685":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:13026:6632":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:4932:8375":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:11061:15735":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:8314:3484":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:2703:8896":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:4742:10461":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"23:345:2666":{"crate_id":23,"path":["quote","quote_spanned"],"kind":"macro"},"2:13402:4682":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:4335:3582":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:21914:10385":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:26255:272":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"11:1728:152":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:40433:9724":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"24:96:10385":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"2:39514:15766":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:6425:9581":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:22420:10664":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:13463:6727":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:2706:263":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:9164:31718":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"21:1200:214":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"24:5020:2604":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"2:9913:140":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:13094:146":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:588:7962":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:14296:6891":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:15356:7201":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:2426:3179":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:10974:6514":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:8050:3309":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:3010:6350":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"11:2423:3405":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:5068:8447":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:9947:2582":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:13989:6829":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:2696:7452":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"11:2443:4770":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"16:5696:22604":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:40714:3503":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"11:2151:10310":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:39553:4677":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"24:3382:3683":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"2:43890:9763":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:4473:8197":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:4042:10451":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:47239:9227":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:15062:7125":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"18:80:26880":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:4417:7497":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:5995:9505":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:2946:134":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"5:1315:10132":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:15961:6672":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"6:6868:8806":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:47003:9223":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:48289:9276":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:1596:8027":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"0:965:1838":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"5:7559:10134":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:4388:8142":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:4630:3574":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:12051:1637":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:15612:7288":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:2944:232":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"24:4243:3715":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"2:40856:3514":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:9109:158":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"23:78:2047":{"crate_id":23,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"17:11307:22744":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:8352:9333":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:12055:1694":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:13121:6659":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:1131:35658":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:3035:6353":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"23:46:3435":{"crate_id":23,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"11:430:35829":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"24:3161:3676":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"17:14633:6935":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:4344:7496":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"24:4484:2311":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"24:5315:2341":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"21:2549:4793":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"1:4915:10503":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:13347:6696":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:23853:242":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:46219:9181":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"5:1024:6143":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:4639:8753":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:4469:10477":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:12684:6463":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:1203:22722":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"24:4946:2001":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"11:328:9657":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"24:1332:3546":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"7:78:21582":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:10968:28871":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:40544:32963":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12290:9495":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:0:532":{"crate_id":2,"path":["core"],"kind":"module"},"24:3263:1961":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"6:5023:8428":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:13684:6783":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:1682:8087":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"11:364:6136":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:39965:30808":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"21:1834:4791":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"24:1405:2050":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"6:4738:8279":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:507:7912":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:11144:9351":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"21:404:35964":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"2:44946:9821":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:11576:9476":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:11395:22753":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:4800:8311":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"18:681:9452":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"24:4383:3725":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"5:3225:9661":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:886:6151":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:3021:6352":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"5:5807:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"21:53:4794":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"11:811:4768":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"6:4698:8276":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:10822:9328":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"16:4921:7512":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:9971:9748":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:10813:35902":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:4774:7507":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"11:1903:9661":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"20:801:9446":{"crate_id":20,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"2:10905:15737":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:40996:3515":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"11:800:4770":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:504:4549":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:6146:6207":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:46149:9178":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:11426:22788":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:5121:7518":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:39653:218":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:2518:201":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:12038:1534":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:5955:8567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:10582:10385":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"24:830:3528":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"6:6228:8673":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:10785:35890":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:7015:7587":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:15267:7179":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:14455:6919":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"24:4214:3713":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"16:3032:7484":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:16123:7416":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"24:90:1972":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"21:2030:4792":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"2:9953:212":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"18:671:26894":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:6691:8728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:4569:10495":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:4506:8211":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:5015:8423":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:9894:232":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"24:2566:3652":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"5:1270:9631":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:6889:8820":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:11727:22812":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:46349:9191":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:13309:6692":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:7388:8866":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"24:2668:104":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"14:7:10126":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"5:1495:10303":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:39673:221":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"24:4592:2239":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"2:42758:3558":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:2205:4711":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:1570:8011":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:5568:8659":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:11034:6239":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:13107:161":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:11158:9352":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"24:1533:2990":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"5:212:4686":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:6811:10579":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:43809:9700":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"5:7267:4683":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:46593:9199":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:6243:2008":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:15337:7196":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"24:4830:3335":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"5:6351:10673":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:7580:6233":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:914:10228":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:8311:3481":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:12387:22870":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:9048:28873":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:3177:3579":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:6041:22608":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:48232:9271":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:8001:31711":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:4092:3410":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:10792:9287":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:13742:6792":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:40494:15786":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:10915:22707":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:10197:10390":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:6915:7473":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:435:6449":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:7679:8885":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:11256:22746":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:11945:22799":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:8973:10235":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:15294:7186":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:7604:8869":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:6012:8597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:12953:6622":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:9790:22683":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:10137:6499":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:48304:9277":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:7878:136":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:6943:8843":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"24:1872:3402":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"17:11014:22714":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:10432:35906":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:4776:8300":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:15079:7130":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:12548:22873":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"24:5373:3381":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"18:644:6378":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:7792:22622":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:3005:6349":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:8146:9327":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:23098:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"20:781:26902":{"crate_id":20,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"2:42646:10233":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:9559:22663":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:6696:7561":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:14282:6889":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:21455:10385":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:44197:9782":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:23253:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:4789:8304":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"24:4144:3708":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"2:42101:3979":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:2766:7455":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:12056:1244":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:6279:7531":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:7350:32962":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:12528:15740":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:2416:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:14509:6933":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"24:2974:2359":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"16:5673:7467":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:44840:233":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:1780:4629":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:13298:113":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:47881:9263":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:40445:9725":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:4967:419":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:43657:33001":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"3:234:232":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:22679:33003":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:23284:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:6893:7579":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:7513:9635":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:6079:8631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:7816:3489":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"24:4851:3340":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"17:1094:22717":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:11675:6597":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"24:3348:3681":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"24:5212:3375":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"16:2969:21744":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:2693:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:5085:8455":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:4686:8275":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:4449:8183":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:6563:4794":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:5867:8518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"15:0:3171":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:15710:7313":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"24:2787:3660":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"24:4161:3709":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"24:2239:10385":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"2:13347:148":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:16087:7410":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"5:1685:6143":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:3655:6409":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"9:357:21604":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:10831:28880":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:7857:162":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"18:515:6381":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:21508:10385":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:6819:8769":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:6467:9584":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:44641:9811":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:7316:35684":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"24:5508:3394":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"17:12445:22875":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"6:548:7941":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:2548:7446":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"24:557:6337":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"2:48083:9266":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:13922:6820":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"11:1582:21671":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:40607:6187":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"24:4997:2529":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"5:5388:15719":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:15244:7171":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"24:848:6344":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"17:10207:6501":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:6959:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:3994:10448":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:2600:6198":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:13083:6644":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:44316:9784":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"24:3801:3685":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"2:30686:4633":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:2482:207":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"5:7330:3405":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:7568:7479":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:6156:9571":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:11981:9898":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:14470:6923":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"24:4914:3354":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"17:14822:7079":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:48167:9268":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"18:599:6341":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:13961:6825":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"24:4864:3343":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"2:11546:15730":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:15671:7304":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:12077:22855":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:43049:3547":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:3069:6339":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:4922:8369":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"5:7467:9678":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:13648:6774":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:16109:7412":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"21:2285:1966":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"1:2200:135":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"11:2548:7812":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"21:2344:1978":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"24:1487:3418":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"5:6117:6163":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:46256:9183":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"21:2706:2045":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"24:4190:3711":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"6:5009:8422":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"24:4942:3361":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"6:4440:8178":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:9742:3548":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:3103:6361":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:5017:7515":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:6107:8644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:9597:32902":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:5866:9533":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:10941:22709":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:15493:7253":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:14156:6872":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:536:9504":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:1796:10327":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:2354:10368":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:1664:8080":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:22425:10662":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:849:3410":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:10510:22689":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:6741:8756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:10618:35917":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"21:648:3593":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"2:2943:115":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:12345:6585":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:7529:2059":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:5992:6169":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:5026:10426":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"6:4666:8273":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:43783:3490":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"24:1448:26918":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"2:22756:32968":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:48021:9265":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:44509:9801":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"9:393:21590":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:10520:35904":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:6114:8645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:4516:8214":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:7855:9287":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"24:4502:3308":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"24:3144:3675":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"11:1066:21667":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:2788:7456":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"24:3399:3684":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"24:4021:3699":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"2:44684:128":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:2144:4549":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:12273:6615":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"24:4530:3311":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"2:46668:9201":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:6818:9614":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"15:306:21698":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:1901:4719":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:12030:401":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:3039:6354":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:14312:6895":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"24:3076:3673":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"2:21267:33039":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"16:6569:7470":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:12596:22695":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:3196:35674":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"24:154:1972":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"16:3830:7492":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"24:913:36092":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"1:12032:450":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:39792:8997":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:5088:7517":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:42144:4694":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:1892:8899":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:2305:21742":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"16:4745:7506":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:9918:22686":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"24:1491:3531":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"2:31282:4343":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:11126:22712":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:11001:22715":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:12191:6574":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:10405:6202":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:8190:3501":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:47085:9224":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"11:351:35830":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:11215:9469":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"6:4854:8339":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:5344:6143":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:21636:10582":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"20:515:3424":{"crate_id":20,"path":["proc_macro2","LexError"],"kind":"struct"},"24:601:3405":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"2:41020:3517":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:15101:7136":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:11243:22747":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:5661:9514":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:43012:33011":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:4556:8233":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:15589:7287":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:4744:10462":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"5:1789:4768":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:12828:6615":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:2284:21717":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:6742:9600":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:2406:7440":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"24:5049:2532":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"2:41953:9828":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"24:3246:260":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"1:9474:10380":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:7598:8868":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"23:504:4257":{"crate_id":23,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"17:14921:7092":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:5945:3494":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:39771:15826":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"23:272:2055":{"crate_id":23,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"20:883:2045":{"crate_id":20,"path":["proc_macro2","Span"],"kind":"struct"},"9:177:10219":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:2329:4705":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:10172:6500":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:22376:10385":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:10867:15729":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"11:0:3168":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:307:1585":{"crate_id":1,"path":["std","thread"],"kind":"module"},"1:10757:9837":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:16160:7422":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:8274:9828":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:12044:797":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:7708:7481":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:48243:9272":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"24:1621:1820":{"crate_id":24,"path":["syn","parse_macro_input"],"kind":"macro"},"2:1968:185":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:6530:6143":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"20:712:3590":{"crate_id":20,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"2:42134:3980":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:11476:10439":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"24:500:3416":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"17:14057:6839":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:7732:10299":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:15027:7115":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:4955:8386":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:15037:7116":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"11:1887:3405":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"24:4471:3869":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"1:8200:3515":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:15279:7182":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"7:0:1684":{"crate_id":7,"path":["unwind"],"kind":"module"},"5:683:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:928:10305":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"24:3127:234":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"1:10953:10526":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:4527:7500":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:859:3405":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:5117:8475":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"24:552:134":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"18:690:9455":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:9274:4844":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:23129:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:8551:9350":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"18:736:26891":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:8167:22625":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:3672:4770":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"11:1087:35827":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"18:624:35923":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:14950:7100":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:8988:3983":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:11340:9376":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:40480:9727":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:12366:22869":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:14497:6926":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:12054:847":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:15432:7246":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:7828:7643":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"24:1931:3404":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"6:4745:8281":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:40487:9728":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:43828:9701":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:14878:7085":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:11605:31714":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:4461:8188":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:5574:7463":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:12972:6625":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"11:102:9653":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:40774:3518":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:43818:15733":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:13218:6677":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:6086:8632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"11:2569:3460":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:13365:6704":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"21:2745:3426":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"16:2472:7443":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:11958:6567":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:7616:8871":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:10338:31527":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:2487:131":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:9624:22661":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:7622:8872":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:13383:6705":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:489:7904":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:654:16550":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:5363:7520":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:6686:6143":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:6983:10149":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:46449:9194":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:1697:8096":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"24:4910:3353":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"1:7599:6235":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"24:5488:3389":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"24:4086:3704":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"17:11507:6531":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:4870:8346":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:7497:9681":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:4676:8274":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:44921:9820":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:8493:10517":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"24:1983:3408":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"2:42204:3406":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:6047:8618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:4219:4675":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:6222:8672":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:8920:10551":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:7380:31871":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:11991:6569":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"24:5382:3380":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"24:1443:26917":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"}},"external_crates":{"23":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.33/"},"20":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.71/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.12/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.42/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}