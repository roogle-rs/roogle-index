{"root":"0:0:1641","crate_version":"1.0.144","includes_private":false,"index":{"2:13679:62446":{"id":"2:13679:62446","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13712:58186":{"id":"2:13712:58186","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:13302:5190","prim@char":"1:15744:2986"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3505:5112":{"id":"2:3505:5112","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3507:355"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5910:5626":{"id":"5:5910:5626","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5912:181","5:5913:34296"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3583:3331":{"id":"2:3583:3331","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3584:546"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"2:3570:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13791:62467":{"id":"2:13791:62467","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13302:5190","prim@char":"1:15744:2986"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:5193","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13700:58171":{"id":"2:13700:58171","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15750:2991"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13691:58148":{"id":"2:13691:58148","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47750:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6498:224":{"id":"5:6498:224","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6499:1400"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3164:228":{"id":"2:3164:228","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3166:127","2:3167:1419"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14510:4463":{"id":"2:14510:4463","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14511:60111","2:14512:60112","2:14513:60113","2:14514:60114","2:14515:60115","2:14516:60116","2:14517:4094"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23208:4710":{"id":"2:23208:4710","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23198:4666","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6165:1992":{"id":"5:6165:1992","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8455:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5574:4681":{"id":"1:5574:4681","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5575:59778"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10355:4666","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3415:3273":{"id":"2:3415:3273","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3417:181","2:3418:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:8:1741":{"id":"0:8:1741","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[202,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":false}},"2:9124:4454":{"id":"2:9124:4454","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8844:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5432:4779":{"id":"1:5432:4779","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5433:57835","1:5434:3765"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10355:4666","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3420:3467":{"id":"2:3420:3467","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3422:181","2:3423:1358"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3659:3258":{"id":"2:3659:3258","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3661:756"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:3371","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Index","id":"2:3655:2251","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4511:4731":{"id":"1:4511:4731","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4512:57532","1:4513:57533","1:4514:57534","1:4516:4730","1:4517:57535","1:4519:57536","1:4520:5914"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"1:4429:4690","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10550:189":{"id":"2:10550:189","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10551:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6186:2292":{"id":"5:6186:2292","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15750:2991"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10548:3344":{"id":"2:10548:3344","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10549:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13699:58170":{"id":"2:13699:58170","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15750:2991"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13802:3350":{"id":"2:13802:3350","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15744:2986"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50021:3351","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4429:4690":{"id":"1:4429:4690","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4430:4491","1:4431:59926","1:4433:59927","1:4434:59928","1:4435:4725","1:4436:59929","1:4437:59703","1:4439:59930","1:4440:4094","1:4441:4853","1:4442:2061","1:4444:2189"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3446:3274":{"id":"2:3446:3274","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3448:267"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9503:3689":{"id":"2:9503:3689","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8167:5074":{"id":"2:8167:5074","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8168:61335","2:8169:61336","2:8170:61333","2:8171:61331","2:8172:61337","2:8173:61334","2:8174:61332"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2867:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2946:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10554:3342":{"id":"2:10554:3342","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10555:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13703:4853":{"id":"2:13703:4853","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49699:2737","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9131:5073":{"id":"2:9131:5073","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Step","id":"2:8167:5074","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13693:58149":{"id":"2:13693:58149","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:24042:5237":{"id":"2:24042:5237","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:24043:5236"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:24038:4666","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:3357:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3812:137":{"id":"2:3812:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3814:688"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3807:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:1075:2257":{"id":"1:1075:2257","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1076:2003","1:1077:4445","1:1078:2292","1:1079:2291","1:1080:4446","1:1081:4447","1:1082:4448"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3467:5101":{"id":"2:3467:5101","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3468:181","2:3469:954"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3795:5532":{"id":"2:3795:5532","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:3371","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"2:3726:3270","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6185:4756":{"id":"5:6185:4756","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8455:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:153:1816":{"id":"24:153:1816","crate_id":24,"name":"Token","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"24:160:4666","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13688:58151":{"id":"2:13688:58151","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15761:3000"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3853:3330":{"id":"2:3853:3330","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:3371","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:74:335":{"id":"0:74:335","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1952,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:144"],"is_stripped":false}},"2:13732:58180":{"id":"2:13732:58180","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"prim@char":"1:15744:2986","str::split":"1:15750:2991","`DoubleEndedIterator`":"2:8687:120","self::pattern":"2:13302:5190"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49731:5434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:5193","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:2975:1833":{"id":"24:2975:1833","crate_id":24,"name":"Parse","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2976:1832"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3479:3987":{"id":"2:3479:3987","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3481:181","2:3482:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6164:63103":{"id":"5:6164:63103","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:1810","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8200:4464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:1810","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8200:4464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3151:74":{"id":"2:3151:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3153:2185"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:3371","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:23108:5311":{"id":"2:23108:5311","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23109:61830","2:23110:1230","2:23111:1231","2:23112:61831","2:23113:61832","2:23114:61833","2:23115:61834","2:23116:61835","2:23117:61836","2:23118:61837"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3357:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23121:4666","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13803:62469":{"id":"2:13803:62469","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15744:2986"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50030:5476","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3489:3462":{"id":"2:3489:3462","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3491:181","2:3492:1236"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3484:4787":{"id":"2:3484:4787","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3486:181","2:3487:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6184:63107":{"id":"5:6184:63107","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8455:216","`Box<str>`":"5:444:1810"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:1810","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8200:4464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13794:1832":{"id":"2:13794:1832","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13241:3271","`FromStr`":"2:13241:3271"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47875:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:13241:3271","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13241:3271","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9130:4707":{"id":"1:9130:4707","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9131:60634","1:9132:60635","1:9133:60636","1:9134:60637","1:9135:60638","1:9136:40377","1:9137:60633"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10355:4666","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8639:136":{"id":"2:8639:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8641:685"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3255:127":{"id":"2:3255:127","crate_id":2,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3256:5551","2:3258:60283","2:3259:60284","2:3260:60285"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:10533:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Display","id":"2:10540:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5582:4683":{"id":"1:5582:4683","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5583:6959"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13799:4448":{"id":"2:13799:4448","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10771:142":{"id":"2:10771:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10772:716","2:10774:58008"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6646:4660":{"id":"1:6646:4660","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6647:58036"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3356:217":{"id":"2:3356:217","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:409":{"id":"0:409","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[5,0],"end":[5,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1282:1743","glob":false}},"2:13798:4447":{"id":"2:13798:4447","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13797:4446":{"id":"2:13797:4446","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13312:5189":{"id":"2:13312:5189","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13314:5192","2:13315:60877","2:13316:60878","2:13317:60879","2:13318:60881","2:13319:60880","2:13320:60882"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3726:3270":{"id":"2:3726:3270","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3728:61950","2:3729:61951","2:3730:1892"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:3371","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:23405:5259":{"id":"2:23405:5259","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdElement","id":"2:24042:5237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23396:4666","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3474:4786":{"id":"2:3474:4786","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3476:181","2:3477:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1311:1843":{"id":"0:1311:1843","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:13773:62464":{"id":"2:13773:62464","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:15744:2986","self::pattern":"2:13302:5190"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13332:5194","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13771:62462":{"id":"2:13771:62462","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3157:135":{"id":"2:3157:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3159:682"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6224:4657":{"id":"1:6224:4657","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6225:4997","1:6226:4998","1:6227:57697","1:6228:57698","1:6230:57702","1:6232:57699","1:6233:57700","1:6235:57701"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10355:4666","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3807:225":{"id":"2:3807:225","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3808:181","2:3809:5076","2:3810:687","2:3811:370"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromResidual","id":"2:3812:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3807:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3454:5095":{"id":"2:3454:5095","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3456:895"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3355:218":{"id":"2:3355:218","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:601:1748":{"id":"0:601:1748","crate_id":0,"name":"symbol","span":{"filename":"src/internals/symbol.rs","begin":[1,0],"end":[68,1]},"visibility":{"restricted":{"parent":"0:7:1617","path":"::internals"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1311:1843"],"is_stripped":true}},"2:23357:17287":{"id":"2:23357:17287","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23358:7891","2:23359:61649","2:23360:61650"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23350:4666","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10781:146":{"id":"2:10781:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10782:653","2:10783:2604","2:10784:57419","2:10785:57420","2:10786:57421","2:10787:57422","2:10788:57423","2:10789:57424","2:10790:57425","2:10791:57426","2:10792:57427","2:10793:57428","2:10794:57429","2:10795:57430","2:10796:57431","2:10797:1536"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:7582:4900":{"id":"1:7582:4900","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7583:60660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3513:5116":{"id":"2:3513:5116","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3515:1237"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13682:62448":{"id":"2:13682:62448","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15750:2991"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8652:3374":{"id":"2:8652:3374","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8654:2138","2:8656:4078","2:8657:4079"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13676":{"id":"2:13676","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12755:1343","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13677:795","2:13678:2070","2:13679:62446","2:13680:62447","2:13682:62448","2:13685:2724","2:13686:62449","2:13687:305","2:13688:58151","2:13689:1855","2:13691:58148","2:13693:58149","2:13695:58150","2:13697:4848","2:13698:62450","2:13699:58170","2:13700:58171","2:13701:2301","2:13702:2295","2:13703:4853","2:13704:33229","2:13705:33219","2:13706:5914","2:13707:62451","2:13708:33214","2:13709:1892","2:13712:58186","2:13715:58187","2:13718:2535","2:13722:4077","2:13726:57536","2:13729:33096","2:13732:58180","2:13735:62452","2:13738:62453","2:13741:58182","2:13744:58184","2:13747:62454","2:13750:62455","2:13753:3066","2:13756:62456","2:13759:62457","2:13762:62458","2:13765:62459","2:13767:62460","2:13769:62461","2:13771:62462","2:13772:62463","2:13773:62464","2:13776:62465","2:13779:15802","2:13782:58188","2:13785:62466","2:13788:1874","2:13791:62467","2:13794:1832","2:13796:4445","2:13797:4446","2:13798:4447","2:13799:4448","2:13800:62468","2:13802:3350","2:13803:62469"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3655:2251":{"id":"2:3655:2251","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3657:181","2:3658:755"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:3371","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:8844:157":{"id":"2:8844:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8845:1811","2:8846:924","2:8847:4080","2:8850:4081","2:8851:496","2:8853:2124","2:8856:4082","2:8857:4083","2:8858:4084","2:8859:2061","2:8861:2589","2:8863:4085","2:8864:4086","2:8866:843","2:8869:4087","2:8876:2422","2:8878:2418","2:8881:1825","2:8882:2877","2:8883:4088","2:8885:4089","2:8887:4090","2:8890:1311","2:8891:2189","2:8892:4091","2:8896:1812","2:8899:1807","2:8900:4092","2:8901:4093","2:8903:4094","2:8904:1818","2:8906:4095","2:8909:4096","2:8911:4097","2:8921:4098","2:8936:4099","2:8938:4100","2:8942:4101","2:8951:2881","2:8954:4102","2:8956:4103","2:8959:277","2:8966:295","2:8973:2535","2:8980:4104","2:8989:4105","2:8999:1016","2:9006:4106","2:9013:4066","2:9014:4063","2:9015:4068","2:9027:4067","2:9034:4065","2:9046:4064","2:9053:4107","2:9054:4108","2:9059:4109","2:9062:2139","2:9065:4110","2:9066:4111","2:9068:2882","2:9070:4112","2:9072:416","2:9075:4113","2:9078:999","2:9081:4114","2:9084:605","2:9087:4115","2:9090:909","2:9092:828","2:9094:794","2:9096:714","2:9098:697","2:9100:4116","2:9101:4117","2:9109:4118"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3347:211":{"id":"2:3347:211","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13705:33219":{"id":"2:13705:33219","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15750:2991"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49996:5473","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3231:115":{"id":"2:3231:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3232:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13747:62454":{"id":"2:13747:62454","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3818:5076":{"id":"2:3818:5076","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3820:56668"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5570:4680":{"id":"1:5570:4680","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5571:59852"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3637:4456":{"id":"2:3637:4456","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3639:238","2:3640:206","2:3641:62221"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13241:3271":{"id":"2:13241:3271","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13242:126","2:13243:1967"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3495:3464":{"id":"2:3495:3464","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3497:181","2:3498:1239"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13708:33214":{"id":"2:13708:33214","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50005:5474","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6163":{"id":"5:6163","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5976:1343","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6164:63103","5:6165:1992","5:6168:63104","5:6171:63105","5:6183:63106","5:6184:63107","5:6185:4756","5:6186:2292","5:6187:2291"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2936:177":{"id":"2:2936:177","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2937:416","2:2938:4066","2:2939:4063","2:2940:4071"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2905:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2946:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1257:1626":{"id":"0:1257:1626","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[91,0],"end":[96,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"2:13726:57536":{"id":"2:13726:57536","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::split_whitespace":"1:15750:2991","`DoubleEndedIterator`":"2:8687:120","prim@char":"1:15744:2986","self::pattern":"2:13302:5190","str::rsplit":"1:15750:2991"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49713:4735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13772:62463":{"id":"2:13772:62463","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12742:5616":{"id":"2:12742:5616","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12743:1811","2:12744:2945"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8687:120":{"id":"2:8687:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8688:4072","2:8689:4073","2:8690:4074","2:8691:4075","2:8695:4076","2:8698:4077"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8844:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3430:3437":{"id":"2:3430:3437","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3432:181","2:3433:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13762:62458":{"id":"2:13762:62458","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"1:15744:2986","`DoubleEndedIterator`":"2:8687:120","str::match_indices":"1:15750:2991","self::pattern":"2:13302:5190"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49881:5467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:5193","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3509:5114":{"id":"2:3509:5114","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3511:358"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5560:4675":{"id":"1:5560:4675","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5561:57817","1:5562:57818","1:5563:57819","1:5564:57820"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13729:33096":{"id":"2:13729:33096","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:13302:5190","prim@char":"1:15744:2986"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:13094:5431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2946:184":{"id":"2:2946:184","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2948:999","2:2949:828","2:2950:794","2:2951:714","2:2952:697"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:3371","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2900:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3594:2190":{"id":"2:3594:2190","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3595:579"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3425:5086":{"id":"2:3425:5086","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3427:181","2:3428:894"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13735:62452":{"id":"2:13735:62452","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"prim@char":"1:15744:2986","`DoubleEndedIterator`":"2:8687:120","str::split":"1:15750:2991","self::pattern":"2:13302:5190","str::rsplit_terminator":"1:15750:2991"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49763:5462","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10816:4785":{"id":"2:10816:4785","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10817:146","2:10818:34540","2:10819:58064"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:504":{"id":"0:504","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[8,0],"end":[8,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:480:1744","glob":false}},"2:13782:58188":{"id":"2:13782:58188","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15744:2986","self::pattern":"2:13302:5190"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:5193","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2845:3275":{"id":"2:2845:3275","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2847:2184"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:3371","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2842:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13744:58184":{"id":"2:13744:58184","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"1:15750:2991","prim@char":"1:15744:2986","self::pattern":"2:13302:5190"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49835:5438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:5193","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6344:4672":{"id":"1:6344:4672","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6345:60342","1:6346:60343"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3086:5168":{"id":"2:3086:5168","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:3085:4666","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2905:124":{"id":"2:2905:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2900:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10546:3343":{"id":"2:10546:3343","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10547:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"21:808:3364":{"id":"21:808:3364","crate_id":21,"name":"MultiSpan","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:809:63860"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5438:4777":{"id":"1:5438:4777","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5439:6321","1:5440:2724"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10355:4666","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23072:5310":{"id":"2:23072:5310","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23073:5236","2:23074:61830","2:23075:1230","2:23076:1231","2:23077:43766","2:23078:61875","2:23079:61876","2:23080:61877","2:23081:61878","2:23082:61879","2:23083:61831","2:23084:61832","2:23085:61833","2:23086:61834","2:23087:61835","2:23088:61836","2:23089:61837"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3357:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23121:4666","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13769:62461":{"id":"2:13769:62461","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:3089:3301":{"id":"24:3089:3301","crate_id":24,"name":"Parser","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:3090:181","24:3091:2165","24:3092:1832","24:3093:2166"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6171:63105":{"id":"5:6171:63105","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8455:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:63:3106":{"id":"20:63:3106","crate_id":20,"name":"IdentFragment","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:64:661","20:65:2074"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13767:62460":{"id":"2:13767:62460","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13686:62449":{"id":"2:13686:62449","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:7:1617":{"id":"0:7:1617","crate_id":0,"name":"internals","span":{"filename":"src/internals/mod.rs","begin":[1,0],"end":[28,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:8:1741","0:74:335","0:409","0:504"],"is_stripped":true}},"2:10533:109":{"id":"2:10533:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10534:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13741:58182":{"id":"2:13741:58182","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:13302:5190","str::rsplitn":"1:15750:2991","prim@char":"1:15744:2986"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49817:5437","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13702:2295":{"id":"2:13702:2295","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15744:2986"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49689:5458","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23145:5238":{"id":"2:23145:5238","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23146:5236","2:23147:1250","2:23148:1275"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13698:62450":{"id":"2:13698:62450","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:3659:3258","str::slice_unchecked":"1:15750:2991","`str`":"1:15750:2991"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:8643:151":{"id":"2:8643:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8644:1811","2:8645:3248","2:8646:770"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13706:5914":{"id":"2:13706:5914","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49967:4736","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:117:1829":{"id":"20:117:1829","crate_id":20,"name":"ToTokens","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:118:2464","20:119:2206","20:120:1850"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13779:15802":{"id":"2:13779:15802","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15744:2986","self::pattern":"2:13302:5190"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13687:305":{"id":"2:13687:305","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15761:3000","str::as_mut_ptr":"1:15750:2991"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:18:3105":{"id":"20:18:3105","crate_id":20,"name":"TokenStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:19:9277","20:21:63834","20:23:63835","20:26:63836"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"20:44:4666","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:9504:3688":{"id":"2:9504:3688","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6183:63106":{"id":"5:6183:63106","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8455:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3357:106":{"id":"2:3357:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2867:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3388:3372":{"id":"2:3388:3372","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13680:62447":{"id":"2:13680:62447","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2900:183":{"id":"2:2900:183","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2902:605","2:2903:909"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:3371","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:0:1641":{"id":"0:0:1641","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[109,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2018\n# use serde_derive::{Serialize, Deserialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.144\")]","#![allow(unknown_lints, bare_trait_objects)]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: derive_partial_eq_without_eq, clippy ::\nenum_variant_names, clippy :: manual_map, clippy :: match_like_matches_macro,\nclippy :: needless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: let_underscore_drop, clippy ::\nmanual_assert, clippy :: map_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:1257:1626","0:1258:1635"],"is_stripped":false}},"2:13707:62451":{"id":"2:13707:62451","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49977:5471","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13776:62465":{"id":"2:13776:62465","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15744:2986","self::pattern":"2:13302:5190"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23019:5233":{"id":"2:23019:5233","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23020:5236","2:23021:61830","2:23022:62094","2:23023:62095","2:23024:62096","2:23025:43766","2:23026:62097","2:23027:62098","2:23028:62099","2:23029:62100","2:23030:62101","2:23031:62102","2:23032:62103","2:23033:62104","2:23034:62105","2:23035:62106","2:23036:61879","2:23037:62107","2:23038:61235","2:23039:61234","2:23040:61236","2:23041:61831","2:23042:61832","2:23043:61833","2:23044:61834"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3357:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23121:4666","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5526:4679":{"id":"1:5526:4679","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5527:8386","1:5528:59852","1:5529:6959","1:5530:59853","1:5531:4997","1:5532:4998","1:5533:59854","1:5534:1307","1:5535:59855","1:5536:59856","1:5537:59857","1:5538:59858","1:5539:59859","1:5540:59860","1:5541:59861","1:5542:59862"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6746:4659":{"id":"1:6746:4659","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6747:60273"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3600:131":{"id":"2:3600:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3602:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3603:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13753:3066":{"id":"2:13753:3066","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"str::matches":"1:15750:2991","self::pattern":"2:13302:5190","`DoubleEndedIterator`":"2:8687:120","prim@char":"1:15744:2986"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49917:5469","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13788:1874":{"id":"2:13788:1874","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13302:5190","prim@char":"1:15744:2986"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10552:3341":{"id":"2:10552:3341","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10553:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3154:149":{"id":"2:3154:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3156:1634"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5906:5628":{"id":"5:5906:5628","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5908:181","5:5909:433"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:3371","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:4486:3340":{"id":"1:4486:3340","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4487:2604","1:4488:60752","1:4490:60753","1:4491:5838","1:4492:60754","1:4493:60755","1:4494:60076","1:4503:4094"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14042:150":{"id":"2:14042:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:14043:181","2:14044:150","2:14045:769"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6168:63104":{"id":"5:6168:63104","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8455:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13796:4445":{"id":"2:13796:4445","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3501:5110":{"id":"2:3501:5110","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3503:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13685:2724":{"id":"2:13685:2724","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12766:5581"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3436:3458":{"id":"2:3436:3458","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3438:181","2:3439:1105"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5512:4677":{"id":"1:5512:4677","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5513:6959","1:5514:57893","1:5515:57894"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3148:75":{"id":"2:3148:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3150:306"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:3371","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:6574:4773":{"id":"1:6574:4773","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6575:8846","1:6576:59792"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10355:4666","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13722:4077":{"id":"2:13722:4077","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47750:176","prim@char":"1:15744:2986","self::pattern":"2:13302:5190"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:5193","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13321:5192":{"id":"2:13321:5192","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13323:5212","2:13324:924","2:13325:61201","2:13326:61202"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3518:5119":{"id":"2:3518:5119","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3520:1240"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6472:4679":{"id":"1:6472:4679","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6473:60349","1:6474:8731","1:6475:8732","1:6476:8734","1:6477:8733","1:6478:8735","1:6479:8736","1:6480:8738","1:6481:7000","1:6482:8741","1:6483:8742","1:6484:8743","1:6485:8744","1:6486:8745","1:6487:8746","1:6488:8739","1:6489:8740"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8712:3373":{"id":"2:8712:3373","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8713:795","2:8714:2070"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8844:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3352:3371":{"id":"2:3352:3371","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3890:4455":{"id":"2:3890:4455","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6246:4654":{"id":"1:6246:4654","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6247:60225","1:6248:8808","1:6249:60226","1:6250:60227","1:6251:60228","1:6252:60229"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10355:4666","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5504:4676":{"id":"1:5504:4676","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5505:57327","1:5506:57329","1:5507:57328","1:5508:57330"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1258:1635":{"id":"0:1258:1635","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[99,0],"end":[104,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"2:3450:4838":{"id":"2:3450:4838","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3452:1359"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13785:62466":{"id":"2:13785:62466","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15744:2986","self::pattern":"2:13302:5190"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:5193","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:2132:6431":{"id":"24:2132:6431","crate_id":24,"name":"IdentExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2133:64059","24:2134:64060","24:2135:1873"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"24:2150:4666","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13327:5193":{"id":"2:13327:5193","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13329:4072","2:13330:62063","2:13331:62064"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Searcher","id":"2:13321:5192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13738:62453":{"id":"2:13738:62453","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split_terminator":"1:15750:2991","prim@char":"1:15744:2986","str::split":"1:15750:2991","self::pattern":"2:13302:5190"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49781:5463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:5193","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10540:119":{"id":"2:10540:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10541:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4078:68":{"id":"2:4078:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4079:1432"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"24:2864:3310":{"id":"24:2864:3310","crate_id":24,"name":"Peek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"24:2746:4666","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:844:223":{"id":"5:844:223","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:845:2003","5:846:1876","5:847:4120"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4866:4453":{"id":"2:4866:4453","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4867:1811","2:4868:61020","2:4869:4081"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2867:104":{"id":"2:2867:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2868:409","2:2869:411"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5520:4678":{"id":"1:5520:4678","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5521:6959","1:5522:9281"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10544:2244":{"id":"2:10544:2244","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10545:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4771:4691":{"id":"1:4771:4691","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4772:3249","1:4773:60248"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3597:130":{"id":"2:3597:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3599:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3600:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13704:33229":{"id":"2:13704:33229","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15750:2991"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49987:5472","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13332:5194":{"id":"2:13332:5194","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:5193","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13697:4848":{"id":"2:13697:4848","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"1:15750:2991","crate::ops::Index":"2:3655:2251","`str`":"1:15750:2991"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13718:2535":{"id":"2:13718:2535","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:15744:2986","`None`":"2:47750:176","self::pattern":"2:13302:5190"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:144":{"id":"0:144","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[23,0],"end":[23,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"internals::case::RenameRule","name":"RenameRule","id":"0:1286:1840","glob":false}},"2:13756:62456":{"id":"2:13756:62456","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13302:5190","prim@char":"1:15744:2986","`DoubleEndedIterator`":"2:8687:120","str::matches":"1:15750:2991"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49935:5470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:5193","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2842:97":{"id":"2:2842:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2844:1830"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:3371","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:14027:138":{"id":"2:14027:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:14028:181","2:14029:1015"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3458:5097":{"id":"2:3458:5097","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3460:560"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6577:4657":{"id":"1:6577:4657","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6578:57518"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10355:4666","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6648:4662":{"id":"1:6648:4662","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6649:60172"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13750:62455":{"id":"2:13750:62455","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:5193","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13689:1855":{"id":"2:13689:1855","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47750:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8602:5165":{"id":"2:8602:5165","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8604:2882"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3160:229":{"id":"2:3160:229","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3162:127","2:3163:1420"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13759:62457":{"id":"2:13759:62457","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"str::rmatch_indices":"1:15750:2991","prim@char":"1:15744:2986","self::pattern":"2:13302:5190","`DoubleEndedIterator`":"2:8687:120"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49863:5466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3570:116":{"id":"2:3570:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3571:222","2:3572:544"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23738:17306":{"id":"2:23738:17306","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23739:61234","2:23740:61235","2:23741:61236"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialOrd","id":"2:23733:5239","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13715:58187":{"id":"2:13715:58187","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:13302:5190","prim@char":"1:15744:2986"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:5193","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:2881:6434":{"id":"24:2881:6434","crate_id":24,"name":"Speculative","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2882:63941"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:2634:2474":{"id":"24:2634:2474","crate_id":24,"name":"Spanned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2635:2074"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3603:132":{"id":"2:3603:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3605:181","2:3606:379"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8606:5164":{"id":"2:8606:5164","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8608:4112"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9127:5072":{"id":"2:9127:5072","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8844:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4504:4728":{"id":"1:4504:4728","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4505:60666","1:4506:40779","1:4507:60668","1:4508:60667"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14426:141":{"id":"2:14426:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14427:278","2:14428:519","2:14429:281","2:14430:1082"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:11175:214":{"id":"2:11175:214","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:11177:181","2:11178:1855","2:11179:58148","2:11180:58149","2:11181:58150","2:11182:755","2:11183:756"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:3371","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:11166:4666","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10483:3340":{"id":"2:10483:3340","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10484:1536","2:10485:60077","2:10487:60076"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3359:220":{"id":"2:3359:220","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23733:5239":{"id":"2:23733:5239","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23734:1273","2:23735:1272","2:23736:1270","2:23737:1269"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialEq","id":"2:23145:5238","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6187:2291":{"id":"5:6187:2291","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15750:2991"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13765:62459":{"id":"2:13765:62459","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13709:1892":{"id":"2:13709:1892","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:13302:5190","prim@char":"1:15744:2986"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:5189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3442:5083":{"id":"2:3442:5083","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3443:181","2:3444:915"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3462:5099":{"id":"2:3462:5099","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3464:1106"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13800:62468":{"id":"2:13800:62468","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15744:2986"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50012:5475","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13678:2070":{"id":"2:13678:2070","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13677:795":{"id":"2:13677:795","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15744:2986"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13695:58150":{"id":"2:13695:58150","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13701:2301":{"id":"2:13701:2301","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15744:2986"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49683:5457","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10542:3336":{"id":"2:10542:3336","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10543:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4129:5181":{"id":"2:4129:5181","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4130:60285"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6650:4663":{"id":"1:6650:4663","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6651:57396"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"2:46066:4457":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"5:1152:6636":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:12716:7222":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"24:3851:3410":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"1:5526:4679":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"21:1508:191":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"1:15223:57417":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"24:5798:3149":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"15:0:2964":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:48531:3344":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:23208:4710":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:6595:5973":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:1531:8055":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"18:766:6816":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"24:3635:1776":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"1:7980:6665":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"24:2366:3248":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"17:2543:6371":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:9648:6683":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"24:2195:1757":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"2:47253:4329":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:11168:9182":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:12130:7112":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"24:5969:2447":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"2:4811:5068":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:4127:8336":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:10949:48195":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:5723:781":{"crate_id":2,"path":["core","iter"],"kind":"module"},"24:3905:3413":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"1:14300:4774":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:11175:214":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:7943:6653":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:7073:59699":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"24:5924:2452":{"crate_id":24,"path":["syn","generics","LifetimeDef"],"kind":"struct"},"24:5280:3467":{"crate_id":24,"path":["syn","token","Sub"],"kind":"struct"},"18:712:4062":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"5:1256:62383":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:5923:1793":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"24:4756:3431":{"crate_id":24,"path":["syn","token","Bang"],"kind":"struct"},"2:48136:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"18:782:6806":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:53654:9049":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:2937:6239":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:3366:6231":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:51476:5296":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:4871:7665":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:11579:7003":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"22:941:1752":{"crate_id":22,"path":["proc_macro2","imp","Group"],"kind":"enum"},"17:11547:6997":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"21:2917:4616":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"16:5784:6022":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:539:7991":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:5582:8690":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:39126:4057":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"21:553:6630":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"24:6340:3191":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"24:66:1998":{"crate_id":24,"path":["syn","token"],"kind":"module"},"2:10220:5418":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:46886:5128":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:0:278":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:12038:4835":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:4198:7646":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"7:0:1484":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:3007:6218":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:11591:7006":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:49699:2737":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"24:6337:2198":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"2:49987:5472":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:23198:4666":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:53718:9053":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:50452:5488":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:7450:4892":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"5:6498:224":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"22:1071:2472":{"crate_id":22,"path":["proc_macro2","Literal"],"kind":"struct"},"6:5229:8528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"24:5444:1777":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"1:1485:4574":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:49063:5067":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:4075:8310":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"24:6332:3189":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"2:3594:2190":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:1727:8179":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:50144:5201":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:9553:6681":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"2:46677:5604":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:5948:6213":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:46305:5320":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"6:4270:4995":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:49298:5620":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"24:2059:3307":{"crate_id":24,"path":["syn","buffer","TokenBuffer"],"kind":"struct"},"24:6104:1619":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"5:4509:3249":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:6468:6038":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:3838:3253":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:2166:579":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"22:855:1827":{"crate_id":22,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"2:23145:5238":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:10464:6372":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:15767:3006":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:6646:4660":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"24:2150:4666":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"1:10355:4666":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:6106:4994":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:5520:4678":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"18:896:6409":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:56562:237":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10913:48216":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:14705:6692":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"12:353:9224":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:15759:2998":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"24:2994:3294":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"1:11962:4806":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:10650:4743":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:10435:6294":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:2173:4281":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:12360:7162":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:4063:4760":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"16:6858:6259":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"24:3797:3409":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"1:12009:4913":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:11433:3249":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:1311:6389":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"18:637:6806":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"24:5743:3136":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"17:13899:7607":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:5438:4777":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:4392:8421":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:9716:63803":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:47262:8970":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:11182:5048":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:11142:6951":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:7702:5969":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:3825:3249":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"24:1271:6445":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"2:10536:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"6:4464:8453":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"24:5186:3460":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"24:5297:3468":{"crate_id":24,"path":["syn","token","SubEq"],"kind":"struct"},"17:9275:6888":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:13989:4753":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:3818:5076":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:10781:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"5:2843:5700":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:14816:9134":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:11086:57526":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"17:12585:7200":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"24:4085:2238":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"2:2262:5176":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"24:3021:2746":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"24:5787:3146":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"24:6232:1749":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"1:10466:4827":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"5:8215:5645":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:4277:8361":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:13481:7476":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:6057:8748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"12:2045:4574":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:4197:4752":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"24:4773:3432":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"2:3509:5114":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:9426:60221":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"24:3689:130":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"24:5496:3124":{"crate_id":24,"path":["syn","data","VisPublic"],"kind":"struct"},"2:46845:4732":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:14325:4688":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:14320:9276":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"5:2284:5641":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:15745:2987":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:50616:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:3436:3458":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:6486:8745":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:11335:6309":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:5149:8484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:11774:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:11810:7057":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:7025:5951":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"5:3407:5638":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:13774:7574":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"21:2236:4610":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"12:2066:4783":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:23733:5239":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"13:0:2956":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:3603:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"12:928:4815":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:13129:7387":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:4485:8460":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:2619:5701":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:2314:6348":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:3554:4574":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:7762:6665":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"17:9786:47936":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:12348:7160":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:3415:3273":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:8175:4868":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"16:6490:6039":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:11876:3249":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:13938:7616":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:47926:3253":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"16:6679:6255":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:50497:5558":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"6:6908:8858":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:14969:4850":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:1684:3248":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:1636:4824":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:3841:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:13711:4895":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:32744:61997":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"17:12921:7259":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:11701:7027":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:13595:7506":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:5273:6888":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:15766:3005":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:51969:5265":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:14374:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:46957:5134":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:3513:5116":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:11122:4977":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:6851:4717":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"24:3437:3396":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"17:13817:7590":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"24:5783:3145":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"2:23121:4666":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"14:56:1763":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:24038:4666":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:10954:4694":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"2:51525:5284":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:4459:3248":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:4495:7654":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"12:933:4818":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"24:6359:3181":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"17:8902:47925":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:11559:5434":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:8097:5125":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:10658:3306":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:10340:6349":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:610:1394":{"crate_id":1,"path":["std","thread"],"kind":"module"},"24:5239:3464":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"5:8449:8876":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"2:14223:61017":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"6:0:800":{"crate_id":6,"path":["libc"],"kind":"module"},"24:6391:2129":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"16:3297:6278":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:11628:7012":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:9004:47927":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"24:5476:3126":{"crate_id":24,"path":["syn","data","Visibility"],"kind":"enum"},"17:299:63810":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:50308:5208":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:593:8026":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"24:4013:3417":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"17:13167:7398":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"24:5500:3125":{"crate_id":24,"path":["syn","data","VisRestricted"],"kind":"struct"},"1:8525:5013":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:13323:13068":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:6656:6253":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"24:5862:3164":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"17:12557:7194":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:6482:8741":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:49633:5451":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:10542:3336":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:46663:5602":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:24281:8879":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"17:10166:6901":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"5:5166:661":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"16:4743:7661":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:4903:7666":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"24:5046:3450":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"24:4139:3419":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"9:469:9335":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:11597:5435":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:50021:3351":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:48388:5542":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"24:5145:3457":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"22:1066:1763":{"crate_id":22,"path":["proc_macro2","Ident"],"kind":"struct"},"16:3029:6219":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:2185:4782":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:7184:6264":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:13404:7453":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:5217:6208":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:3839:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:53628:9047":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:15754:2993":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:13147:7392":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:7473:3248":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"12:2052:4781":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:3501:5110":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:10445:6800":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:10198:48001":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"24:6376:185":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"2:46696:5355":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:6120:8758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:3494:6818":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"18:661:6414":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"24:948:64108":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"16:6342:6035":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:634:8049":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"12:2392:1752":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:12490:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:10862:4727":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:50428:5481":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:4486:3340":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:3458:5097":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:24385:8885":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"12:1121:4824":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:3883:8198":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:7100:6051":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:3357:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:13853:6689":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:4975:7668":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:11754:7040":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"5:3436:4781":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:46173:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:51825:5285":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:13522:7490":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:11769:7046":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:15214:9135":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:1441:3248":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"24:3653:3402":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"2:3454:5095":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:9873:47937":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:4017:4574":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"6:4081:8312":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:14329:4459":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:5260:8549":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:3443:4737":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:14:2604":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:4157:4960":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:12222:7124":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:4823:5069":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:15764:3003":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"21:1729:1843":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"16:7155:6056":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:10545:48137":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:51755:5297":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:3051:6276":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:4028:8288":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:3100:4943":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:10104:6384":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:12469:7181":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"22:24:9289":{"crate_id":22,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"24:5326:2465":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"1:5643:5041":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"2:51632:8987":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"21:3070:3358":{"crate_id":21,"path":["proc_macro","LineColumn"],"kind":"struct"},"2:23350:4666":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:52799:5287":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:3086:5168":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:3231:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:11671:7023":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"14:244:9222":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"12:2253:4823":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:7169:5975":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:10925:48217":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:13573:7501":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:4665:6639":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"21:2792:2472":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"1:11109:9272":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"2:53543:5302":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:12499:6688":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:49541:5445":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:4495:60075":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:46634:3351":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:11017:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"24:5735:3134":{"crate_id":24,"path":["syn","expr","ExprBox"],"kind":"struct"},"21:2966:6430":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"2:24857:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:9539:6333":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"20:63:3106":{"crate_id":20,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"16:4628:7657":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:1912:42045":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:52649:5263":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:11066:1827":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"5:5962:6647":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"2:11355:3249":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:2370:601":{"crate_id":1,"path":["std","env"],"kind":"module"},"24:6060:3175":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"5:7736:4581":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"24:4715:3428":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"2:52461:5286":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:3104:2003":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"24:5770:3142":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"24:3527:105":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"2:48178:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:13873:7598":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:46039:5081":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"24:5978:1897":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"1:6648:4662":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:7906:2589":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"24:160:4666":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"2:2041:4717":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"24:940:64107":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"2:11680:5440":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:12070:7101":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:88:40673":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:11457:1763":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"24:2881:6434":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"17:681:1843":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:7379:5982":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:13043:5465":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:2196:1800":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:6153:8773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:3478:6226":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:24431:40090":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"21:2683:1752":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"17:11784:7052":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:4775:7662":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:2163:3249":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:11837:59715":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"17:10476:6374":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"24:5498:3123":{"crate_id":24,"path":["syn","data","VisCrate"],"kind":"struct"},"16:6907:6045":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:1190:12055":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"20:191:3715":{"crate_id":20,"path":["quote","__private","HasIterator"],"kind":"struct"},"2:53397:5299":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:2981:6228":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:13565:7500":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"24:6328:3187":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"5:5906:5628":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:3807:225":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:6937:8865":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:5567:8679":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:1075:2257":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"12:472:63781":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:12406:7172":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:10456:4789":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:3352:3371":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"5:7205:6649":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"12:1784:6634":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:57897:9064":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:2405:13058":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"24:6134:1975":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"2:48262:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:6856:8855":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:2191:4783":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:52379:5301":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:4271:7647":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:5982:8702":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:612:8036":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:10291:6346":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:49452:5436":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:2464:6458":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"5:3462:1800":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:12093:7107":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:48774:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"9:963:5800":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:5948:6644":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"20:431:3869":{"crate_id":20,"path":["quote","__private","RepInterp"],"kind":"struct"},"17:11031:47941":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"22:799:3306":{"crate_id":22,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"16:7449:5968":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:7295:5965":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:46946:5148":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:7090:6050":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:11085:6339":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:13529:7491":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:1449:4813":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:11234:6334":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:5398:8623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:10450:12052":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:3160:229":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:13986:4751":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:46278:5179":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:11341:4868":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"24:5806:3151":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"2:53608:9045":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:13747:7566":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:8426:5001":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:8466:5623":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:11020:4699":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"1:3102:4944":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:52585:5278":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"5:5861:6636":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:13332:5194":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:7874:235":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:11314:6370":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"9:1075:5803":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:49671:5313":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"13:233:7890":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:47791:3249":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:48768:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:3255:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"16:6060:5999":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:3505:5112":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:10473:13063":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"24:6420:3197":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"2:22817:62266":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:9131:47931":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:4381:7650":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:12700:7220":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:6135:8762":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:4835:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"24:5814:3152":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"2:48094:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:23407:5236":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"20:47:2822":{"crate_id":20,"path":["quote","format_ident"],"kind":"macro"},"17:13281:7423":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:10009:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:7792:5996":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:13961:7620":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:4386:8418":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:1510:4819":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:10367:57415":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"2:49935:5470":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:6630:6251":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"12:764:3253":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:11450:4874":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:8590:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:10215:5417":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:6381:5972":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:9646:63811":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"22:448:3264":{"crate_id":22,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"3:321:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"24:6313:3184":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"2:50456:5482":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:2328:5699":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"24:4923:3442":{"crate_id":24,"path":["syn","token","Dot3"],"kind":"struct"},"2:12766:5581":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"24:916:64109":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"2:5248:3325":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:3347:211":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:5301:8566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:2698:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:7294:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"24:3941:3415":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"5:8549:4575":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:9127:5072":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:4218:8357":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:1622:4823":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"20:296:2051":{"crate_id":20,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"17:11563:7002":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"21:165:4640":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"2:47867:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:5238:46350":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:6484:8743":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:11638:5437":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"24:5748:3137":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"21:3104:1752":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"5:8297:3248":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"18:645:6413":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:15238:5895":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"22:1044:2156":{"crate_id":22,"path":["proc_macro2","Punct"],"kind":"struct"},"21:3056:1827":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"17:13953:7617":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:49863:5466":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:13177:4990":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"20:357:2474":{"crate_id":20,"path":["quote","spanned","Spanned"],"kind":"trait"},"2:10771:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:10962:48194":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:15763:3002":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:15152:4983":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:5362:6004":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"24:5215:3462":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"17:11130:9181":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:10211:48005":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"12:2059:4782":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:9414:60223":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"6:6007:8720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:10831:6357":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:11514:6991":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:50273:5205":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:46928:5132":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:13293:7426":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:7918:6649":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"24:3109:3305":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"2:53459:5264":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"24:2975:1833":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"1:11196:4977":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:8639:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:5998:5978":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:7416:4890":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:4242:8359":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"12:1203:5867":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:7051:6047":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"21:523:63859":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"14:0:2963":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:12165:5452":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:10422:48044":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:9087:47930":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:46937:5133":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"24:4976:3445":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"24:3761:3407":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"2:53147:5275":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:12431:7176":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"24:2979:3293":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"17:10489:9179":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:49102:9262":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:46557:5351":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:13584:7505":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"12:1147:4825":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:10610:48141":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"24:2807:6438":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"24:5505:2193":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"1:8961:59704":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:4504:4728":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:4454:8447":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:5122:3317":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:844:223":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:52539:5274":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:4256:8360":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:11433:6975":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:2792:5946":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"24:5435:1839":{"crate_id":24,"path":["syn","attr","NestedMeta","Lit"],"kind":"foreign_type"},"16:5941:6025":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:48220:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:2441:13068":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:7719:58097":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"24:5075:3452":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"21:1253:3359":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"17:10788:48113":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:6902:8857":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:6310:6034":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:4538:8480":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:5186:8510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:4036:6636":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:13735:7563":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:5685:6018":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:50436:5486":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:13037:7351":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:12170:7117":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:51370:5283":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:13345:7442":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:4599:7656":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:4110:8328":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:4287:8368":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"24:1278:6447":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"2:11652:5438":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"24:5393:2097":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"16:7826:2544":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:10912:2737":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:6159:5962":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:12198:5453":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:10364:6347":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:13233:7415":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:7355:5960":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"18:849:6405":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:49512:5442":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:11381:4870":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"24:2077:64102":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"22:841:3358":{"crate_id":22,"path":["proc_macro2","fallback","LineColumn"],"kind":"struct"},"17:10899:48207":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:37894:4062":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"5:8232:5646":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:11404:4735":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:9883:63815":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:13241:3271":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:6277:6033":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:9796:63806":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:50341:5548":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:3154:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:14339:5496":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:4429:4690":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:10738:4745":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:10068:6355":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:46727:5538":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:8419:5685":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:4281:4576":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:6034:8730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"22:155:9171":{"crate_id":22,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"2:49094:9261":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:14957:4844":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"12:940:4819":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:46985:5136":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:14790:57529":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:10217:6684":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"11:46:7895":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:3484:4787":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:24483:5575":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"24:5116:3455":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"1:10167:9549":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:3155:6220":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:6012:5957":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"24:5087:3453":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"2:56588:237":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:15762:3001":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:12527:7191":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"24:6369:2196":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"17:12157:7116":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:15757:2996":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:46153:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:6340:4580":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:2525:4930":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:52145:8997":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"24:5058:3451":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"2:51947:5262":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"24:5423:3119":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"18:152:54254":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:10895:4732":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:51614:5261":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:11002:48219":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:50659:5495":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:6331:5883":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:3597:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:53665:9050":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"24:924:64105":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"24:5838:3158":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"24:5894:1771":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"24:3401:3394":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"5:1909:6636":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:3907:8215":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:4660:7658":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:13138:7391":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"24:3253:3248":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"12:979:4822":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:8606:5164":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:5447:8643":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:24302:5380":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:3221:6223":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:6724:4664":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:547:6198":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:7659:6058":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:57876:9063":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"16:2813:6233":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:6943:8866":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:9561:6338":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:14381:4727":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"24:5778:3144":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"16:4467:7653":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:5240:8536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"24:5876:61":{"crate_id":24,"path":["syn","expr","parsing","raw"],"kind":"struct"},"17:12512:7187":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:9124:4454":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"24:6137:3179":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"6:6214:8816":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:3600:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"21:1191:4638":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"17:13708:7551":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:981:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:12048:7100":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"9:809:4868":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"24:3977:206":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"6:4446:8442":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:7768:5966":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:50287:5206":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:2733:6191":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:56166:5316":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:51346:5291":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:13377:7449":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:4709:6641":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:8346:4758":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"22:908:1618":{"crate_id":22,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"24:6089:2146":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"2:22851:62296":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:9706:47934":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:10004:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:53581:5267":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:3993:8270":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"12:1256:4826":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:12674:7218":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"24:161:4131":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"1:10642:4956":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:5512:4677":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"24:2556:2004":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"16:3402:5947":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:46609:5476":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:4493:8462":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:11170:4693":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:53639:9048":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:10816:4785":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:11985:7087":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:11102:47942":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:11890:7062":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"24:2878:1832":{"crate_id":24,"path":["syn","parse"],"kind":"module"},"2:14077:61019":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"24:5951:2197":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"16:6691:6043":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:3366:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:46975:5135":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:1502:4823":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"14:11:9540":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:4098:8322":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:3812:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:4581:5676":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"6:5274:8559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:53733:9054":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:15761:3000":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"24:5917:2412":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"2:24956:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:50115:5195":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:13794:7577":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:6759:5652":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:8712:5023":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"1:3112:4949":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:46820:5142":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:13094:5431":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:3077:6277":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:46867:5147":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:2958:4491":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"24:3212:127":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"1:12014:4914":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:11409:6961":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:6407:6036":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:48835:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:2695:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"24:2746:4666":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"12:1666:5877":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:6687:5146":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:9361:6890":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:12573:7198":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"22:817:9172":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"16:6873:3685":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"24:2555:2004":{"crate_id":24,"path":["syn","parse_quote"],"kind":"module"},"17:12770:7237":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:49731:5434":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:1710:4814":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:5239:3324":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"12:869:4576":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:21:673":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:4942:7667":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:15743:2985":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:9033:47928":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:14683:6690":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:24334:8881":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"12:0:2962":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"24:6345:3192":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"17:13472:7475":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"12:815:4817":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:6925:8863":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:22872:62298":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"24:5964:2444":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"18:720:6807":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:13763:7570":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"9:603:9345":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"5:1663:3249":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:12117:7109":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:618:8039":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:10407:6342":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:51725:5293":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:49591:5447":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:1521:4820":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:7063:6048":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:3359:220":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:3409:4742":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:8224:4576":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"14:231:2288":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:4160:8353":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"24:3210:205":{"crate_id":24,"path":["syn","error","Result"],"kind":"typedef"},"24:3089:3301":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"2:4968:3333":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:6549:5976":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:4195:4751":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:14391:57527":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:11068:6312":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"18:820:6403":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:8275:4801":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"24:4819:3435":{"crate_id":24,"path":["syn","token","Colon2"],"kind":"struct"},"6:4434:8438":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:11945:7079":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"22:1020:1752":{"crate_id":22,"path":["proc_macro2","Group"],"kind":"struct"},"2:46790:6655":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:11822:9273":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"24:6058:3176":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"17:11968:7084":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:7721:5971":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"21:300:9334":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"1:5766:5050":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:5753:5049":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:5649:6016":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:1626:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:49763:5462":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"24:5826:3155":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"1:14766:4896":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:510:47923":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:4526:8475":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:1634:8115":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:2035:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:46896:5129":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:39090:4732":{"crate_id":2,"path":["core","error","Chain"],"kind":"struct"},"2:47228:9256":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:2953:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:521:7983":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:4716:7660":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:13196:7406":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:6075:5959":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:9131:5073":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:15742:2984":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"24:6366:3196":{"crate_id":24,"path":["syn","ty","Variadic"],"kind":"struct"},"1:2403:13057":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"24:972:3170":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"6:4440:8439":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:7351:6636":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:50012:5475":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"24:4727:3429":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"16:6533:6246":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:1537:8058":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:10483:3340":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:10489:9546":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:5499:5597":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:15768:3007":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"18:837:5192":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:12057:4836":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"18:704:6806":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:53257:5295":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"5:1276:5696":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:23738:17306":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:8643:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:5574:4681":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:5668:6017":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:7323:5981":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"5:5609:5652":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:11037:4887":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"1:1491:4815":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:9636:47933":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:14067:4202":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:5366:8610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:1764:8191":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:1606:8096":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:23261:5236":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:10394:6343":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:51901:5277":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:24758:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:52044:8994":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:6931:8864":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:51679:5305":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:13073:7381":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"9:1020:5802":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"24:5774:3143":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"2:49047:4830":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:13549:7497":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:1719:4815":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"18:668:6415":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:46271:5080":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:10937:48218":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:11202:4996":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:11917:4803":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:11930:4804":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:8652:3374":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:51871:5273":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"24:5409:1836":{"crate_id":24,"path":["syn","attr","Meta","List"],"kind":"foreign_type"},"2:47875:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"9:900:7946":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:50236:5204":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:53680:9051":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:13029:7349":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"15:269:5891":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"12:183:5873":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:4236:4754":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:47750:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:10552:3341":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:3467:5101":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:12482:7182":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:12160:6458":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"16:2959:6217":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"24:5761:3140":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"16:7079:6049":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:5715:5044":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:53005:5307":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:2167:3248":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:24042:5237":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:3920:8225":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"12:1103:4823":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:12004:5015":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"24:6110:1768":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"2:49072:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:5396:6006":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:50464:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:9756:63816":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:9503:3689":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"24:5714:3129":{"crate_id":24,"path":["syn","expr","ExprAssignOp"],"kind":"struct"},"17:11653:7014":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:13859:7596":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"22:1024:3265":{"crate_id":22,"path":["proc_macro2","Delimiter"],"kind":"enum"},"17:10028:47989":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"21:1358:1827":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"9:776:5782":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:8850:4916":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:6089:6027":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:7264:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:1496:4816":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"20:193:3714":{"crate_id":20,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"6:5210:8526":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:47918:3249":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:4055:8300":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:4340:8394":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:8760:4857":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:3659:3258":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:5331:8589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:5676:12057":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:6268:8836":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"24:3815:2146":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"24:3473:1810":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"17:9326:6369":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:46573:5353":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:1740:8182":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:5268:3326":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:46195:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:13421:7460":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:3365:2394":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"24:2977:1834":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"typedef"},"6:1576:8077":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:4410:8428":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:14872:4904":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"22:950:1763":{"crate_id":22,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"2:51454:5292":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:9466:6893":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:56549:237":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"12:787:4816":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:5412:6007":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:5048:3308":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:9259:6887":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:49578:5142":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:46836:5143":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:11181:6952":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"21:3001:3264":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"2:46530:3351":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:2900:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:10093:6383":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:1704:8169":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:46858:5144":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"5:8254:3248":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"21:478:4618":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"6:6671:8845":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:10546:3343":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:3726:3270":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:5639:6015":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"16:2839:6214":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:49683:5457":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:25088:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"5:1701:4813":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:8167:5074":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:6665:8843":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"24:6325:3186":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"1:10980:4697":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"12:843:4813":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"24:5464:3121":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"6:5455:8645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:53599:9044":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:3497:4744":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:24393:8886":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:4439:7652":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:9505:3687":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:0:489":{"crate_id":2,"path":["core"],"kind":"module"},"6:4038:8294":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"15:230:5886":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:50448:5487":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"24:6424:2195":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"6:5405:8624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:13612:7513":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"24:4265:3425":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"2:8844:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"24:5802:3150":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"5:69:4465":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"24:6416:2143":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"24:6362:3182":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"17:9206:47932":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:4129:5181":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:23944:62270":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:3322:4741":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:5959:5950":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"21:2716:2156":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"6:4532:8477":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"18:811:6402":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:3129:6229":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:13975:7623":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:5460:6010":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:444:1810":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:2748:580":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:11381:6957":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:4379:8416":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"24:956:64110":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"17:10390:6353":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:6243:8830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"24:5251:3465":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"24:5850:3161":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"2:50161:5202":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:6979:8873":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:13721:7557":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:10304:6345":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:4402:4717":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:6141:6030":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"24:5412:1837":{"crate_id":24,"path":["syn","attr","Meta","NameValue"],"kind":"foreign_type"},"24:2339:3247":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"6:4346:8396":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:13378:5197":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"24:2312:3246":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"24:4739:3430":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"5:8389:5684":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:4142:8342":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"14:47:9540":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"20:18:3105":{"crate_id":20,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"17:10039:47990":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:11474:6980":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:6904:3676":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:3853:3330":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"12:2072:1800":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"12:880:4574":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:9421:6680":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"2:3479:3987":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:11524:5433":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:1654:4826":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:10571:6315":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:22849:62299":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:13428:7461":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"24:6322:3185":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"24:3365:3392":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"2:14510:4463":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:5439:8641":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:11494:6990":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:586:8023":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:9676:63812":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"21:1222:1618":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"16:6518:5974":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:50432:5484":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:9826:6357":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:3972:8260":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"24:0:1615":{"crate_id":24,"path":["syn"],"kind":"module"},"1:11177:5045":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:11907:7068":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:9517:2737":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:1626:8110":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:3896:8207":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:6344:4672":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:51577:5276":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"24:4247:3424":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"12:856:4814":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:13369:7447":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:542:5934":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:2487:4458":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"5:7714:4580":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:2905:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:10598:48140":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:53703:9052":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"24:3136:9558":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"17:10127:6357":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:23405:5259":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:4:981":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:13271:7422":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:4516:8470":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:10058:6388":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:15769:3008":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:4321:8384":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"24:5929:3166":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"17:10558:48138":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:47235:4262":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"12:1703:5879":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:15494:6693":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:3114:57326":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:8403:5538":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"21:2943:3363":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"2:47057:5141":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"5:8240:62348":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:1152:12053":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"9:0:2959":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:3106:8875":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:11603:7007":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:49503:5441":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:6954:8870":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:10136:47937":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:13495:7483":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:14778:4897":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"12:466:63780":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:5737:5046":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:8291:3248":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"18:621:9174":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:48510:2244":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"24:5822:3154":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"16:5869:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"18:857:6406":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"14:250:7845":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:7110:6052":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:13331:7440":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:47782:1811":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:9988:47987":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"24:5726:3132":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"6:1721:8176":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:4157:6316":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:23072:5310":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:10931:4693":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"17:9836:63807":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:46113:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:4803:7663":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:49084:4868":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:52615:5281":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:14358:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:12019:4811":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:15765:3004":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:5974:8697":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:8695:4262":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:3686:7642":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:3395:3249":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"24:5227:3463":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"6:5488:8653":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:3981:8265":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"9:234:5760":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:11814:4898":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:24890:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"24:4283:238":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"2:24139:5506":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"21:2840:1828":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"16:7684:5970":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:50209:5203":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:5697:5321":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:15748:2989":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"6:6080:8749":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"21:3155:2472":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"17:9587:63819":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:12646:7214":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"24:5431:1838":{"crate_id":24,"path":["syn","attr","NestedMeta"],"kind":"enum"},"16:6433:6037":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:46710:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:8268:4800":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"24:5842:3159":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"2:49996:5473":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:53335:5279":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:13215:7407":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:46670:5603":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:9948:47939":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:3402:4782":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"22:922:54485":{"crate_id":22,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"2:2946:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:4402:8424":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:5530:6012":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:9930:63805":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:4005:8279":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:12742:5616":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:5984:4993":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"24:2069:3306":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"1:3084:4476":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:22804:4062":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:10874:6938":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:48052:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"24:4175:3420":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"12:2032:3249":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:2271:4502":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"24:5830:3156":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"1:1527:4821":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:7547:6636":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:11640:7013":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:32584:4284":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"2:3430:3437":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:5204:8523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"24:176:4124":{"crate_id":24,"path":["syn","token","CustomToken"],"kind":"trait"},"1:5504:4676":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:11188:4988":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:48524:3343":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"24:2455:3255":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"24:2864:3310":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"22:917:9173":{"crate_id":22,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"17:9746:47935":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:2905:6216":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"24:6356:3195":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"2:24824:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:13530:109":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:13323:7437":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"24:6052:3173":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"2:2845:3275":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:6190:6032":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:14315:9274":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"24:5405:1835":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"1:10407:4202":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:7309:5963":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"5:853:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:14552:9546":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"5:4694:236":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:2466:13074":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:2772:6240":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:5303:6001":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:13342:57867":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:9396:6891":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"24:5858:3163":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"16:4316:7648":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:13515:7489":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:10544:2244":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:5419:8635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:1923:2192":{"crate_id":2,"path":["core","mem"],"kind":"module"},"1:5570:4680":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"5:3110:3412":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"12:895:5857":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"5:1055:5644":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:4689:7659":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:10966:4695":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"12:1238:5868":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:607:8034":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"21:3150:1763":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"2:46617:5600":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"24:4669:3273":{"crate_id":24,"path":["syn","token","Add"],"kind":"struct"},"6:5478:8651":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"24:2152:6788":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"17:12262:7129":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"21:3009:3248":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"16:3314:6205":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"22:994:1618":{"crate_id":22,"path":["proc_macro2","TokenStream"],"kind":"struct"},"5:4765:6641":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"18:754:63823":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:47047:5140":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:6775:5653":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"24:5706:3127":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"2:14153:34299":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:2170:4576":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:10240:6283":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:6114:8756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:49817:5437":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:6050:6026":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"12:1881:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"5:8262:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:10435:12049":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:51392:5271":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"24:3545:3398":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"16:6035:5998":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"24:4229:3423":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"24:5427:3120":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"2:11447:5431":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"12:2404:63779":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"24:6056:3174":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"24:5794:3148":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"12:2412:7893":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:1694:8163":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:3355:218":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:5488:4717":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:46640:5601":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:11689:7024":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:7208:6057":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:6246:4654":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:6097:8751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:47799:3253":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"6:4474:8454":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:7141:6055":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:8200:4464":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:56523:237":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:1673:3253":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:12282:7135":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"24:3995:3416":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"5:6739:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"24:4831:3436":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"24:5899:2194":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"6:4296:8373":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:10604:4689":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"12:1162:5865":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:50598:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"20:117:1829":{"crate_id":20,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"14:216:46279":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:51777:5300":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:12983:5461":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:3743:6303":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:2861:6215":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:4840:7664":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:5161:4976":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"21:1284:3364":{"crate_id":21,"path":["proc_macro","bridge","client","MultiSpan"],"kind":"struct"},"2:6610:5131":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"13:121:46245":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"24:4802:3434":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"24:6308:3183":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"17:10223:6292":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:48517:3336":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:8372:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:11946:4805":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:13306:7432":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"24:5975:2111":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"1:2955:4936":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"18:885:6408":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:49613:5449":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"24:3743:3406":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"1:4370:4329":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:13539:7494":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:8532:4574":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:10493:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:8167:4203":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"6:4061:8302":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"5:8270:5635":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:11742:7037":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"24:5368:1752":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"17:12634:7213":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:47037:4733":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:2005:4574":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:46239:3279":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"24:5834:3157":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"2:3388:3372":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:37870:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:513:1753":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"24:6050:1966":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"9:692:5735":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"24:299:1763":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"6:5378:8615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:39050:4901":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:5867:4985":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:3425:5086":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:11615:7010":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:49835:5438":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:15093:4975":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:10801:6306":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:12143:6909":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"24:5005:3447":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"16:5698:6019":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:5721:6020":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"7:38:45600":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"24:3455:3397":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"1:10905:4733":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"24:2870:6432":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"5:1729:4816":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:3164:228":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"12:1682:5878":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:10851:6937":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:10874:4729":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"12:2419:3285":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:7637:2097":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:49531:5444":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"12:971:4821":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:5004:3334":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:3450:4838":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:8403:61626":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:7519:4895":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:4356:8402":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"18:694:6416":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:5247:8540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:696:4217":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"24:4848:3437":{"crate_id":24,"path":["syn","token","Div"],"kind":"struct"},"1:2174:4574":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:50608:8982":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"22:827:3264":{"crate_id":22,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"2:49623:5450":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:49881:5467":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:10554:3342":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:3086:4940":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:5426:8637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:14042:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:2842:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"24:4894:3440":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"9:749:5737":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"6:1662:8140":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:4771:4691":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"2:32404:5570":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:6650:4663":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:12528:59701":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"6:1600:8094":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:46800:13586":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:15751:2992":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:3576:6822":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:1305:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:10594:4937":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"21:3084:3359":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"5:777:9545":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:5560:4675":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:13887:7605":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:13507:7486":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:9579:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"12:952:4820":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:10266:6355":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:6914:8859":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:6896:8856":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:24923:4208":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:3353:3329":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:23019:5233":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"16:6130:6029":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:10156:1843":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:9130:4707":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:15750:2991":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:3877:8197":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:3157:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"21:3129:2156":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"24:4698:3427":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"17:12417:7174":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:50030:5476":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:12383:7171":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:1533:4824":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:10187:48002":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:9958:63804":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:48871:4147":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:46715:5537":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:48750:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"24:5739:3135":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"24:2280:3245":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"5:984:5643":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:50130:5198":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"24:5449:1819":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"17:294:63820":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"5:383:4467":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:8687:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"24:153:1816":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"17:11822:7060":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:48801:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"12:2036:3248":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:46966:5150":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"14:194:46273":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"24:5354:2145":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"6:1669:8144":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"24:5432:1835":{"crate_id":24,"path":["syn","attr","NestedMeta","Meta"],"kind":"foreign_type"},"2:49977:5471":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:11220:4772":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"24:6062:3171":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"6:4198:8355":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:5216:8527":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:12302:7136":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:5374:6005":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:15249:5895":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"5:3105:62441":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"9:1056:5795":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:51300:8984":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"24:4211:3422":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"6:545:7994":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:14569:4898":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"18:611:6411":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"24:1160:2051":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"1:11364:4869":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:3795:5532":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:8954:6313":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"24:4790:3433":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"17:12660:7215":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"24:3671:3403":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"2:24989:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:6026:5955":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:3148:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:8433:5003":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:7048:5636":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:49604:5448":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:1431:3253":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:3085:4666":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:14835:4811":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:3966:8259":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:10356:4216":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:7119:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:50093:5191":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:5541:8664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:1733:4989":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"11:54:5855":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:7992:5152":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:10617:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"24:6054:3172":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"5:1547:4826":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:4362:8405":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:11666:5439":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:10975:48193":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"24:6382:2126":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"2:3824:5078":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"24:3923:3414":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"2:25022:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:15131:4976":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:9505:4969":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"17:13557:7498":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:6229:8821":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:3948:3306":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:5855:6023":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:12250:7128":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"24:5470:1780":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"1:13689:58094":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:46994:5137":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"24:2502:2410":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"5:1760:5694":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:15758:2997":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"20:305:2051":{"crate_id":20,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"24:3869:3411":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"2:3151:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:9504:3688":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:1558:8066":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"24:4049:1778":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"1:11826:57531":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"2:53795:9056":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:1504:4818":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:10622:6902":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:25490:5340":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:8929:47926":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:10482:205":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"12:399:5871":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:1236:48003":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"22:823:1618":{"crate_id":22,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"6:4509:8467":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"24:3419:3395":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"2:5291:3327":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:3265:6225":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:3462:5099":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:4160:4961":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"24:5946:3165":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"2:49552:5446":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"21:2742:1763":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"6:157:40739":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:5158:4975":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:3655:2251":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"12:750:3249":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:12003:7088":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:7436:4891":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:10660:48142":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:46217:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:51324:5303":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:6504:6040":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:3960:8258":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:47816:3685":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:5566:6013":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:13452:7468":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:32644:61998":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"1:15710:9356":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:3340:6206":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:12298:6661":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"4:0:2957":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:0:2966":{"crate_id":17,"path":["object"],"kind":"module"},"16:6949:6263":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:11291:4858":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:9520:4970":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:6557:6041":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:5176:7669":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:11256:6953":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"24:6353:3194":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"1:4234:4753":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:1418:3249":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"20:528:3983":{"crate_id":20,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"2:47807:3248":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:12892:7239":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:4275:4750":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:2484:48033":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:4373:8413":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:3441:5639":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:7247:5993":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:6027:8726":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"24:3833:2471":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"1:8477:5004":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:9431:6892":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:32592:62000":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"15:248:5887":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:3199:6222":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"24:5710:3128":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"17:12183:7119":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"19:0:996":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:12455:7179":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:10988:48192":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:13321:5192":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:4753:4717":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"2:22832:62266":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"21:107:4617":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"1:14699:6691":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"24:3779:3408":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"17:12746:7227":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:50701:4462":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:48304:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:8344:3285":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:47006:5138":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:3570:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:11273:3677":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:50440:5485":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:12442:7177":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:24318:9235":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:46597:5606":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:6643:8842":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:24410:40098":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:48813:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"24:3214:6435":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"2:2936:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:47968:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:13785:7575":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:51993:5266":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"24:2448:3253":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"1:5432:4779":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"24:5198:3461":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"24:4964:3444":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"2:47858:4471":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:3905:6636":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"24:3887:3412":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"12:559:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"24:4103:225":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"2:8419:3315":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:3521:7641":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:9064:47929":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:10918:4735":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:47273:9258":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"10:0:2960":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"24:661:63936":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"7:85:45607":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:23108:5311":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:11956:7082":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:5388:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:14556:4780":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"24:5873:2251":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"1:10925:4736":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"22:871:1763":{"crate_id":22,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"16:7741:6059":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"9:27:5784":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"16:6286:5884":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:12196:7120":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:25055:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"24:4988:3446":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"21:2655:4615":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"3:0:431":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:14864:9283":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:11786:4896":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"24:5263:3466":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"2:3836:5079":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"24:4686:3426":{"crate_id":24,"path":["syn","token","AddEq"],"kind":"struct"},"6:4315:8381":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:46743:5539":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"18:866:6407":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:13059:5468":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:6205:8813":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:24447:40099":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:8849:6332":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:46914:9252":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"24:5399:3117":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"17:9291:6889":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:10493:1918":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:13917:7613":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:11800:4897":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:1157:12054":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"24:2391:3251":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"16:5427:6008":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:7919:4203":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"1:15071:4700":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"24:6330:3188":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"2:5184:3322":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:13352:7444":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:12620:7212":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"9:157:5752":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"17:11713:7028":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:5443:6009":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:6931:6262":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:14350:4937":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"24:5309:3469":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"2:51424:5304":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:8455:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:11999:4921":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:10540:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"8:0:2958":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:11305:7227":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:49055:9260":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:11133:4979":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"21:3089:1828":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"6:6184:8799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"23:0:3088":{"crate_id":23,"path":["unicode_ident"],"kind":"module"},"17:10318:6357":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:49967:4736":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:4351:7649":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:46357:5328":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:4511:4731":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:12497:4935":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"22:158:54492":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"1:5745:5047":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:11884:4799":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:1041:4205":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"12:777:3248":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:47934:3248":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"21:1315:3362":{"crate_id":21,"path":["proc_macro","bridge","client","Diagnostic"],"kind":"struct"},"2:46536:9244":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:7131:6054":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"24:6001:3168":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"2:50321:5547":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:8602:5165":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"22:931:1827":{"crate_id":22,"path":["proc_macro2","imp","Span"],"kind":"enum"},"24:2383:3249":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"2:7129:5149":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:7042:59699":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:3770:7644":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"24:5157:3458":{"crate_id":24,"path":["syn","token","Rem"],"kind":"struct"},"1:6472:4679":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:48010:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:13463:7472":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"24:5810:2026":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"6:1680:8152":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"22:1050:1826":{"crate_id":22,"path":["proc_macro2","Spacing"],"kind":"enum"},"2:32578:4283":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:24358:5375":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:12687:7219":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:12237:7127":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:51555:5272":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:12543:7192":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:6099:6028":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:6967:8871":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:13992:4749":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:51280:8983":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:47244:9257":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:11212:6336":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"0:1258:1636":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"24:2634:2474":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"2:56601:237":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:12026:7091":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:3793:4911":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"24:5406:185":{"crate_id":24,"path":["syn","attr","Meta","Path"],"kind":"foreign_type"},"24:4865:3438":{"crate_id":24,"path":["syn","token","DivEq"],"kind":"struct"},"2:2248:4503":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:13410:2134":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:6980:6046":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:9625:5189":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:10377:4191":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:13020:5464":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"24:5340:3594":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"17:13180:7403":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:10587:4688":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"24:4067:3418":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"2:46129:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"12:2398:7891":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:900:4215":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:50460:5483":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"24:968:2821":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"17:13016:7342":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"24:3617:3401":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"6:4012:8283":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:50444:5489":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:8847:5010":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:4447:4726":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:3442:5083":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:2179:4781":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:11797:7056":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:3518:5119":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:11937:7077":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:10115:6385":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:23396:4666":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:52122:8996":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:3637:4456":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:32544:4282":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:11354:6308":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:9558:6682":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"1:894:4214":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:9240:6287":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"24:3348:3470":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"1:1017:4203":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"16:5289:5958":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"24:932:64106":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"2:4078:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:50651:5494":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"21:3005:3353":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"1:11439:4873":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:5194:3323":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:4135:8340":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"22:999:1827":{"crate_id":22,"path":["proc_macro2","Span"],"kind":"struct"},"16:3103:6230":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:4008:48115":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:11985:5009":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:2396:5698":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:626:8044":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:11530:6995":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"22:831:3359":{"crate_id":22,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"17:10516:9180":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:10586:48139":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"24:964:3169":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"16:3908:7645":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:4144:5185":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"16:5257:6887":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:23932:4709":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:14798:4835":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"18:729:6785":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:5390:8622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:49294:5621":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:4332:8390":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:14942:4843":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:24791:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:15749:2990":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"24:5766:3141":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"6:4088:8315":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:4208:8356":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"24:3383:3393":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"17:9160:6335":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:12607:7211":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:11725:7029":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:3933:8235":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:15755:2994":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:12731:7226":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:15744:2986":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:46876:5127":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"20:44:4666":{"crate_id":20,"path":["quote","ext","private","Sealed"],"kind":"trait"},"6:5547:8665":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"21:808:3364":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"5:1740:4817":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:10242:6686":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"5:1072:3249":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:1621:8108":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:52225:5306":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:7121:6053":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"22:1100:3248":{"crate_id":22,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"6:3987:8267":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"18:801:6401":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:13312:5189":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"14:189:9540":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"22:959:2472":{"crate_id":22,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"2:3375:4056":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"5:8356:3286":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:161:40740":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"24:5790:3147":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"2:51923:5280":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"9:996:5801":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"24:6130:1973":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"6:4425:8432":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:10048:48004":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"21:200:4646":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"6:1551:8063":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"5:2266:6638":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:50672:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:47943:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:13327:5193":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:10775:48114":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:5117:3316":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:4848:4888":{"crate_id":1,"path":["std","net","ip","display_buffer","IpDisplayBuffer"],"kind":"struct"},"2:39086:1918":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"24:4947:124":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"5:3960:5689":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:5113:2175":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:13840:7591":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:50298:5207":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:4230:8358":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:10253:6286":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:6250:8833":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"24:3599:3400":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"1:10733:4909":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"24:4121:1749":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"2:46905:5130":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:53619:9046":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:672:41071":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:10643:6904":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:15756:2995":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"12:379:5872":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:565:8011":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:46545:5350":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"24:5854:3162":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"17:12758:7230":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:15715:12056":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:53756:9055":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:10382:4200":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:13257:7421":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:7369:5961":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:783:6683":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"12:1183:5866":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:6604:6042":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"24:6407:2453":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"1:8626:59704":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:8926:3681":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"21:3109:3265":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"2:14118:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:6870:61183":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:47016:5139":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:4148:8344":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:13155:7393":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:1475:4576":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:7582:4900":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:28300:5175":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:14426:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:10821:5066":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:11486:5432":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:14027:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"5:3428:4783":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:571:8014":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:10015:47988":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:11246:4661":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:6577:4657":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"9:686:5733":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"24:3263:3249":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"1:7814:4203":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"5:8477:5624":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"24:2132:6431":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"6:1712:8170":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"24:3509:2144":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"16:7415:5980":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:5998:8714":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"24:5996:2442":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"24:6379:2437":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"1:7464:4893":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:10814:6307":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:10530:6941":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"11:0:2961":{"crate_id":11,"path":["adler"],"kind":"module"},"24:658:6783":{"crate_id":24,"path":["syn","expr","parsing","AllowStruct"],"kind":"struct"},"17:10455:6373":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"0:1257:1628":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"1:15726:57416":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:2376:5714":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:5498:6011":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:1645:4825":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"0:0:1641":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"17:607:47924":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:6574:4773":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"12:432:5870":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:6129:8761":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:52349:5298":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:0:2965":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:14975:4851":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:7782:5967":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:11892:3248":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:11423:4871":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:11768:4894":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:3419:6663":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:3243:6224":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"9:41:5785":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:49781:5463":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:11844:9130":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"6:533:7989":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"9:927:45704":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:46656:5475":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"24:5718:3130":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"2:8712:3373":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"24:6412:2141":{"crate_id":24,"path":["syn","path","Binding"],"kind":"struct"},"16:2883:6234":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:24509:5524":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:0:1334":{"crate_id":1,"path":["std"],"kind":"module"},"24:3581:3399":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"19:117:6802":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"2:52091:8995":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:13536:4903":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:12318:7141":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:4411:7651":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"5:1296:5697":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:11379:3253":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"21:0:1039":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"2:2376:3332":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:13094:7386":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:7281:5964":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"24:1274:6446":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"6:4179:8354":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:10147:6899":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:13602:7508":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:12015:7090":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:52303:5294":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"24:6222:3180":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"1:8261:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:601:8031":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"18:790:6400":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:2198:1052":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:3583:3331":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:5605:6014":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:7714:4201":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"24:4911:3441":{"crate_id":24,"path":["syn","token","Dot2"],"kind":"struct"},"17:9920:47938":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:1132:4932":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:3356:217":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:7228:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:14390:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:13302:5190":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"24:5099:3454":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"2:50689:5172":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:3446:3274":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:5288:8560":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"24:5034:3449":{"crate_id":24,"path":["syn","token","MulEq"],"kind":"struct"},"16:5902:6024":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"22:865:1752":{"crate_id":22,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"2:49689:5458":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:820:6683":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"17:2512:6344":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:13784:4894":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:6562:4576":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:13908:7611":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:3814:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:49521:5443":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:4116:8331":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"24:5866:1786":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"2:48346:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:51595:8986":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:6016:8721":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:48887:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:8076:4203":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"24:6005:3167":{"crate_id":24,"path":["syn","generics","PredicateEq"],"kind":"struct"},"6:5178:8508":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:13361:7445":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:2867:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:4866:4453":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"22:877:2472":{"crate_id":22,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"22:0:1616":{"crate_id":22,"path":["proc_macro2"],"kind":"module"},"18:0:2967":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:7754:6060":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"20:0:1069":{"crate_id":20,"path":["quote"],"kind":"module"},"16:3177:6221":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:49917:5469":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"12:162:5869":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:10846:4758":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"24:4877:3439":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"5:8432:5686":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:3420:3467":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:6746:4659":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:2961:4725":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:32940:4285":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:56536:237":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4308:8380":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"24:5731:3133":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"2:23202:4708":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"24:6350:3193":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"17:10503:6375":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:12496:7185":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"5:1518:4825":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:5326:6002":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:49713:4735":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:4048:8297":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"24:4031:2515":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"1:15760:2999":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"18:739:63825":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"24:5133:3456":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"18:829:6404":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:4308:6636":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:10533:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:24476:9238":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:11013:47940":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:580:8020":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:13755:7569":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"24:5722:3131":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"17:10082:6382":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:1500:4817":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:7471:5956":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:11224:8730":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:1748:8186":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"9:722:5736":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"18:651:6410":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:50485:4839":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"24:6126:1971":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"24:4935:3443":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"16:2754:6207":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:4372:3253":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"12:2269:4824":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:6173:6031":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:9381:6679":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"21:344:63866":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"24:3725:3405":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"1:10582:4935":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:6717:6044":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:13440:7467":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:7306:4576":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"24:5017:3448":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"1:10577:4776":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:2554:4931":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:5433:8638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:5910:5626":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"21:2996:1618":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"1:4273:4749":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:24370:5376":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:7402:4889":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"21:2957:3362":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"16:7200:5977":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:1544:8061":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"24:6334:3190":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"16:6643:6252":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:49657:5543":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"24:6094:3178":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"18:169:54255":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:1526:8053":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"24:3491:98":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"16:5887:6203":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"22:623:3264":{"crate_id":22,"path":["proc_macro2","LexError"],"kind":"struct"},"18:744:63822":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:3489:3462":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:5516:6196":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:7868:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:5285:4983":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"24:3707:3404":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"6:5311:8573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:3461:6227":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:10548:3344":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:11003:4698":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"6:4020:8285":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"21:3134:1826":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"5:1751:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"18:678:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:11128:4978":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:10550:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:1462:4814":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:51494:8985":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:48783:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"12:2040:4576":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"21:2445:4612":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"2:3495:3464":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:23357:17287":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:4163:4962":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:3474:4786":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:46312:3323":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"17:13247:7420":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"24:3563:115":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"6:4067:8305":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:4573:7655":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:14927:4842":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"24:3959:3323":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"2:25121:5511":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:46298:2544":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:14338:9282":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"16:5745:6021":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:47026:5145":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"24:5174:3459":{"crate_id":24,"path":["syn","token","RemEq"],"kind":"struct"},"1:10728:4908":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"24:4157:1800":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"16:6482:6248":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:22870:62294":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"24:454:63937":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"1:8197:5688":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"17:11922:7072":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:9254:9548":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:5348:6003":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:1567:8071":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"22:1005:1828":{"crate_id":22,"path":["proc_macro2","TokenTree"],"kind":"enum"},"24:5757:3139":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"2:47849:3686":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:10688:61674":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"24:4193:3421":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"2:24210:5508":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:7238:5979":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"12:114:63784":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:6224:4657":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:50005:5474":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:56575:237":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"24:5846:3160":{"crate_id":24,"path":["syn","expr","ExprType"],"kind":"struct"},"6:5293:8561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:1588:8086":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"24:5818:3153":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"24:6009:1839":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"2:53505:5282":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"24:5467:3122":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"1:13673:4893":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"6:6688:8854":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:4416:8429":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:10634:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"18:774:6806":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:24497:5525":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:12209:7122":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:13660:7550":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:1533:4822":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:46587:5605":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:7579:4899":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:3890:4455":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"24:5753:3138":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"1:10853:4759":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:11166:4666":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:5582:4683":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"18:136:54253":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:527:7986":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:12957:7290":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:9183:6311":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"21:251:4326":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"16:3743:7643":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:11282:47943":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:11898:4802":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:1149:12051":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:8209:3248":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:15747:2988":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"12:2280:4825":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"}},"external_crates":{"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"23":{"name":"unicode_ident","html_root_url":null},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.21/"},"22":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.43/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/1.0.99/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":18}