{"root":"0:0:2436","crate_version":"1.0.204","includes_private":false,"index":{"2:13742":{"id":"2:13742","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13743:1024","2:13744:2781","2:13745:36111","2:13746:36112","2:13748:36113","2:13751:3542","2:13752:36114","2:13753:350","2:13754:30290","2:13755:2672","2:13757:30287","2:13759:30288","2:13761:30289","2:13763:36115","2:13764:36116","2:13765:3430","2:13766:30312","2:13767:30315","2:13768:30316","2:13770:3024","2:13771:3018","2:13772:9589","2:13773:35085","2:13774:35086","2:13775:33093","2:13776:36117","2:13777:35087","2:13778:2883","2:13781:30329","2:13784:30330","2:13787:3332","2:13791:5191","2:13795:30317","2:13798:30319","2:13801:30321","2:13804:36118","2:13807:36119","2:13810:30323","2:13813:30325","2:13816:30327","2:13819:30328","2:13822:2777","2:13825:36120","2:13828:36121","2:13831:36122","2:13834:36123","2:13836:36124","2:13838:36125","2:13840:36126","2:13841:36127","2:13842:36128","2:13845:2690","2:13848:29925","2:13851:30331","2:13854:36129","2:13857:36130","2:13860:36131","2:13863:2652","2:13865:30183","2:13866:30184","2:13867:30186","2:13868:30187","2:13869:30188","2:13870:30190","2:13871:30191","2:13872:30192","2:13873:36132","2:13875:11237","2:13876:36133"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:493-0:404:2564":{"id":"0:493-0:404:2564","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[14,0],"end":[14,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:404:2564","glob":false}}},"2:13752:36114":{"id":"2:13752:36114","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13795:30317":{"id":"2:13795:30317","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13437:4427","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12478:490","str::split_whitespace":"2:13773:35085","str::rsplit":"2:13801:30321"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44572:9600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13768:30316":{"id":"2:13768:30316","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13767:30315"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5717:36828":{"id":"5:5717:36828","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13743:1024":{"id":"2:13743:1024","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12478:490"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5701":{"id":"5:5701","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5702:36825","5:5703:2811","5:5706:36826","5:5709:36827","5:5717:36828","5:5718:36829","5:5719:4080","5:5720:3015","5:5721:3014"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:8:2556":{"id":"0:8:2556","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[216,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:13845:2690":{"id":"2:13845:2690","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:4427"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13828:36121":{"id":"2:13828:36121","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13437:4427","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12478:490","str::rmatch_indices":"2:13831:36122"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44722:9683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13775:33093":{"id":"2:13775:33093","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44826:9688","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13840:36126":{"id":"2:13840:36126","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13804:36118":{"id":"2:13804:36118","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13437:4427","str::split":"2:13795:30317","prim@char":"1:12478:490","`DoubleEndedIterator`":"2:8393:133","str::rsplit_terminator":"2:13807:36119"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44622:9677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13838:36125":{"id":"2:13838:36125","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13766:30312":{"id":"2:13766:30312","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:13765:3430","str::split_at_mut_checked":"2:13768:30316"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13831:36122":{"id":"2:13831:36122","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13437:4427","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12478:490","str::match_indices":"2:13828:36121"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44740:9684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:16700","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5719:4080":{"id":"5:5719:4080","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1023:2660":{"id":"0:1023:2660","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"2:13813:30325":{"id":"2:13813:30325","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12478:490","str::splitn":"2:13810:30323","self::pattern":"2:13437:4427"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44694:9681","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:16700","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13872:30192":{"id":"2:13872:30192","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1151:41080"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13746:36112":{"id":"2:13746:36112","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13875:11237":{"id":"2:13875:11237","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5060:11237"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44880:9627","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13868:30187":{"id":"2:13868:30187","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13764:36116":{"id":"2:13764:36116","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12484:1765","crate::ops::IndexMut":"2:3621:4023","str::slice_unchecked":"2:13763:36115"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13834:36123":{"id":"2:13834:36123","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13754:30290":{"id":"2:13754:30290","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12497:1896"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13807:36119":{"id":"2:13807:36119","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13437:4427","str::split":"2:13795:30317","prim@char":"1:12478:490","str::split_terminator":"2:13804:36118"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44640:9678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:16700","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:964:2425":{"id":"0:964:2425","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[89,0],"end":[94,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:13798:30319":{"id":"2:13798:30319","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:4427"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13227:9602","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13848:29925":{"id":"2:13848:29925","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:4427"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13773:35085":{"id":"2:13773:35085","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13774:35086"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44846:9690","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13860:36131":{"id":"2:13860:36131","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:4427"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:16700","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13784:30330":{"id":"2:13784:30330","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:4427"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:16700","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13836:36124":{"id":"2:13836:36124","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13867:30186":{"id":"2:13867:30186","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13854:36129":{"id":"2:13854:36129","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:4427"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:16700","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13745:36111":{"id":"2:13745:36111","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13801:30321":{"id":"2:13801:30321","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13437:4427","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12478:490","str::split":"2:13795:30317"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44590:9603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:16700","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13753:350":{"id":"2:13753:350","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13754:30290","`u8`":"1:12497:1896"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13876:36133":{"id":"2:13876:36133","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5057:36133"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44889:9632","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5720:3015":{"id":"5:5720:3015","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13868:30187"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492-0:1019:2563":{"id":"0:492-0:1019:2563","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1019:2563","glob":false}}},"2:13816:30327":{"id":"2:13816:30327","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5702:36825":{"id":"5:5702:36825","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2627","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:2627","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13744:2781":{"id":"2:13744:2781","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13751:3542":{"id":"2:13751:3542","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12960:16702"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13774:35086":{"id":"2:13774:35086","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13773:35085"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44855:9691","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:408":{"id":"0:63:408","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1881,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:86-0:994:2657"],"is_stripped":false}}},"2:13755:2672":{"id":"2:13755:2672","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42582:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2436":{"id":"0:0:2436","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[102,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2021\n# use serde_derive::{Deserialize, Serialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.204\")]","#![allow(unexpected_cfgs)]","#![allow(clippy::branches_sharing_code, clippy::cognitive_complexity,\nclippy::collapsible_match, clippy::derive_partial_eq_without_eq,\nclippy::enum_variant_names, clippy::manual_map,\nclippy::match_like_matches_macro, clippy::needless_pass_by_value,\nclippy::too_many_arguments, clippy::trivially_copy_pass_by_ref,\nclippy::used_underscore_binding, clippy::wildcard_in_or_patterns,\nclippy::unnested_or_patterns,)]","#![allow(clippy::cast_possible_truncation, clippy::checked_conversions,\nclippy::doc_markdown, clippy::enum_glob_use, clippy::indexing_slicing,\nclippy::items_after_statements, clippy::let_underscore_untyped,\nclippy::manual_assert, clippy::map_err_ignore, clippy::match_same_arms,\nclippy::match_wildcard_for_single_variants, clippy::module_name_repetitions,\nclippy::must_use_candidate, clippy::similar_names, clippy::single_match_else,\nclippy::struct_excessive_bools, clippy::too_many_lines,\nclippy::unseparated_literal_suffix, clippy::unused_self, clippy::use_self,\nclippy::wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:964:2425","0:965:2433"],"is_stripped":false}}},"2:13772:9589":{"id":"2:13772:9589","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44558:3552","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13777:35087":{"id":"2:13777:35087","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44864:9692","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13810:30323":{"id":"2:13810:30323","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:4427","str::rsplitn":"2:13813:30325"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44676:9680","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13842:36128":{"id":"2:13842:36128","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:4427"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13463:16698","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13851:30331":{"id":"2:13851:30331","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:4427"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:16700","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13871:30191":{"id":"2:13871:30191","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1151:41080"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5721:3014":{"id":"5:5721:3014","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13869:30188"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13787:3332":{"id":"2:13787:3332","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42582:202","prim@char":"1:12478:490","self::pattern":"2:13437:4427"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13863:2652":{"id":"2:13863:2652","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13398:148","`FromStr`":"2:13397:4035"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42845:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13397:4035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13397:4035","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13866:30184":{"id":"2:13866:30184","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40484:5182","Self::is_ascii":"2:13865:30183"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40484:5182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13748:36113":{"id":"2:13748:36113","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:13746:36112"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13757:30287":{"id":"2:13757:30287","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42582:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13763:36115":{"id":"2:13763:36115","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12484:1765","str::slice_mut_unchecked":"2:13764:36116","crate::ops::Index":"2:40131:3187"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13759:30288":{"id":"2:13759:30288","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13841:36127":{"id":"2:13841:36127","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13761:30289":{"id":"2:13761:30289","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13765:3430":{"id":"2:13765:3430","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:13767:30315","str::split_at_mut":"2:13766:30312"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13825:36120":{"id":"2:13825:36120","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13437:4427","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12478:490","str::matches":"2:13822:2777"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44794:9687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:16700","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13822:2777":{"id":"2:13822:2777","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13437:4427","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12478:490","str::rmatches":"2:13825:36120"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44776:9686","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5706:36826":{"id":"5:5706:36826","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13873:36132":{"id":"2:13873:36132","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5059:36132"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44871:9633","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13771:3018":{"id":"2:13771:3018","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12478:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44548:9672","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13778:2883":{"id":"2:13778:2883","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:4427"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:965:2433":{"id":"0:965:2433","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[97,0],"end":[102,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"0:86-0:994:2657":{"id":"0:86-0:994:2657","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[21,0],"end":[21,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::internals::case::RenameRule","name":"RenameRule","id":"0:994:2657","glob":false}}},"2:13870:30190":{"id":"2:13870:30190","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1151:41080"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13819:30328":{"id":"2:13819:30328","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:16700","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13781:30329":{"id":"2:13781:30329","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:4427"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13869:30188":{"id":"2:13869:30188","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5709:36827":{"id":"5:5709:36827","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13767:30315":{"id":"2:13767:30315","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13768:30316"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13776:36117":{"id":"2:13776:36117","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44836:9689","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5703:2811":{"id":"5:5703:2811","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5718:36829":{"id":"5:5718:36829","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:2627","`String`":"5:7759:256"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2627","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13857:36130":{"id":"2:13857:36130","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:4427"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13865:30183":{"id":"2:13865:30183","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13791:5191":{"id":"2:13791:5191","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42582:202","prim@char":"1:12478:490","self::pattern":"2:13437:4427"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:16700","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13770:3024":{"id":"2:13770:3024","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12478:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44542:9671","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"24:5827:3227":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"2:44694:9681":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:1848:719":{"crate_id":1,"path":["std","env"],"kind":"module"},"24:3494:4278":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"17:14219:6548":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"24:4538:4311":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"2:22252:11539":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:3080:4278":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"24:5536:3238":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"1:632:11236":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"24:3069:4262":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"2:45280:9718":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:43966:9666":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:8725:4766":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:10609:4163":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:10566:32799":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:6484:5994":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:22360:11331":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:11976:11385":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:2548:7240":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:13817:6475":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:7534:5917":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"11:1892:9567":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:42695:5614":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"11:859:11255":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"11:1866:5691":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:7833:10704":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"2:10926:9598":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:2358:9577":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"11:686:10808":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"24:3205:4265":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"1:11033:29920":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:34457:6121":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"24:5562:3233":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"24:5264:3945":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"17:12885:9396":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:906:11389":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:3957:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:2805:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:46789:9040":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:11015:24141":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:2829:5165":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"2:34976:4328":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:41319:9642":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"20:719:4029":{"crate_id":20,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"1:12461:29927":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:1587:11250":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"24:1948:2416":{"crate_id":24,"path":["syn","parse_macro_input"],"kind":"macro"},"1:2490:11318":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:5325:8114":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:12523:24258":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:12582:6370":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:2246:5464":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:10331:24132":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:47573:9115":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:16019:7005":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:5196:7310":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:2157:1393":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:8025:5477":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:7539:9533":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:14089:4112":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"2:40932:9629":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"24:4374:4300":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"2:13173:9682":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:16574:6465":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:955:10808":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:13920:6491":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:6366:9442":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:12484:1765":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:24147:247":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:6578:8405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:4902:7951":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"24:5515:3133":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"5:3074:37655":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"24:4555:4312":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"24:5290:3949":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"24:5981:3989":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"1:1104:11257":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"24:1805:4022":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"17:16378:7121":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"24:3681:266":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"1:1629:9565":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:7735:9590":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:14042:6512":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:7575:9231":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:7740:4105":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:3867:131":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:7422:6007":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"11:2519:7575":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:34111:6133":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"21:2243:2567":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"2:44889:9632":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:41404:4117":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:40051:16724":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:3419:5593":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"16:2618:7243":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:4405:5930":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"24:5251:3943":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"5:1362:9534":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:155:5895":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:9187:11509":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:4771:11456":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:8478:4074":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:6729:10767":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:6873:7339":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:41779:9649":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:44159:8992":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"1:12504:1456":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:22775:11331":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:11113:24143":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:9299:118":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:5800:8483":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:11057:11483":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:4216:11411":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:10783:37762":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"24:5286:3948":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"2:10669:3180":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"23:407:4982":{"crate_id":23,"path":["quote","__private","RepInterp"],"kind":"struct"},"6:8284:8701":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"21:0:1380":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"20:723:2646":{"crate_id":20,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"17:11957:24199":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:10938:11462":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"24:4741:4325":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"1:3531:4081":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:2472:5616":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"5:7679:5481":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:471:24121":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:6651:8435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:8260:8697":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:47804:9126":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"24:5399:3964":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"17:14437:6607":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:4932:11421":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"24:4282:4294":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"2:22370:11537":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:578:7725":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"5:1547:4010":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"20:732:2567":{"crate_id":20,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"1:1922:5757":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"24:3239:4267":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"24:6013:3997":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"5:7708:16827":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:3416:5592":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:6877:10818":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"24:3358:4272":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"2:2682:5628":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"24:3154:119":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"16:7041:7269":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:41333:4112":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"18:643:6162":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:7326:8553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:8326:8712":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:15:3405":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:8195:11326":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:6864:24059":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:5387:8134":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:12224:9382":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:44776:9686":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:2436:24221":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:12786:6374":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:44622:9677":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:12536:24257":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:41015:16743":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"16:7977:7276":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:4465:279":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:41281:4108":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:23531:11331":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"6:5295:8102":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"9:380:23036":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:15682:6918":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:5142:7308":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:11351:5975":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"2:45486:175":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:9201:9226":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:13360:6412":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:7156:9502":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:11951:10764":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"24:5868:2960":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"2:47019:9052":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:6026:7262":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:15932:6986":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:7165:7364":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:4767:4170":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:46597:9021":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:7890:2660":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:12007:6154":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"11:102:9556":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:15105:6724":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:38728:6138":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"24:4758:4326":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"2:45500:238":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:8500:7481":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"24:53:2655":{"crate_id":24,"path":["syn","token"],"kind":"module"},"2:42374:11381":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:10302:35661":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:22193:11540":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:15990:6998":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:8278:4147":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:11025:29923":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:46576:9016":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:10116:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:4557:5932":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:8118:221":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:6387:24052":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:46497:9009":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:4816:7895":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:2433:23188":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:8895:9743":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:22150:35886":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"24:5367:3959":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"17:14083:6524":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:12051:16694":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"24:3256:2592":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"1:3305:33976":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:5096:11457":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"24:6029:4001":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"21:2665:2646":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"6:5568:8227":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:7835:24066":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:7518:9532":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:1113:10682":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:16619:7184":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"6:7344:8562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"14:219:7565":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"21:212:10763":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"2:40902:9628":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:12698:24324":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:3194:11294":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"24:5824:214":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"5:7060:5695":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:8815:4091":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"5:2256:9570":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"24:3596:4282":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"2:46821:9042":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:15889:6972":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"24:3766:4286":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"17:15159:6735":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:15120:6728":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:16661:7195":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"21:2559:129":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"5:7604:4010":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:8040:37689":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:15912:6980":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:3299:33464":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:2804:8717":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:5304:24343":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:46952:9049":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:5105:11458":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"16:4182:7292":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:13463:16698":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:5130:16737":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:1378:11257":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:10777:24139":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"5:7747:5939":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"6:523:7695":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"24:5354:3957":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"20:933:2645":{"crate_id":20,"path":["proc_macro2","Spacing"],"kind":"enum"},"1:11041:11461":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"1:8661:8562":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:11705:24192":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:3351:5159":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"11:1703:167":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"24:257:10674":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"2:8809:4090":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"21:2568:9339":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"6:7539:8652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:11936:11386":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:3058:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:11756:24194":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"16:7355:7271":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:45549:9003":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:3569:4057":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"17:16592:6475":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"6:8231:8690":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:8393:133":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:689:11241":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"24:5635:3978":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"17:12027:24246":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:44992:9699":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:12495:930":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:42673:4151":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:42616:4015":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"24:5639:3972":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"6:570:7720":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:3073:2820":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:5732:11483":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:3357:5161":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"24:5481:3243":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"17:12775:24326":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:5652:8268":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:45562:35248":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"6:8304:8706":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:14795:6675":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"19:0:1323":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"6:6756:8469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"21:126:5893":{"crate_id":21,"path":["proc_macro","bridge","client","state","set","RestoreOnDrop"],"kind":"struct"},"1:890:4015":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:41342:4113":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:1641:9567":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:9158:9224":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:45152:9706":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:2909:213":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:13837:6476":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:7185:278":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:15474:6881":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:8716:4767":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"24:5403:3965":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"16:6571:9472":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"20:927:2971":{"crate_id":20,"path":["proc_macro2","Punct"],"kind":"struct"},"5:3076:8716":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:5529:8208":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:15049:6717":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:23499:9620":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:10679:4165":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:13054:6313":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"6:8249:8693":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"24:1003:11331":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"17:12748:24300":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"24:3392:4274":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"2:42508:9657":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:4140:11405":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"11:389:5901":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:22121:5178":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:10596:6295":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"24:638:237":{"crate_id":24,"path":["syn","error","Result"],"kind":"type_alias"},"17:12148:9376":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:10957:9747":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:2075:209":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:12175:9378":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:42320:181":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:5441:8166":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"11:427:37672":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:5341:8118":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"24:5010:3927":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"5:1407:10682":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:12121:9374":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:42901:4010":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:5381:8131":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:4119:5691":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:5951:264":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:5623:8257":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:44501:16690":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:4353:11434":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:6802:8485":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:16249:7089":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"11:1001:11256":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"18:623:37768":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"18:659:28402":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:14831:6680":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:3256:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:7997:7277":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:12568:16686":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:8828:11474":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:13227:9602":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:8004:11331":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"24:5542:3637":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"1:8243:130":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:2377:24233":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:1667:7849":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:44389:9605":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:5117:8037":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:45312:9726":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:47129:9072":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:41569:4120":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:47241:9076":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:6946:244":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:23689:8753":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"2:45300:9723":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:6702:8454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"17:11984:24244":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:11290:37751":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"24:5995:3991":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"17:5130:24338":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"24:5578:2656":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"2:10886:168":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"5:4480:5932":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:3919:5689":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:6841:9480":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"24:1106:3636":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"11:663:4015":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:5612:11479":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:5405:8145":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"24:3443:3262":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"2:11208:5973":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"1:11834:9759":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:1393:11256":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:43927:9664":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:921:9564":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:12248:24288":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:6300:9434":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:44329:35251":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"24:4497:4308":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"17:15660:6916":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:3012:23189":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"23:46:4041":{"crate_id":23,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"6:6858:8497":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:16172:7066":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"24:5888:3986":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"1:8632:11384":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:44418:16687":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:3488:11357":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:23082:11331":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"11:2115:11256":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:9601:16699":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:380:5488":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:15746:6938":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:6157:9417":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:1703:7863":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"24:5320:3954":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"24:4328:4297":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"16:7966:9539":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:15694:6921":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:7806:35496":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:34803:6120":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:6902:5906":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:42752:9660":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"24:3664:4284":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"11:2099:9534":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:45599:9730":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:12839:9390":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:545:7707":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:6967:7264":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:13452:9354":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"24:138:2573":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"17:2226:24205":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"21:2723:2971":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"2:4613:4185":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:11154:6015":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:46768:9039":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:31199:5167":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:2872:146":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"5:3326:9565":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:3297:37406":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:12034:9568":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:3680:193":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:11133:6013":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:14000:6507":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:7512:9581":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:15770:6942":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:8011:7278":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:41395:4116":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:15638:6911":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:32795:35241":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"4:0:3762":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:10987:9160":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:23379:35013":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:7576:221":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:43082:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:13732:6448":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:3153:149":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:13591:6425":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:14030:6511":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:8618:11437":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:13305:6410":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:8542:3552":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:11357:24159":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:11804:24204":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"24:5510:3966":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"1:4332:11432":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:44172:9668":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:2298:200":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:4896:7948":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"24:85:11331":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"24:642:9301":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"2:44871:9633":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:12450:11245":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:8243:8692":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:8266:8698":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:15556:6893":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:40992:9632":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:3142:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"21:363:4861":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"2:41116:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:2878:7255":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:41241:4097":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:40163:221":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:1081:9534":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:2640:11362":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"7:78:23029":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:6711:2609":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:23129:11617":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"24:5627:3974":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"2:38893:6140":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:12606:5639":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"24:4835:4332":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"17:16077:7047":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:12982:24329":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:14482:6613":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"20:781:28410":{"crate_id":20,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"17:10166:24127":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"23:35:11331":{"crate_id":23,"path":["quote","ext","private","Sealed"],"kind":"trait"},"2:47528:9114":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:6736:37719":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:7728:4772":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:3887:6195":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:12850:9394":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"0:965:2434":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"16:5253:7312":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:2858:7254":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"9:0:3764":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:45288:9720":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:8190:5766":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:16611:7183":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:9245:11506":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"11:787:5689":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:6792:9477":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"2:23209:9610":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:11464:9362":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"1:12503:1958":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:7302:7376":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:4806:11408":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:14974:6702":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:7984:8674":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:9452:6005":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"23:322:3266":{"crate_id":23,"path":["quote","spanned","Spanned"],"kind":"trait"},"20:908:4031":{"crate_id":20,"path":["proc_macro2","Delimiter"],"kind":"enum"},"1:11004:9238":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"16:5647:7319":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:14151:6544":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:10962:9749":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"6:6679:8445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:9447:6004":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"6:5420:8151":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:497:7675":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:7233:5957":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:2120:693":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"24:4444:146":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"6:5019:8009":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:41372:4101":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"5:979:5914":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:11431:24162":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"13:0:3761":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:2323:5633":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:5370:11373":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:8314:157":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:1675:7850":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:0:582":{"crate_id":2,"path":["core"],"kind":"module"},"16:7209:9503":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:13691:6439":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:8055:24068":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:11433:2948":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:42804:225":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"24:3562:4178":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"24:2611:11331":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"17:15924:6983":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:4893:11438":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:14404:6599":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:10140:24126":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:34630:5098":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:1494:7735":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"23:239:5097":{"crate_id":23,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"16:7904:7429":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"24:3307:152":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"24:5303:3951":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"17:14611:6630":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:14519:6617":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:8317:24072":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:1624:5689":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:41385:4115":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:31205:5550":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"24:6026:4000":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"17:16645:7190":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"2:40293:16791":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"7:0:1948":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:9768:130":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:15409:6840":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"5:720:10683":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:13397:6413":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"24:3188:126":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"2:23486:8741":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:7562:8664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:7741:4106":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:47868:9136":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:439:196":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:10842:6302":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:11787:24215":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"24:5463:3130":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"24:3222:4266":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"24:3426:2962":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"17:11526:24178":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"21:918:265":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"6:4921:7964":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:1489:7733":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:10997:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"24:1362:9302":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"2:9488:4773":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:7391:6006":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:12065:6330":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:14820:6679":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"24:987:4134":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"20:948:2579":{"crate_id":20,"path":["proc_macro2","Ident"],"kind":"struct"},"2:43738:149":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"24:4852:4333":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"2:5318:35750":{"crate_id":2,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"17:12722:24302":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"11:2297:11256":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"24:4408:4302":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"2:40185:223":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"24:5358:3937":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"1:9442:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:6419:9406":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:10447:4156":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:3070:271":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"24:5625:2785":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"2:23393:8728":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"24:1938:4146":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"17:12761:24299":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:12318:24270":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:2044:5930":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:16727:7212":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"6:7494:8630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:5469:214":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:13546:10766":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"15:288:23143":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:45063:9703":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"20:834:2579":{"crate_id":20,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"24:5440:63":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"17:14532:6341":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"20:982:4010":{"crate_id":20,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"1:4560:11429":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:7612:4010":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:42712:9659":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"2:41147:9638":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:553:7712":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:15880:6969":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:26547:281":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:3302:33977":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:40243:227":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:6040:7265":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:22165:35892":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:44855:9691":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:12686:24323":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:7308:8546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"21:2614:4194":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"5:7495:5601":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"5:7524:5691":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:3830:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:8525:9546":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:7880:7428":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:10665:132":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:1684:7856":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:992:11255":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:6638:24055":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"17:13756:6462":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:2500:11323":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:15845:6958":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:1777:5906":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:44380:9604":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:6747:7332":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:2666:694":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:2285:9572":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:7544:9582":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:9128:11485":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:47764:9122":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:42560:8971":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:4110:11403":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"11:1118:23115":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:5521:8203":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:10677:4164":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:3108:7283":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:42599:184":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:10660:122":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:11578:24171":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:13514:24151":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:2318:150":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"21:589:4197":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"6:5494:8195":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"17:16138:7054":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"24:5387:3962":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"17:13932:6492":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:5288:8100":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:11901:6326":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:5539:8214":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:5107:8036":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:16633:7188":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:46664:9025":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:1589:7790":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:5346:7315":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"24:4461:4305":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"5:3292:9566":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:11538:6313":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:11172:37754":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:42770:9661":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"16:6171:9420":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:3832:7289":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"24:1828:4137":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"1:10781:11370":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"6:5241:8074":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"11:1579:23118":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:11848:10513":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"24:3630:3311":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"2:2225:5616":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"1:4212:11410":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:10307:10811":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:4897:4180":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:5170:7309":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:1608:10809":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"14:201:3011":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:41217:11327":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"6:7292:8534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:1613:4011":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"11:292:9557":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:13144:24333":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:10802:3552":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"11:481:165":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:6335:9436":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:13889:6487":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:13040:24334":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:15285:6737":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:22244:11331":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"24:4695:4322":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"2:14360:5976":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:5539:132":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:22673:35893":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:1539:7757":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:11280:24145":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"18:113:28392":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:46643:9024":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"24:6032:68":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"17:10441:24136":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:46544:9014":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"20:687:4033":{"crate_id":20,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"17:10976:37757":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:47819:9127":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:12501:1872":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"11:718:10809":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:1951:3129":{"crate_id":2,"path":["core","mem"],"kind":"module"},"17:10822:6301":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:14472:5600":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"5:3352:2616":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:8162:7270":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:41169:5965":{"crate_id":2,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"2:14417:163":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"21:2276:2971":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"2:45573:11627":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"21:180:5333":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"16:8102:7434":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:45162:9710":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:1531:4015":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"24:645:6113":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"5:5506:5906":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"18:608:37772":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"20:953:3263":{"crate_id":20,"path":["proc_macro2","Literal"],"kind":"struct"},"1:5276:32606":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:43193:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:5755:7321":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:8207:9160":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:16001:7002":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:6744:8467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"1:944:5689":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"11:1871:5689":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:8657:11461":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"24:1923:4133":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"2:22868:11622":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"24:5243:3941":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"18:726:6184":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:2787:11363":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:4009:11387":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:5205:8056":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:6705:11499":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:4929:7966":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:11808:9756":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"24:4253:4292":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"2:2419:5597":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"5:2338:37506":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:16191:7072":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:4692:7296":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"24:3460:4276":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"2:44826:9688":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"24:2101:11113":{"crate_id":24,"path":["syn","path","printing","span","QSelfDelimiters"],"kind":"struct"},"2:41291:145":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:42486:35014":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:11089:9225":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:9414:5998":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"24:4954:3911":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"2:13668:122":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:5217:8063":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:22139:35884":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"24:2467:4017":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"21:2610:4029":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"6:6422:8320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:42704:5482":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:13113:9674":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:11982:16692":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"24:3103:2627":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"2:13509:16707":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"24:4960:2778":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"6:5255:8080":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:40896:9627":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:8480:3912":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:3318:9567":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"24:4584:4314":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"1:11346:173":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:14054:6513":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"5:1479:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:14626:6633":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"11:776:5691":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:3442:5689":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"24:3001:4258":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"17:12162:9377":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"11:1542:23116":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:23590:8744":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"2:45175:9714":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:10533:6292":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:3802:16725":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:13204:24147":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:6137:5938":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:6741:6001":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:7006:5714":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:43045:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"18:507:6162":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:8543:9549":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:23510:11402":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:11274:9224":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:5555:16677":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"24:6039:3988":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"1:5646:11481":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:15707:6927":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:3389:4055":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:16290:7103":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:46903:9046":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:41808:4081":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:9353:9231":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:16341:7114":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:12081:9370":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:2682:7246":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:45292:9721":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:282:5906":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"23:38:3641":{"crate_id":23,"path":["quote","format_ident"],"kind":"macro"},"6:8225:8689":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:10549:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"24:4724:4324":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"2:4762:4169":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:473:7664":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:10695:6298":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:6505:8355":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"14:213:9554":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:3907:11385":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:47784:9124":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"24:4770:4327":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"24:2460:4015":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"16:2818:7252":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:44481:16691":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:11814:11488":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:11514:24184":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:4937:7968":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:6891:6002":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"16:6237:7324":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:12305:9383":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"2:44846:9690":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:10273:24130":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"24:5897:3985":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"21:2748:3263":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"6:5428:8156":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:3404:6142":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:10367:24133":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:47726:9120":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"24:2320:4008":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"17:13870:6482":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"24:3868:282":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"2:3311:120":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:15495:6886":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:13982:6499":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"24:5878:3983":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"11:2275:9534":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:4820:8577":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:4644:4186":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:10792:6186":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"17:14858:6683":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:11616:24144":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:44722:9683":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"24:5346:3936":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"24:1855:3588":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"2:2903:206":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:5307:32606":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"24:5371:3938":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"17:14298:6582":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"6:6687:8449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"2:44558:3552":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"24:3715:2562":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"24:5417:3940":{"crate_id":24,"path":["syn","expr","FieldValue"],"kind":"struct"},"2:40131:3187":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:32788:3341":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:11789:9600":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:908:9563":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"24:5629:3975":{"crate_id":24,"path":["syn","lit","LitCStr"],"kind":"struct"},"16:8206:7268":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:8525:4107":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"24:4893:4336":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"17:11629:6315":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:4149:5906":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:4869:7938":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:3438:11366":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"11:2206:9568":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"24:4936:2910":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"2:4841:4178":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"5:1117:5906":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:507:5979":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:1338:24179":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"11:2440:5689":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:15829:6956":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:5617:8254":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:22152:35889":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:15023:6715":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:5119:11459":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"24:4787:4328":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"2:38783:6139":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"12:0:3767":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"11:649:4011":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:43644:8976":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:23039:11626":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"20:792:265":{"crate_id":20,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"24:5558:3968":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"18:573:6162":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:2012:810":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"24:5383:3961":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"14:40:2579":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:10671:4166":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"24:5311:3933":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"2:3592:154":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:44590:9603":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"24:5422:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"6:5165:8041":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"11:1858:4011":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:4808:7298":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:8708:7487":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:13426:6414":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"18:754:9361":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:12408:24294":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"24:3018:4259":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"1:12482:349":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:8535:4120":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:5351:452":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:7515:8644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"23:11:4040":{"crate_id":23,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"16:8025:7430":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"11:1042:23113":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:2638:7244":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"24:5637:3977":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"6:517:7692":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:5196:8051":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:13944:6495":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:465:2568":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:10409:32608":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"6:5319:8113":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:12346:24292":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"5:7772:9591":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:16691:7203":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:46806:9041":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"24:5379:3960":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"16:6678:24056":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"24:3273:4268":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"17:13321:24150":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:2513:11325":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"17:16716:7211":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:11328:9241":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"3:234:237":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:44408:9606":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:5707:24048":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:4764:7297":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:7584:9583":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:13443:16699":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:46529:9013":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"24:1295:2656":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"2:41363:4114":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:23437:34470":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:43713:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:1242:35975":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:34245:6135":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"18:635:6180":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:1530:7751":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:12500:1890":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:14772:6674":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:8633:24075":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:8561:11384":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:2484:7237":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"24:5324:2919":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"2:41802:4079":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:3561:5930":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:47002:9051":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"11:344:37665":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:10096:24124":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"24:1070:38092":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"17:0:3771":{"crate_id":17,"path":["object"],"kind":"module"},"11:813:11251":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"23:514:3264":{"crate_id":23,"path":["quote","quote_spanned"],"kind":"macro"},"16:6606:217":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:22912:11623":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:386:5489":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:12264:6023":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:7580:8667":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:5585:8234":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:7524:8647":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:16180:7067":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:3796:16726":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"24:4978:3913":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"5:7782:10684":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"24:3086:4263":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"2:13150:9679":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:6806:4124":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:5377:7316":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:47191:9074":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:601:5472":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:11944:9603":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"24:2399:4013":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"24:5334:3956":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"2:23000:35172":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"17:16029:7010":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:9260:11508":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"24:3120:105":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"2:47146:9073":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:7962:8673":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"24:4654:4319":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"16:7189:24061":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"9:470:23034":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:883:5909":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:8294:8705":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:906:37717":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"5:1597:10808":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"24:5391:3939":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"1:1646:2616":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"24:4596:4315":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"18:706:9354":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:23002:5627":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:8572:11380":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:8806:161":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:5412:1004":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:41579:4121":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:4511:5930":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:12797:24327":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:15009:6714":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:8562:9552":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"24:3528:4280":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"1:9305:5469":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:14806:6677":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:6452:8330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"11:1136:10682":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:6887:7263":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"20:738:2579":{"crate_id":20,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"2:31578:207":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:7492:9527":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:47353:9080":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"24:1062:38090":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"1:11049:10690":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:10295:24131":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:13797:6465":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:321:37717":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:4154:11406":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:6116:5930":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"8:0:3763":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:7635:3390":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:7554:37401":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"18:613:37774":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:31167:5549":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:2224:5643":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:6429:10817":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:45019:9702":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:23368:9615":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:41095:9636":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"17:16276:7096":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:44977:9693":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:9451:4861":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"6:6727:8459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:14181:216":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:1632:7824":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:5482:8192":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:3580:3127":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:10608:237":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:12940:6384":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:22129:35884":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"5:1516:4011":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:5230:8067":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:36852:4330":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"9:435:23035":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:3309:276":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:3589:153":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:11221:24144":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:44518:8995":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:1551:7766":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:41817:4083":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:8278:8700":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:5357:8120":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:7328:10700":{"crate_id":1,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"1:9460:173":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:8884:9222":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"20:878:265":{"crate_id":20,"path":["proc_macro2","TokenStream"],"kind":"struct"},"5:6263:5930":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:8582:24073":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:11499:7638":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:16738:7213":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:12624:6371":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:2474:11314":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"24:5727:3980":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"20:116:37789":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"1:8005:5490":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:42674:4150":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:23315:8723":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:15822:6955":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:9179:4011":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:4914:7960":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:1569:7776":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:42971:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:2815:5164":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"2:22777:11538":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:45284:9719":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:13470:6379":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:16789:7223":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"23:513:1433":{"crate_id":23,"path":["quote","quote"],"kind":"macro"},"1:6305:5989":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:4981:7304":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"24:5712:2962":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"2:3321:3107":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:43919:9662":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:41351:4123":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:43699:34477":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"5:39:5602":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"21:901:5727":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"5:7695:9584":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"20:825:2567":{"crate_id":20,"path":["proc_macro2","imp","Group"],"kind":"enum"},"2:10878:164":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:5868:5994":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:44398:16688":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"23:504:5091":{"crate_id":23,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"2:14206:16751":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:43232:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"24:3579:239":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"24:5350:2845":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"6:5366:8124":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:4692:4149":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:4150:7291":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:32819:250":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"24:3834:4290":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"6:5477:8190":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:2568:7241":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:12491:758":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"2:45478:9002":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"24:3732:4285":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"2:42520:9738":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:5280:7313":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:6939:9487":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:6416:8317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:45090:9704":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:8237:8691":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:4202:11409":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:5186:4762":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:13458:16700":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:8217:9736":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:15076:6721":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:1635:9566":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:10937:37748":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:12672:24314":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"24:5327:3955":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"1:6207:5994":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:3853:24275":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:46710:9028":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"24:5044:2838":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"2:45490:230":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:15548:6892":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:10486:24137":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"16:5740:6293":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:7439:8592":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:32906:2605":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:41000:9627":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:7084:5696":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:10245:24129":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"11:1878:9565":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:9496:9746":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:10728:6299":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:14962:6700":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:12505:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"24:4712:4323":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"1:3678:11350":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:13189:9685":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:4888:4179":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:13221:24148":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:47898:9138":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:10675:217":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"15:306:23144":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"24:5013:2596":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"17:12134:9375":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:7174:11534":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"24:4642:4318":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"1:1617:4010":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:12905:6381":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:46888:9045":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:6710:8455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"24:1054:38088":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"2:4758:232":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:6850:9481":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:3342:11368":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:9739:150":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:44548:9672":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:46482:9006":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:47108:9071":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:6694:24057":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"21:935:4195":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"16:4265:7294":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"24:1628:4153":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"17:14311:6584":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"1:3659:34069":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:14885:6687":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:4842:7299":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:5058:7305":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:22635:11331":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:12493:918":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:15438:6851":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:5311:8109":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:12710:24325":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:41159:3552":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"5:1206:35981":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:47960:9155":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"5:3285:4011":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:3139:6190":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:3394:6129":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:901:37705":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"6:7553:8661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:2413:23162":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:44176:9669":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"24:5282:3947":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"17:12358:24293":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:42910:207":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:7713:37722":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:14113:6536":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:1500:7738":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:12497:1896":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:40135:9625":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:5127:8038":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:11997:24216":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:9409:198":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:14139:6541":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:45610:5599":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:44956:16713":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:7220:9504":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:1222:37418":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"14:186:23131":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"24:5277:3931":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"1:8868:9740":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"9:318:7618":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:46561:9015":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:1620:5691":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:7759:256":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:40958:8956":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:23401:8729":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:11744:8988":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"17:15063:6720":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"24:4987:2593":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"2:2867:212":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:5725:6292":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:11474:24164":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"24:4294:4295":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"1:8606:9738":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"23:235:5095":{"crate_id":23,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"5:3331:37398":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:43425:4167":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:11871:16689":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:15430:6850":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:11215:5974":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"2:41250:4107":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:12479:1918":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:3439:7286":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"18:521:28404":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"24:3477:4277":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"24:3851:4291":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"17:12975:6385":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:2320:11310":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:41310:4110":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:6769:8476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:14049:35256":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"5:4194:4015":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:8623:9553":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:3397:11371":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:4900:7301":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:13609:6428":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"24:5545:2713":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"17:14071:6521":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:11865:9762":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:6995:9489":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:14737:6663":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:3551:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:40223:225":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"18:589:6169":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"24:6003:3994":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"1:6223:231":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:8085:11244":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:7568:4010":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:5550:8220":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:4405:11435":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:40943:34460":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:6513:8360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:11502:6312":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"1:12079:9764":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:4792:7878":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:12569:24255":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:14380:5978":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:10701:6012":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2:33772:6132":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:22372:8721":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:1711:7867":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:45308:9725":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"14:31:10676":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"24:5998:3992":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"1:8347:32617":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"18:538:6166":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:45483:162":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"5:3706:4015":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:2138:4147":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"11:763:9564":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:23330:9612":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"24:588:4020":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"1:11311:9235":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:15350:6788":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:5447:7318":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"24:4923:4660":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"2:2680:5627":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"2:4950:4182":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:7737:33547":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:16809:6497":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:7807:10702":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"24:3341:4271":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"11:983:9534":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"23:78:2648":{"crate_id":23,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"1:6016:4768":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"24:2518:3200":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"6:6659:8437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:14559:6623":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"21:53:5714":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"1:8043:5475":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:11690:24169":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"11:676:4010":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:12961:24328":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"24:2665:11331":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"6:7430:8589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:8683:9206":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"24:5331:3934":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"1:2327:11311":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"24:5040:3928":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"21:108:5720":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"2:43974:9667":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:6441:8322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:10282:9654":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:11776:9368":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"24:3817:4289":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"1:4671:11438":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:4544:5930":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"2:2779:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:6061:5988":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:900:4010":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:42845:237":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"10:0:3765":{"crate_id":10,"path":["adler"],"kind":"module"},"16:2448:7229":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:43156:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:14871:6684":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:7504:4010":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:16152:7060":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:14916:6693":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"21:2728:2645":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"17:12815:6379":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"21:140:5721":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"1:3650:4163":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:43404:3180":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:42934:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:5249:8078":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:11447:24163":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:4063:5691":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:8357:11364":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"20:843:3263":{"crate_id":20,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"6:5069:8034":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:7390:8581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:7819:10703":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"5:3852:11259":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:2948:7258":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:15585:6899":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:8272:8699":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:5658:8270":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"11:2540:4067":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:5265:8086":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:12203:9380":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:8325:176":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:969:11252":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:43759:4157":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:44491:9608":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:16125:7048":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"24:3698:267":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"2:31605:5178":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"24:4340:4298":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"24:1005:6114":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"2:47079:9070":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:14374:6596":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"24:5007:3926":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"2:1922:5446":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"24:3749:2616":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"18:735:28400":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"18:548:164":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:13180:24337":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:3502:24256":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:10824:5475":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"11:1063:37669":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"21:2349:3263":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"24:5882:3131":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"17:12107:9373":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:4168:11408":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:1690:7859":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"20:801:9342":{"crate_id":20,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"1:11072:29911":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:14337:118":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:4302:29888":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:6121:7266":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:3586:152":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:15539:6891":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:41103:8957":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:909:201":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:8555:9688":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:6460:24054":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:15982:6997":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:9386:9234":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:8505:11330":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:934:5691":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:6852:8496":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:15620:6903":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:6670:8439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:9345:2573":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"5:4981:228":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:44472:9607":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:6406:9445":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:10673:4167":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"23:148:4793":{"crate_id":23,"path":["quote","__private","HasIterator"],"kind":"struct"},"11:1652:5903":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:2726:5981":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"24:1110:3970":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"2:44640:9678":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:8334:4093":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:10563:6294":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:14598:6628":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"11:820:11252":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"24:4992:2638":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"1:9312:29922":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"24:4630:4317":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"17:14357:6593":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"24:1369:9305":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"1:1865:11266":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:2405:24200":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:7935:9535":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:1643:7832":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:11652:6317":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"9:490:7641":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:41444:4104":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:666:2660":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:41132:16827":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"20:358:4029":{"crate_id":20,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"2:47451:9113":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:5687:7320":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:44836:9689":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:8262:32620":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:12481:1348":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:45316:8999":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:14691:6639":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"20:815:2646":{"crate_id":20,"path":["proc_macro2","imp","Span"],"kind":"enum"},"17:15135:6382":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"13:110:37677":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"24:5567:2579":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"16:2702:7247":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:1584:7788":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"24:5247:3942":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"11:1558:23117":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:5349:8119":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"6:5051:8023":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:8446:4092":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:564:7717":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:6695:8453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"2:44880:9627":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"14:7:10676":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:5186:8044":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:11456:6311":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"2:44572:9600":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"20:709:9341":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"2:22662:8722":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:6995:4102":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"24:79:2573":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"6:5025:8012":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:3719:24259":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:2152:11259":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:12053:9251":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:3985:6203":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"2:42885:4011":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:536:5464":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"20:806:37800":{"crate_id":20,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"1:9230:11507":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:3904:11386":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:9746:11326":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"24:0:2414":{"crate_id":24,"path":["syn"],"kind":"module"},"16:3306:7228":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"16:3585:7287":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"5:6021:5691":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:2988:7260":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:3593:9203":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"24:1950:2654":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"17:15939:6987":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:6381:5976":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:8071:11243":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:6267:9428":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"24:5717:3979":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"23:281:2656":{"crate_id":23,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"2:45508:218":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"5:1569:9563":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:6779:7335":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:7383:7384":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:13013:24342":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:11415:9246":{"crate_id":1,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"1:877:4011":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"11:832:11253":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:23634:8748":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"16:2838:7253":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:5450:8172":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:6737:8466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"5:6502:5944":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"24:5633:3976":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"17:15724:6932":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:6901:9484":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:14459:6608":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:6950:9488":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:3474:4315":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:12094:9372":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:12488:760":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"1:11148:6014":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:15805:6948":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:15089:6722":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"18:670:28403":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"21:1359:2660":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"6:5036:8017":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:8229:151":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:41434:4119":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:11025:37760":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:12490:779":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:5630:8260":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"24:1078:38089":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"2:46512:9010":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:8254:9737":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:4818:8575":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"16:8264:7445":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:959:10809":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:5405:5940":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"24:6044:3132":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"17:16356:7115":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:34178:6134":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:12825:9386":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:41224:4096":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"5:7841:5689":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:4486:11436":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:5301:8105":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"24:3613:4283":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"17:12259:24289":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"2:47845:9129":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:45006:9701":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:4988:5986":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:2488:11317":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:41199:11295":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"24:5299:3950":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"2:40300:8827":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:5224:8064":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:7786:37704":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:3316:260":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:5179:8042":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:7367:8580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:11859:9761":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:23612:8746":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"21:958:2646":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"5:3084:28442":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:6734:5906":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:6806:7261":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:4957:7977":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:2546:3777":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:12494:924":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:13208:149":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:12096:6021":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"17:14844:6682":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:13908:6488":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:9218:9227":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:15762:6940":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:770:165":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:6623:9475":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:14932:6694":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:11400:6309":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"18:581:5178":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"24:4526:4310":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"6:6610:8418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:6586:7329":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"6:1521:7746":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:45127:9705":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:11997:11387":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:4919:4181":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:16230:7088":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:1563:7774":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:11863:24201":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:11925:6328":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:11764:4015":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:10860:150":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:11877:6321":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:8548:9600":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:12499:1884":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:6656:10768":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"24:4881:4335":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"16:7055:9498":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:12023:9680":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:7347:7382":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:14066:16753":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"2:43008:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:16211:7075":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:684:11240":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:4693:11439":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:6631:8430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:2898:7256":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:3395:11370":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:4831:4177":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:11074:37750":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"9:49:10788":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:8220:9541":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:5875:9732":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:12492:936":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"24:5458:2587":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"1:3067:237":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:3712:222":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:1976:10691":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:23579:8743":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:11376:9242":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:42542:8970":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"21:2302:2579":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"2:46725:9029":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:47374:9081":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:47034:9053":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:8063:24069":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:8200:9735":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:2782:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:4976:7985":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:6835:10783":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"11:2323:11257":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"24:5272:3930":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"15:394:23153":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"24:5858:3244":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"2:45541:10505":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:665:10689":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:46739:9030":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:43935:9665":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:6500:23161":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:47773:9123":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:15732:6935":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:7956:9538":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:43269:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:22175:35880":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"24:250:10673":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"2:22246:11536":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:6819:10698":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:16763:7219":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"24:6005:3995":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"2:43119:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:11162:6321":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:1899:11273":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"24:4910:3256":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"2:44794:9687":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"24:4420:4303":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"24:289:38038":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"24:86:5238":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"17:15314:6757":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:22974:11331":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:3064:174":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:963:11251":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:15601:6902":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:43418:4166":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:6398:8304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:7945:6009":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:4314:5930":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:10921:11335":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:10663:122":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:13437:4427":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:6749:8468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"17:13634:6429":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"24:5026:2584":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"2:23452:34478":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:6602:8417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:14154:35494":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"11:2354:4011":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:32809:9624":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"6:6390:8302":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"24:5020:2417":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"2:42893:4015":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"21:2618:4010":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"2:4493:34965":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"11:1083:23114":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"9:226:8988":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"21:2545:4196":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"1:1924:11279":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:47258:9077":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:923:5912":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:5512:8202":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"24:4982:3914":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"2:42342:8961":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:16534:7169":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:4547:16728":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:10784:11366":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:6306:4100":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:45622:9731":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:12215:9381":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:13957:6497":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:39472:6141":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"24:4949:3912":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"2:3785:267":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:47883:9137":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"24:640:149":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"17:14996:6713":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:47676:9118":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:42608:4011":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"5:4892:827":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:10662:6297":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"21:419:5894":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"5:879:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"24:5036:2794":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"0:964:2427":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"17:10548:6293":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"24:3171:4264":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"1:11588:6016":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"1:3034:5985":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:4239:7293":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:8270:10696":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:9281:9230":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:7284:8529":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:8742:6123":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:15857:6964":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:7723:9587":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:10407:29887":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:13156:24332":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"24:88:4479":{"crate_id":24,"path":["syn","token","private","CustomToken"],"kind":"trait"},"24:3324:4270":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"5:7664:4068":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:3621:4023":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:23417:34450":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:2222:5642":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:7900:10705":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"24:3052:4261":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"1:6397:5993":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:13348:9402":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:12896:9397":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:1095:11256":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:4340:11433":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:23601:8745":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"16:7916:24067":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:30937:11388":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"16:7505:9529":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:32742:7577":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:14283:6577":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:6186:9422":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"24:4432:4304":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"2:3424:5594":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"14:164:23124":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:5139:8039":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"24:339:4147":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"17:16262:7094":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:11591:6276":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:6254:9427":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"24:6001:3993":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"1:9195:4010":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:13853:6480":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:4324:11431":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"24:2391:4011":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"5:2573:8714":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:10667:4158":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"21:1098:219":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"2:23645:8749":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"6:5557:8222":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:582:24122":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"24:2676:6125":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"17:14546:6622":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:45583:191":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:14268:6573":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:23678:8752":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"2:41263:4098":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:2231:5641":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:1863:11265":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:8595:24074":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:12037:9681":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"24:6018:3998":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"24:1634:38037":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"17:11385:24160":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:43683:7459":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:15572:6894":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"24:5407:2602":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"16:8720:149":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:40148:224":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"24:6035:3987":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"6:5575:8229":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:43306:10813":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"23:272:2656":{"crate_id":23,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"11:1885:9566":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"24:1807:2653":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"type_alias"},"17:11552:24173":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"18:563:6168":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"24:1764:28425":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"2:3564:4184":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:43654:4155":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:5088:8035":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"11:2507:2567":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"11:1898:2616":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:10927:24140":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:41793:4077":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"24:4799:4329":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"1:4816:8573":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"2:44429:8993":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"23:150:4792":{"crate_id":23,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"2:8280:4094":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:32802:4178":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:23262:9611":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:2712:5982":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:6981:7281":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:16202:7073":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:46920:9047":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:2746:7249":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"11:2533:7578":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:5353:215":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:7279:9517":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:2918:7257":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"20:889:2647":{"crate_id":20,"path":["proc_macro2","TokenTree"],"kind":"enum"},"5:7258:5960":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:45304:9724":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:4481:34976":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:7653:4067":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"18:481:9343":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:2465:7231":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:11318:37749":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:42624:4010":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"11:423:37671":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"24:1016:6115":{"crate_id":24,"path":["syn","fixup","FixupContext"],"kind":"struct"},"2:12944:10687":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:12477:1204":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"22:0:3894":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"2:43956:8988":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:11064:24142":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:2588:7242":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:3344:11369":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:6203:24051":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:16752:7217":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"5:4354:4011":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:12043:24222":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:13192:24336":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"24:4613:4316":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"1:12476:434":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"24:5493:3967":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"2:32908:117":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:13718:6447":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:8790:8988":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:41827:4085":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"24:5839:2943":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"9:168:10799":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:14326:6586":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:12951:9400":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"24:1759:28424":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"6:5412:1275":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:13094:6391":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:13969:6498":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:22264:8721":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:16473:6448":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"11:808:11250":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:559:7715":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:7421:24063":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:44740:9684":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:14018:6508":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:9751:6011":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"16:8295:9542":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:4890:11460":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:6082:9411":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:6719:8458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"6:8007:8687":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:13450:6415":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"24:2658:3266":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"2:44542:9671":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"24:5873:2961":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"1:10388:11273":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"24:1365:9303":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"17:12604:6321":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"21:2598:4199":{"crate_id":21,"path":["proc_macro","escape","EscapeOptions"],"kind":"struct"},"17:12919:9398":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:8020:5476":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"18:698:9352":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:47793:9125":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:15417:6843":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"24:4485:4307":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"17:14392:6597":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"23:0:1433":{"crate_id":23,"path":["quote"],"kind":"module"},"21:1989:5712":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"17:14749:6665":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:12498:1878":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:45141:16714":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:980:11253":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"24:5905:2562":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"17:14901:6689":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:23479:9617":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:41301:4109":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:16775:7222":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"18:80:28390":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"18:718:6181":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"0:0:2436":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"16:0:3770":{"crate_id":16,"path":["gimli"],"kind":"module"},"24:2123:37934":{"crate_id":24,"path":["syn","precedence","Precedence"],"kind":"enum"},"24:5259:3929":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"24:4683:4321":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"2:41835:4087":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:8496:9201":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"10:44:7581":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:4118:7290":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"9:345:23050":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"21:240:37827":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"18:680:9348":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:42664:4759":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:12549:6368":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"24:4311:4296":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"16:7459:24064":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:11553:11331":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:5604:8248":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:13569:24152":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:15946:6988":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:6617:8419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:23124:11619":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"6:7463:8604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:5551:16676":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"24:3375:4273":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"6:6645:8432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:34312:6136":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:45193:9716":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:2748:10695":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:5626:11480":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:2528:7239":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:3790:158":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:40263:4061":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"24:5255:3944":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"2:3067:156":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:505:6237":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:7027:7341":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"5:996:4011":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"11:2525:37664":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:14671:6638":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:4970:7982":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:11970:24198":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:6486:8353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:6638:8431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:46981:9050":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:7857:4071":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"11:750:9563":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:5222:7311":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:6523:8367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:2504:7238":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"24:2984:4337":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"5:6105:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:1696:7860":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"24:3800:4288":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"6:0:1029":{"crate_id":6,"path":["libc"],"kind":"module"},"20:113:9340":{"crate_id":20,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"6:5282:8097":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:7795:10701":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"6:4947:7974":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"21:1796:5711":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"2:44864:9692":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:3037:11331":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:16302:7105":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:774:263":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:6062:7267":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:7946:7275":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:12502:993":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"21:2394:2647":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"11:851:11254":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"24:4572:4313":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"20:518:4029":{"crate_id":20,"path":["proc_macro2","LexError"],"kind":"struct"},"6:532:7701":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:12279:24290":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:13384:9403":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:32820:257":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:16678:7197":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"16:5111:7307":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:22191:11331":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:10121:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:10978:9755":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"24:113:2567":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"1:12445:10824":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:8813:9217":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:8091:11281":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:6459:8334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:6701:4077":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:32877:5162":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:9437:245":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"24:4514:4309":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"2:32784:2734":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:8249:5769":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"17:12859:9395":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:6813:4010":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:44461:16681":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"24:4864:4334":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"2:23345:8724":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:13027:24335":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:15956:6991":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"11:2374:4015":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"5:5125:5930":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:14126:6540":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:9581:5757":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"6:586:7729":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:13005:6389":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:6532:231":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:8089:4076":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"24:3511:4279":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"17:14639:6634":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:16705:7206":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"18:491:9344":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:1507:7741":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:6428:8321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:8106:10690":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:4881:7941":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:9340:10816":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:41121:9637":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:13780:2579":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:14651:6635":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:11016:9201":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:41088:9635":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"5:1628:11258":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:11261:9223":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"24:1094:38091":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"24:5579:2918":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"2:11909:16695":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:44450:4096":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:3440:11367":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"24:3137:2959":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"24:1102:3969":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"24:5307:3952":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"17:15652:6915":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:10627:155":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:2658:7245":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:14946:6696":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:12292:24254":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:47324:9079":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"2:8029:4074":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:38838:6137":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:42358:8963":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:45358:9727":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:47618:9116":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"24:5363:3958":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"2:46871:9044":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"24:4270:4293":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"24:5294:3932":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"17:12735:24301":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:14506:6614":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:5664:8273":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"24:1709:2651":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"2:2127:5546":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"5:1578:9564":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"11:2513:7574":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:4842:7915":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:491:7672":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:11420:24161":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:14345:6591":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:10217:24128":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:4402:7295":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:4930:11419":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:13265:24149":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:7334:7380":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:7256:9516":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:2770:7250":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:22163:35890":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:5982:11497":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:5488:8193":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2:22988:11625":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:7445:8593":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:45334:134":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:2794:7251":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"24:4473:4306":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"2:31220:4155":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:12478:490":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:3061:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"5:212:5604":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:12391:6336":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:42633:4772":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:7369:7272":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:5662:11482":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:4224:11413":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:0:323":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:538:7704":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:7094:5697":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:10475:11487":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"16:8230:24071":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:7551:24065":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"20:744:3263":{"crate_id":20,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"6:5007:8003":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:11565:24172":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"24:2374:4010":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"13:229:7573":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:22640:11542":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"5:5814:5695":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:16799:6492":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"16:7804:37716":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:12055:6329":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:9145:9223":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"15:0:3769":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:2722:7248":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:11080:5972":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"18:689:9351":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:479:7667":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:4990:7993":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:15674:6917":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:15974:6995":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:16012:7003":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:10393:24134":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:44531:9670":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:40981:9631":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:2005:11291":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:42825:223":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"16:4927:7302":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:5503:8201":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"18:651:6162":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"24:6010:3134":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"24:5316:3953":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"5:1881:5689":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:23053:5627":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"6:6893:8522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:11677:24170":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:5415:7317":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:11123:37763":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"18:531:9345":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:11820:9250":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:1597:7795":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:6158:17073":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:5803:11484":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:23096:11618":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:23623:8747":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"16:6096:24049":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:13490:6417":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:40971:9630":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"20:904:2567":{"crate_id":20,"path":["proc_macro2","Group"],"kind":"struct"},"2:40087:5596":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"16:3124:23191":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:12647:6372":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:5057:8025":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:15837:6957":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:5375:8130":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"24:2195:2572":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"17:15530:6887":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"21:2471:129":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"1:4104:11404":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:3842:11382":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"24:4811:4330":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"2:11566:251":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:8853:35665":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:47279:9078":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"2:12960:16702":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:8093:24070":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:11719:9365":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"11:123:5897":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:15753:6939":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:16311:7109":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:14707:6644":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"24:6007:3996":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"2:46935:9048":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"24:1086:38087":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"11:2340:23119":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:46696:9027":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:40311:8828":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:8609:7282":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"20:693:4147":{"crate_id":20,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"9:412:23037":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:6590:8410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:6878:8511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:5280:5938":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:13397:4035":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:44676:9680":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"24:4666:4320":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"17:13118:6392":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:4984:7990":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:10030:24123":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:3815:35100":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:4284:5930":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:47647:9117":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:5611:8251":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:6193:4111":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:6820:24058":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"16:5083:7306":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:544:9405":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:10417:24135":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"18:765:28401":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:13168:24366":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:47705:9119":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:7990:8676":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:13553:6420":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"17:16320:7111":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"21:2215:4032":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"6:7424:8587":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:11308:24146":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:3668:11329":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:46850:9043":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:6360:8277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"3:0:524":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"21:2684:2647":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"2:42780:221":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"21:2605:265":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"1:5011:11418":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:9333:32636":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:6472:8343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"24:5902:3984":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"6:5640:8261":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"2:8501:189":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"18:598:6122":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:9294:10814":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:485:7670":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:7857:5690":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"24:5631:3973":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"17:12991:6386":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:4954:7303":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:9422:5930":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"24:699:4011":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"17:15035:6716":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:47747:9121":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:8567:11383":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"15:327:10784":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:894:37720":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"24:6023:3999":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"2:12930:16844":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:10967:9735":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"2:3533:5595":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:47830:9128":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"24:5986:3990":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"1:9171:9225":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:1625:7820":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:41008:9633":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"20:883:2646":{"crate_id":20,"path":["proc_macro2","Span"],"kind":"struct"},"17:1219:24174":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:4505:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:11740:4011":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"11:0:3766":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:13536:6382":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:32876:4202":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:5316:7314":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"24:5812:3981":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"17:15898:6973":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:32818:248":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"11:2126:11257":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:40484:5182":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:41593:4122":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"21:2679:4195":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"16:8134:7279":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:45296:9722":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:7317:8552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:23656:8750":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"6:7407:8582":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:4829:7905":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:11605:6321":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:43721:4155":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"5:2163:11260":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:9478:9235":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:4871:7300":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:8148:7280":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:3038:16748":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:11732:24193":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"24:5414:3187":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"2:43671:8986":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:4163:4010":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"24:5863:2957":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"1:8638:9205":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:12072:9764":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:1619:221":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:46614:9022":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:31231:34479":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"17:11830:6313":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:7001:9596":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:11817:24203":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"21:2743:2579":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"17:14334:6588":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:4528:5591":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:41786:4075":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:14415:6600":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"24:5268:3946":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"2:46681:9026":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"18:0:3772":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:6792:8482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:6595:197":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:41420:4118":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:12535:16685":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"24:1809:4136":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"1:681:11239":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:4964:7980":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"11:1862:4010":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:577:5470":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"24:5395:3963":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"17:13289:6251":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:14098:6530":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:1727:7872":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:12429:10514":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:9134:210":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"5:297:2627":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:47220:9075":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:12496:911":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:12017:24245":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"21:2699:2567":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"1:12485:1855":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"11:357:5899":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"24:4357:4299":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"16:7762:7411":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:12868:6415":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:41179:11308":{"crate_id":2,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"5:3693:4011":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:22950:11624":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:10114:24125":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:10629:6296":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:23568:8742":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"2:4:1288":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"6:6500:8354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:14585:6626":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:11832:9602":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:12334:24291":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:326:1817":{"crate_id":1,"path":["std","thread"],"kind":"module"},"24:3409:4275":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"5:6536:11629":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:5395:8139":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"24:5830:2940":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"1:11913:6018":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:12489:763":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:6911:9485":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:3775:16790":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:0:1757":{"crate_id":1,"path":["std"],"kind":"module"},"1:4162:11407":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:8175:8688":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:316:37705":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:5471:8187":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"18:515:6165":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:15778:6944":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:46629:9023":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:34044:4056":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:42580:205":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"10:36:7580":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:7398:37690":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:41272:4099":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"11:321:9560":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:5462:8181":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:13069:6321":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:10658:11485":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:15147:6731":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:4934:11422":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"24:4391:4301":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"18:96:28391":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:7468:7389":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:2964:7259":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:2078:208":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:2237:132":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"6:4805:7887":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"24:3290:4269":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"14:159:10676":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:6109:9415":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:4997:7996":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"14:0:3768":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:8487:9200":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:3693:7288":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:11285:29906":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:5989:11498":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:986:11254":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:8613:9739":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:8878:4011":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:1514:7743":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"24:4823:4331":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"24:5047:2917":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"2:45369:16884":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:7489:29889":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:5678:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:43411:4158":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:5861:231":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:8666:3341":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:42402:2646":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:15869:6965":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:7337:8558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"24:3783:4287":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"2:8276:4095":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"11:2394:4010":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"17:12930:6382":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:7413:24062":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:7013:9496":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"24:5531:3235":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"16:8176:7437":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:8352:10822":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:13661:6435":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:3611:11328":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:11231:24164":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:3069:149":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:14572:6625":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:43944:168":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:783:121":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:3837:4147":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:9366:29905":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:16164:7063":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:13081:24144":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"16:6438:24053":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:7987:9540":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:5151:8040":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:12370:6334":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:11293:8999":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"21:2704:4031":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"2:41054:9634":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"16:7072:24060":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:12065:16693":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:1487:167":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:6688:5691":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:12233:6396":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"20:0:2413":{"crate_id":20,"path":["proc_macro2"],"kind":"module"},"20:715:265":{"crate_id":20,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"24:2170:11114":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"17:11850:24202":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"7:31:23022":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:16486:6462":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"11:2414:5691":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"24:3545:4281":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"2:23667:8751":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"2:22:842":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"6:4890:7946":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"24:2288:4007":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"2:3074:270":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"20:775:4032":{"crate_id":20,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"24:5486:3202":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"17:16499:7139":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:40203:226":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:47921:9139":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:6142:24050":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:15966:6994":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:1657:7843":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"21:2501:5713":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"24:3035:4260":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"16:3046:23190":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:5044:8021":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:8624:11428":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:4875:7939":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"24:689:4010":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"6:5334:8117":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:10778:11368":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"24:5338:3935":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"6:5271:8089":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:3786:5906":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:950:11250":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"24:2347:4009":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"17:12190:9379":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:33560:6131":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"11:1027:11257":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"24:3647:2594":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"6:8316:8710":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:6555:11630":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:6822:11502":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:12483:1731":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:33348:6130":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:16364:7118":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:12065:32625":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:10515:24138":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:6543:8383":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"24:347:38050":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"}},"external_crates":{"23":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.36/"},"20":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.86/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.12/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.71/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":32}