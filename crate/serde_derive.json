{"root":"0:0:1616","crate_version":"1.0.139","includes_private":false,"index":{"2:13456:62068":{"id":"2:13456:62068","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10272:179":{"id":"2:10272:179","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10273:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6081:62709":{"id":"5:6081:62709","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8352:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13449:62064":{"id":"2:13449:62064","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6776:4630":{"id":"1:6776:4630","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6777:57166"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10545:4626","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3696:213":{"id":"2:3696:213","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3697:171","2:3698:5036","2:3699:674","2:3700:358"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3701:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3696:213","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8846:5171":{"id":"2:8846:5171","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3318:5079":{"id":"2:3318:5079","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3320:171","2:3321:879"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5783:4658":{"id":"1:5783:4658","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5784:6920"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:2126:6397":{"id":"24:2126:6397","crate_id":24,"name":"IdentExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2127:63514","24:2128:63515","24:2129:1847"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"24:2144:4626","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6077:62708":{"id":"5:6077:62708","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1783","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:4438","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1783","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:4438","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10276:3313":{"id":"2:10276:3313","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10277:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2862:104":{"id":"2:2862:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2863:397","2:2864:399"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3707:5036":{"id":"2:3707:5036","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3709:56352"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3249:206":{"id":"2:3249:206","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3398:5107":{"id":"2:3398:5107","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3400:343"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1257:1601":{"id":"0:1257:1601","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[91,0],"end":[96,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"1:5713:4660":{"id":"1:5713:4660","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5714:6920","1:5715:57595","1:5716:57596"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13383:58511":{"id":"2:13383:58511","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15845:2963"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13360":{"id":"2:13360","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12457:1319","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13361:780","2:13362:2044","2:13363:62051","2:13364:62052","2:13366:62053","2:13369:2698","2:13370:62054","2:13371:293","2:13372:58492","2:13373:1829","2:13375:58489","2:13377:58490","2:13379:58491","2:13381:4766","2:13382:62055","2:13383:58511","2:13384:58512","2:13385:2275","2:13386:2269","2:13387:4771","2:13388:33350","2:13389:33340","2:13390:5877","2:13391:62056","2:13392:33335","2:13393:1866","2:13396:58527","2:13399:58528","2:13402:2509","2:13406:4046","2:13410:57314","2:13413:33207","2:13416:58521","2:13419:62057","2:13422:62058","2:13425:58523","2:13428:58525","2:13431:62059","2:13434:62060","2:13437:3038","2:13440:62061","2:13443:62062","2:13446:62063","2:13449:62064","2:13451:62065","2:13453:62066","2:13455:62067","2:13456:62068","2:13457:62069","2:13460:62070","2:13463:15902","2:13466:58529","2:13469:62071","2:13472:1848","2:13475:62072","2:13478:1805","2:13480:4419","2:13481:4420","2:13482:4421","2:13483:4422","2:13484:62073","2:13486:3321","2:13487:62074"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3367:4778":{"id":"2:3367:4778","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3369:171","2:3370:340"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13487:62074":{"id":"2:13487:62074","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15839:2958"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49637:5430","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6084:62710":{"id":"5:6084:62710","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8352:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3402:5120":{"id":"2:3402:5120","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3404:346"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:3083:3272":{"id":"24:3083:3272","crate_id":24,"name":"Parser","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:3084:171","24:3085:2139","24:3086:1805","24:3087:2140"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2897:124":{"id":"2:2897:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3323:3408":{"id":"2:3323:3408","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3325:171","2:3326:547"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:18:3077":{"id":"20:18:3077","crate_id":20,"name":"TokenStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:19:9229","20:21:63290","20:23:63291","20:26:63292"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"20:44:4626","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3308:3244":{"id":"2:3308:3244","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3310:171","2:3311:254"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13443:62062":{"id":"2:13443:62062","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"2:8411:120","self::pattern":"2:12997:5129","prim@char":"1:15839:2958","str::rmatch_indices":"1:15845:2963"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49470:5420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3684:5499":{"id":"2:3684:5499","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:3342","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3615:3241","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13361:780":{"id":"2:13361:780","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15839:2958"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10493:142":{"id":"2:10493:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10494:703","2:10496:57570"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3250:106":{"id":"2:3250:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10205:3311":{"id":"2:10205:3311","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10206:1509","2:10207:61487","2:10209:57035"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1258:1610":{"id":"0:1258:1610","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[99,0],"end":[104,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"2:3492:132":{"id":"2:3492:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3494:171","2:3495:367"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8565:157":{"id":"2:8565:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8566:1784","2:8567:909","2:8568:4049","2:8571:4050","2:8572:484","2:8574:2098","2:8577:4051","2:8578:4052","2:8579:4053","2:8580:2035","2:8582:2563","2:8584:4054","2:8585:4055","2:8587:828","2:8590:4056","2:8597:2396","2:8599:2392","2:8602:1798","2:8603:2849","2:8604:4057","2:8606:4058","2:8608:4059","2:8611:1287","2:8612:2163","2:8613:4060","2:8617:1785","2:8620:1780","2:8621:4061","2:8622:4062","2:8624:4063","2:8625:1791","2:8627:4064","2:8630:4065","2:8632:4066","2:8642:4067","2:8657:4068","2:8659:4069","2:8663:4070","2:8672:2853","2:8675:4071","2:8677:4072","2:8680:265","2:8687:283","2:8694:2509","2:8701:4073","2:8710:4074","2:8720:1001","2:8727:4075","2:8734:4035","2:8735:4032","2:8736:4037","2:8748:4036","2:8755:4034","2:8767:4033","2:8774:4076","2:8775:4077","2:8780:4078","2:8783:2113","2:8786:4079","2:8787:2854","2:8789:4080","2:8791:404","2:8794:4081","2:8797:984","2:8800:4082","2:8803:593","2:8806:4083","2:8809:894","2:8811:813","2:8813:779","2:8815:701","2:8817:684","2:8819:4084","2:8820:4085","2:8828:4086"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13425:58523":{"id":"2:13425:58523","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:15839:2958","self::pattern":"2:12997:5129","str::rsplitn":"1:15845:2963"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49424:5390","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3153:216":{"id":"2:3153:216","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3155:127","2:3156:1394"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"21:676:3335":{"id":"21:676:3335","crate_id":21,"name":"MultiSpan","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:677:63370"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5633:4741":{"id":"1:5633:4741","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5634:57522","1:5635:3734"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10545:4626","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3329:3429":{"id":"2:3329:3429","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3331:171","2:3332:1089"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4687:4697":{"id":"1:4687:4697","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4688:60400","1:4689:40956","1:4690:60401","1:4691:60402"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8367:151":{"id":"2:8367:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8368:1784","2:8369:3220","2:8370:755"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13483:4422":{"id":"2:13483:4422","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13373:1829":{"id":"2:13373:1829","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47356:166"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13480:4419":{"id":"2:13480:4419","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:1079:2231":{"id":"1:1079:2231","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1080:1977","1:1081:4419","1:1082:2266","1:1083:2265","1:1084:4420","1:1085:4421","1:1086:4422"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10255:109":{"id":"2:10255:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10256:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13396:58527":{"id":"2:13396:58527","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:15839:2958","self::pattern":"2:12997:5129"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6096:62711":{"id":"5:6096:62711","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8352:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8436:3344":{"id":"2:8436:3344","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8437:780","2:8438:2044"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6423:4630":{"id":"1:6423:4630","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6424:4965","1:6425:4966","1:6426:57165","1:6427:60237","1:6429:60241","1:6431:60238","1:6432:60239","1:6434:60240"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10545:4626","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8411:120":{"id":"2:8411:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8412:4041","2:8413:4042","2:8414:4043","2:8415:4044","2:8419:4045","2:8422:4046"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3967:68":{"id":"2:3967:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3968:1408"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:13419:62057":{"id":"2:13419:62057","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"prim@char":"1:15839:2958","self::pattern":"2:12997:5129","str::rsplit_terminator":"1:15845:2963","`DoubleEndedIterator`":"2:8411:120","str::split":"1:15845:2963"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49370:5416","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4669:3311":{"id":"1:4669:3311","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4670:2578","1:4671:57031","1:4673:57032","1:4674:5801","1:4675:57033","1:4676:57034","1:4677:57035","1:4686:4063"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3351:5091":{"id":"2:3351:5091","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3353:548"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3360:5108":{"id":"2:3360:5108","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3361:171","2:3362:939"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3075:5106":{"id":"2:3075:5106","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3074:4626","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8850:5170":{"id":"2:8850:5170","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7891:5173","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3143:149":{"id":"2:3143:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3145:1609"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3245:3342":{"id":"2:3245:3342","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12444:5579":{"id":"2:12444:5579","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12445:1784","2:12446:2917"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6404:212":{"id":"5:6404:212","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6405:1376"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3137:75":{"id":"2:3137:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3139:294"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:3342","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:8843:4428":{"id":"2:8843:4428","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10897:203":{"id":"2:10897:203","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10899:171","2:10900:1829","2:10901:58489","2:10902:58490","2:10903:58491","2:10904:740","2:10905:741"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:3342","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10888:4626","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3544:2225":{"id":"2:3544:2225","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3546:171","2:3547:740"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:3342","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13482:4421":{"id":"2:13482:4421","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22812:4625":{"id":"2:22812:4625","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22802:4626","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2928:167":{"id":"2:2928:167","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2929:404","2:2930:4035","2:2931:4032","2:2932:4040"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2897:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2938:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13399:58528":{"id":"2:13399:58528","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:12997:5129","prim@char":"1:15839:2958"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:5132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13389:33340":{"id":"2:13389:33340","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15845:2963"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49603:5427","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13382:62055":{"id":"2:13382:62055","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"1:15845:2963","`str`":"1:15845:2963","crate::ops::IndexMut":"2:3548:3230"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"20:117:1802":{"id":"20:117:1802","crate_id":20,"name":"ToTokens","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:118:2438","20:119:2180","20:120:1824"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6076":{"id":"5:6076","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5896:1319","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6077:62708","5:6078:1966","5:6081:62709","5:6084:62710","5:6096:62711","5:6097:62712","5:6098:4723","5:6099:2266","5:6100:2265"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:6099:2266":{"id":"5:6099:2266","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15845:2963"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13381:4766":{"id":"2:13381:4766","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"1:15845:2963","`str`":"1:15845:2963","crate::ops::Index":"2:3544:2225"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:783:211":{"id":"5:783:211","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:1977","5:785:1850","5:786:4088"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13486:3321":{"id":"2:13486:3321","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15839:2958"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49628:3322","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5828:5586":{"id":"5:5828:5586","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5830:171","5:5831:421"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:3342","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13007:5130":{"id":"2:13007:5130","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13009:5128","2:13010:61360","2:13011:61365","2:13012:61361","2:13013:61363","2:13014:61362","2:13015:61364"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13428:58525":{"id":"2:13428:58525","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:12997:5129","prim@char":"1:15839:2958","str::splitn":"1:15845:2963"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49442:5391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:5132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13369:2698":{"id":"2:13369:2698","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12468:5543"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23006:5226":{"id":"2:23006:5226","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23655:5211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22997:4626","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3742:3301":{"id":"2:3742:3301","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:3342","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3377:4779":{"id":"2:3377:4779","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3379:171","2:3380:345"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13453:62066":{"id":"2:13453:62066","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13027:5133":{"id":"2:13027:5133","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:5132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6847:4634":{"id":"1:6847:4634","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6848:57624"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:2969:1806":{"id":"24:2969:1806","crate_id":24,"name":"Parse","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2970:1805"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3489:131":{"id":"2:3489:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3491:366"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3492:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3779:4429":{"id":"2:3779:4429","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13362:2044":{"id":"2:13362:2044","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13377:58490":{"id":"2:13377:58490","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13472:1848":{"id":"2:13472:1848","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15839:2958","self::pattern":"2:12997:5129"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3526:4430":{"id":"2:3526:4430","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3528:226","2:3529:196","2:3530:61193"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13469:62071":{"id":"2:13469:62071","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15839:2958","self::pattern":"2:12997:5129"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:5132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13391:62056":{"id":"2:13391:62056","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49584:5425","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1616":{"id":"0:0:1616","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[109,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2018\n# use serde_derive::{Serialize, Deserialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.139\")]","#![allow(unknown_lints, bare_trait_objects)]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: derive_partial_eq_without_eq, clippy ::\nenum_variant_names, clippy :: manual_map, clippy :: match_like_matches_macro,\nclippy :: needless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: let_underscore_drop, clippy ::\nmanual_assert, clippy :: map_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:1257:1601","0:1258:1610"]}},"2:3701:137":{"id":"2:3701:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3703:675"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3696:213","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13022:5132":{"id":"2:13022:5132","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13024:4041","2:13025:61164","2:13026:61165"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13016:5128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6100:2265":{"id":"5:6100:2265","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15845:2963"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6671:4644":{"id":"1:6671:4644","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6672:57800","1:6673:8693","1:6674:8694","1:6675:8696","1:6676:8695","1:6677:8697","1:6678:8698","1:6679:8700","1:6680:6961","1:6681:8703","1:6682:8704","1:6683:8705","1:6684:8706","1:6685:8707","1:6686:8708","1:6687:8701","1:6688:8702"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13387:4771":{"id":"2:13387:4771","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49306:2711","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13402:2509":{"id":"2:13402:2509","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:47356:166","self::pattern":"2:12997:5129","prim@char":"1:15839:2958"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6097:62712":{"id":"5:6097:62712","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8352:205","`Box<str>`":"5:432:1783"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1783","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:4438","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14109:141":{"id":"2:14109:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14110:266","2:14111:507","2:14112:269","2:14113:1066"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5721:4661":{"id":"1:5721:4661","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5722:6920","1:5723:9233"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:7781:4880":{"id":"1:7781:4880","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7782:57924"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10264:3307":{"id":"2:10264:3307","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10265:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3615:3241":{"id":"2:3615:3241","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3617:60567","2:3618:60568","2:3619:1866"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:3342","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13481:4420":{"id":"2:13481:4420","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6098:4723":{"id":"5:6098:4723","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8352:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13371:293":{"id":"2:13371:293","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:15845:2963","`u8`":"1:15856:2972"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13410:57314":{"id":"2:13410:57314","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::split_whitespace":"1:15845:2963","prim@char":"1:15839:2958","self::pattern":"2:12997:5129","`DoubleEndedIterator`":"2:8411:120","str::rsplit":"1:15845:2963"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49320:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6773:4628":{"id":"1:6773:4628","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6774:57029","1:6775:57553"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10545:4626","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5639:4739":{"id":"1:5639:4739","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5640:6330","1:5641:2698"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10545:4626","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10503:146":{"id":"2:10503:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10504:640","2:10505:2578","2:10506:57677","2:10507:57678","2:10508:57679","2:10509:57680","2:10510:57681","2:10511:57682","2:10512:57683","2:10513:57684","2:10514:57685","2:10515:57686","2:10516:57687","2:10517:57688","2:10518:57689","2:10519:1509"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2837:97":{"id":"2:2837:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2839:1803"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:3342","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3459:116":{"id":"2:3459:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3460:210","2:3461:532"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3335:5085":{"id":"2:3335:5085","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3336:171","2:3337:900"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6078:1966":{"id":"5:6078:1966","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8352:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3347:5089":{"id":"2:3347:5089","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3349:880"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3406:5122":{"id":"2:3406:5122","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3408:1213"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13451:62065":{"id":"2:13451:62065","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13413:33207":{"id":"2:13413:33207","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:12997:5129","prim@char":"1:15839:2958"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12789:5384","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9222:3658":{"id":"2:9222:3658","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3343:4812":{"id":"2:3343:4812","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3345:1335"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13379:58491":{"id":"2:13379:58491","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"24:2875:6394":{"id":"24:2875:6394","crate_id":24,"name":"Speculative","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2876:63397"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13372:58492":{"id":"2:13372:58492","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15856:2972"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:2858:3281":{"id":"24:2858:3281","crate_id":24,"name":"Peek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"24:2740:4626","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6849:4635":{"id":"1:6849:4635","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6850:58374"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6845:4632":{"id":"1:6845:4632","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6846:57168"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4694:4680":{"id":"1:4694:4680","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4695:57310","1:4696:57311","1:4697:57312","1:4699:4699","1:4700:57313","1:4702:57314","1:4703:5877"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4612:4672","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13725:150":{"id":"2:13725:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13726:171","2:13727:150","2:13728:754"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4972:4743":{"id":"1:4972:4743","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4973:3221","1:4974:58411"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3486:130":{"id":"2:3486:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3488:365"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3489:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5705:4659":{"id":"1:5705:4659","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5706:60485","1:5707:60487","1:5708:60486","1:5709:60488"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13446:62063":{"id":"2:13446:62063","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"1:15839:2958","self::pattern":"2:12997:5129","`DoubleEndedIterator`":"2:8411:120","str::match_indices":"1:15845:2963"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49488:5421","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:5132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3411:5125":{"id":"2:3411:5125","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3413:1216"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13440:62061":{"id":"2:13440:62061","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"`DoubleEndedIterator`":"2:8411:120","prim@char":"1:15839:2958","str::matches":"1:15845:2963","self::pattern":"2:12997:5129"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49542:5424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:5132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9323:4622":{"id":"1:9323:4622","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9324:57903","1:9325:57904","1:9326:57905","1:9327:57906","1:9328:5457","1:9329:40487","1:9330:57902"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10545:4626","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13431:62059":{"id":"2:13431:62059","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13710:138":{"id":"2:13710:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13711:171","2:13712:1000"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3149:217":{"id":"2:3149:217","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3151:127","2:3152:1395"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5832:5588":{"id":"5:5832:5588","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5834:171","5:5835:34381"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10274:3312":{"id":"2:10274:3312","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10275:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14183:4437":{"id":"2:14183:4437","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14184:58170","2:14185:58171","2:14186:58172","2:14187:58173","2:14188:58174","2:14189:58175","2:14190:4063"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13393:1866":{"id":"2:13393:1866","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:15839:2958","self::pattern":"2:12997:5129"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3382:3433":{"id":"2:3382:3433","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3384:171","2:3385:1212"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3372:3956":{"id":"2:3372:3956","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3374:171","2:3375:342"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13466:58529":{"id":"2:13466:58529","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12997:5129","prim@char":"1:15839:2958"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:5132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9223:3657":{"id":"2:9223:3657","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3394:5117":{"id":"2:3394:5117","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3396:341"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4750:4427":{"id":"2:4750:4427","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4751:1784","2:4752:61519","2:4753:4050"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:63:3078":{"id":"20:63:3078","crate_id":20,"name":"IdentFragment","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:64:648","20:65:2048"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13384:58512":{"id":"2:13384:58512","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15845:2963"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:7891:5173":{"id":"2:7891:5173","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7892:61650","2:7893:61651","2:7894:61648","2:7895:61646","2:7896:61652","2:7897:61649","2:7898:61647"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2938:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6543:4673":{"id":"1:6543:4673","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6544:57849","1:6545:57850"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23655:5211":{"id":"2:23655:5211","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23656:5225"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23651:4626","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3250:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13366:62053":{"id":"2:13366:62053","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15845:2963"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2576:127":{"id":"1:2576:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2577:58104","1:2579:2941","1:2580:58103","1:2581:58105","1:2582:58106"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13437:3038":{"id":"2:13437:3038","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12997:5129","prim@char":"1:15839:2958","`DoubleEndedIterator`":"2:8411:120","str::matches":"1:15845:2963"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49524:5423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13478:1805":{"id":"2:13478:1805","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12936:3242","`FromStr`":"2:12936:3242"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12936:3242","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12936:3242","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13016:5128":{"id":"2:13016:5128","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13018:5151","2:13019:909","2:13020:61594","2:13021:61595"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3548:3230":{"id":"2:3548:3230","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3550:741"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:3342","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3544:2225","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13363:62051":{"id":"2:13363:62051","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13392:33335":{"id":"2:13392:33335","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49612:5428","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13463:15902":{"id":"2:13463:15902","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15839:2958","self::pattern":"2:12997:5129"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10538:4777":{"id":"2:10538:4777","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10539:146","2:10540:34627","2:10541:56995"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6445:4676":{"id":"1:6445:4676","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6446:57654","1:6447:8770","1:6448:57655","1:6449:57656","1:6450:57657","1:6451:57658"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10545:4626","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2938:174":{"id":"2:2938:174","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2940:984","2:2941:813","2:2942:779","2:2943:701","2:2944:684"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:3342","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3146:135":{"id":"2:3146:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3148:669"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:153:1789":{"id":"24:153:1789","crate_id":24,"name":"Token","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"24:160:4626","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13375:58489":{"id":"2:13375:58489","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47356:166"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3140:74":{"id":"2:3140:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3142:2159"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:3342","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:5775:4664":{"id":"1:5775:4664","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5776:57856"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10545:4626","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13416:58521":{"id":"2:13416:58521","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12997:5129","prim@char":"1:15839:2958","str::split":"1:15845:2963","`DoubleEndedIterator`":"2:8411:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49338:5387","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:5132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2892:173":{"id":"2:2892:173","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2894:593","2:2895:894"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:3342","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:6945:4631":{"id":"1:6945:4631","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6946:57776"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13364:62052":{"id":"2:13364:62052","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5727:4644":{"id":"1:5727:4644","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5728:8347","1:5729:57928","1:5730:6920","1:5731:57929","1:5732:4965","1:5733:4966","1:5734:57930","1:5735:1283","1:5736:57931","1:5737:57932","1:5738:57933","1:5739:57934","1:5740:57935","1:5741:57936","1:5742:57937","1:5743:57938"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13390:5877":{"id":"2:13390:5877","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49574:4703","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13484:62073":{"id":"2:13484:62073","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15839:2958"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49619:5429","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2840:3246":{"id":"2:2840:3246","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2842:2158"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:3342","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:4018:4652":{"id":"2:4018:4652","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4019:58106"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10262:119":{"id":"2:10262:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10263:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5761:4662":{"id":"1:5761:4662","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5762:57504","1:5763:57505","1:5764:57506","1:5765:57507"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3388:3435":{"id":"2:3388:3435","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3390:171","2:3391:1215"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13385:2275":{"id":"2:13385:2275","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15839:2958"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49290:5411","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13455:62067":{"id":"2:13455:62067","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13422:62058":{"id":"2:13422:62058","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12997:5129","str::split":"1:15845:2963","prim@char":"1:15839:2958","str::split_terminator":"1:15845:2963"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49388:5417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:5132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3339:3245":{"id":"2:3339:3245","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3341:255"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13434:62060":{"id":"2:13434:62060","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:5132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8363:136":{"id":"2:8363:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8365:672"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13386:2269":{"id":"2:13386:2269","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15839:2958"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49296:5412","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10266:2218":{"id":"2:10266:2218","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10267:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22961:17387":{"id":"2:22961:17387","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:22962:7852","2:22963:60556","2:22964:60557"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22954:4626","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3252:209":{"id":"2:3252:209","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13406:4046":{"id":"2:13406:4046","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47356:166","self::pattern":"2:12997:5129","prim@char":"1:15839:2958"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:5132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10270:3315":{"id":"2:10270:3315","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10271:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4612:4672":{"id":"1:4612:4672","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4613:4465","1:4614:58225","1:4616:58226","1:4617:58227","1:4618:4694","1:4619:58228","1:4620:57234","1:4622:58229","1:4623:4063","1:4624:4771","1:4625:2035","1:4627:2163"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13475:62072":{"id":"2:13475:62072","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15839:2958","self::pattern":"2:12997:5129"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:5132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13370:62054":{"id":"2:13370:62054","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:8330:5051":{"id":"2:8330:5051","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8332:4080"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13457:62069":{"id":"2:13457:62069","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:12997:5129","prim@char":"1:15839:2958"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13027:5133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3281:3343":{"id":"2:3281:3343","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:2628:2448":{"id":"24:2628:2448","crate_id":24,"name":"Spanned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2629:2048"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12936:3242":{"id":"2:12936:3242","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12937:126","2:12938:1941"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3355:5093":{"id":"2:3355:5093","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3357:1090"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13388:33350":{"id":"2:13388:33350","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15845:2963"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49594:5426","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3313:3438":{"id":"2:3313:3438","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3315:171","2:3316:1334"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3472:3302":{"id":"2:3472:3302","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3473:534"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3459:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3483:2164":{"id":"2:3483:2164","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3484:567"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8326:5052":{"id":"2:8326:5052","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8328:2854"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13460:62070":{"id":"2:13460:62070","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15839:2958","self::pattern":"2:12997:5129"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:5130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3240:200":{"id":"2:3240:200","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10268:3314":{"id":"2:10268:3314","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10269:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8376:3345":{"id":"2:8376:3345","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8378:2112","2:8380:4047","2:8381:4048"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5771:4663":{"id":"1:5771:4663","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5772:57928"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3218:115":{"id":"2:3218:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3219:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3248:207":{"id":"2:3248:207","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"6:3945:8219":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:14806:6656":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:12081:4826":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:15589:6657":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:14932:4808":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:3143:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:616:8000":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:15859:2975":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:51404:5266":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:11032:4725":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:49844:5143":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:11270:4946":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"24:5760:3113":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"2:51531:5243":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:12582:7155":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:6238:6014":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:6744:6216":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:6849:4635":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"24:3575:3370":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"16:7185:6078":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:7764:223":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:12468:5543":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:9886:47785":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"24:6370:175":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"6:5953:8664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"24:5808:3124":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"16:6219:6058":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"22:744:3330":{"crate_id":22,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"1:11227:57240":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"5:8352:205":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:47619:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:9731:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"21:2754:1725":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"1:12192:4809":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:10571:47986":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:13554:7452":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"24:3755:3378":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"1:699:4187":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"24:2385:3223":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"24:3413:3366":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"17:11604:6964":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:13856:4875":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"21:1043:4606":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"17:2543:6319":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:13942:7574":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:4262:8322":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:4477:7613":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"24:5725:3105":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"5:2257:5662":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:13240:7368":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:7318:176":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"21:1074:1593":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"16:7226:6082":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:8825:57236":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:10435:47892":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:11933:4876":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:4066:8273":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:5975:6052":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:53160:5248":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:10095:6345":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:12048:4824":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"18:704:6767":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:11915:7023":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:3522:6779":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:9210:47780":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:4255:4963":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:4623:224":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"12:877:4547":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"9:996:5764":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"5:7366:3220":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"24:5400:175":{"crate_id":24,"path":["syn","attr","Meta","Path"],"kind":"foreign_type"},"1:6543:4673":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:4997:2149":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"5:3483:4547":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"5:8328:5642":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:13318:7387":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:2462:13183":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:51453:5251":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:1760:8152":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"22:914:1800":{"crate_id":22,"path":["proc_macro2","Span"],"kind":"struct"},"1:3178:4905":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"21:1167:3335":{"crate_id":21,"path":["proc_macro","bridge","client","MultiSpan"],"kind":"struct"},"24:6088:3150":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"13:0:2928":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:4227:8320":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:4630:4695":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:49612:5428":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:49290:5411":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:12162:4895":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:10304:6290":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:10081:6302":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:13356:7401":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:2866:6178":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"24:4205:3393":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"12:1159:5828":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:7833:6617":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"24:6385:2103":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"2:8850:5170":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"5:1639:4785":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:9659:63267":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:46834:9208":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:5783:4658":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"21:3090:3236":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"24:5470:3098":{"crate_id":24,"path":["syn","data","Visibility"],"kind":"enum"},"16:6620:6209":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:10673:47990":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:46879:9210":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:15860:2976":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:2170:4547":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"17:13819:7538":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"11:54:5818":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"6:5414:8600":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:11304:47791":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"24:6104:1741":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"6:4371:8379":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:3287:6188":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:46151:9196":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"24:3467:1783":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"2:0:477":{"crate_id":2,"path":["core"],"kind":"module"},"2:46412:6619":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:48480:4115":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:49211:5402":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"24:6131:3151":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"24:4115:1722":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"1:15853:2969":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:4687:4697":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"5:7205:4549":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:6269:6060":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"21:2981:3235":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"2:49263:5510":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:14656:4742":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"18:660:6377":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"24:3773:3379":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"22:846:1800":{"crate_id":22,"path":["proc_macro2","imp","Span"],"kind":"enum"},"6:3862:8158":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:9809:63273":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:13488:7433":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:5580:5912":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:53266:8998":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"22:786:1736":{"crate_id":22,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"22:365:3235":{"crate_id":22,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"2:49198:5401":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"3:300:195":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:1717:8137":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:53286:9000":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:49320:4702":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"21:2923:3334":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"17:13446:7421":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:52296:5229":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:7514:6031":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"24:3395:3365":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"6:3990:8240":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:13842:7551":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:47466:4445":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:6554:6066":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"24:3015:2720":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"20:431:3838":{"crate_id":20,"path":["quote","__private","RepInterp"],"kind":"struct"},"6:1700:8130":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:51500:5239":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:10557:58393":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"17:12610:7161":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:24751:5478":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:32177:4251":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:1729:4957":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:1572:8038":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:49442:5391":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:24683:5476":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:3064:6239":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:11105:4702":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:5375:5560":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"24:5127:3427":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"1:15839:2958":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:5987:8683":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:5185:8484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:13482:57613":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:4707:5193":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:11358:6253":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:11077:3221":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:10558:47985":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:7146:6075":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:5433:5902":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:7626:4554":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"9:1075:5766":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"24:176:4092":{"crate_id":24,"path":["syn","token","CustomToken"],"kind":"trait"},"2:21:660":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:3195:6184":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:2548:5664":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:12789:5384":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:24093:9190":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:9280:6849":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:3707:5036":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:9528:2711":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"5:4510:5632":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"2:3281:3343":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:4553:4293":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:24513:5473":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:6776:4630":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:11312:4745":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:5531:5603":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:12028:7049":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:15837:2956":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"24:5362:1725":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"1:4378:4718":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:52183:5240":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"24:3208:6398":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"2:50909:8937":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:49061:5389":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"24:3431:3367":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"1:2920:170":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:3548:3230":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"24:5700:3099":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"17:2484:47881":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:9264:6848":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"24:2549:1978":{"crate_id":24,"path":["syn","parse_quote"],"kind":"module"},"1:4458:4717":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"24:6344:3165":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"1:1486:4547":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"24:5836:3131":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"1:823:6647":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"2:48693:4844":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"24:4151:1773":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"24:3521:105":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"1:12652:4904":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"24:5180:3431":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"1:12654:6652":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"21:1198:3333":{"crate_id":21,"path":["proc_macro","bridge","client","Diagnostic"],"kind":"struct"},"17:13520:7444":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"21:3070:1801":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"16:5505:5908":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"13:232:7851":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"22:920:1801":{"crate_id":22,"path":["proc_macro2","TokenTree"],"kind":"enum"},"24:2550:1978":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"17:12494:7142":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:15041:4761":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:7264:6027":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"14:56:1736":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:23930:9187":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:6518:6065":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:3360:5108":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:53257:8997":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:46591:5058":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:3367:4778":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:4164:8315":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"12:354:9176":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:11963:4878":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"24:3485:98":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"1:4343:4929":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:11402:5393":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:53338:9004":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"24:5781:3118":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"2:4345:3220":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:4120:8301":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:22954:4626":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:49470:5420":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:51943:5260":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"24:5995:3140":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"1:14475:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"16:3488:6190":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:5938:5014":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"24:3719:3376":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"1:7918:57622":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"16:5360:5898":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:14893:4809":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"24:5069:3423":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"24:5708:3101":{"crate_id":24,"path":["syn","expr","ExprAssignOp"],"kind":"struct"},"17:13258:7376":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:4955:7627":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:11584:4849":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"9:900:7907":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:6910:8823":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"19:117:6763":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"2:53050:5265":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:3313:3438":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:3218:6185":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:5210:8489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:10633:12195":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"24:5081:3424":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"16:2733:5936":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:11981:7043":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"24:2377:3221":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"1:4417:4720":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:9323:4622":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"18:720:6768":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"24:2872:1805":{"crate_id":24,"path":["syn","parse"],"kind":"module"},"1:7241:57238":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:46214:5569":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:13818:4873":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:3184:4694":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"5:7250:6600":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:56042:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:3939:7606":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:46314:5294":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:6464:6024":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"12:556:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"24:5221:3434":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"17:10468:6321":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:10410:61621":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:2793:4648":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:783:211":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:3429:5938":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:15851:2967":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"24:3206:127":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"6:6091:8720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:9574:6282":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"24:2875:6394":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"1:2175:4773":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:11970:7040":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:49769:5141":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:3372:3956":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:6221:8795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:45762:185":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:50036:5440":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:5068:3293":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:11947:7033":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:7663:4873":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:49929:9339":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"1:4972:4743":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"17:10128:6348":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:6250:4553":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"24:5274:3438":{"crate_id":24,"path":["syn","token","Sub"],"kind":"struct"},"24:5712:3102":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"6:5428:8605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:10420:6286":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:14439:9226":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:681:1817":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:923:5649":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:11975:57561":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"1:10346:1817":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:22997:4626":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:47406:3225":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:11082:6258":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:12946:7220":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:11986:57242":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"17:13465:7428":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"24:6376:2100":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"12:463:63240":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:15849:2965":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"5:4594:6603":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"2:7891:5173":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"24:5233:3435":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"24:2274:3217":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"6:3978:8231":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"24:6334:3163":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"17:13865:7552":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:9849:63268":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:10802:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:1540:8022":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:13221:7367":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"24:2306:3218":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"5:8105:5651":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:1736:8143":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:2159:3221":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:12725:7181":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"24:6054:3147":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"2:4033:4651":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:3181:4465":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:10781:4670":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:8625:4969":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:5927:5929":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:6100:8723":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:15196:4943":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:46622:5061":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:531:7950":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"20:357:2448":{"crate_id":20,"path":["quote","spanned","Spanned"],"kind":"trait"},"17:10061:47852":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"21:1253:1736":{"crate_id":21,"path":["proc_macro","bridge","client","Ident"],"kind":"struct"},"1:2366:589":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:5488:5907":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:1723:8140":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:5946:5015":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:13497:7436":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:7823:6023":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:6491:6064":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:1584:8047":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:14499:4696":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"5:3357:4775":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:9799:47784":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:48383:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:13780:7530":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:11045:47789":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"24:3359:3363":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"2:49619:5429":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:11738:6989":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:3486:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:3892:8176":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:10205:3311":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"24:4680:3397":{"crate_id":24,"path":["syn","token","AddEq"],"kind":"struct"},"1:9746:6645":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"2:47661:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:47414:3220":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"24:4061:3389":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"24:6098:1594":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"2:23971:5315":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:9245:6250":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:1472:4795":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"24:5792:3121":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"16:7549:6020":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:2031:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:10914:4890":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:6964:3654":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:12456:7137":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:7738:2071":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:1432:3225":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:11794:7007":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:6185:4961":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"22:935:1725":{"crate_id":22,"path":["proc_macro2","Group"],"kind":"struct"},"24:972:3142":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"16:7295:6029":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"24:916:63560":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"1:14462:9234":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:49524:5423":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:2169:567":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:7174:6077":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:3249:206":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:10844:6304":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:9759:47783":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"24:5458:3093":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"12:469:63236":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:5407:8599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:47527:3221":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:1045:4173":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:10912:48055":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:9186:6257":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:6856:5050":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"24:5737:3108":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"16:6166:6055":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:7158:6076":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:9133:47779":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:14800:6655":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:45737:184":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"18:790:6363":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"24:5844:3133":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"2:46600:5059":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:5255:8521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:13429:7414":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"24:2496:2384":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"17:12568:7153":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:12157:4983":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"21:3050:3329":{"crate_id":21,"path":["proc_macro","LineColumn"],"kind":"struct"},"2:3472:3302":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:1194:12198":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:45972:5332":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:4325:8355":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:3370:5620":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:6949:6222":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"24:5911:2386":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"17:8902:47773":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"24:5888:1744":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"1:1021:4171":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:32378:61474":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"16:2773:6203":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:10887:6899":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:4750:4427":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:2381:3303":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:4013:8249":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:48133:3314":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:13016:5128":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:69:4439":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:13685:7511":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:9937:5370":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:5568:5275":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:5123:3295":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"24:6339:3164":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"2:3483:2164":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:547:5920":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:24445:5472":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:49278:5196":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:23006:5226":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:5563:8652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"24:5867:2225":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"1:1450:4784":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"9:686:5696":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"12:892:5820":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"6:525:7947":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:4246:4727":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"16:3264:6187":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:12537:7148":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:51111:8938":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:12917:7200":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:47535:3225":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"18:811:6365":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"18:801:6364":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:13760:7524":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:46442:5038":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:2492:4432":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:12936:3242":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:5006:3288":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:6605:6026":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"18:667:6378":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"18:837:5128":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:32218:4253":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"2:14109:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:13540:7450":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:6404:212":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"21:407:4588":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"21:270:63346":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"6:88:40850":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"24:4917:3413":{"crate_id":24,"path":["syn","token","Dot3"],"kind":"struct"},"17:13272:7381":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:11482:1736":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:47389:1784":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:48703:9213":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:10200:47850":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:15344:5858":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:3685:4711":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:11099:2711":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:9162:6279":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:3967:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:5159:8469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:12741:7183":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:3268:4025":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:10546:4186":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"24:5796:3122":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"16:3172:6183":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:13062:7312":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:6636:6028":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:3319:4912":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:8676:4972":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:13296:7383":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:11595:4850":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:11458:6936":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:56016:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:3318:5079":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:5815:5925":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"24:5788:3120":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"6:4127:8303":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"14:250:7806":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:22584:61445":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:2816:6196":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"5:3295:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"24:5918:2426":{"crate_id":24,"path":["syn","generics","LifetimeDef"],"kind":"struct"},"17:10253:6292":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:22605:61449":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:4888:3305":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:5753:5922":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:9125:3650":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:11207:1800":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"16:2912:6179":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"24:5999:3139":{"crate_id":24,"path":["syn","generics","PredicateEq"],"kind":"struct"},"24:4982:3417":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"2:11374:5391":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:2187:4775":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:11388:5392":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:10673:9498":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:15858:2974":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"24:3827:2445":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"5:1934:4547":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:37488:168":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"24:6120:1945":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"24:2801:6401":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"18:829:6367":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:3946:4547":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"16:3392:6194":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"24:6414:3169":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"2:8143:3286":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:4331:8357":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"11:46:7856":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:15842:2960":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:13402:7410":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:6136:6050":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"22:770:1800":{"crate_id":22,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"6:4517:8438":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:9729:63265":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:10215:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"24:6124:1947":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"1:3597:4709":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:4612:4672":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"24:5139:3428":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"12:1762:6598":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:10572:4168":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:3248:207":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:11904:5407":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"24:3342:3441":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"18:169:54103":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"24:5464:1753":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"2:46612:5060":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:52021:5267":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:13836:34384":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:4377:8382":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:4300:8342":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:15844:2962":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:12042:3220":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:46543:5054":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:12715:5418":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"23:0:3060":{"crate_id":23,"path":["unicode_ident"],"kind":"module"},"2:56055:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:7804:6021":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"24:956:63563":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"6:5969:8676":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:15862:2978":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"24:948:63559":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"16:6087:6009":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:3018:6181":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:10028:47836":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:2201:1037":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:9046:4978":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:6597:61518":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:9751:6646":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"6:6005:8692":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:4852:7624":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:12172:4808":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:3742:3301":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:4350:7609":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:4790:7622":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"24:5490:3096":{"crate_id":24,"path":["syn","data","VisPublic"],"kind":"struct"},"16:6780:6071":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"24:1160:2025":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"5:3035:8828":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"20:193:3683":{"crate_id":20,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"16:7205:6080":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:15025:4760":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:5295:46199":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"22:736:1593":{"crate_id":22,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"24:3899:3384":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"17:13282:7382":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:12167:4896":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"21:676:3335":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"6:4033:8258":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:50212:8935":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:584:7984":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:6870:8812":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:49424:5390":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"24:5848:3134":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"6:6106:8724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"12:2331:3256":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:1648:4786":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:50279:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:2923:169":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:11363:4629":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:46868:8923":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"21:162:4614":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"12:396:5834":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:1511:4790":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:5357:4943":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"12:761:3225":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"24:5733:3107":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"24:5893:2168":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"14:47:9491":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:12212:4810":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:7633:2563":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:2751:4647":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:12632:7172":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"24:5320:2439":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"16:5330:6849":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:6935:8826":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:10820:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:1622:8071":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:14784:6654":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:1079:2231":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:10407:6287":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"22:909:1593":{"crate_id":22,"path":["proc_macro2","TokenStream"],"kind":"struct"},"6:511:1726":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:46850:9209":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:6947:5592":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:4890:7625":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:7571:6008":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"15:0:2936":{"crate_id":15,"path":["addr2line"],"kind":"module"},"24:6048:3144":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"22:856:1725":{"crate_id":22,"path":["proc_macro2","imp","Group"],"kind":"enum"},"16:4922:7626":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:9222:3658":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:7913:4169":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"1:6671:4644":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:1630:8076":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:1942:2166":{"crate_id":2,"path":["core","mem"],"kind":"module"},"5:6757:4686":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:11750:6990":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:10788:4671":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:12113:4828":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"5:3877:3277":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:13477:7429":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:15174:4754":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:11250:9224":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"2:3526:4430":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"9:27:5747":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:2897:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:6072:5995":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:5282:8528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"7:0:1459":{"crate_id":7,"path":["unwind"],"kind":"module"},"9:0:2931":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:4046:8263":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:46643:4700":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:4762:7621":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:14135:4718":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:13192:7359":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"9:776:5745":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"21:3085:1725":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"24:4169:3391":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"24:5028:3420":{"crate_id":24,"path":["syn","token","MulEq"],"kind":"struct"},"2:3684:5499":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"24:658:6747":{"crate_id":24,"path":["syn","expr","parsing","AllowStruct"],"kind":"struct"},"16:3506:6189":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:45829:189":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:10538:4777":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:1306:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:6474:5048":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"18:136:54101":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:23946:8834":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:3981:4893":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:2176:4250":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:7649:4872":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:10211:47849":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:12004:6625":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"17:11572:6958":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:15075:4769":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"5:8346:8829":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"6:605:7995":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"12:2323:7854":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"24:6401:2427":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"5:3743:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:5241:8510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:10919:4891":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:7821:5222":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"24:6307:3156":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"16:6731:6215":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:13564:7455":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:52908:5261":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:5547:12200":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:51602:5231":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:46189:5292":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:1617:8069":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:10897:203":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:6691:6070":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:4506:7614":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:8911:4991":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"2:3339:3245":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:45852:3250":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:32226:61477":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"24:3845:3381":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"5:8130:61834":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:4478:8423":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:5761:4662":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:49574:4703":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:12208:7080":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:10827:6249":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:23913:5320":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:157:40916":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"12:1855:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:15255:4951":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:5775:4664":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:51069:5258":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:15838:2957":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:2968:6180":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:4671:7618":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:13180:7354":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:10590:4170":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:10864:6898":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:11254:6278":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:8247:3257":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:49121:5395":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:57312:9017":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:46552:5049":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:14509:57593":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:11101:3225":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:10407:6648":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:8363:5598":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:46281:5565":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:6636:8805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:49817:5142":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"14:11:9491":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"12:2025:4773":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"24:5291:3439":{"crate_id":24,"path":["syn","token","SubEq"],"kind":"struct"},"24:4905:3412":{"crate_id":24,"path":["syn","token","Dot2"],"kind":"struct"},"24:5777:3117":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"2:49916:5147":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:49159:5399":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:1655:4797":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:8363:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"24:2071:63492":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"17:9933:47786":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:51236:5227":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:3351:5091":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:4101:8292":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"24:6226:1722":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"24:5406:1810":{"crate_id":24,"path":["syn","attr","Meta","NameValue"],"kind":"foreign_type"},"9:692:5698":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:10649:4798":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:10623:47989":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:11175:4753":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"6:624:8005":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:3118:6193":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:1533:8019":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:22582:61450":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:48903:5584":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:10403:6300":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:49130:5396":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:9942:5371":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:45892:4653":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:47457:3655":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:5469:8615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:11588:6963":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:48444:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:6068:4953":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:11539:6952":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"24:3593:3371":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"1:12068:4825":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:10266:2218":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:8460:192":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"18:694:6379":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:24581:5474":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:5197:8488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:8330:5051":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"14:189:9491":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:9614:6644":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"17:13205:7364":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:46632:5062":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:12754:5422":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:15856:2972":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:15069:4768":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"24:940:63561":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"24:1278:6410":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"1:10545:4626":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:5844:5009":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"2:2928:167":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"24:3863:3382":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"17:11779:7001":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:14880:4877":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:49185:5400":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:10204:195":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"6:4112:8297":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"24:4796:3405":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"6:4358:8374":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:8474:4823":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:161:40917":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"24:6003:1812":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"0:0:1616":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"2:48664:9212":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:50032:5438":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:11048:4696":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:51216:8939":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"12:840:4784":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"5:5310:190":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"12:1144:4796":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:8099:3220":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:9224:3656":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"24:4825:3407":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"1:1156:12196":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:12521:7146":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:3323:3408":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"24:4709:3399":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"21:452:63324":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"17:12262:7088":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:24479:4176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:24063:40173":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:4459:8415":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:10543:6902":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"12:774:3220":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:8152:184":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:5292:8535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:8297:5505":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:6051:8711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:52447:5253":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:15854:2970":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"18:774:6767":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:10458:6761":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:10493:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"22:780:1725":{"crate_id":22,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"24:5958:2418":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"12:2013:4549":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:13912:7566":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:47787:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:13810:7536":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:1501:4788":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:2991:6191":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:11628:6968":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"24:3809:2120":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"20:191:3684":{"crate_id":20,"path":["quote","__private","HasIterator"],"kind":"struct"},"24:4888:3411":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"16:7406:6015":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:9726:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"24:4842:3408":{"crate_id":24,"path":["syn","token","Div"],"kind":"struct"},"12:160:5832":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:4272:8329":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:10924:4712":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:8632:4971":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:15309:9088":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"12:112:63239":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:4734:7620":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"24:932:63558":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"2:51350:5259":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:45920:5220":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:47997:5509":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:6110:6049":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:13598:7462":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:5783:6600":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:1522:4791":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"24:4187:3392":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"1:11118:4745":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"1:3317:4911":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"12:1253:4797":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"5:1457:4796":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:38732:4026":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:14216:4170":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:1419:3221":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:11026:47788":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:46663:5053":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:11416:3646":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:3965:6600":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:897:4184":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:48126:3307":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:6591:6068":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:51143:5250":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"20:44:4626":{"crate_id":20,"path":["quote","ext","private","Sealed"],"kind":"trait"},"1:10357:9502":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"7:38:45749":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:56003:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:53323:9003":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:48140:3315":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"24:3130:9511":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"2:8565:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:13978:7578":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:49139:5397":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:8894:4232":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:11172:4752":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"17:13331:7393":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"9:234:5723":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:1623:4794":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:13041:7303":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:2213:5622":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:13590:7461":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:3137:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:23556:4624":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"22:740:3235":{"crate_id":22,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"17:13547:7451":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:2305:5677":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:10682:4646":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"16:2843:6177":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:10317:6289":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:49594:5426":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"24:5812:3125":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"17:12712:7180":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:4669:3311":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:14962:9235":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:47423:3654":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:519:7944":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:6681:8703":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"24:4133:3390":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"24:3539:3369":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"17:13609:7466":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:3725:5168":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"24:153:1789":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"1:2399:13166":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:12097:4827":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:5721:4661":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:1744:8147":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"21:482:6594":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"1:9049:4866":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:48496:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:10618:12192":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:24377:5470":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:3218:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"24:4929:3414":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"24:968:2795":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"24:5923:3138":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"24:6083:2120":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"2:52104:5252":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:632:8010":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:569:7975":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"21:0:1024":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"22:986:2446":{"crate_id":22,"path":["proc_macro2","Literal"],"kind":"struct"},"17:9296:6850":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:11519:6951":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:3957:8221":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"24:5751:3111":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"1:10836:4710":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:5273:5940":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:4341:8363":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"24:5426:1808":{"crate_id":24,"path":["syn","attr","NestedMeta","Meta"],"kind":"foreign_type"},"24:66:1972":{"crate_id":24,"path":["syn","token"],"kind":"module"},"5:4638:6605":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:8326:5052":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"22:823:1593":{"crate_id":22,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"6:6028:8710":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:5221:8497":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:3713:5167":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"24:5704:3100":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"5:8090:4438":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"5:4301:3225":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:4364:8377":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:12307:7096":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:24100:5536":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:49296:5412":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"24:3683:130":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"12:1180:5829":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:1153:12194":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:1669:4788":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"24:5940:3137":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"2:51038:5270":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:3338:5933":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:48119:2218":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:5978:8682":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:7392:6017":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"14:0:2935":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:4449:8414":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:8846:5171":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:13073:5136":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:4410:8393":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"24:4277:226":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"2:49112:5394":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:10448:6322":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:5312:8551":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:1596:8055":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:3074:4626":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:8122:5652":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"24:4970:3416":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"18:782:6767":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:5916:5012":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:3329:3429":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"5:7604:4553":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"14:244:9174":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:9368:6851":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:7042:6226":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:46274:5429":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:2274:4475":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:12040:7051":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:3868:8159":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:6887:8817":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"24:4941:124":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"17:13637:7474":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:10331:6304":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:10771:4645":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:3966:8226":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:12168:6870":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:6208:6057":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:10276:3313":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"24:5040:3421":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"2:23008:5225":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:13725:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:13710:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"24:3971:196":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"6:6239:8798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:2512:6288":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:7378:6016":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:11001:48040":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:24547:4177":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:24717:5477":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:10788:47962":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"24:2333:3219":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"6:5528:8627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:9839:6304":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:52230:5244":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"21:213:4290":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"2:3394:5117":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:4052:8266":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:10041:47837":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"21:2976:1593":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"2:3398:5107":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:11809:7013":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:9698:4937":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"17:9769:63271":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:11525:4846":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"24:3701:3375":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"2:2753:568":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"18:754:63279":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:50060:5437":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:6214:8792":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:5078:3294":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:5175:3298":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:49149:5398":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:2772:5663":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:9689:63260":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"12:1667:5841":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:13929:4874":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:6812:8808":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:24649:4881":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"5:1486:4797":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:4346:4930":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"24:6350:3167":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"18:0:2939":{"crate_id":18,"path":["memchr"],"kind":"module"},"24:5720:3104":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"16:6366:5847":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:10599:47987":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:46252:3322":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:5029:7629":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:3800:7605":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:13098:7342":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"24:3557:115":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"12:2009:3220":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:5228:8501":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:2576:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"2:49488:5421":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:14022:5450":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:10179:6862":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"22:0:1591":{"crate_id":22,"path":["proc_macro2"],"kind":"module"},"22:717:3277":{"crate_id":22,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"24:1274:6409":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"5:6681:5604":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:51255:8940":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:14444:9228":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:46492:5043":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:1463:4785":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"5:2325:5661":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:47577:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:5967:5018":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:13506:7437":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:5167:8471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:11145:4747":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"6:5371:8584":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:0:785":{"crate_id":6,"path":["libc"],"kind":"module"},"5:7808:6613":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:14183:4437":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:7928:2518":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"18:677:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:3303:4908":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:0:2938":{"crate_id":17,"path":["object"],"kind":"module"},"21:2946:6393":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"24:2360:3220":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"2:3406:5122":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"24:4721:3400":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"12:937:4790":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"24:3647:3373":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"21:3036:1800":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"1:10567:4159":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:46227:5430":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:6152:6011":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"24:2126:6397":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"1:12026:3221":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:50888:8936":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:15056:4762":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:13760:61591":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:1676:8113":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:5832:5588":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:24025:40172":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:5472:5906":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:2192:1773":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:55990:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:4694:6605":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:27932:5104":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:6424:6063":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:49542:5424":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"24:2449:3227":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"20:0:1053":{"crate_id":20,"path":["quote"],"kind":"module"},"18:620:9126":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"12:0:2934":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"16:7342:6044":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:3308:3244":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"24:5945:2171":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"5:1602:3225":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"21:2409:4581":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"21:3131:1736":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"17:9649:47781":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:47543:3220":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:5561:5911":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:5410:4686":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:3176:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:8411:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:2754:5935":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:9160:57236":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:12783:7191":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"24:5860:1759":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"2:23999:8838":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:53238:5233":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:14669:4878":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:12507:7143":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:53113:5230":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"21:1105:2446":{"crate_id":21,"path":["proc_macro","bridge","client","Literal"],"kind":"struct"},"21:2787:2130":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"24:5399:1808":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"1:10432:6650":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"24:6056:3143":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"17:12385:7123":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"9:963:5763":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:3258:2368":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:4026:195":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:50957:5257":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:3889:5645":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:10801:47961":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"24:5303:3440":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"24:3103:3276":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"2:22812:4625":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:1215:5659":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:12444:5579":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:4431:8403":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:5386:8586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:610:7997":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:11434:6922":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:14449:4670":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"24:5417:3091":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"6:4215:8319":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"24:5729:3106":{"crate_id":24,"path":["syn","expr","ExprBox"],"kind":"struct"},"16:5407:5900":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"12:1200:5830":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:13348:7398":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:1690:8124":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:55897:5207":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"5:7104:6613":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"6:4419:8399":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:12221:7081":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:3696:213":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:432:1783":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:11246:5386":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:47955:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:6413:5846":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"24:5245:3436":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"2:51990:5264":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"24:5840:3132":{"crate_id":24,"path":["syn","expr","ExprType"],"kind":"struct"},"17:10975:48042":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"4:0:2929":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:9551:6277":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:24411:5471":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"24:4241:3395":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"5:8430:4547":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:10264:3307":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:51627:5232":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"24:5403:1809":{"crate_id":24,"path":["syn","attr","Meta","List"],"kind":"foreign_type"},"24:6316:3157":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"1:7635:4871":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"24:5011:3419":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"17:13924:7568":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"24:924:63562":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"9:927:45853":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"15:230:5849":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:10140:6304":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:2314:6294":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:12771:7188":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:12182:7077":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:6391:6062":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"12:1118:4795":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"21:2897:4586":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"2:47552:168":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"21:2726:4585":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"2:52797:5241":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"24:4097:213":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"16:0:2937":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:4293:8341":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"24:160:4626":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"16:3772:7604":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:5727:4644":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:1908:42218":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"5:3033:1977":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:56029:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:22802:4626":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:8314:5641":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"24:5716:3103":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"24:2053:3278":{"crate_id":24,"path":["syn","buffer","TokenBuffer"],"kind":"struct"},"5:8144:3220":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"24:5387:2071":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"17:12010:7048":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"9:1056:5758":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:10279:6302":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:6032:5942":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"12:2309:7852":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:46473:5041":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:6124:8735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:50099:5519":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"1:8789:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:47356:166":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"24:4259:3396":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"2:47483:195":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"24:5742:3109":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"2:46653:5063":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:12155:7073":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:10270:3315":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:49752:5140":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:6999:6073":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:4456:4716":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:11822:7017":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:45783:188":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"24:5800:3123":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"2:50982:5249":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:4306:8345":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"24:3204:195":{"crate_id":24,"path":["syn","error","Result"],"kind":"typedef"},"1:15857:2973":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:46841:4232":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:10503:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:6858:8810":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:9574:6643":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"24:3665:3374":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"17:9440:6853":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:7216:6081":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:5421:5901":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:10160:6860":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"12:1688:5842":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:49388:5417":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"20:63:3078":{"crate_id":20,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"5:2195:6602":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"5:8264:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"24:2189:1730":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"2:8127:60900":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:10938:48065":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:50309:4436":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"5:1689:5657":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:11434:4834":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:2938:174":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:5130:8445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:5379:8585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"12:747:3221":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"24:5972:1871":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"2:3250:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:4203:8318":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:4241:8321":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:3329:4917":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"22:874:2446":{"crate_id":22,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"1:11920:171":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:5998:8688":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:9404:6852":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:13681:4883":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:22550:61351":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:45645:5035":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"24:6410:2117":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"2:3377:4779":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"24:5192:3432":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"2:3701:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"24:5747:3110":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"2:10258:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"17:10236:6275":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:4083:8283":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:15843:2961":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:46145:3322":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:3743:6245":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:12671:7175":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:2840:3246":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"5:8282:5640":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:49881:5144":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:32037:5531":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"16:6577:6067":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:11640:6971":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:25121:5298":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:48392:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:23820:5467":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"12:2005:3221":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:13799:7535":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:9065:47777":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:607:47772":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:5456:5903":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"24:5963:2421":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"1:8724:4981":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:15864:2980":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:2163:3220":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:11231:6280":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:2945:6202":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:45927:3294":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:5705:4659":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:7119:5943":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"5:3336:5619":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:11767:6998":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:8160:5597":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"9:722:5699":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"6:591:7987":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:7894:6047":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:3043:56994":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"18:885:6371":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"22:981:1736":{"crate_id":22,"path":["proc_macro2","Ident"],"kind":"struct"},"2:3153:216":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"24:6052:3148":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"24:2969:1806":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"5:8375:5599":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"24:3881:3383":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"1:15863:2979":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:6899:8819":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:11142:4746":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"1:15852:2968":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:5639:4739":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:10274:3312":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:11993:9083":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"1:7781:4880":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:15840:2959":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"12:853:4785":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"16:5707:5916":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"17:11015:48067":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:2401:13167":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:4852:3304":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:14492:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"9:469:9285":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:11275:4947":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:49603:5427":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:51783:8950":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"24:5429:1812":{"crate_id":24,"path":["syn","attr","NestedMeta","Lit"],"kind":"foreign_type"},"1:14970:4884":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:6305:4962":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"24:6356:3154":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"6:5459:8613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:10950:48066":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"24:5870:61":{"crate_id":24,"path":["syn","expr","parsing","raw"],"kind":"struct"},"2:12997:5129":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:1527:8016":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"24:4733:3401":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"2:51759:8949":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:51174:5238":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:13453:7422":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"24:5461:3094":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"2:53277:8999":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:12982:7251":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"22:755:3329":{"crate_id":22,"path":["proc_macro2","fallback","LineColumn"],"kind":"struct"},"2:49628:3322":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:15855:2971":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"24:6046:3145":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"16:4386:7610":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:11337:6318":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:14002:6653":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:7856:6088":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:3041:6182":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:3604:6783":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"24:1271:6408":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"6:6155:8761":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:57291:9016":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:11148:4751":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"1:1505:4789":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:7884:6019":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"24:6319:3158":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"17:10635:6863":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:48656:4801":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:1708:8131":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:51579:5228":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:14000:7584":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:7195:6079":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:13027:5133":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:5484:4951":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:10224:47853":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:5152:3297":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:53376:9006":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:8013:4171":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"17:9719:47782":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:1563:8032":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:46520:9204":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:23984:5316":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"24:5425:1811":{"crate_id":24,"path":["syn","attr","NestedMeta"],"kind":"enum"},"24:4871:3410":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"17:8929:47774":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:3615:3241":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:3146:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"24:6360:3168":{"crate_id":24,"path":["syn","ty","Variadic"],"kind":"struct"},"17:13898:7559":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:7615:4870":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:1646:4796":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:5360:4944":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:12152:4862":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:12247:7085":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:50052:5442":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:1195:62011":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:537:7952":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"5:8181:3220":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:1236:47851":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:11499:6941":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"24:4767:3403":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"1:11112:4703":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"21:3110:2130":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"24:5151:3429":{"crate_id":24,"path":["syn","token","Rem"],"kind":"struct"},"2:50934:5269":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:3091:6240":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:6445:4676":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"24:5768:3115":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"24:2971:1807":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"typedef"},"2:3492:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:11555:6956":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"12:976:4793":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:8467:4822":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:6423:4630":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:7477:6033":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:8376:3345":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"24:5852:3135":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"2:12678:5415":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"24:3737:3377":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"16:7786:6022":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:578:7981":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:3355:5093":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:9332:6317":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:599:7992":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:11696:6984":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:1838:6600":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:9223:3657":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:1665:8105":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"24:5820:3127":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"24:161:4099":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"2:46173:5290":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"24:2740:4626":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"24:4692:3398":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"1:1476:4549":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:50220:180":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:3246:3300":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:4932:3279":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:12034:4821":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"24:4813:3406":{"crate_id":24,"path":["syn","token","Colon2"],"kind":"struct"},"1:9841:6647":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"6:3905:8186":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:6021:6176":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:6864:8811":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:45806:187":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:9713:4938":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:14012:4433":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:3972:8228":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"22:959:2130":{"crate_id":22,"path":["proc_macro2","Punct"],"kind":"struct"},"17:12095:7062":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"12:2045:1773":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"5:374:4441":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"24:4784:3404":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"24:6406:2115":{"crate_id":24,"path":["syn","path","Binding"],"kind":"struct"},"2:46502:5044":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:10071:6351":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:1602:8057":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:12442:7135":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:12685:7176":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:10106:6346":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:7493:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:4494:8428":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:48377:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"18:610:6374":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:11178:4886":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"1:10844:3277":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:3240:200":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:8367:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:10677:1892":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"22:865:1736":{"crate_id":22,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"21:2937:3333":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"5:7437:6600":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:4695:5192":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:22865:5225":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:51197:5242":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"24:3611:3372":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"2:48672:5176":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:12645:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:11039:4726":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:22806:4623":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:4008:47963":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:3607:6627":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"24:3083:3272":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"2:46464:5040":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:11835:7018":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:3402:5120":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"24:3629:1749":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"18:636:6767":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:7333:6030":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:50044:5443":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:37512:4031":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:13054:7310":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:49700:5131":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:3245:3342":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"22:792:2446":{"crate_id":22,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"24:3449:3368":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"1:15821:57560":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:49239:5405":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:11264:4945":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:14073:191":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:50265:5449":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:9619:60358":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"2:48711:9214":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"24:5348:2119":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"6:4145:8314":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"24:5110:3426":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"12:866:4549":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:1161:12197":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"21:2989:3220":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"5:4237:6600":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:11281:5387":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:10268:3314":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"5:5088:648":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"16:5941:179":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:12431:7133":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:7073:6074":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"24:5209:3433":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"2:13227:40450":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"1:9607:60359":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"16:4704:7619":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"24:2144:4626":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"6:5436:8607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:3034:61975":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"24:5334:3563":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"17:13582:7459":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:6893:8818":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:12287:7090":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:5384:5899":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:11653:6973":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:50202:191":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:49306:2711":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"18:820:6366":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:11367:8692":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:4040:8261":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:3343:4812":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:13772:7527":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:13119:7347":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"21:1136:3330":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"18:896:6372":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:49895:5145":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:10611:47988":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:299:63274":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:5868:6608":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"2:32212:4252":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:2265:5213":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:3918:8196":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:47913:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"24:2858:3281":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"16:6682:6025":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:10926:48064":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:1554:8027":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:51303:5271":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:11060:4698":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:5274:8523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:6923:8824":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:3075:5106":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:6845:4632":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:11962:7038":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:11378:6252":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:11319:5013":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:1592:3221":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:5400:8597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:22537:4031":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:9088:47778":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:5736:5919":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:49637:5430":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"21:2813:1801":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"16:6718:6214":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:1311:6352":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"10:0:2932":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"20:117:1802":{"crate_id":20,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"16:4304:7608":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:4678:57901":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"24:3917:3385":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"17:12659:7174":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:563:7972":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:14138:4720":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:50048:5441":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:10656:6865":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:10814:6248":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"24:6326:3161":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"6:4193:8317":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:13986:7581":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"7:85:45756":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:53391:9007":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:2437:13177":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"24:2973:3264":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"24:6331:2172":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"2:3149:217":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:3508:4708":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:4719:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:1136:4654":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"24:3247:3220":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"2:53297:9001":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:11678:6975":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"18:766:6777":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"12:930:4789":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:7279:6227":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:13370:7403":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"24:4007:3388":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"24:4859:3409":{"crate_id":24,"path":["syn","token","DivEq"],"kind":"struct"},"2:3347:5089":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:4535:7615":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:2794:5937":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"12:1651:5840":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:48359:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:11932:7029":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:6200:8783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:46563:5055":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:52654:5273":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"9:41:5748":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"1:1442:3220":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"18:650:6373":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:6768:6218":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:3544:2225":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:46364:5506":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:15846:2964":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"14:231:2262":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:1528:4792":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"24:6216:3152":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"6:1547:8024":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"12:2315:63235":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:11199:6913":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"24:2988:3265":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"1:6685:8707":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:46329:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:5945:8659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:4018:4652":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"18:152:54102":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:6401:5047":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"15:269:5854":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"24:6363:2170":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"17:9971:63263":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"24:5990:2416":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"2:47475:178":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"24:5093:3425":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"22:24:9240":{"crate_id":22,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"2:2862:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:50256:5448":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:47829:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:3382:3433":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"24:299:1736":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"1:9447:9501":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:11568:4847":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:23655:5211":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:1091:6600":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:13394:7408":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:51679:8947":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:4133:8305":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:6014:6053":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"12:2039:4775":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:13733:7512":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:38669:4649":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:6847:4634":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"18:744:63277":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:4183:8316":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:4425:8400":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:3754:3221":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:53199:5268":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"24:4223:3394":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"2:5594:766":{"crate_id":2,"path":["core","iter"],"kind":"module"},"24:3989:3387":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"5:1235:5660":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:3388:3435":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:12467:7138":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:49370:5416":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"24:4079:2212":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"17:13574:7458":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:15333:5858":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:3997:8244":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:32278:61475":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"16:5790:5924":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:22565:61351":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"24:4025:2489":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"17:12795:7198":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"22:1015:3220":{"crate_id":22,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"17:10516:6324":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:15861:2977":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"5:3331:4774":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:6644:8807":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:4281:8334":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:5855:5926":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:3631:4704":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:4380:4719":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"12:377:5835":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:47745:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:8374:4844":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"16:3365:5934":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:46581:5057":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:9034:47776":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:14912:9087":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"5:1613:3220":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"24:5052:3422":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"17:12073:7061":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"9:603:9295":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:53312:9002":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:7719:5039":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:6614:8804":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:10477:6320":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:11118:47790":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"20:305:2025":{"crate_id":20,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"16:6252:6059":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:11277:6914":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:4439:8408":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:14867:4876":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:10639:4781":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:46258:5564":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"18:866:6370":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:7250:6084":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:5359:8577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:4395:8389":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:46235:5563":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:13554:2108":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:47871:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:1658:8101":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"22:832:9124":{"crate_id":22,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"16:4641:7617":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:5231:7630":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:4511:8436":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:4230:7607":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:6945:4631":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"5:5882:6611":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"17:12343:7102":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:5954:5017":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:8954:6259":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:7961:6629":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"5:1630:4784":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:47703:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:11993:7045":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"24:5764:3114":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"24:6373:2411":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"24:5494:3097":{"crate_id":24,"path":["syn","data","VisRestricted"],"kind":"struct"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:12480:7140":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:3489:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"24:661:63392":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"1:6773:4628":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"21:1475:181":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"1:11082:4646":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"24:3791:3380":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"2:4:966":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:10776:4904":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"14:216:46128":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:46451:4646":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:7453:6012":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:4823:7623":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:11871:5406":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"24:6324:3160":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"2:49906:5146":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:46534:5046":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"9:157:5715":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"17:11847:7021":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:14141:4716":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"18:644:6376":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:5522:8626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:7778:4879":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:12118:7068":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:24047:40164":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"12:181:5836":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"12:812:4788":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:10502:9131":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:2837:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"5:1011:3221":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"24:6322:3159":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"5:3039:3383":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"24:5784:3119":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"17:11665:6974":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:13163:7352":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:2460:6422":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:5633:4741":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:8396:5644":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"17:13627:7469":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:4317:8351":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:5314:6848":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:4614:7616":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"9:1020:5765":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"21:3136:2446":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"5:8114:4549":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"22:837:54331":{"crate_id":22,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"6:5420:8603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"14:194:46122":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:4438:3221":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"24:5492:3095":{"crate_id":24,"path":["syn","data","VisCrate"],"kind":"struct"},"17:11147:9133":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:11169:5384":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:10962:48043":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:8070:4725":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:4419:4721":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:9943:63276":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:47398:3221":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"24:2146:6752":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"5:3391:1773":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:4417:7611":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"12:2018:4547":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"16:6101:6007":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:11328:7188":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"24:4958:3415":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"21:2985:3324":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"17:510:47771":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:7360:184":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:6807:6072":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:2892:173":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:4005:8246":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:6645:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"24:5393:3089":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"1:12315:6422":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:3779:4429":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:51005:5237":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"12:949:4791":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:5828:5586":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:13620:7467":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:13172:7353":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"12:925:4786":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"24:3257:3221":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"17:12275:7089":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:610:1370":{"crate_id":1,"path":["std","thread"],"kind":"module"},"17:12051:7052":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"24:2063:3277":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"1:7272:57238":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:11914:4874":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:9600:63262":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:2598:9499":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"9:809:4844":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:4585:4686":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"12:1235:5831":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:6185:8778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:55977:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"12:1100:4794":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"24:0:1590":{"crate_id":24,"path":["syn"],"kind":"module"},"5:3767:3225":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:5548:8641":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:7761:6086":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:3365:4773":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"18:712:4031":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:12234:7083":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:1637:4795":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:6665:5603":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:3714:7603":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:11330:4956":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:11389:4633":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:7024:6225":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:51381:5263":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:15845:2963":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:49723:5134":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:8187:3220":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:6683:8705":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:11948:4877":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"24:6302:3155":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"2:50040:5439":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:4694:4680":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"24:5421:3092":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"20:18:3077":{"crate_id":20,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"17:11159:6912":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:11186:9134":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"24:5824:3128":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"24:5438:1750":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"2:46511:5045":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:4523:8441":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"3:0:419":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"13:120:46094":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"24:6353:3153":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"16:5632:5914":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:6126:6054":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:5522:5909":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:3140:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:9005:47775":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"24:5804:2000":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"6:3881:8168":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:52987:5245":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:10988:48041":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:6468:4549":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:13834:57621":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"24:3503:2118":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"12:429:5833":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:15850:2966":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"24:5832:3130":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"2:12738:5419":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:5713:4660":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:11485:4844":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:11971:9225":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"16:7467:6013":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:46288:5566":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:53453:9009":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:4401:8390":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:11092:4700":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:45673:4431":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:10353:6295":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:542:5945":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:9896:63275":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"24:5443:1792":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"2:49338:5387":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"8:0:2930":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"24:6328:3162":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"6:3951:8220":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:14:2578":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:13317:4958":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"5:0:266":{"crate_id":5,"path":["alloc"],"kind":"module"},"18:739:63284":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:3459:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:1441:4794":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:10489:6323":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:3241:6186":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:10543:5175":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"24:5828:3129":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"6:543:7955":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:11338:4945":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:7601:4869":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:5132:3296":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:8436:3344":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:8179:6629":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"24:4750:3402":{"crate_id":24,"path":["syn","token","Bang"],"kind":"struct"},"12:968:4792":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:14424:4638":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:8275:4171":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"2:3335:5085":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:11726:6988":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"21:127:4608":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"17:13788:7531":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:5347:8572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:5191:8487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:3411:5125":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:6923:4636":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:7303:6085":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"22:542:3235":{"crate_id":22,"path":["proc_macro2","LexError"],"kind":"struct"},"16:5717:5918":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"24:4043:1751":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"24:4999:3418":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"16:5766:5923":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:45913:2518":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:45721:186":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:4028:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:6068:8713":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"24:5168:3430":{"crate_id":24,"path":["syn","token","RemEq"],"kind":"struct"},"12:2303:1725":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:46347:5505":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:15234:4944":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:294:63272":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:4157:6262":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"24:6050:3146":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"20:47:2796":{"crate_id":20,"path":["quote","format_ident"],"kind":"macro"},"1:1492:4786":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"24:4663:3244":{"crate_id":24,"path":["syn","token","Add"],"kind":"struct"},"1:11324:5016":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"24:2442:3225":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"17:12756:7187":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:1658:4787":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"18:857:6369":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:15318:58394":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:46204:5568":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"24:5856:3136":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"1:7103:3645":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:48422:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"6:4470:8421":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"9:749:5700":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"16:4995:7628":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:7420:6032":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"12:2032:4774":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"24:3377:3364":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"6:4095:8289":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:10001:47835":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:5269:8522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:13746:7518":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:10377:6293":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"5:994:5650":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:10255:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:10262:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:3301:4450":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:46422:13795":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:11344:4964":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:46295:5567":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:6085:8718":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:13801:177":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:786:6647":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"6:6176:8775":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"24:5257:3437":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"17:10266:6291":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:13532:7447":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"24:3935:3386":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"2:3252:209":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:5960:5931":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:4023:8255":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:23651:4626":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:51864:5272":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"11:0:2933":{"crate_id":11,"path":["adler"],"kind":"module"},"1:1497:4787":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"21:3115:1799":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"1:2181:4774":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:49220:5403":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"24:5816:3126":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"2:49738:5137":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:12195:7078":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:13386:7406":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:670:41246":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"24:2628:2448":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"24:5969:2085":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"16:7870:6018":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:8843:4428":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:7236:6083":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:3549:7602":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:13306:7384":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:9476:6854":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:6644:6069":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:24615:5475":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:7427:175":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"5:1680:184":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:11360:5390":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:46334:5504":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:6852:8809":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:50056:5436":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:12598:7159":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:5672:5915":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"12:784:4787":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:2889:6197":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:10117:6347":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:12408:7132":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:50028:5435":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"5:4210:4549":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:5001:3287":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:51727:8948":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"0:1257:1603":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"2:11319:5388":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"24:454:63395":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"1:2166:4549":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:10656:13172":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:5346:6010":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:12645:7173":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:1522:8014":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:9961:47787":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:3834:6600":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:0:1310":{"crate_id":1,"path":["std"],"kind":"module"},"24:6128:1949":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"5:8234:3256":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:14652:9498":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:46572:5056":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"21:1269:1800":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"24:6418:2169":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"2:48410:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:13222:9497":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"16:6357:6061":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:6176:6056":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:13933:7572":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"0:1258:1611":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"2:49584:5425":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:4073:8276":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"15:248:5850":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:8118:4171":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"17:13154:7348":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"22:939:3236":{"crate_id":22,"path":["proc_macro2","Delimiter"],"kind":"enum"},"1:7718:4875":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:23749:5465":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:24007:8839":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"24:6347:3166":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"20:296:2025":{"crate_id":20,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"17:13884:7557":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:46859:4293":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:11100:6283":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"21:1489:9125":{"crate_id":21,"path":["proc_macro","bridge","handle","NonRandomState"],"kind":"struct"},"1:5771:4663":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:11578:3221":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:12137:4977":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:8447:4548":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:12373:7121":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:9344:5130":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"24:964:3141":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"16:5996:1766":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:13906:61516":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"2:46482:5042":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:52261:5247":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:49229:5404":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:15810:12199":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:13463:13177":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:11126:4702":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"5:3324:3221":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:4347:8366":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:4060:8271":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:50297:4650":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:10149:47785":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:4387:8385":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:13022:5132":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"24:5499:2167":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"16:5595:5913":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:45885:5169":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:13007:5130":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:10529:9132":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:23891:8832":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:24115:5492":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:13377:7405":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:11406:6918":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:50064:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"19:0:981":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:13963:7577":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"21:3065:3330":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"2:51554:5246":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"20:528:3952":{"crate_id":20,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"18:849:6368":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:48907:5583":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"24:3953:3294":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"6:4501:8431":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:12142:7070":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"24:5755:3112":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"16:6569:6211":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:2060:4686":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:7843:6087":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"21:68:4587":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"2:51092:5262":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:48681:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:12552:7152":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:46160:5289":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:8366:4171":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"2:4637:4686":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"24:2864:6395":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"1:1534:4793":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:4340:4928":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:53361:9005":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:11508:4845":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:10272:179":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:12699:7179":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:3145:6192":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:8959:4807":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"22:965:1799":{"crate_id":22,"path":["proc_macro2","Spacing"],"kind":"enum"},"17:8849:6276":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:15805:9306":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:11714:6985":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"24:6044:1940":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"2:50086:4813":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"2:22961:17387":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:10888:4626":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:12327:7097":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:10052:47838":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:53414:9008":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:24128:5491":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:22603:61447":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:3320:6241":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:10584:6261":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:903:4185":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:11616:6967":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:2251:4476":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:6881:8816":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:11208:5385":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:10828:4924":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"24:5772:3116":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"18:729:6749":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:4448:7612":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"}},"external_crates":{"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"23":{"name":"unicode_ident","html_root_url":null},"20":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.20/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/1.0.98/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.40/"}},"format_version":15}