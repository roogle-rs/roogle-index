{"root":"0:0:1849","crate_version":"1.0.196","includes_private":false,"index":{"2:12962:31362":{"id":"2:12962:31362","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12985:35118":{"id":"2:12985:35118","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:3816"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12604:15853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12887:2188":{"id":"2:12887:2188","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12915:8741":{"id":"2:12915:8741","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44098:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12953:31357":{"id":"2:12953:31357","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:3816","str::rsplitn":"2:12956:31359"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44216:8832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12907:35106":{"id":"2:12907:35106","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12078:1544","crate::ops::IndexMut":"2:3240:3421","str::slice_unchecked":"2:12906:35105"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12916:33282":{"id":"2:12916:33282","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12917:33230"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44386:8842","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12944:31355":{"id":"2:12944:31355","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12579:3816","`DoubleEndedIterator`":"2:7960:131","prim@char":"1:12072:453","str::split":"2:12938:30730"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44130:8755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13008:28881":{"id":"2:13008:28881","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12997:35119":{"id":"2:12997:35119","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:3816"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13003:35121":{"id":"2:13003:35121","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:3816"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13014:31256":{"id":"2:13014:31256","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:37892"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13016:35122":{"id":"2:13016:35122","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4758:35122"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44411:8786","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12906:35105":{"id":"2:12906:35105","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12078:1544","str::slice_mut_unchecked":"2:12907:35106","crate::ops::Index":"2:39848:2595"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12898:2077":{"id":"2:12898:2077","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42231:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12947:35108":{"id":"2:12947:35108","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12579:3816","str::split":"2:12938:30730","prim@char":"1:12072:453","`DoubleEndedIterator`":"2:7960:131","str::rsplit_terminator":"2:12950:35109"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44162:8829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12959:31361":{"id":"2:12959:31361","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12968:35110":{"id":"2:12968:35110","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12579:3816","`DoubleEndedIterator`":"2:7960:131","prim@char":"1:12072:453","str::matches":"2:12965:2184"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44334:8839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12889:35102":{"id":"2:12889:35102","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12971:35111":{"id":"2:12971:35111","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12579:3816","`DoubleEndedIterator`":"2:7960:131","prim@char":"1:12072:453","str::rmatch_indices":"2:12974:35112"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44262:8835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12988:2096":{"id":"2:12988:2096","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:3816"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12897:31325":{"id":"2:12897:31325","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12089:1648"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13013:31255":{"id":"2:13013:31255","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:37892"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5579:2421":{"id":"5:5579:2421","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13012:28885"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13010:28883":{"id":"2:13010:28883","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12885":{"id":"2:12885","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12886:878","2:12887:2188","2:12888:35101","2:12889:35102","2:12891:35103","2:12894:2950","2:12895:35104","2:12896:333","2:12897:31325","2:12898:2077","2:12900:31322","2:12902:31323","2:12904:31324","2:12906:35105","2:12907:35106","2:12908:2838","2:12909:31347","2:12910:31350","2:12911:31351","2:12913:2431","2:12914:2425","2:12915:8741","2:12916:33282","2:12917:33230","2:12918:30731","2:12919:35107","2:12920:33242","2:12921:2290","2:12924:31363","2:12927:31364","2:12930:2740","2:12934:4363","2:12938:30730","2:12941:31353","2:12944:31355","2:12947:35108","2:12950:35109","2:12953:31357","2:12956:31359","2:12959:31361","2:12962:31362","2:12965:2184","2:12968:35110","2:12971:35111","2:12974:35112","2:12977:35113","2:12979:35114","2:12981:35115","2:12983:35116","2:12984:35117","2:12985:35118","2:12988:2096","2:12991:27589","2:12994:31365","2:12997:35119","2:13000:35120","2:13003:35121","2:13006:2057","2:13008:28881","2:13009:31252","2:13010:28883","2:13011:28884","2:13012:28885","2:13013:31255","2:13014:31256","2:13015:31257","2:13016:35122","2:13018:10390","2:13019:35123"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:965:1846":{"id":"0:965:1846","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[96,0],"end":[101,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:12910:31350":{"id":"2:12910:31350","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12911:31351"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13009:31252":{"id":"2:13009:31252","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40202:31259","Self::is_ascii":"2:13008:28881"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40202:31259","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12934:4363":{"id":"2:12934:4363","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42231:191","prim@char":"1:12072:453","self::pattern":"2:12579:3816"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12930:2740":{"id":"2:12930:2740","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42231:191","prim@char":"1:12072:453","self::pattern":"2:12579:3816"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12894:2950":{"id":"2:12894:2950","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12127:15857"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12909:31347":{"id":"2:12909:31347","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12908:2838","str::split_at_mut_checked":"2:12911:31351"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12956:31359":{"id":"2:12956:31359","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12072:453","str::splitn":"2:12953:31357","self::pattern":"2:12579:3816"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44234:8833","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5560:35808":{"id":"5:5560:35808","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:282:2032","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:282:2032","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5575:35811":{"id":"5:5575:35811","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7597:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12950:35109":{"id":"2:12950:35109","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12579:3816","str::split":"2:12938:30730","prim@char":"1:12072:453","str::split_terminator":"2:12947:35108"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44180:8830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:964:1838":{"id":"0:964:1838","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[88,0],"end":[93,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:12896:333":{"id":"2:12896:333","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12897:31325","`u8`":"1:12089:1648"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5564:35809":{"id":"5:5564:35809","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7597:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12938:30730":{"id":"2:12938:30730","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12579:3816","`DoubleEndedIterator`":"2:7960:131","prim@char":"1:12072:453","str::split_whitespace":"2:12916:33282","str::rsplit":"2:12944:31355"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44112:8752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12908:2838":{"id":"2:12908:2838","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:12910:31350","str::split_at_mut":"2:12909:31347"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86-0:994:2062":{"id":"0:86-0:994:2062","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[21,0],"end":[21,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::internals::case::RenameRule","name":"RenameRule","id":"0:994:2062","glob":false}}},"2:12974:35112":{"id":"2:12974:35112","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12579:3816","`DoubleEndedIterator`":"2:7960:131","prim@char":"1:12072:453","str::match_indices":"2:12971:35111"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44280:8836","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12983:35116":{"id":"2:12983:35116","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12918:30731":{"id":"2:12918:30731","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44366:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12913:2431":{"id":"2:12913:2431","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12072:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44082:8823","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:377":{"id":"0:63:377","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1881,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:86-0:994:2062"],"is_stripped":false}}},"2:12920:33242":{"id":"2:12920:33242","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44404:8844","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5578:2422":{"id":"5:5578:2422","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13011:28884"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12911:31351":{"id":"2:12911:31351","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12910:31350"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12886:878":{"id":"2:12886:878","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12072:453"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12895:35104":{"id":"2:12895:35104","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13011:28884":{"id":"2:13011:28884","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12914:2425":{"id":"2:12914:2425","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12072:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44088:8824","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12991:27589":{"id":"2:12991:27589","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:3816"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12900:31322":{"id":"2:12900:31322","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42231:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12921:2290":{"id":"2:12921:2290","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:3816"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13012:28885":{"id":"2:13012:28885","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12902:31323":{"id":"2:12902:31323","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12919:35107":{"id":"2:12919:35107","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44376:8841","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:493-0:404:1969":{"id":"0:493-0:404:1969","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[14,0],"end":[14,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:404:1969","glob":false}}},"0:8:1961":{"id":"0:8:1961","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[216,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:12924:31363":{"id":"2:12924:31363","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:3816"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12979:35114":{"id":"2:12979:35114","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492-0:1019:1968":{"id":"0:492-0:1019:1968","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1019:1968","glob":false}}},"0:0:1849":{"id":"0:0:1849","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[101,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2021\n# use serde_derive::{Deserialize, Serialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.196\")]","#![allow(clippy::branches_sharing_code, clippy::cognitive_complexity,\nclippy::collapsible_match, clippy::derive_partial_eq_without_eq,\nclippy::enum_variant_names, clippy::manual_map,\nclippy::match_like_matches_macro, clippy::needless_pass_by_value,\nclippy::too_many_arguments, clippy::trivially_copy_pass_by_ref,\nclippy::used_underscore_binding, clippy::wildcard_in_or_patterns,\nclippy::unnested_or_patterns,)]","#![allow(clippy::cast_possible_truncation, clippy::checked_conversions,\nclippy::doc_markdown, clippy::enum_glob_use, clippy::indexing_slicing,\nclippy::items_after_statements, clippy::let_underscore_untyped,\nclippy::manual_assert, clippy::map_err_ignore, clippy::match_same_arms,\nclippy::match_wildcard_for_single_variants, clippy::module_name_repetitions,\nclippy::must_use_candidate, clippy::similar_names, clippy::single_match_else,\nclippy::struct_excessive_bools, clippy::too_many_lines,\nclippy::unseparated_literal_suffix, clippy::unused_self, clippy::use_self,\nclippy::wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:964:1838","0:965:1846"],"is_stripped":false}}},"2:12984:35117":{"id":"2:12984:35117","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13000:35120":{"id":"2:13000:35120","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:3816"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5561:2218":{"id":"5:5561:2218","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7597:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13006:2057":{"id":"2:13006:2057","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12540:137","`FromStr`":"2:12539:3437"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42372:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12539:3437","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12539:3437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5559":{"id":"5:5559","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5560:35808","5:5561:2218","5:5564:35809","5:5567:35810","5:5575:35811","5:5576:35812","5:5577:3481","5:5578:2422","5:5579:2421"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12965:2184":{"id":"2:12965:2184","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12579:3816","`DoubleEndedIterator`":"2:7960:131","prim@char":"1:12072:453","str::rmatches":"2:12968:35110"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44316:8838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12977:35113":{"id":"2:12977:35113","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12888:35101":{"id":"2:12888:35101","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12891:35103":{"id":"2:12891:35103","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12889:35102"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12917:33230":{"id":"2:12917:33230","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12916:33282"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44395:8843","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13018:10390":{"id":"2:13018:10390","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4759:10390"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44420:8780","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1023:2065":{"id":"0:1023:2065","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"2:12904:31324":{"id":"2:12904:31324","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5577:3481":{"id":"5:5577:3481","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7597:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12981:35115":{"id":"2:12981:35115","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13019:35123":{"id":"2:13019:35123","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4756:35123"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44429:8785","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5567:35810":{"id":"5:5567:35810","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7597:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12994:31365":{"id":"2:12994:31365","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:3816"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12941:31353":{"id":"2:12941:31353","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:3816"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12395:8754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13015:31257":{"id":"2:13015:31257","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:37892"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12927:31364":{"id":"2:12927:31364","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:3816"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:15854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5576:35812":{"id":"5:5576:35812","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:282:2032","`String`":"5:7597:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:282:2032","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"16:2304:22334":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:11715:8534":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:10155:5472":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"24:5208:3376":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"24:1792:10337":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"24:5555:3402":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"1:10088:27643":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"24:561:138":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"24:3112:3681":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"24:4494:2664":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"24:2636:3662":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"17:14752:5932":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:2979:6461":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"11:2423:3411":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:6438:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"24:563:8462":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"17:13015:5559":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:12808:5588":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:6908:8684":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:12077:1511":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"18:531:8504":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"24:345:37003":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"6:1621:7034":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"24:5534:3397":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"1:12088:797":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:2375:6416":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:5336:7332":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"24:4139:3713":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"24:4998:2595":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"11:1582:22262":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"11:2562:6792":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:6756:7679":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:44411:8786":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:15760:6281":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"18:659:27535":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:9155:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"24:5434:1967":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"11:2469:4781":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"6:6417:7518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:44429:8785":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"24:920:37001":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"5:7367:5119":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"11:700:3411":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:3749:10535":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:5630:8574":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"5:4202:5132":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:41242:3525":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:43961:8191":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"24:5204:2192":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"2:10032:3565":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"23:407:4151":{"crate_id":23,"path":["quote","__private","RepInterp"],"kind":"struct"},"1:12090:1645":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"24:4831:3345":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"20:950:1984":{"crate_id":20,"path":["proc_macro2","Ident"],"kind":"struct"},"17:11557:23382":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:11688:8532":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:10719:129":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"6:7467:7806":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"11:1887:3411":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"20:746:2671":{"crate_id":20,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"1:1975:708":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:12724:23289":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:41044:3519":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:10170:5473":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:6519:7568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:7401:3411":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:4592:3579":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:6201:6439":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:13457:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"15:327:10010":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:7355:8691":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:3406:6465":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:14111:5810":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:3208:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:8055:2749":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:5541:8565":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:40890:3499":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:43921:8757":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"23:150:4011":{"crate_id":23,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"24:5397:2367":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"17:16235:6398":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:11399:8910":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:7932:8701":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:8080:27649":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:5555:23195":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:6408:6515":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"24:3316:3686":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"16:6062:8629":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"24:4045:3706":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"2:5699:5132":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:43950:15842":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:40016:8030":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:6803:23205":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:39959:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:10466:5170":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:14131:5811":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"10:0:3173":{"crate_id":10,"path":["adler"],"kind":"module"},"2:728:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"24:4979:3366":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"24:4407:3732":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"24:2874:3670":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"2:3056:15944":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"6:5636:7471":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"9:356:22195":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:41083:3522":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:2492:7927":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"11:1142:22260":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"24:4520:2317":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"6:6678:7650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:1156:36482":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:4821:23472":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:11160:8407":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:42972:3567":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:40921:3501":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"21:2636:251":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"24:3435:3692":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"6:1485:6947":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:6821:7698":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:47081:8257":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:10016:121":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"24:288:36843":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"6:7537:7857":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:47347:8262":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:42656:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"21:1834:4804":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"0:965:1847":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"6:1547:6980":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:5415:7365":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:11269:23329":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:12127:15857":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"5:3211:8718":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:2693:9938":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:4547:3578":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:11419:5499":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:6077:9994":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:4473:3570":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:5568:8569":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:5346:6498":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:10028:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"24:5530:3395":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"16:6215:10009":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:6562:7597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:5236:7288":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:22746:7939":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:7706:23215":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:485:6884":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:517:6906":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:3411:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:7389:7793":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:4823:10572":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:6692:6550":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:12362:8549":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"24:1771:10336":{"crate_id":24,"path":["syn","path","printing","span","QSelfDelimiters"],"kind":"struct"},"5:7574:8742":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:15222:6120":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:8215:3475":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:9122:8397":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:7816:10398":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:8022:23218":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:7429:36573":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:1887:10433":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"24:3992:3703":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"2:12599:15855":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:5306:7323":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:6788:36574":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:10855:10637":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"6:4924:7180":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"24:1442:2056":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"24:3163:228":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"6:5477:7406":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:6068:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:13972:5517":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:13877:5779":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"24:2670:3664":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"2:12341:8834":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:21349:4352":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:1692:7074":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:10399:2960":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:5277:7311":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:7686:5207":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"11:2369:22264":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:15944:5636":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:22:735":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"20:885:2051":{"crate_id":20,"path":["proc_macro2","Span"],"kind":"struct"},"6:5200:7270":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:4811:7109":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:7070:9942":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:5527:115":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:4968:6493":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:13422:8762":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:12072:453":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"24:4562:3316":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"24:2704:105":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"17:13497:5686":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:1643:2537":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:40772:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:8012:8705":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:688:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"24:3061:3678":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"6:5515:7416":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:44376:8841":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:7467:28630":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:5827:10652":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:22381:10781":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"24:1908:3408":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"2:10013:121":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:12251:23434":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:48527:8317":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:9988:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:40620:8781":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"24:5024:63":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"24:4507:3877":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"6:5665:7482":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:4916:7178":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:4959:7194":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:2032:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:7366:7775":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:46877:8239":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:5146:7254":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:928:10404":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:22524:10775":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:22730:8765":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:40642:33283":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"24:4852:3349":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"2:42051:2051":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:47271:8260":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:13526:5695":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:15138:6096":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"24:4081:3709":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"16:7684:8694":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:12201:23458":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"24:2857:3669":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"24:1525:2058":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"type_alias"},"2:42734:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:22172:10694":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:42372:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"24:5206:3377":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"24:3912:3698":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"2:39189:5333":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:22023:10698":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:482:5181":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:7837:9934":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:21633:7936":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"24:4861:3334":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"6:6664:7645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:48371:8309":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:9938:23277":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:523:6909":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:11583:23359":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:42428:3411":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:46509:8228":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:13375:5665":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"24:4878:3335":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"24:4538:3314":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"1:4075:10559":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"24:4848:3348":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"17:437:5424":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"24:2738:118":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"17:10284:5477":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:31467:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:33195:5322":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:586:6943":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:7602:7880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:1925:7933":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:15678:6264":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:32807:116":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"24:4016:3705":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"2:11624:15840":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:859:3411":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:637:10392":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:11128:5463":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:41466:3484":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:2730:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"23:322:2674":{"crate_id":23,"path":["quote","spanned","Spanned"],"kind":"trait"},"17:11595:5507":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:22495:10774":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:12584:23285":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:43940:8758":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:1483:8715":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:11214:23306":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:10720:36629":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:41476:3486":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"24:1523:3424":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"6:5314:7327":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:7335:6453":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:8315:10533":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"24:5214:3379":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"6:6714:7666":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"17:15596:6236":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:3773:6469":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"24:5120:2646":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"2:46327:8216":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:48313:8304":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:11877:5510":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:14260:5851":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:7414:6605":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"21:2696:2051":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"1:5713:5195":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:14847:6015":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"14:0:3176":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:2529:6423":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:42343:3988":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:2573:6425":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"9:237:8186":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"11:2542:6788":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"24:4057:3707":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"14:40:1984":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:6882:8679":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:11367:5491":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:697:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:43693:8190":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"24:4419:3733":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"2:9677:10037":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:34347:4273":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:8294:7912":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"24:1173:8466":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"2:3417:15881":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:40740:15899":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:3600:5381":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:11115:23307":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:12454:8554":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:6243:5194":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:5043:10526":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:14271:5852":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:12342:8544":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:22609:8763":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"21:961:4823":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"16:4871:6490":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:3177:6406":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:7960:131":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"20:910:3433":{"crate_id":20,"path":["proc_macro2","Delimiter"],"kind":"enum"},"6:6763:7680":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"16:5865:8599":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:588:10389":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:7415:33134":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"18:573:5350":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:11825:23405":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"24:5392:2364":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"1:4248:10583":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:5191:7265":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"20:513:3431":{"crate_id":20,"path":["proc_macro2","LexError"],"kind":"struct"},"2:41012:3517":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"18:680:8507":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:3039:5334":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:44852:8876":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:44071:8822":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"24:4895:3336":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"17:15569:6224":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:5919:23200":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:2422:4709":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"5:1501:10402":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"24:1102:2061":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"5:7377:8734":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:14463:5887":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:2733:10516":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:2588:10515":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:1680:7070":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"11:2352:10409":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"20:356:3431":{"crate_id":20,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"21:52:4807":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"2:32688:2749":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:45075:9662":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:13797:5765":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:12079:1629":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"24:4628:2245":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"17:14311:5856":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"24:3027:2670":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"1:8085:10045":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:10350:5479":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:5696:6501":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"20:777:3434":{"crate_id":20,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"6:8006:7887":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"20:955:2671":{"crate_id":20,"path":["proc_macro2","Literal"],"kind":"struct"},"16:7366:6454":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:5316:5472":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:22769:8768":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:1707:7081":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:11799:23424":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:10092:23280":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:15608:6239":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:9102:27585":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"11:2403:3416":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"24:4891:3355":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"2:21371:34641":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:2736:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:893:4783":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:42617:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"18:515:5353":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:4987:10613":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:14147:5816":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:5581:10637":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:13235:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:10383:5167":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"24:5402:2368":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"5:6919:4788":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:7345:8690":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:8923:10665":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"18:589:5357":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:1585:4781":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:9150:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:42500:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:7467:3472":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:42023:10534":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"5:3773:10411":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:6773:6559":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:3814:10538":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:8996:10664":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:1585:7004":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:1699:7077":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"24:3975:3702":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"11:123:5099":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"24:2568:3738":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"2:5870:3514":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:46032:8204":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:32648:6791":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"24:4156:3714":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"20:783:27544":{"crate_id":20,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"2:1911:4733":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:44492:15868":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"21:2641:3431":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"2:41000:3526":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:40680:8784":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:5794:5132":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:12111:9931":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:32775:3605":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:12318:8831":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:791:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:34693:3729":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:8282:7910":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"11:1066:22258":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:4720:7790":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:0:3179":{"crate_id":17,"path":["object"],"kind":"module"},"24:956:3044":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"16:6669:8669":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:16269:5671":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"4:0:3170":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:1054:10408":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:1578:3411":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:3916:10540":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:10622:36628":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"24:4571:1998":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"17:12478:5563":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:6017:5138":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"21:2779:2671":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"24:4342:3727":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"17:11574:8720":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:13208:33948":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:10671:36635":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:44000:15837":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:44860:8197":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:3159:4689":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:40202:31259":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:15418:6171":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:14079:5806":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:44180:8830":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:4537:3577":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"24:559:226":{"crate_id":24,"path":["syn","error","Result"],"kind":"type_alias"},"6:4897:7165":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:5466:7401":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:44913:16032":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:16259:5666":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"6:6409:7516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:10915:36640":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:7802:10397":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:5521:6445":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:11654:8915":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:12087:801":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"18:754:8520":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:11385:8411":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:11743:8536":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:10906:8754":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:12707:23288":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:4232:5132":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:14868:6025":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:2749:6433":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:5580:6444":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:33801:3458":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:10738:27598":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:10877:23286":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"5:7610:8743":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:22393:33796":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"7:0:1693":{"crate_id":7,"path":["unwind"],"kind":"module"},"11:800:4783":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:13581:5714":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:3570:28845":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:7270:6603":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"24:2019:3414":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"2:3333:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:34520:5311":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"24:3401:3690":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"17:13024:23292":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:13437:5673":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:11166:5493":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:6608:8748":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:12792:5438":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"24:2585:3659":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"1:8981:10662":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"24:5115:2643":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"2:45021:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:3576:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:6597:7618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:8881:8386":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:46679:8233":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:46655:8232":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:46102:8207":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"9:0:3172":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:44542:8853":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"24:3044:3677":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"17:16121:6371":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"2:3406:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:40863:10481":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"6:4932:7182":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:13922:5785":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:12597:5569":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"21:2715:2052":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"5:7492:3468":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:7620:9927":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:6929:4789":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"24:4395:3731":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"24:5387:2652":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"17:16138:6373":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"16:149:5096":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:42814:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:15010:6069":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"24:620:3412":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"17:13424:5672":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:15190:6113":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:4952:7191":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:12030:23393":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:5370:7344":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:6547:5199":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:2450:10477":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:16212:6393":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"24:5542:3399":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"2:2733:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:6737:6556":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:7516:7843":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:3472:5132":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:12408:5558":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"24:4279:3723":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"2:46124:8208":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:6575:5108":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"24:904:36999":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"2:4353:3590":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:4261:10584":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:44559:8854":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"24:5515:3392":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"17:12530:23469":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:13485:5685":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:7103:36597":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"24:4839:3347":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"2:9168:15854":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:4431:5132":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:44280:8836":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"11:856:10405":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"24:3078:3679":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"2:42007:8165":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:40991:3516":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:1503:6955":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"20:827:1972":{"crate_id":20,"path":["proc_macro2","imp","Group"],"kind":"enum"},"1:1826:10418":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"24:4591:3329":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"2:41218:3523":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:8351:7925":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:1445:3416":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:10068:23260":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:849:3416":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:7976:129":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"24:2823:3668":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"2:4190:34808":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:12443:5562":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:14051:5802":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"20:845:2671":{"crate_id":20,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"6:5052:7239":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:7546:7860":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:6396:10786":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:8870:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:4210:30643":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:41484:3488":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:7348:7766":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:3451:3586":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:5174:7256":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:12357:8837":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:3707:5108":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:7921:4971":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:15313:6141":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"18:0:3180":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:3601:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:4040:4783":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"21:0:1182":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"1:9041:4564":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"24:3837:3693":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"1:5834:10653":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"24:3367:3688":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"5:7020:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:4011:10555":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:13785:5763":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"11:1903:8717":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"24:4971:3365":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"2:46487:8227":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:43272:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:5720:8883":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:9196:8897":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:836:3412":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:4797:721":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:2001:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"21:140:4817":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"16:6134:9993":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:6275:10044":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:9969:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"1:12082:695":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:21405:34647":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:13173:5621":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"20:708:251":{"crate_id":20,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"1:5512:10636":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:7697:3477":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:10747:27596":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:10487:4570":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:15176:6110":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"11:102:8708":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:7653:6620":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:44058:8193":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:4891:7162":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"24:5359:2347":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"2:10669:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:5476:10634":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"5:1276:8686":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:6331:8639":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"24:2959:3674":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"2:8381:3492":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:3245:8717":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:1063:10409":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:6505:7567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"24:4975:3342":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"2:7918:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"24:5006:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"1:6691:5200":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:11413:9672":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:8268:3509":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"24:566:5309":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"2:48340:8306":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:15445:6178":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:7386:6455":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"11:434:36556":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:12095:15993":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"24:1659:2059":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"6:7485:7817":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:6524:7569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:16187:6388":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"16:4399:6475":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:41435:3476":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:12055:27594":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:6979:5202":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:10700:8322":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"24:3197:3684":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"2:43453:8814":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:14372:5866":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:13753:5756":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"24:5407:3385":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"17:13292:5650":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:46457:8226":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:12238:23435":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"24:4597:2001":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"2:5984:3502":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"18:726:5372":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"11:1910:8718":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"20:116:36660":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"2:12593:8513":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"24:2286:5318":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"1:5906:5189":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:14575:5559":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:1542:10410":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"24:1652:3549":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"24:4856:3333":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"1:1574:3412":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:3741:6468":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:33381:5323":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:11495:5216":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:40930:3510":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:9017:8393":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:4112:3416":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:261:36644":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:4202:34807":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:38445:5330":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:46823:8237":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"24:4967:3364":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"1:8614:3412":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:47737:8296":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:2819:6436":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:30956:33258":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:0:3178":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:40959:3513":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:4824:7119":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:7245:2798":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:4491:6478":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:44513:8845":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"21:478:5095":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"16:6362:6459":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:14341:5861":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:13116:5609":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"24:1169:8464":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"2:39852:8778":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:10069:10427":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:1824:10417":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:3399:10512":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:12863:5590":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:11657:15841":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"2:21417:34644":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:46226:8212":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:21359:34641":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:3561:3563":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:10317:5478":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"3:0:480":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:4109:10560":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:10659:10485":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:1098:23310":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:11674:8531":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:15957:6315":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:11125:15849":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:11497:23335":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"5:7064:5153":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:14325:5859":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:11018:8755":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:15102:6091":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:2995:7929":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"18:735:27533":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"24:1484:27560":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"1:9081:1978":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:11313:8524":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:10952:5213":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:13399:5669":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"24:677:36806":{"crate_id":24,"path":["syn","expr","precedence","Precedence"],"kind":"enum"},"1:7754:4573":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:7987:8888":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:6330:5195":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:4702:6484":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"24:5426:3387":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"17:14402:5872":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:7113:5203":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:15273:6132":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:6746:7672":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:13674:5722":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:44878:132":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:16176:6387":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:3442:3482":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:48237:8302":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:13272:5649":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:33860:5325":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:14489:5889":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:1207:23315":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"23:78:2053":{"crate_id":23,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"16:8109:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"20:680:3435":{"crate_id":20,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"6:6900:7724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:7931:8886":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:2859:10448":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:10090:27710":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:13046:5599":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:30930:4647":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:3020:4338":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"18:613:36646":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:15078:6086":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:5645:8576":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"11:364:5101":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:1496:6952":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:14066:5805":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:11051:23320":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:4825:15892":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:9057:3989":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:10449:5169":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:5407:1108":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"24:4477:3737":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"23:38:3049":{"crate_id":23,"path":["quote","format_ident"],"kind":"macro"},"2:42169:8889":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:11324:23352":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:4837:7129":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:48191:8301":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:3356:10520":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"5:7437:3411":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:7507:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:14449:5886":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:8428:8368":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:15463:6181":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:2671:5170":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"18:643:5350":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:4986:23477":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"11:1883:3412":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:10024:3566":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"24:5368:2350":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"2:22303:10779":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"23:281:2061":{"crate_id":23,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"2:1804:637":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"21:1023:3598":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"6:7446:7800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"24:2275:10485":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"24:1994:3411":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"2:43500:8818":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:14246:5849":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:5662:23197":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:46257:8213":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:11647:27640":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:9178:8398":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"11:2548:6789":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:2516:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:3029:5321":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:12969:5594":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:6348:6442":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:15426:6173":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"24:4180:3716":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"24:2772:126":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"24:5142:3371":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"6:8012:7889":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:2399:6417":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:40759:8159":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:2440:10472":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:42312:3987":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:8526:8186":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:1510:6957":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:15333:6148":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:12353:8548":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:307:1594":{"crate_id":1,"path":["std","thread"],"kind":"module"},"6:6698:7658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"17:15521:6223":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:213:4699":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:5601:23196":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:5462:10633":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"24:4866:3350":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"17:15168:6107":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:5794:8590":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:2355:6415":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"24:4887:3354":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"17:11764:8539":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:5499:6443":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:2268:10464":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:14436:5885":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:40982:3515":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:4784:10588":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:10018:23257":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:7306:23210":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:42353:3991":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:2521:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:1723:7086":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:4433:6476":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:3579:10483":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:4017:10554":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:15400:6167":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"24:4448:3735":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"17:14025:5798":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"5:1461:3411":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:43861:33783":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"12:0:3175":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:7679:4781":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:13832:5769":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"24:5210:3378":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"24:4594:3330":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"1:1590:8717":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:5039:7235":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:12647:23467":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"16:6724:6554":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:4984:421":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:2689:6430":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:8402:10616":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:5344:7333":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"24:2908:3671":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"2:11139:15848":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:4864:7152":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:11510:23334":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:6413:3527":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:3216:35913":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:6892:10690":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:5382:7348":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:5329:7331":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"6:497:6889":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:13553:5704":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:7951:8704":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:11701:4730":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:44216:8832":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:3275:10522":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:11095:8398":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"2:9490:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"24:4874:3352":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"2:39879:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"21:2253:3434":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"17:12887:8557":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:11702:8533":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:7491:6609":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:7089:5156":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"21:2606:8498":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"18:689:8510":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:7537:6458":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:4813:6488":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:40777:8792":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:16093:6364":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"24:5151:1984":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"1:6227:5179":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:5112:7251":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:4468:3569":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"11:742:10035":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:725:10485":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"2:10020:3558":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:723:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:4550:10588":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:42229:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:47193:8259":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:10887:36624":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:1522:10035":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:47989:8298":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:2439:6419":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:2617:6427":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:21561:10696":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:12683:23471":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"16:5038:6495":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"14:202:2418":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:7294:6604":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:15410:6170":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:12056:5544":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:8306:7914":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:8954:8390":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:8090:10517":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"20:836:1984":{"crate_id":20,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"2:42958:3558":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:22395:4718":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"24:1967:3410":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"1:1040:8686":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:2740:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:45121:8881":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:9145:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"24:3180:3683":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"17:15368:6159":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:9886:23275":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:621:9933":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"24:3418:3691":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"2:13186:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:5132:27715":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:7503:3469":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:14386:5868":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:14475:5888":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:5365:5108":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:15931:5622":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:11063:23314":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:1581:4783":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"11:687:3416":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"13:0:3169":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:12083:697":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:12579:3816":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"24:952:3372":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"17:12557:5491":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:10689:8906":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:39848:2595":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"24:2653:3663":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"5:2274:8729":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:5409:15832":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"20:984:3411":{"crate_id":20,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"17:15266:6131":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:7960:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:2593:6426":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:4985:7207":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:48275:8303":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:12388:8550":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:3234:31125":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:34174:5312":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"10:44:6795":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:46186:8210":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:46633:8231":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"11:1566:22261":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:5160:7255":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:6441:7534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:8013:3494":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"23:504:4266":{"crate_id":23,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"1:10946:5212":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:15778:6287":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:2319:6407":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"18:481:8502":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:8564:10628":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:41969:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:10230:115":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:4825:10573":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"15:288:22289":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:6880:7710":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"11:1107:22259":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:6507:3478":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"18:623:36647":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:6646:8668":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"24:153:1978":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"5:1795:4781":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:11773:5574":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:2419:6418":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:9916:23276":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:7461:7805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:11045:8386":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:7339:7765":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:7595:6446":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:6394:8648":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:11358:10642":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:5588:7443":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:8012:3550":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"22:0:3301":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"20:113:8499":{"crate_id":20,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"1:945:10406":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:5897:23199":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:21559:10485":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:10185:5474":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:44234:8833":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:7452:7802":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:8937:8389":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:11056:15847":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:14968:6062":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"11:875:10406":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:13363:5662":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:22342:10780":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:8236:8363":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:15023:6074":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:8304:10537":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:40815:10450":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"24:5341:3383":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"5:2992:2227":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:2496:3185":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:46287:8214":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"21:183:4428":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"24:4168:3715":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"17:12371:5592":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"24:5129:2119":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"24:1479:27559":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"17:11075:5491":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:4907:6491":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:9035:117":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:40940:3511":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:44706:8862":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:1492:8716":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:7996:27688":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:9807:23261":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"20:740:1984":{"crate_id":20,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"2:21620:10695":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:43712:8821":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:6915:7735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:13766:5758":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:42695:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:2917:22336":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:15799:6290":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:5175:5138":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:40714:15898":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"16:7984:23217":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:4996:10614":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:2234:23358":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:9858:23274":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:2175:23370":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:14414:5874":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"24:3941:3700":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"2:46557:8229":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:10671:8900":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"2:40631:8782":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:22529:10773":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"24:4296:3724":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"2:2818:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:47879:8297":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:14788:5963":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:12094:853":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:10137:23254":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:2276:10465":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:48360:8308":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:15206:6116":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"21:433:5094":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"5:4272:3412":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:2336:6409":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:8285:2960":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:8300:7913":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:47531:8264":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:10156:10641":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"17:11042:23302":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:8604:8891":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:9076:10043":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:22900:8773":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"21:2340:1984":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"2:2727:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:1565:6990":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:903:4781":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"21:244:36740":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"2:3201:2535":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:6721:7667":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:21740:10693":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:5260:7300":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"11:2326:10408":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"6:5617:7462":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:3010:5376":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"24:3231:1999":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"2:46701:8234":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:42853:10039":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:5677:7487":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:9970:3563":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:10444:10523":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:11755:8538":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"11:673:3412":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"11:430:36555":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:4518:6479":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"24:4922:3338":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"24:1166:8463":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"6:5102:7250":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:9299:4857":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:2450:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"24:5042:1992":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"1:4232:10581":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:6677:10659":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:5005:33538":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:43490:8186":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:12225:23436":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:15748:6279":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:44737:8867":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:6152:6508":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:7931:3495":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"11:2151:10409":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:12695:23470":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"0:0:1849":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"1:3811:10539":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"11:837:10403":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:15151:6102":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:3013:4336":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"24:928:37000":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"1:8907:8388":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:5496:10635":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:1639:7046":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:2284:22309":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:2459:6420":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:3017:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:38500:5331":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"9:52:10014":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:6579:23204":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:5624:7465":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"21:367:4808":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"6:6609:7623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:5225:7281":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:7998:6460":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"5:1307:10408":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:1292:10409":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:6610:8656":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:9755:23253":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"5:636:9926":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:5445:7386":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:536:8559":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:3504:8365":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"5:2068:10411":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:4876:7155":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:3993:6472":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:12824:23290":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:42287:3412":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"18:96:27523":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:7637:3475":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:726:10542":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:12278:23460":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:5726:8582":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:13235:1984":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"5:5413:15833":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:6445:8650":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"24:4267:3722":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"17:14516:5893":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:42157:8812":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:40707:8786":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:4649:6482":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:9472:5209":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:42364:4577":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"5:2254:36415":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:12584:15854":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"24:4436:3734":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"24:2687:2032":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"6:5581:7441":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:46957:8240":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"24:4938:3360":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"16:2769:6434":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:15646:6249":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:10887:8388":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:2469:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:22880:8770":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:5436:7380":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:5557:7434":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"20:686:3550":{"crate_id":20,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"1:4718:7788":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:12070:403":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:12621:5570":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:44671:8857":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:908:3412":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:11111:8833":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"24:3924:3699":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"16:6141:36576":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:2365:4719":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"24:2080:3416":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"17:12089:5546":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"24:4197:3717":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"14:31:9919":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"23:46:3443":{"crate_id":23,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"17:12328:8540":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"24:2976:3675":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"24:253:9916":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"24:5356:2635":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"17:12150:5549":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:1593:7009":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:1885:4857":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:6725:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:10218:5475":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:12175:23448":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:880:8716":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:14912:6056":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:8288:7911":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:5825:8596":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:538:6918":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:12093:1644":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:10382:5210":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"5:1029:5108":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:12044:10399":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:4787:7092":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:7387:35903":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:5861:10040":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:12076:332":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:14977:6066":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:15289:6134":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:473:6878":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:12095:1703":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:6546:8654":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:5483:7407":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"24:4069:3708":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"6:1653:7057":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:7357:4783":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:3838:4781":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"9:446:22180":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:1934:4732":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"24:877:10485":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"2:12810:121":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:4386:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:7417:8735":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:13723:5747":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:6599:8655":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:44824:8869":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:15376:6162":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:867:8715":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:5045:3979":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:47035:8256":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:40950:3512":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:48397:8311":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:7982:4849":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:32718:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:5014:7223":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"24:861:3537":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"2:22449:4718":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:11788:23423":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:4971:7199":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:15039:6077":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"24:5353:203":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"2:41442:3478":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:44130:8755":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:3205:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"24:960:3373":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"6:6706:7662":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:12508:5567":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:5423:7370":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:2266:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"24:337:3550":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"17:11142:5499":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"20:702:8500":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"2:2724:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"5:7586:5139":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"18:670:27536":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"24:5162:2061":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"2:48129:8300":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"18:113:27524":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"24:4911:3358":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"16:7869:3315":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:46208:8211":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:43293:3557":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"16:6759:6450":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"11:1676:5105":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:14933:6061":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:41457:3482":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:13594:5715":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:8029:7900":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:11841:23425":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:10018:130":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:10710:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"6:1490:6949":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:9737:23255":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:44334:8839":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:9048:27599":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"24:5561:67":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"1:8358:8890":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:12092:1647":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:4781:10615":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"11:2304:8686":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"21:1066:2051":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"24:3350:3687":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"18:538:5354":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:7749:4571":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:41021:3503":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:3545:6466":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:40803:8793":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:22018:10485":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:10481:5174":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:8915:3412":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:11635:8412":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:40614:8780":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:4322:3589":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:939:10405":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"20:725:2051":{"crate_id":20,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"21:648:3601":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"5:2079:10412":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"11:844:10404":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"14:7:9919":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:6462:23203":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:15814:6291":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:11661:8530":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:1841:1195":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:6099:23201":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"24:5564:3389":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"24:3129:3682":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"17:12768:23258":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:14545:5896":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"18:521:27537":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"24:0:1827":{"crate_id":24,"path":["syn"],"kind":"module"},"2:33978:5327":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:12851:8556":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:1671:7064":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:7306:7742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:6478:7548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:10247:28645":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"17:14298:5855":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:43191:8178":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"6:4965:7196":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:4312:10585":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:36569:3731":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"24:2942:3673":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"2:3024:3457":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"16:2509:6422":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:5361:7338":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"14:165:22270":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:10229:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:9089:8394":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:16079:6360":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:11730:8535":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:11812:23389":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"24:4110:3711":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"2:11097:8832":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"24:4354:3728":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"1:11058:8387":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:14876:6026":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"20:794:251":{"crate_id":20,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"2:47317:8261":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"5:4070:5108":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"21:2735:3433":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"17:11016:23300":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:7922:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:4942:7188":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:16249:6399":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:11112:8406":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"24:5510:3391":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"17:12494:5564":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"21:2509:3599":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"17:11405:23337":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:6116:2014":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:14038:5800":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:8069:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:43987:3498":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:30892:4645":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:7223:30644":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:6895:8681":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:6431:6447":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:11089:23309":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:42355:4707":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:44088:8824":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:8004:9939":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:11634:8528":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:12097:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:11290:6852":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"24:5047:2538":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"24:4620:2201":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:5298:23194":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:14012:5797":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"14:187:22277":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:3177:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:31494:4352":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:13738:5751":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:5283:7314":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:12084:802":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:4648:3582":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"24:4004:3704":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"6:6670:7648":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:5598:7448":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:45096:10783":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"24:1940:3409":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"6:7984:7886":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"24:5001:3343":{"crate_id":24,"path":["syn","expr","FieldValue"],"kind":"struct"},"6:5671:7484":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:4674:6483":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:10647:10617":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:14994:6068":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:2558:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"23:344:1234":{"crate_id":23,"path":["quote","quote"],"kind":"macro"},"24:5431:3386":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"1:9069:27708":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"24:53:2060":{"crate_id":24,"path":["syn","token"],"kind":"module"},"24:5077:3370":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"24:128:1972":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"1:11352:8907":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:2424:10468":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:8864:10639":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"21:2649:3411":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"2:4396:3552":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"5:1511:10034":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:1717:5132":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"24:5126:3045":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"2:3436:34478":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:7118:3987":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:504:4560":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"5:3204:3412":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:3614:3412":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:5713:8581":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:4886:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:533:4565":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"11:787:8716":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:48331:8305":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:10439:5482":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:44840:8873":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"24:4904:3357":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"24:1817:1977":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"16:6849:23207":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"5:2723:7930":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"8:0:3171":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"24:3333:2021":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"1:12073:1664":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:32695:34635":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:2271:4724":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:12671:23500":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"24:5094:3369":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"6:5122:7252":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:3003:27583":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:9817:3556":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"21:1201:208":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"2:2687:10485":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:4464:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:403:23271":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:2438:10471":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"21:2774:1984":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"14:220:6740":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:7575:7874":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"20:880:251":{"crate_id":20,"path":["proc_macro2","TokenStream"],"kind":"struct"},"2:46776:8236":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:15:2813":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:2665:6429":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:6788:7689":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:33919:5326":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:7518:4574":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:46364:8218":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:3250:35919":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:6045:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:11430:8913":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:15836:6297":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:44316:8838":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"9:329:6832":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:4979:7204":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:7565:6612":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"20:0:1826":{"crate_id":20,"path":["proc_macro2"],"kind":"module"},"17:15214:6118":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:1535:6971":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:8265:7905":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:43469:8817":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"24:5146:2641":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"24:5547:3400":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"16:4787:6487":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:1321:9925":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:9460:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:13473:5682":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:44162:8829":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:1602:8719":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:3100:3716":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"11:2124:8686":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:6657:7644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:4069:10558":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"10:36:6794":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"5:3627:3416":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"20:906:1972":{"crate_id":20,"path":["proc_macro2","Group"],"kind":"struct"},"2:21612:10485":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:12433:5559":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:3271:2021":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:12281:8826":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:10983:15850":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"24:2602:3660":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"11:396:5103":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:640:10393":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:12091:1646":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:46078:8206":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"18:706:8513":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:7176:36604":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:4572:6481":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:15058:6078":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:11335:5214":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:44404:8844":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:6435:7531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:4992:7210":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:1809:661":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:6811:23206":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:2729:6432":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:7324:8687":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"24:4942:3340":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"17:13999:5795":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:5489:7409":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"16:7609:8693":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:6292:8636":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"20:803:8501":{"crate_id":20,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"16:4761:6486":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:0:535":{"crate_id":2,"path":["core"],"kind":"module"},"2:2447:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:14284:5854":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:6650:7643":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:16105:6366":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:9984:23278":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:2709:6431":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"21:2281:1972":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"1:3240:28520":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"20:712:3431":{"crate_id":20,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"17:9781:23273":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:15624:6243":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:6142:5132":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"24:5256:3382":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"6:5250:7294":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:26344:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:6636:7632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:3819:3411":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:8247:7902":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:10838:3416":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:9160:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:39919:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:8369:10579":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:13959:5789":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:6729:7668":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:22911:10553":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:32702:3578":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:32684:2140":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:6775:7682":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:2552:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"24:4028:135":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"17:14189:5837":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:48488:8316":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:2973:119":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:12107:5499":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:5020:7226":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:8271:7906":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:1446:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:914:10034":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"24:89:1978":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"6:5046:7237":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"5:7409:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:6602:3504":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"5:2054:3550":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:11567:23383":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:40899:3509":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:8328:7919":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:13568:5710":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:13899:5780":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:42461:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"5:5901:4783":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:3051:15943":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:4113:5132":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:10339:10639":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:6422:5098":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"6:6874:7709":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:11865:23427":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:6941:23208":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"7:31:22166":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"24:3214:2719":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"13:226:6787":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:10769:36623":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:22366:10485":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:32720:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:3175:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:12993:23291":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:4283:6473":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:6811:7695":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:11443:5504":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:15655:6251":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:4401:5134":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"18:635:5368":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:13844:5771":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:11102:23308":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:41228:3524":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:11858:5219":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:8478:8377":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:22715:7938":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"0:964:1840":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"2:40699:8780":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:8248:10484":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:14091:5807":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"23:0:1234":{"crate_id":23,"path":["quote"],"kind":"module"},"6:8259:7904":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:2978:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"18:651:5350":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"24:4843:3332":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"16:6244:23202":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:14855:6018":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"11:1007:8686":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:9030:10041":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"24:4930:3339":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"1:7774:4570":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"24:936:37002":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"2:43708:8820":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"24:1375:36851":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"24:3282:253":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"1:6052:5195":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"24:5539:2542":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"16:6929:8685":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:42420:3416":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:12264:23433":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:31013:33281":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:42209:8173":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:13387:5666":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"24:2619:3661":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"2:10277:8750":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:1939:9935":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"5:891:5116":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:5616:8571":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:40:4697":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:5331:5473":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"24:5536:3398":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"16:6745:6449":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:46012:8203":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:16050:5649":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"21:2710:3598":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"24:5099:2541":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"2:40843:10463":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:12023:9673":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"15:0:3177":{"crate_id":15,"path":["addr2line"],"kind":"module"},"18:581:4352":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:12085:799":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:479:6881":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"24:2087:3418":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"24:4325:3726":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"2:3240:3421":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:12043:23392":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"20:929:2378":{"crate_id":20,"path":["proc_macro2","Punct"],"kind":"struct"},"2:40788:33243":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"21:2314:2378":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"24:4918:3359":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"6:7412:7794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:15249:6124":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:13325:5656":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:43478:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"24:4900:3356":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"24:2721:2366":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"2:44112:8752":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:22818:33266":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:5083:7249":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"24:4250:3721":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"24:4610:1989":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"17:14212:5846":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:4650:10606":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"24:4098:3710":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"24:944:36998":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"2:22887:7956":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:5244:7292":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:6657:3411":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:1968:10445":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:12949:5556":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:48067:8299":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"24:4963:3363":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"6:7584:7877":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"24:3095:3680":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"2:8387:3493":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:14503:5892":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:6739:5108":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"5:267:5108":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:12318:5556":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:44607:8855":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:909:10402":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:13384:117":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:11189:5495":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"11:2569:3468":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:3237:28531":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:5389:130":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:12071:1040":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:40691:8785":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"18:491:8503":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:9467:10480":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"2:3190:3587":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:918:10035":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:7482:23213":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:5163:27715":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"24:5558:3403":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"2:4601:3580":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:4:1121":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:8298:8840":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:5209:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"15:306:22290":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:43508:8819":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"11:832:10402":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"23:11:3442":{"crate_id":23,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"2:46725:8235":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:5649:7696":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:21731:10485":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:11605:5508":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"24:2755:3665":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"17:513:23272":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:11293:23330":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"5:7562:8739":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"24:2011:3412":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"11:1603:22263":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:48386:8310":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:3264:23391":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:10272:10490":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:3597:23410":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:2172:8722":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:9964:8809":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:15734:6272":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"24:2925:3672":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"1:11069:27605":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"24:2806:3667":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"1:6511:10654":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:11621:8526":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:1559:6988":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:8341:7923":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"20:891:2052":{"crate_id":20,"path":["proc_macro2","TokenTree"],"kind":"enum"},"16:7914:8698":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:7400:6456":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"24:4947:3361":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"2:22258:10778":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:7627:9943":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"11:1923:2021":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"24:4544:2185":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"1:1072:9925":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:21403:34639":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:5485:6440":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:30668:10541":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:11424:8912":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"21:2597:3599":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"2:46309:8215":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:491:6886":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:40670:8783":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"24:5532:3396":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"1:9235:27612":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:951:10407":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:6254:6513":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:22662:8764":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:4733:6485":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:4464:10580":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:4214:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:8351:8889":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:15116:6092":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:45034:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:10954:23298":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:45105:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:3363:4781":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"6:5290:7316":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:6613:4807":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:13146:5613":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"21:992:251":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"24:4238:3720":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"6:6532:7574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"23:239:4272":{"crate_id":23,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"18:598:5313":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:13260:15907":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:15822:6294":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:2037:23341":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"11:2383:3412":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:13064:5602":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"9:501:6855":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:13814:5768":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:22435:10782":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:4237:4688":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:2995:22337":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:10818:23285":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:39979:3462":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:15720:6270":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:6230:8632":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:7561:7865":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:3589:10504":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:12039:10047":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"24:2268:2674":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"17:9671:23256":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"24:610:3411":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"19:0:1138":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:10612:23282":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:3396:15946":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:5084:859":{"crate_id":2,"path":["core","iter"],"kind":"module"},"24:3854:3694":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"2:8378:3489":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:7938:8322":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:11898:5512":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:45144:8882":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"11:2536:1972":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:13538:5698":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"11:0:3174":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:12075:1158":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"21:2539:4806":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"2:44836:8872":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:5706:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:7551:6448":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:12485:23463":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"5:7328:4696":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"18:698:8511":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:6376:8640":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:11537:23353":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:2657:5183":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:6460:7536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"21:2730:1972":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"2:10030:3564":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"24:4383:3730":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"14:160:9919":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:4909:7174":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:4902:10569":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"24:5065:2651":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"1:7948:8887":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:256:36627":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:4392:10586":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:42539:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:22170:10485":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:45132:4694":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:4256:15883":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:15616:6242":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:13412:5671":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:10905:23287":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:8253:7903":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:10982:23299":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"21:2583:3600":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"11:1160:9925":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:6858:6564":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:42965:3566":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:14235:5847":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:15197:6115":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:7345:8733":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:9213:27686":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"1:4119:10561":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"24:260:9917":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"2:10237:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:4545:6480":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:13089:5603":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:5630:7468":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:13512:4695":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:12076:23390":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"21:216:9992":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"1:8310:10536":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"24:4908:2326":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"1:10847:9934":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:13455:5681":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:4355:6474":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:34037:5328":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:4706:10559":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:44098:2960":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:570:6934":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:12900:5591":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:22048:7937":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:15701:6265":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:22780:33267":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:14356:5865":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:13509:5687":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:42578:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:7429:7795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:22853:33256":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"11:883:10407":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"24:2138:2608":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"24:4122:3712":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"5:2162:4560":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:12399:8551":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:15992:6345":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"24:3958:3701":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"17:11493:23346":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:795:5111":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"24:912:36997":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"17:15092:6090":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:44856:8877":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:15342:6149":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:6378:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:40968:8797":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"24:4987:3368":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"2:2353:638":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"24:2840:1997":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"1:4821:10570":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"11:2443:4783":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:4716:7786":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:40726:8787":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:10828:36634":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"24:96:4410":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"1:8620:8385":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:11227:23305":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:11661:8915":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"24:4883:3353":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"9:423:22182":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:532:6915":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:2789:6435":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"24:4371:3729":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"17:16151:6379":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:16198:6389":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"5:2999:3679":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:6621:9940":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"24:95:10485":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"17:11524:23381":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:2641:6428":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:8224:8362":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:44420:8780":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:3211:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:15456:6179":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"24:4951:3362":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"16:5878:8560":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:11518:10539":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:11354:23339":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:3709:6467":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"24:5212:3380":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"20:808:36661":{"crate_id":20,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"17:10759:5499":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"24:5552:3401":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"17:10524:23281":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:3354:10519":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:44366:8840":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"24:3299:1967":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"2:22794:7943":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:2035:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:8291:8752":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"21:404:36687":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"2:21386:34636":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:43461:8816":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:42775:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"24:3866:3695":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"6:1517:6960":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:597:2065":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:43201:3555":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:46056:8205":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:45042:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"5:6896:4787":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:40833:5160":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"24:4631:2324":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"17:3473:23394":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"24:4308:3725":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:5652:10638":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:43912:8756":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"24:1369:3554":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"2:21614:10692":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:3260:6464":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:5959:22308":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:7619:23214":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:10710:23284":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:13344:5661":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:6188:6511":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:1628:7038":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:44844:8874":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:1526:6965":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:922:10403":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:6471:7544":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:14723:5912":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:10945:15844":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:11647:8529":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:5674:4787":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:2883:22335":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:40912:3500":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"11:710:10034":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:2859:6438":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:46346:8217":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:15390:6164":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:6447:7535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"24:3452:267":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"1:11130:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:13252:5639":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:22060:34648":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:39804:4690":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"24:4983:3367":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"1:7731:4586":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:44262:8835":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:7547:33243":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"11:351:36551":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:4123:10562":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:10729:8363":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:11256:8521":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"11:2554:36550":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:6379:7491":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:10534:36639":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"24:1637:3536":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"16:2835:6437":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:6738:7671":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"5:3237:8719":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"24:4214:3718":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"16:7376:8692":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:16032:5639":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"16:8097:6662":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"21:1402:2065":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"2:46156:8209":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:4131:10564":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:43930:15843":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:8631:8894":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"23:272:2061":{"crate_id":23,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"15:394:22299":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"24:2993:3676":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"1:1596:8718":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:5031:7231":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:15301:6140":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:42303:3411":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:41093:3506":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:7597:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:44528:8851":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:5502:7415":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:415:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:14177:5835":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:2971:3585":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:3061:15945":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:44719:8866":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"24:5246:3381":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"23:148:4012":{"crate_id":23,"path":["quote","__private","HasIterator"],"kind":"struct"},"16:7152:6586":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:4937:6492":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:7194:36587":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"18:507:5350":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:45083:8200":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:10447:10519":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:14587:5903":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:12604:15853":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:6629:7631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:6965:8394":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:42354:3990":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:5400:7359":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"9:177:10025":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:2982:5186":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:2983:2515":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:5352:7334":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"2:41069:3521":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:46411:8219":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:7695:4782":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:8966:10663":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:7314:7747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:10441:10521":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"17:13606:5718":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:7534:8736":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:3488:3588":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:11558:10538":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:5321:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"5:5985:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:6555:6538":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:4047:10556":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:13946:5786":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:5296:7319":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:4572:10589":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:557:4567":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:1430:3412":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:13774:5760":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"11:1025:10408":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:11392:23338":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:15473:6186":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:5002:7217":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:22480:10485":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"6:5219:7278":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:44042:15845":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:7330:7759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:12078:1544":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:10863:8752":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:8385:8367":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"21:2432:2052":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"2:48450:8314":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:44082:8823":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:12213:23459":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:31118:33260":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:1686:7073":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"11:1051:10409":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:15356:6156":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:44828:8870":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:8278:3523":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"18:608:36654":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:47111:8258":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:11915:23428":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:7889:6656":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:41991:8163":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:13211:5636":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:15126:6093":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:11026:23301":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:39768:15879":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:363:4585":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:1862:10427":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:7667:5205":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"20:716:3598":{"crate_id":20,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"6:5457:7395":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:5212:7277":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:11077:8197":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"17:13855:5772":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"24:2789:3666":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"24:5411:2539":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"2:44832:8871":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"7:78:22173":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"24:2891:141":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"1:3315:10523":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:40657:8158":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:5238:6496":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:15434:6174":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:7444:23211":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"20:935:2050":{"crate_id":20,"path":["proc_macro2","Spacing"],"kind":"enum"},"16:5278:6497":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"24:4915:3337":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"1:8377:10537":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:5006:6494":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:5320:7328":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:2553:6424":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:44386:8842":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"18:563:5356":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"24:3265:252":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"17:16165:6382":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"17:11242:23328":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:6377:10785":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"24:509:3422":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"2:42951:2588":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:40009:15947":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"24:4533:3315":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"2:41428:8804":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:39901:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:13308:5654":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:11341:23340":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"23:345:2672":{"crate_id":23,"path":["quote","quote_spanned"],"kind":"macro"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"21:2645:3597":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"17:14560:5900":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:42437:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:41034:3518":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:6038:16224":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:7730:10485":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"11:1917:8719":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"24:2221:10485":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"1:6151:5190":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:1663:7063":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"24:4465:3736":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"24:5568:3390":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"21:2759:2050":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"2:38610:5332":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:3317:10524":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"11:1087:36560":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:12422:8552":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"11:1891:4783":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:45024:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"11:774:8715":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"11:2140:10408":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:7822:10435":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:6221:8631":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:5064:7248":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:6529:4783":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"24:5573:2540":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"2:46854:8238":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:5181:7258":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:44848:8875":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:11547:5345":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:0:883":{"crate_id":6,"path":["libc"],"kind":"module"},"1:4879:5187":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:44902:8878":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"24:4566:3317":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"24:1657:1829":{"crate_id":24,"path":["syn","parse_macro_input"],"kind":"macro"},"2:42412:3412":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:8461:3983":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"24:3248:3685":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"2:3685:4783":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:7225:23209":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:5376:7345":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:12127:5548":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:12096:1254":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:10935:5211":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:12659:23466":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"6:5653:7475":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:10676:8886":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"16:6268:6441":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:553:6926":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:10661:23283":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"24:4955:3341":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"24:1542:3540":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"24:3146:3578":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"17:15281:6133":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:8406:7775":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:42278:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:5266:7303":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:4621:3581":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"24:98:3868":{"crate_id":24,"path":["syn","token","private","CustomToken"],"kind":"trait"},"17:15324:6145":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:32709:8777":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:22802:7944":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:30924:4646":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:41451:3480":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:44395:8843":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"11:299:8709":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:14986:6067":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:41053:3520":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:3758:3550":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:13402:5179":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:7350:3507":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:42295:3416":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:21742:7936":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"24:1527:3539":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"2:32719:3604":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"24:3878:3696":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"17:12516:23476":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"6:564:6931":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"21:2027:4805":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"17:11153:23285":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:645:10394":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:47381:8263":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"24:5241:2369":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"2:12395:8754":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"24:4226:3719":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"2:22838:33216":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"24:5216:3375":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"24:3010:2369":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"24:4934:2252":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"17:12289:5551":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:16069:6359":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:2807:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:4240:10582":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:7337:3411":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:44032:8760":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:7885:3496":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:44696:8858":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:3273:10521":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:42191:8172":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:12086:800":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"23:235:4270":{"crate_id":23,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"5:1691:5108":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:5565:7436":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:1811:4642":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"11:811:4781":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:3856:6471":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:4800:7101":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:16223:6395":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"16:3830:6470":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:48351:8307":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:578:6939":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:8317:7918":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:1580:7002":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:559:6929":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:48412:8312":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:1136:36380":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:7926:10480":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"23:35:10485":{"crate_id":23,"path":["quote","ext","private","Sealed"],"kind":"trait"},"16:5759:8588":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:12539:3437":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:43230:6634":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:43255:3555":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"5:835:5114":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"24:4624:3331":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"1:3015:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"24:3384:3689":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"1:8549:8380":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:9672:34820":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:11467:5506":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:465:1973":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:545:6921":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:48465:8315":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"24:4604:1830":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"5:5025:5132":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:6282:8635":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:2363:4718":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:12300:23461":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:7971:23216":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:4844:6489":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:40870:3498":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:48435:8313":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:5831:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:13986:5794":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"18:765:27534":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:6624:10657":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"24:879:5316":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"6:6491:7557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:32805:2010":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:10814:3412":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:12464:23462":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"24:4827:3344":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"2:39864:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:7452:23212":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:5390:7353":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"24:4991:2007":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"17:12929:5592":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:10026:3567":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"24:3895:3697":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"6:6542:7581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:5528:7417":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:14529:5894":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:13187:5622":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"11:328:8712":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:8363:10587":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:33567:5324":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:7881:3497":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:282:2032":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:44685:15869":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:12543:23468":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"6:6689:7652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"16:2489:6421":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"24:4576:2043":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"2:42135:33264":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:7351:3508":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:4061:10557":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:46603:8230":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:44634:8856":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:0:1536":{"crate_id":1,"path":["std"],"kind":"module"},"24:4870:3351":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"17:2203:23336":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"13:109:36563":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"24:5070:2610":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"6:6768:7681":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"9:481:22179":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"24:5163:2325":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"2:39939:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:44022:15846":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"20:817:2051":{"crate_id":20,"path":["proc_macro2","imp","Span"],"kind":"enum"},"16:7523:6457":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"21:107:4814":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"1:12089:1648":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:10870:27609":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:2993:36390":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"14:214:8706":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"18:80:27522":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"11:1896:4781":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"24:4835:3346":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"17:12572:5499":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:7616:2065":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:7445:3411":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:15635:6248":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:4885:7160":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:44013:8759":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:357:4584":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:1533:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:15383:6163":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:1393:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:14599:5910":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"11:2231:8720":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"24:5417:3388":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"17:10997:5489":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:32776:4339":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:6621:7630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"20:734:1972":{"crate_id":20,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"2:40733:8788":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:8197:7901":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:10419:5481":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:3423:15880":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:5846:23198":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"24:5527:3394":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"6:7359:7771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:10666:8898":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:3522:10482":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"24:5524:3393":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"17:15582:6230":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:2201:8724":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:11579:10540":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:6030:8626":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:2121:4691":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:10573:36632":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:5546:7428":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:9485:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:4462:6477":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:12650:15862":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:11230:2355":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:8931:3411":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:1607:2021":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:5472:7404":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:15769:6285":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:5134:7253":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"5:1120:36481":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:30945:3555":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"21:2387:2671":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"17:10251:5476":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:6320:8638":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:43246:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:5643:7474":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:10022:2588":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"24:1569:2996":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"2:23944:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:21388:34650":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:8894:8387":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:38555:5329":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"21:2754:2378":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"18:718:5369":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:10044:23279":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"9:391:22181":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:8425:34818":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:11853:23426":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:4870:7153":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:5536:7422":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:43218:33232":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:12189:23457":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:4464:5134":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:40029:8031":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:2688:15904":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"}},"external_crates":{"23":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.35/"},"20":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.78/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.12/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.48/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}