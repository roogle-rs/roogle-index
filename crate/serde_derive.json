{"root":"0:0:1753","crate_version":"1.0.188","includes_private":false,"index":{"0:8:1868":{"id":"0:8:1868","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[216,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:12427:33553":{"id":"2:12427:33553","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:3723"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12057:14539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12439:33554":{"id":"2:12439:33554","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:3723"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:14541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12457:9096":{"id":"2:12457:9096","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4556:9096"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43668:8508","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12416:33547":{"id":"2:12416:33547","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12032:3723","`DoubleEndedIterator`":"2:7472:121","prim@char":"1:12038:428","str::match_indices":"2:12413:33546"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43528:8564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:14541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12355:2336":{"id":"2:12355:2336","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12038:428"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43330:8551","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12361:33540":{"id":"2:12361:33540","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43624:8569","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12395:28612":{"id":"2:12395:28612","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:3723","str::rsplitn":"2:12398:28614"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43464:8560","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12419:33548":{"id":"2:12419:33548","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12330":{"id":"2:12330","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12331:836","2:12332:2096","2:12333:33534","2:12334:33535","2:12336:33536","2:12339:2859","2:12340:33537","2:12341:320","2:12342:319","2:12343:1985","2:12345:28575","2:12347:28576","2:12349:28577","2:12351:33538","2:12352:33539","2:12353:2747","2:12354:28599","2:12355:2336","2:12356:2330","2:12357:8470","2:12358:32138","2:12359:32147","2:12360:31407","2:12361:33540","2:12362:32120","2:12363:2198","2:12366:28616","2:12369:28617","2:12372:2648","2:12376:4266","2:12380:28606","2:12383:28608","2:12386:28610","2:12389:33541","2:12392:33542","2:12395:28612","2:12398:28614","2:12401:33543","2:12404:33544","2:12407:2092","2:12410:33545","2:12413:33546","2:12416:33547","2:12419:33548","2:12421:33549","2:12423:33550","2:12425:33551","2:12426:33552","2:12427:33553","2:12430:2004","2:12433:27539","2:12436:28618","2:12439:33554","2:12442:33555","2:12445:33556","2:12448:1965","2:12450:28341","2:12451:28517","2:12452:28342","2:12453:28340","2:12454:28339","2:12455:33557","2:12457:9096","2:12458:33558"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12433:27539":{"id":"2:12433:27539","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:3723"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12369:28617":{"id":"2:12369:28617","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:3723"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:14541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5510:34212":{"id":"5:5510:34212","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:1939","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:4597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:1939","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:4597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12347:28576":{"id":"2:12347:28576","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12352:33539":{"id":"2:12352:33539","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12044:1448","crate::ops::IndexMut":"2:3072:3328","str::slice_unchecked":"2:12351:33538"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12332:2096":{"id":"2:12332:2096","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12410:33545":{"id":"2:12410:33545","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12032:3723","`DoubleEndedIterator`":"2:7472:121","prim@char":"1:12038:428","str::matches":"2:12407:2092"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43582:8567","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:14541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12357:8470":{"id":"2:12357:8470","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43346:2869","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:34214":{"id":"5:5517:34214","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:3387":{"id":"5:5527:3387","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5514:34213":{"id":"5:5514:34213","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12349:28577":{"id":"2:12349:28577","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12331:836":{"id":"2:12331:836","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12038:428"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511:2126":{"id":"5:5511:2126","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525:34215":{"id":"5:5525:34215","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492-0:1018:1875":{"id":"0:492-0:1018:1875","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1018:1875","glob":false}}},"2:12342:319":{"id":"2:12342:319","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12055:1551"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12360:31407":{"id":"2:12360:31407","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43614:8568","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12336:33536":{"id":"2:12336:33536","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12334:33535"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12442:33555":{"id":"2:12442:33555","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:3723"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86-0:993:1970":{"id":"0:86-0:993:1970","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[21,0],"end":[21,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::internals::case::RenameRule","name":"RenameRule","id":"0:993:1970","glob":false}}},"2:12401:33543":{"id":"2:12401:33543","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12445:33556":{"id":"2:12445:33556","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:3723"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:14541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12458:33558":{"id":"2:12458:33558","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4553:33558"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43677:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:2327":{"id":"5:5528:2327","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12453:28340"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12372:2648":{"id":"2:12372:2648","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41400:181","prim@char":"1:12038:428","self::pattern":"2:12032:3723"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12339:2859":{"id":"2:12339:2859","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11592:14543"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12450:28341":{"id":"2:12450:28341","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5529:2326":{"id":"5:5529:2326","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12454:28339"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12345:28575":{"id":"2:12345:28575","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41400:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5509":{"id":"5:5509","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5510:34212","5:5511:2126","5:5514:34213","5:5517:34214","5:5525:34215","5:5526:34216","5:5527:3387","5:5528:2327","5:5529:2326"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12448:1965":{"id":"2:12448:1965","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11993:127","`FromStr`":"2:11992:3343"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41543:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11992:3343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11992:3343","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12363:2198":{"id":"2:12363:2198","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:3723"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12392:33542":{"id":"2:12392:33542","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12032:3723","str::split":"2:12380:28606","prim@char":"1:12038:428","str::split_terminator":"2:12389:33541"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43428:8558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:14541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12354:28599":{"id":"2:12354:28599","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12353:2747"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12351:33538":{"id":"2:12351:33538","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12044:1448","str::slice_mut_unchecked":"2:12352:33539","crate::ops::Index":"2:3068:2503"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12343:1985":{"id":"2:12343:1985","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41400:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12358:32138":{"id":"2:12358:32138","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12359:32147"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43634:8570","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12430:2004":{"id":"2:12430:2004","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:3723"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12407:2092":{"id":"2:12407:2092","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12032:3723","`DoubleEndedIterator`":"2:7472:121","prim@char":"1:12038:428","str::rmatches":"2:12410:33545"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43564:8566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12421:33549":{"id":"2:12421:33549","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12389:33541":{"id":"2:12389:33541","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12032:3723","str::split":"2:12380:28606","prim@char":"1:12038:428","`DoubleEndedIterator`":"2:7472:121","str::rsplit_terminator":"2:12392:33542"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43410:8557","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12334:33535":{"id":"2:12334:33535","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12426:33552":{"id":"2:12426:33552","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:963:1742":{"id":"0:963:1742","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[89,0],"end":[94,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"0:1022:1973":{"id":"0:1022:1973","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"2:12380:28606":{"id":"2:12380:28606","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12032:3723","`DoubleEndedIterator`":"2:7472:121","prim@char":"1:12038:428","str::split_whitespace":"2:12358:32138","str::rsplit":"2:12386:28610"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43360:8480","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:964:1750":{"id":"0:964:1750","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[97,0],"end":[102,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"0:0:1753":{"id":"0:0:1753","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[102,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2021\n# use serde_derive::{Deserialize, Serialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.188\")]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: derive_partial_eq_without_eq, clippy ::\nenum_variant_names, clippy :: manual_map, clippy :: match_like_matches_macro,\nclippy :: needless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: let_underscore_untyped, clippy ::\nmanual_assert, clippy :: map_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:963:1742","0:964:1750"],"is_stripped":false}}},"2:12356:2330":{"id":"2:12356:2330","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12038:428"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43336:8552","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12404:33544":{"id":"2:12404:33544","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:14541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12359:32147":{"id":"2:12359:32147","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12358:32138"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43643:8571","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:353":{"id":"0:63:353","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1878,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:86-0:993:1970"],"is_stripped":false}}},"2:12413:33546":{"id":"2:12413:33546","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12032:3723","`DoubleEndedIterator`":"2:7472:121","prim@char":"1:12038:428","str::rmatch_indices":"2:12416:33547"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43510:8563","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12453:28340":{"id":"2:12453:28340","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12333:33534":{"id":"2:12333:33534","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12452:28342":{"id":"2:12452:28342","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12353:2747":{"id":"2:12353:2747","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12354:28599"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12362:32120":{"id":"2:12362:32120","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43652:8572","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12425:33551":{"id":"2:12425:33551","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12451:28517":{"id":"2:12451:28517","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39432:28490","Self::is_ascii":"2:12450:28341"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39432:28490","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12386:28610":{"id":"2:12386:28610","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12032:3723","`DoubleEndedIterator`":"2:7472:121","prim@char":"1:12038:428","str::split":"2:12380:28606"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43378:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:14541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12376:4266":{"id":"2:12376:4266","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41400:181","prim@char":"1:12038:428","self::pattern":"2:12032:3723"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:14541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12340:33537":{"id":"2:12340:33537","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12341:320":{"id":"2:12341:320","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12342:319","`u8`":"1:12055:1551"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12383:28608":{"id":"2:12383:28608","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:3723"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11848:8482","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12366:28616":{"id":"2:12366:28616","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:3723"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:493-0:404:1876":{"id":"0:493-0:404:1876","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[14,0],"end":[14,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:404:1876","glob":false}}},"2:12436:28618":{"id":"2:12436:28618","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:3723"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:14541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:34216":{"id":"5:5526:34216","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:1939","`String`":"5:7449:227"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:1939","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:4597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12454:28339":{"id":"2:12454:28339","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12398:28614":{"id":"2:12398:28614","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12038:428","str::splitn":"2:12395:28612","self::pattern":"2:12032:3723"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43482:8561","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:14540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:14541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12455:33557":{"id":"2:12455:33557","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4555:33557"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43659:8514","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12423:33550":{"id":"2:12423:33550","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:39876:7890":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:6031:7409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:9277:5370":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:7474:8919":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"24:3832:3603":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"2:41636:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:44095:8601":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:12051:764":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:2914:3636":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:1840:4759":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"20:797:8232":{"crate_id":20,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"16:7722:6240":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:6720:7529":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"21:2724:1879":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"24:1973:3321":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"24:4802:3243":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"2:2782:228":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:10059:5386":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:12043:1418":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:7041:8410":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:4007:32089":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:11053:5108":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:47678:8037":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"21:1818:4704":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"5:3238:1928":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:5798:6293":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:8237:9235":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"10:44:6587":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:43959:8590":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"11:1838:8448":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:4826:7121":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"10:36:6586":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:4572:9294":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:40027:8521":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"24:4858:3256":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"24:5469:3300":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"2:46655:7992":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:7281:7617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:4168:9270":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:6306:9472":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:3266:9223":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"24:1139:8199":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"15:0:3085":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:3250:14568":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"11:1538:20392":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:8335:7502":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:10366:8482":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:43268:14531":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:12184:5572":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:8408:8110":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:40680:3384":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:6928:32124":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:44294:197":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:7677:200":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"23:239:4175":{"crate_id":23,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"11:1012:9114":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:6427:3384":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:7430:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:7472:7631":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:40225:3421":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:40714:3392":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"24:4582:2153":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"6:7584:7648":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"24:5329:2560":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"2:2169:4618":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"24:3100:3482":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"2:43318:8550":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"24:1068:1969":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"2:21317:9383":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"24:5086:2549":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"1:8833:8120":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:8009:9216":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:500:6678":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:14269:6111":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:12057:1549":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"24:3066:3588":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"16:3032:6253":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"24:2913:3581":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"2:21185:9390":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:10126:225":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:12373:5609":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:2722:6222":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"24:5010:2518":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"24:3808:3601":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"17:3565:21536":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:40104:3403":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:5049:6285":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:526:6698":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:4462:6267":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:3465:9186":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:4994:7212":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:5995:8291":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:4796:7109":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:1075:21435":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:10274:3319":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:8926:21401":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:7597:34903":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:12059:1547":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:8665:14540":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:7520:7633":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:2969:20463":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:41831:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:42430:6426":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:10929:5435":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"23:11:3348":{"crate_id":23,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"17:14522:6181":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:3391:3388":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"24:4052:3617":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"5:7463:8472":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"20:694:8231":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"5:4348:248":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:4975:7204":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:3191:31315":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:40245:3422":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:6361:8363":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"24:894:35332":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"2:39860:31872":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:40084:9167":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:10738:21553":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"24:599:3318":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"1:7875:8616":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:13890:6000":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:5826:5085":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:8481:8113":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:43138:8484":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:6644:219":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:1640:4543":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"20:830:1891":{"crate_id":20,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"1:11600:8145":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:45350:7934":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"11:1517:20391":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:9074:8130":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:44337:7931":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:47405:8030":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:5010:7217":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:2209:21483":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:12598:5667":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:6189:8360":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"24:2590:3569":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"2:2536:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:11316:5453":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:6944:34904":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:11059:5109":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:3232:21517":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:8996:27532":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:5085:30400":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:44329:8676":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:10186:8255":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:913:9107":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:2778:3509":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:10316:5395":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:2943:5229":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"24:4431:3644":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"17:14469:6172":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:1759:4633":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:6680:7521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:9472:3470":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:30185:31883":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"5:5839:4683":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"24:3083:3589":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"17:11151:21586":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:3997:9246":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:6637:5007":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:1663:6850":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:3744:9237":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:9607:21408":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:11000:5439":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:22056:8492":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:4881:1027":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"11:667:9013":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"24:4474:2226":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"6:4946:7190":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:7858:8615":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"24:5506:3295":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"16:5435:6290":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:9823:21423":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:6352:8362":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"11:0:3082":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:9191:27657":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"16:6968:21333":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:4789:7107":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"24:5474:3302":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"24:5376:1874":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"2:7930:32356":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:8848:21399":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:13422:5799":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:3330:4681":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:8142:3381":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:8807:188":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:11473:5331":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:2409:3093":{"crate_id":1,"path":["std","io"],"kind":"module"},"23:281:1969":{"crate_id":23,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"16:3915:6263":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:40326:3411":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:6180:7462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:13778:5973":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:261:34959":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:41474:3318":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"24:5146:3281":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"24:4390:3641":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"17:13981:6020":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:1564:4683":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:44286:213":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"24:922:2953":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"1:7711:9103":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:11173:21587":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:1470:2442":{"crate_id":2,"path":["core","mem"],"kind":"module"},"20:885:1960":{"crate_id":20,"path":["proc_macro2","TokenTree"],"kind":"enum"},"24:4849:3254":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"24:4530:1951":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"24:1329:3460":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"17:14042:6036":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"24:2726:116":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"2:40673:8532":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:2875:5221":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:43812:8582":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:10323:8480":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:2325:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"5:7365:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"23:150:3915":{"crate_id":23,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"18:652:5246":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:39900:8512":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:9907:5065":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:2178:21461":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"20:676:3456":{"crate_id":20,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"16:7884:21342":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"24:4093:3620":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"24:5472:3301":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"2:3166:3342":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:8801:9328":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:47217:8028":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"24:4204:3628":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"17:10588:8265":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:43360:8480":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:44367:8609":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:10443:14536":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"24:4872:3259":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"2:41602:3318":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:14434:6159":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:10916:21518":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:2461:7657":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:4037:9248":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"24:4876:3260":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"17:9070:5363":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:1673:6856":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"24:127:1879":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"2:44392:8610":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:4628:9247":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:44087:8599":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:4240:9273":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:9153:9016":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"24:1746:9032":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"1:4745:9260":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:6981:8934":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:44079:8597":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:4642:7517":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:6250:5091":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:43258:8489":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:10580:4474":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"24:5349:3290":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"1:8212:2869":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:9701:21409":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:45749:7950":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:14056:6043":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"24:4865:3257":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"17:13259:5787":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:7513:8421":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"24:1503:3446":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"2:21337:7666":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"18:582:4255":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:2598:8930":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"24:5034:3274":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"2:41466:3323":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:5088:6286":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:7102:21335":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:43634:8570":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"18:590:5253":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:3212:8448":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:13710:5956":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:11619:8643":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"21:2378:2579":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:2788:231":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:7575:5101":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:4830:818":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:2368:9172":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:6003:7396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:21665:9388":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"16:5963:21325":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:6243:1921":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:3303:9218":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:41909:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:840:3319":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"24:4862:2235":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"2:2793:2420":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:5633:5091":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"24:4946:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"24:3015:3585":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"2:7886:3395":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:3581:3319":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:13739:5964":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"24:3999:3613":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"17:12225:5582":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:12045:1532":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"24:2539:3566":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"17:14355:6138":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:6318:6303":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:7618:7655":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:13071:5753":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:12039:1567":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:42455:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:5491:5031":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:4874:7145":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"11:1858:1928":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:2539:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:43304:7924":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:45524:7941":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:22796:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"24:5200:3287":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"5:3204:8450":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"18:681:8238":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:44103:8603":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:6818:8400":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:2250:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:31964:8505":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"24:5497:3308":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"24:4122:3622":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"5:1523:9115":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"5:7412:8468":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:22283:8498":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:4537:7024":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:7726:9104":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:6600:21330":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:3447:8098":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:8825:21398":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"21:2269:1879":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"1:922:9014":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"24:5510:3296":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"2:12925:4596":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:4706:9276":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"24:2556:3567":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"2:41247:7897":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:43938:14555":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:7888:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:4477:6992":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:4337:3481":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:6753:8387":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:9328:2869":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:7090:8416":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"24:4832:3250":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"2:21323:9385":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:6195:9023":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"24:827:3442":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"1:7921:8931":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"24:3912:3608":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"2:40074:5055":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"24:5515:2445":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"6:4889:7151":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:12959:5738":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:12062:5549":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:11934:1891":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:12004:9026":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:10575:8264":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"11:736:8447":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:7561:7642":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"11:2060:9114":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:7538:7636":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:2638:9215":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:7708:6250":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:31957:3482":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"6:4618:7044":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:39848:8510":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:5634:8296":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:4264:209":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:4801:5083":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"21:107:4714":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"17:9102:5365":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:42171:3471":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:822:5013":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:482:6670":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:853:3323":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"24:5503:3294":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"24:4964:62":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"21:404:35015":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"2:1824:3493":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:2394:9181":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:4430:6973":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:43226:14523":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:46114:7967":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:1575:6783":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:11337:21588":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:11687:21416":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:2879:5222":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:11295:8283":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:2339:6201":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:4889:6280":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:10383:21459":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:6543:9346":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:4628:7045":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"24:609:3319":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"16:5712:8302":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"11:1048:34885":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:2406:6209":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:12044:1448":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:9521:21406":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:4123:3494":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"11:805:9109":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"24:1948:3318":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"17:13215:5780":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:47529:8032":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:12870:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:8941:9353":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:11394:8641":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:43213:3403":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"21:2533:4706":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"1:1931:674":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"6:5070:7246":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:6332:6231":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"20:734:1891":{"crate_id":20,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"2:21670:9396":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"5:2131:4464":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:7828:6412":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:6017:21326":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:11376:8686":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:5569:7423":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:10516:14533":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:9468:3461":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"18:660:25431":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"24:4797:3242":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"5:1492:9013":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:1638:6831":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:3945:9242":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:1696:6866":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:7637:9189":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:2472:6212":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:10616:8267":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:42150:2496":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:6721:21331":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:4343:6922":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"9:486:20308":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:30149:4547":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"24:4461:3783":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"11:2168:1879":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"24:5190:3286":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"24:5452:3297":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"5:7253:200":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:12945:5736":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:8174:9188":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"22:0:3207":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"6:6784:7570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:4403:6958":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:25777:250":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:4897:7156":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"11:1818:3319":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:7744:9139":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"24:1135:8197":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"24:5154:3283":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"24:95:4314":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"21:2241:3340":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"14:221:6532":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"21:2503:3504":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"24:2692:108":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"1:11626:8643":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"21:53:4707":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"17:11951:5526":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:1573:8448":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"24:4585:2233":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"24:910:35329":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"1:9099:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:10097:21430":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:2933:20462":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"5:2049:9116":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:7054:8412":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:3185:30350":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:10962:5437":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:11523:9237":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:2781:229":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:4422:6971":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:8550:3319":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:11578:8923":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:9685:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"5:895:3319":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:11971:5536":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"24:4325:3636":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"2:2998:3491":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"5:2690:7660":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:4019:32088":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"24:1965:3319":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"17:13838:5983":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:13723:5961":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:11612:30420":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:2783:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:8498:9316":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"24:5353:2444":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"16:7613:21338":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"24:2777:3575":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"2:47735:8042":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:45895:7960":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"18:727:5268":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:4731:7074":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:1545:6764":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:13244:5783":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:6041:21327":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"11:1826:4683":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:10776:8615":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:2382:9175":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:2562:5079":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:6742:8386":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:9660:34966":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"24:4841:3252":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"21:0:1104":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"17:8659:21379":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:10747:9305":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:10298:3323":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:22125:8493":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"24:5152:3284":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"24:5373:3291":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"2:44350:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:5017:6284":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"5:5362:14518":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:6513:8371":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:1702:6867":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:11482:9238":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"20:771:3340":{"crate_id":20,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"1:2923:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:11761:5489":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:4508:7010":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:8205:3428":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:10160:2264":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:46063:7966":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:21762:7668":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:11544:9239":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:7929:3456":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"24:4373:3640":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"2:40286:3425":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"24:5476:3303":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"17:12473:5647":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:400:21392":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"21:2302:2283":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"2:41586:3319":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:21052:9389":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"6:653:15341":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:40466:3429":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"20:740:2579":{"crate_id":20,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"24:5156:3279":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"24:3185:1906":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"7:0:1597":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:5082:7251":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:21774:31633":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"24:2879:3579":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"16:7474:21337":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:10637:8270":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:10811:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:4498:7003":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:10405:14528":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:9481:9184":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:12267:5597":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:22003:8491":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:4949:6282":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"24:4558:1734":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"2:43659:8514":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:14163:6068":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:14068:6046":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:22631:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:541:6707":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:10599:14534":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:47651:8035":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:4401:3484":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:3244:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"24:4545:3235":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"1:10102:30408":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"6:5017:7220":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"24:5091:1891":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"24:4896:3264":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"24:5494:3307":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"5:6930:5048":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"24:550:128":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"1:5384:9321":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"18:515:5249":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:9104:220":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:1429:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:11313:8635":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:4750:7085":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:39206:3368":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"11:2174:6580":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:6485:6234":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"23:344:1143":{"crate_id":23,"path":["quote","quote"],"kind":"macro"},"1:7853:9184":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:7782:8424":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:532:6701":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:3975:9244":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"24:3168:2627":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"6:4706:7063":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:1520:6750":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"24:1445:25456":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"17:9445:21405":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:12061:1607":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"24:4828:3249":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"2:9480:3469":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:5727:8305":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:4471:6989":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"21:2775:2579":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"1:1986:186":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:44379:4595":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"24:1620:1967":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"17:10370:21460":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:14316:6129":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:40193:3418":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:47865:8048":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"24:1488:3445":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"2:21449:7666":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:13693:5955":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"24:2041:3325":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"20:777:25440":{"crate_id":20,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"1:3513:30921":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"24:4578:3237":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"24:1613:3455":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"16:2696:6221":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:43992:8595":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:12252:5591":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:11886:5509":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:8305:9236":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"24:2522:3645":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"17:11389:21412":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:11459:5112":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:43410:8557":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"24:3372:3598":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"6:5802:7295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:4622:14578":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:46039:7965":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:3188:31314":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:1603:6802":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:6829:7592":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"24:4548:3236":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"6:4391:6953":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"11:1831:4681":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:12237:5585":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:1709:6870":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:9019:30428":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:6037:7412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:641:9099":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"24:5339:2486":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"2:38979:14566":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"20:718:1959":{"crate_id":20,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"17:14076:6049":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"24:2034:3323":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"1:11296:5110":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:22217:31877":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:12305:5605":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:1983:187":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"24:1335:35166":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"2:41207:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:8162:8096":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"20:839:2579":{"crate_id":20,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"17:9531:34967":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:10323:9325":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:10012:5390":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"24:4912:3268":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"24:4916:3269":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"1:6540:8932":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"24:3820:3602":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"24:918:3277":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"24:926:3278":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"24:4982:1899":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"16:7736:6404":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:39947:8515":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:45625:7945":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:12650:32034":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:4031:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:4344:6265":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:43744:14554":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"21:1062:1959":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"17:10685:21515":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:11191:5447":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:7608:7653":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:13851:5989":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:4421:3485":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:11042:5107":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:1633:604":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:3522:9187":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:12056:1548":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:5609:3407":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:11221:8143":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"21:2643:3318":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"24:3202:3592":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"1:3305:9219":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"21:183:4332":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"11:793:9107":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:45971:7962":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:10571:8561":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"24:3878:3606":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"1:10962:9326":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"11:968:8417":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:5754:9342":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:10081:9131":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:955:9112":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"18:481:8233":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:4438:6975":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"11:1501:20390":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:5588:6235":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:11235:8280":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"14:31:8911":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:7893:3398":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:21447:9391":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:5747:9341":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:12790:5694":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:8294:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:13286:5790":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:4766:7093":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"9:52:8993":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:12052:765":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"24:4516:3222":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"17:14324:6130":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:47803:8046":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"11:1121:8917":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:7594:5103":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:2159:605":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:44167:14712":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:1058:9113":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"20:904:3339":{"crate_id":20,"path":["proc_macro2","Delimiter"],"kind":"enum"},"2:11813:8565":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"11:986:9113":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:4320:9274":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:12822:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"13:0:3077":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:47788:8045":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:10771:5403":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:0:841":{"crate_id":6,"path":["libc"],"kind":"module"},"16:5982:8330":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:308:1500":{"crate_id":1,"path":["std","thread"],"kind":"module"},"24:5069:2027":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"17:13228:5781":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:5696:21323":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:13989:6021":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:8331:9304":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:39961:14585":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"23:322:2582":{"crate_id":23,"path":["quote","spanned","Spanned"],"kind":"trait"},"2:39928:8514":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:13188:5776":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"20:121:35001":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"2:41675:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:10197:21477":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:4189:9272":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:3171:3319":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"24:4349:3638":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"2:43336:8552":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:45440:7938":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"24:1440:25455":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"0:964:1751":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"11:817:9110":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"21:244:35032":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"2:43643:8571":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:46685:7993":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:9574:34974":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:2907:6230":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:10475:5106":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:12554:5659":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:13949:6011":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:6431:9343":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"9:393:20310":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:1921:4592":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"21:1019:3503":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"24:3791:3600":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"1:897:4683":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:7862:8425":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:12576:5666":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:12997:5742":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:4666:7048":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"14:165:20397":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"21:478:4994":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"16:6915:6242":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"24:344:35326":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"2:30155:4548":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:8558:3895":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:13676:5953":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:7534:6246":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:12810:5697":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:4951:7192":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"24:4845:3253":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"16:8205:21345":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"24:4892:3263":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"2:43887:8584":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"24:4419:3643":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"21:2591:3504":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"1:8819:8119":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:4392:3483":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:13966:6018":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"8:0:3079":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:1776:4681":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:21199:4618":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:41336:8540":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"24:674:35165":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"1:10250:9330":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"20:874:236":{"crate_id":20,"path":["proc_macro2","TokenStream"],"kind":"struct"},"17:10265:21463":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"18:671:25432":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:4176:9271":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:4743:9258":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:364:4486":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:2766:6224":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:9169:30396":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"1:4478:9276":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"20:728:1879":{"crate_id":20,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"17:10165:21455":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:11306:5450":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:5131:193":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:2362:191":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:5661:8300":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"9:177:9004":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:6893:6348":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:20833:31628":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"24:94:9189":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"24:4900:3265":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"17:9752:21410":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:43087:32118":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"24:2811:3576":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"24:4936:1914":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"17:10698:21531":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:13135:5772":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:8557:3896":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"24:1598:3443":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"16:6569:6239":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:43614:8568":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"24:287:35175":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"17:10478:5399":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"24:2862:3578":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"1:5572:9327":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:13274:5450":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:504:21393":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:43924:8585":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:1118:34864":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:11117:14530":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"24:3032:3586":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"0:0:1753":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"5:3183:34550":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:2542:241":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:8390:3889":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:41483:3893":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:39184:205":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:6386:6305":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:13922:6007":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"24:2222:2582":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"17:13148:5773":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"11:836:9111":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"24:2998:3584":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"1:6467:5095":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:6298:208":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:5964:7382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:47773:8044":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:554:6713":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:7199:8463":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"11:285:8440":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:13667:5949":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:7764:2048":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:12042:317":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:21108:9394":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"6:4725:7071":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:9564:21407":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:22664:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"5:6079:5031":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:1590:6795":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:11272:8282":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"24:5310:2259":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"24:5295:192":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"17:9137:5366":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:3009:2440":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:4742:7081":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:41792:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:22141:7670":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:562:6718":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:536:8290":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:926:9108":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"11:2194:6584":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"21:1195:198":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"16:6226:21328":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:6415:8366":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:5845:7312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:3600:6258":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:7209:3383":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:42446:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:47327:8029":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:6156:8357":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:5975:14905":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:3720:3456":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:12058:1550":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:7259:7616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:13451:5819":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:21238:9386":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:43766:8573":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:13792:5977":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"24:4250:3631":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"5:4985:5031":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:14:2722":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:6729:7532":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:40124:3404":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"23:407:4054":{"crate_id":23,"path":["quote","__private","RepInterp"],"kind":"struct"},"24:336:3456":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"2:9464:112":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:22192:7674":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:12123:5559":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:5858:7321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:6560:4997":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"16:6531:8379":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:11393:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:4392:9268":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:4918:9302":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"24:4492:3220":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"18:564:5252":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:7397:3401":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:12063:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:43510:8563":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:43668:8508":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:11048:21574":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:1649:6839":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:10766:8626":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"5:3594:3323":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:20848:31628":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"21:140:4717":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"23:38:2958":{"crate_id":23,"path":["quote","format_ident"],"kind":"macro"},"24:4924:3271":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"2:2850:5218":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"14:0:3084":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:1895:8927":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:5760:21324":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:1557:3319":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:4957:7193":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:5827:7300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"20:510:3337":{"crate_id":20,"path":["proc_macro2","LexError"],"kind":"struct"},"2:46295:7971":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:6083:20435":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:1426:3323":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:4138:27489":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:10561:8263":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:10726:21552":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:10036:5384":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:11361:8638":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:12685:5681":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:2960:34869":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:11788:5490":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"24:4854:3255":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"24:2794:1904":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"1:416:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:6163:5090":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:11507:21415":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:3441:21520":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:2921:212":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:43860:8583":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"7:32:20295":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:10840:30157":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:932:9109":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"24:4806:3244":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"24:259:8910":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"5:4426:5033":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:11162:5442":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:14156:6066":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:5972:5091":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:1506:6745":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:4393:5031":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"21:2754:1958":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"2:40722:3394":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:13101:5759":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"24:4920:3270":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"17:11201:8271":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:3224:9220":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"9:507:6647":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:4164:5031":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"11:1027:20387":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:1503:9014":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:10456:21484":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"24:5060:2554":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"5:4759:689":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:6199:4707":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:6814:7587":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:40456:3428":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"11:657:3318":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:2548:6215":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:11822:5115":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:21421:9382":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"21:2770:1891":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"17:11815:5496":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:12621:5672":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:4485:6997":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:11244:5479":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:6627:7498":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:11074:21584":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:40202:8525":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"24:4064:3618":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"24:4824:3248":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"1:12060:812":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"11:403:34887":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:10240:5382":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:43972:8594":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:41449:1940":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:9455:34951":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"18:507:5246":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"24:4793:3241":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"24:878:35331":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"2:42702:8546":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"24:5005:2559":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"2:39065:8506":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:5872:7331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:1527:6753":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:11987:8687":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:47613:8034":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:6010:3432":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"9:426:20311":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:13055:5752":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:4160:9269":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:9372:5373":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:9461:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:8686:21394":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:7503:6245":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:2962:7659":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:8877:8122":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:22109:7669":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:14083:6050":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"24:552:8195":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"2:5551:3419":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"24:5103:2234":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"2:40254:3408":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:2613:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:39120:201":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:4234:3319":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:12062:1163":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:12196:5573":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:12054:762":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:2771:223":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:2831:1917":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:6598:7486":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:47689:8038":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:207:4600":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:2833:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:9053:27545":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"24:4987:2443":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"2:22730:180":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:7760:8926":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:5830:8313":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:2618:6218":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"11:749:4683":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:3013:2220":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:40184:3417":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:12484:5650":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:43795:8581":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:12724:5685":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"24:4151:3624":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"2:22200:7675":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"12:0:3083":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:4745:6275":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:14499:6177":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:8279:8617":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:10478:8483":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:22763:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"16:3232:6198":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"24:4520:3223":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"24:2981:2578":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"2:22565:179":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"16:8195:8436":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:6583:8381":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:9841:5062":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:2779:3489":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:2494:14590":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:4703:9303":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"21:2639:3502":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"2:30171:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"24:5066:2954":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"2:39833:8508":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:9998:5354":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"9:237:7917":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:5434:9324":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:11547:5477":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"24:4035:3616":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"6:7304:7630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:11742:5486":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:2356:184":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:13914:6005":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:10789:8634":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:12103:14548":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:3019:3512":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:4047:9249":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:3016:3511":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"13:110:34893":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:12888:5724":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:5384:21321":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:14033:6035":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"24:845:5212":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"2:46719:7994":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:4154:3495":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:11774:8559":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:13546:5902":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:21884:9189":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:39839:8509":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:4053:6264":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:40689:3386":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:2546:240":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:30243:31876":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:9003:21404":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:12098:5556":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:44083:8598":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:22238:31880":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:7905:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:6485:5007":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:3226:9221":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:4417:6266":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:2855:5219":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"24:1402:1964":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"24:3338:3596":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"2:45462:7939":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"15:394:20426":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"14:187:20404":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:6610:5096":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"20:924:2283":{"crate_id":20,"path":["proc_macro2","Punct"],"kind":"struct"},"24:3958:3611":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"16:5419:5364":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:10507:8259":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:6346:8988":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"16:8072:6448":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"24:4221:3629":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"2:9436:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:20820:4255":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:5053:7242":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:4458:6984":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:4558:7032":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:21064:32042":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:10340:30959":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:488:6673":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:14134:6061":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:14401:6152":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:1736:4634":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:12698:5682":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:8964:8126":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:7638:4487":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"20:357:3337":{"crate_id":20,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"17:13868:5994":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"24:2760:3574":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"17:11111:21561":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:41543:212":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:4967:3885":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:39238:14618":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:11573:8288":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:4196:3458":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"11:1845:8449":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:11351:5454":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:7282:3318":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:11164:8120":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:7694:6249":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:10557:8560":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"24:4076:3619":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"16:149:4995":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:12041:1078":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:10949:8926":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"5:4032:5007":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:358:4485":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:10292:5390":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:8297:9267":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:4804:32102":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:6582:7474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:21255:9189":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"18:538:5250":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:8458:7917":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"24:4487:3221":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"24:2896:3580":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"6:5046:7239":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:8567:8622":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:2170:8454":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:22304:8501":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"24:2828:3577":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"24:4402:3642":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"9:0:3080":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:9945:5382":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:41611:185":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:8896:8123":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:7555:7641":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:12750:5689":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:1557:6773":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:13611:5943":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:11203:8131":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"24:4815:3246":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"16:8154:21343":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:9350:5372":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:4783:7104":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:14448:6166":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:4802:7112":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:9977:8537":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"5:5128:5037":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"5:676:234":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:5503:9326":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:7443:3400":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"11:760:4681":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:0:508":{"crate_id":2,"path":["core"],"kind":"module"},"24:4308:3635":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"2:12628:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:8540:8619":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"11:723:8446":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:9478:3468":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:11184:7928":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"24:548:212":{"crate_id":24,"path":["syn","error","Result"],"kind":"type_alias"},"5:6798:4689":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:21886:9384":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:13567:5912":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"11:2049:9113":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:12452:5643":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:9488:34960":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:13554:5905":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:3935:5031":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:4552:7030":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"20:708:3503":{"crate_id":20,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"17:12007:5541":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:30719:185":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:6843:7601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:20878:31787":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:45595:7944":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:44091:8600":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:9790:34965":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:8765:21396":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:7532:7635":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:6165:7451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:0:1440":{"crate_id":1,"path":["std"],"kind":"module"},"11:399:34886":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:727:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:9148:32355":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:9780:21411":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"24:5102:1969":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"6:4835:7124":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:9886:21425":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:4910:7166":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"23:148:3916":{"crate_id":23,"path":["quote","__private","HasIterator"],"kind":"struct"},"5:4363:5033":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"24:5185:2273":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"24:4011:3614":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"17:14335:6135":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:4059:9252":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:2035:3456":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:14420:6157":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:6714:7527":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:22290:7687":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:1257:8417":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:9486:5105":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:41526:4607":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:9133:8131":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:12833:5075":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"5:0:291":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:589:9095":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:14110:6057":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:12846:5703":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"24:1484:3331":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"17:10646:5463":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:4986:7210":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:6053:7416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:7737:8612":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:7524:1973":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:10849:30155":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:1513:6748":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"11:311:8443":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:11737:8554":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:14118:6058":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:7526:7634":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:46419:7988":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:42680:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:47698:8039":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:9924:5066":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:4965:7198":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:42895:7921":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:2576:5066":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:3068:2503":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:11062:21583":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:40011:31886":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:7660:6401":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"24:498:3329":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"1:11150:8119":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:7889:3397":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"24:4888:3262":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"16:8167:21344":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"23:345:2580":{"crate_id":23,"path":["quote","quote_spanned"],"kind":"macro"},"24:5301:2256":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"6:573:6723":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:2219:4626":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:547:6710":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:1273:9114":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:4806:6277":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:5996:7395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:12671:5408":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:4812:7116":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:40155:3406":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:14296:6123":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:9466:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:3504:3467":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"20:946:1891":{"crate_id":20,"path":["proc_macro2","Ident"],"kind":"struct"},"6:4306:6894":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"24:4498:2093":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"17:13575:5913":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:579:6726":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"24:3970:3612":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"1:9201:8135":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"5:7545:4682":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"18:609:34983":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:5398:9322":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:3065:5272":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:42495:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:4054:4589":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"24:2964:2273":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"6:5891:7333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:568:6721":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:7349:3375":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:3239:237":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:276:1939":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:10100:27474":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:11381:5458":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:13897:6002":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:2832:6227":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:21014:9189":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:41349:8617":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:41714:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"24:4810:3245":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"2:46192:7969":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:7999:30411":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:5363:6289":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:123:14986":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:2384:9176":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:29923:9240":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:47467:8031":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:12052:14541":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:1482:9107":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:2359:6207":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:6401:6233":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:42692:7917":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:6545:6307":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"21:2690:1959":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"24:5285:3288":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"17:12531:5656":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:10214:21465":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:2665:9152":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:7375:27591":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:7436:6395":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:12876:5722":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:8195:3414":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"15:288:20416":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:40267:3423":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:8909:9352":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:39096:200":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:5054:30400":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:43378:8483":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:6194:8476":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"16:5612:6237":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:45370:7935":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:12055:1551":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:10788:21554":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:45564:7943":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:11358:21589":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:2504:6213":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:11910:5523":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"24:252:8909":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"2:2836:4242":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"16:7342:34914":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"24:5484:3305":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"14:202:2323":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:10447:21485":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:4824:9257":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:11710:5450":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"24:5298:2543":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"6:4608:7043":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"24:4262:3632":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"16:6929:6351":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:3830:6261":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:3229:14617":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:8134:8435":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:5776:7280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:22316:9241":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"24:4448:2572":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"2:3050:4590":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"6:6657:7520":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:2930:5227":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:1670:1116":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:12830:5698":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:7006:21334":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"21:2630:236":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"2:40480:3430":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"24:104:4312":{"crate_id":24,"path":["syn","token","CustomToken"],"kind":"trait"},"17:10672:21550":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:3256:14567":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"24:5334:2271":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"16:6499:6251":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:45684:7948":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:62:14931":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:10903:21519":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:12043:5548":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:4844:7130":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:22928:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:45546:7942":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:1690:6863":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:10628:8269":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:39980:7891":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"24:1618:1733":{"crate_id":24,"path":["syn","parse_macro_input"],"kind":"macro"},"4:0:3078":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:43176:14526":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:5366:14519":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:9418:3467":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"5:5923:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:3669:5007":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:9985:21432":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:7792:21341":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:43248:14532":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"24:3946:3610":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"1:9031:1885":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"5:5769:235":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:2644:6219":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:4772:7096":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:4500:9277":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:3735:9116":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:7662:4477":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"11:644:3323":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:41372:7904":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"5:3800:4681":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:12049:663":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:46017:7964":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:9390:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"23:78:1961":{"crate_id":23,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"6:5886:7332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"20:15:25457":{"crate_id":20,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"6:4919:7172":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:11215:8275":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:20880:31783":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"24:2743:3573":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"1:7683:4474":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:4370:6945":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:2909:5207":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:12046:8244":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:11240:4483":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"24:5489:3306":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"1:3939:9243":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:2305:20461":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"5:1102:33303":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:907:4681":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"18:644:5246":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:4491:7000":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"21:957:4723":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"5:5612:4687":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:11872:5508":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:44134:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:46373:7987":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:6017:7407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:9711:34958":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:9470:2496":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:10420:5241":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:2223:33408":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:2970:25868":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:7492:8418":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:12437:5638":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"18:766:25430":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:39245:7762":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:12074:5552":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:12702:14593":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:2284:20436":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:12038:428":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"11:2186:34884":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:4448:6981":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:41989:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:11490:5475":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:11086:21585":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:7290:3318":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:39259:7763":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"24:3929:3609":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"2:42910:8548":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:256:34949":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:43187:7922":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"11:119:4998":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:4613:6272":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:43346:2869":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:21016:9387":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:14126:6060":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:14478:6174":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"5:2966:3586":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:21315:9189":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"24:4574:2109":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"2:9720:14595":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"24:2092:2516":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"24:555:5205":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"2:40695:3388":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:3264:9222":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:11639:5447":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:21:702":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:7015:6356":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"24:4928:3272":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"24:3134:3590":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"16:4719:6274":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:9476:196":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"7:79:20302":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:39920:8508":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:22829:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"11:798:9108":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:7523:8422":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:13202:5779":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:2825:4239":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:8313:8100":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:9933:21439":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"20:951:2579":{"crate_id":20,"path":["proc_macro2","Literal"],"kind":"struct"},"6:6697:7522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:8925:9351":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"24:2607:3570":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"17:11124:21560":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"20:930:1958":{"crate_id":20,"path":["proc_macro2","Spacing"],"kind":"enum"},"6:6076:7422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:2272:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:506:6681":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:6596:9348":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:4680:7049":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:1514:200":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:3846:9239":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:884:8447":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:41313:31892":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:13826:5980":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:6877:7610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"3:234:212":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:45702:7949":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:30115:4546":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:46609:7991":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:3679:9234":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:8895:21400":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:1495:6740":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"24:4789:3240":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"17:10430:21508":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"21:2749:2283":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"1:2499:9214":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:4520:7016":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"24:5457:3298":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"1:12048:661":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"24:1132:8196":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"6:1911:16332":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:2012:21466":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:6886:247":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:7269:34920":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"24:886:35328":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"17:10397:21507":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:14100:6054":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:42473:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:8097:8429":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:20863:31785":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:45993:7963":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"24:3253:1874":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"17:9896:21426":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:9152:8625":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:9207:5368":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:46449:7989":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:2428:6210":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:41458:3319":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:4347:3482":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:4940:7187":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:47826:8047":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"18:707:8244":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:2216:9168":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:12057:14539":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"24:3406:251":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"1:10995:8121":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:4638:7513":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"24:902:35330":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"2:8985:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:2934:5225":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:4697:7058":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"11:1103:20389":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:40164:3415":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"20:821:1879":{"crate_id":20,"path":["proc_macro2","imp","Group"],"kind":"enum"},"6:6086:7425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:7149:3381":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"24:3151:3591":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"23:35:9189":{"crate_id":23,"path":["quote","ext","private","Sealed"],"kind":"trait"},"5:5318:5007":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:1595:6797":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:10585:14535":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:4527:6269":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:2867:5230":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:7768:6238":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"24:5478:3304":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"2:2253:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:40174:3416":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"18:0:3088":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:47709:8040":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:5673:6236":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:44111:8605":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:3321:3492":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:5929:7361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"14:160:8911":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"24:2624:3571":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"1:6358:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:9172:5367":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"18:624:34979":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"24:2930:3582":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"11:1852:8450":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:14001:6027":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:12037:14540":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:2864:6228":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"24:4820:3247":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"20:118:8230":{"crate_id":20,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"1:11319:9331":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:40316:3427":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:646:9100":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:6045:7414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:13024:5746":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:39912:8513":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"20:700:236":{"crate_id":20,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"17:13876:5997":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:3529:9206":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:22697:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:9026:9022":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"18:531:8235":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:7382:8465":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:1138:33307":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"24:5148:3280":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"2:32051:4243":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"24:3219:2491":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"2:39994:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:43652:8572":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:12136:5560":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:4002:4683":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:6896:5098":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:11586:5478":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:4376:6946":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:0:3086":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:46215:7970":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:7865:8055":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:43482:8561":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:42157:3461":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:1569:6781":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:13298:5797":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:7462:6396":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:46869:7995":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:14346:6136":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:40133:3414":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"24:2229:9189":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"24:4180:3626":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"17:12711:5684":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:5899:7338":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:863:3318":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:41594:3323":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"16:4641:6273":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"18:699:8242":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"24:0:1731":{"crate_id":24,"path":["syn"],"kind":"module"},"2:9417:212":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"6:494:6676":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:12658:5676":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:12513:5655":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"24:5150:3282":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"17:13758:5965":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"24:3982:125":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"6:4931:7181":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:9921:21445":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:4330:6912":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:11176:30158":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:4317:6902":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:9086:5364":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"14:40:1891":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:3648:3318":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:9867:5380":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"11:630:3319":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:39140:204":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:6687:8385":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:47575:8033":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:6696:6330":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:1500:6742":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:6607:7492":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:14024:6032":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:8713:21395":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"24:1530:2905":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"5:1302:8917":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:3115:9225":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:41398:183":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:1717:6874":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:12465:5645":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"5:7261:8464":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"18:690:8241":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:10831:8096":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:14145:6065":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:13802:5978":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:12422:5634":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"24:2240:5214":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"18:599:5209":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:8983:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:6279:6300":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:1044:8417":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"24:3117:214":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"9:330:6624":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:5322:6288":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:14460:6168":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:42400:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"18:491:8234":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:14308:6126":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:14536:6184":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:2530:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:10953:6644":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:2214:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:949:9111":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:6268:34923":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:43582:8567":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:21152:9395":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:10084:21431":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:39080:202":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:10977:27534":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:6456:8369":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:2320:190":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:13174:5775":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:9762:34961":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:9051:21380":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:44099:8602":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"23:272:1969":{"crate_id":23,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"2:41950:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:42390:7909":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"5:7182:4597":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:8291:9275":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:4640:7515":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:11661:5481":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:45494:7940":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:5808:7298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"21:1393:1973":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"21:2600:8229":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"17:12737:5687":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:6616:7493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:7221:5018":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:10661:21549":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:10980:5390":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:13113:5761":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"18:636:5264":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:2883:5223":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:3989:9245":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:10432:9328":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:4570:7041":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"21:2704:3503":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"17:12778:5693":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:4850:7131":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:6024:7408":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:10366:21471":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:7568:6248":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:8286:8618":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:30747:4255":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:622:8925":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"14:215:8437":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:2493:9189":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:4:1040":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:14378:6151":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:42028:9018":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:12154:5568":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:9912:21427":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:7732:4749":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:47724:8041":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"9:450:20309":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:9242:5369":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:10278:21462":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:13816:5979":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:41753:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:7514:7632":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:3284:3490":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:9039:8127":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:8239:2658":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:5311:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:10821:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"24:4192:3627":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"6:5784:7282":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"24:4943:2503":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"6:4718:7070":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:42655:8542":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"24:152:1885":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"6:4640:7046":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:1924:9149":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:2938:5228":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:14514:6178":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"24:3389:3599":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"2:9939:5070":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"16:4585:6271":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:40666:3382":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:9972:21433":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:10112:21453":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"18:755:8251":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:41230:7895":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:9725:8478":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:6145:7437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:4545:7028":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:7554:6247":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:2828:3510":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:43330:8551":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:44115:7928":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"24:4134:3623":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"15:327:8989":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:10227:21464":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:6439:4683":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:12208:5574":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:8953:21402":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:7621:21339":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:4864:7139":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:5909:7345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:6071:5086":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:9677:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:8989:4468":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"21:216:8971":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"2:31950:32372":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:11388:8640":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"24:2709:3572":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"16:7391:21336":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:12293:5602":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"24:3287:1928":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"1:943:9110":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:39432:28490":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:47075:8027":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"5:1288:9113":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:8847:8121":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"11:1611:5004":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:7337:3374":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"21:648:3506":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"24:4564:1896":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"2:11592:14543":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:12020:27526":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:10440:21509":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:10801:8055":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:11719:21417":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:5838:7308":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:2888:5082":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:2788:6225":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:14013:6028":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:43564:8566":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:6791:2707":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:1579:8449":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:8281:6454":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"11:2033:8417":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:8556:8118":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:2321:6199":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:7651:21340":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:2624:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"13:226:6579":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:22895:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"24:4168:3625":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"17:11845:5500":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:12970:5739":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"11:365:5002":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"23:235:4173":{"crate_id":23,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"16:2744:6223":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:4921:6281":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"24:4932:3273":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"2:43239:8488":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:10126:8252":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:434:5317":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"24:4785:3239":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"17:12280:5601":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:2871:3364":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:4652:7047":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"18:113:25420":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:5781:9019":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"24:5500:3309":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"24:843:9189":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"9:357:20324":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:31903:6583":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:9617:34962":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:7848:4868":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:14282:6117":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:4273:3474":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"24:1862:3315":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"6:6859:7607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"20:802:34985":{"crate_id":20,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"16:2526:6214":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:41870:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:11991:5537":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:6880:3413":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:0:3087":{"crate_id":17,"path":["object"],"kind":"module"},"21:2328:1891":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"16:5905:8321":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"10:0:3081":{"crate_id":10,"path":["adler"],"kind":"module"},"1:10771:8628":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:45647:7946":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:39890:8511":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:638:9098":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:5976:7387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:12934:5734":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:3764:6259":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:12053:766":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:1631:6827":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:42710:8547":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:31943:2658":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:22177:31898":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:4986:6283":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:5939:8327":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:6147:5075":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:11367:5455":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:11158:4631":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:13973:6019":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:4846:206":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"18:96:25419":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:13085:5755":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:4756:7087":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:42671:8545":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:8978:9020":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"18:736:25429":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:782:5010":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"24:4884:2160":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"1:5988:208":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"11:1068:20388":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:3217:34556":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"21:2709:1960":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"2:5403:5031":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:47750:8043":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:10540:9218":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:45416:7937":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:42663:8544":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:6188:3409":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"24:54:1968":{"crate_id":24,"path":["syn","token"],"kind":"module"},"2:2926:5226":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"20:788:236":{"crate_id":20,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"2:44276:207":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"5:7438:5038":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"20:704:3337":{"crate_id":20,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"17:12543:5658":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:8050:3221":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:11407:21413":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:6844:6342":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:119:14985":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"5:35:4598":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:14173:6073":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:474:1880":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:6634:7502":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"24:2573:3568":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"16:6879:6346":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:7425:8471":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:4687:7051":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"5:6955:5051":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:7581:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"18:80:25418":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:4194:5031":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"23:0:1143":{"crate_id":23,"path":["quote"],"kind":"module"},"1:10534:9220":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:43677:8513":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"18:521:25433":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:1442:3318":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:4557:6270":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:4003:9247":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:21416:9189":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:2533:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:23375:222":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:4293:6885":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:2150:21496":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:5243:192":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:12615:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:49671:9398":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"16:2670:6220":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:21271:9381":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:10340:5397":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:43949:8586":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:7582:6397":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:3741:9238":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:261:5007":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:10534:8261":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:7131:27475":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:9852:21424":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:3461:6257":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"11:2180:6581":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:1842:9137":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:4835:6278":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:5816:8312":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"24:1486:1966":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"type_alias"},"2:40234:3431":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:9474:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:7525:3399":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:10410:21478":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:12086:5553":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"24:5082:3276":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"2:21066:4618":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"20:900:1879":{"crate_id":20,"path":["proc_macro2","Group"],"kind":"struct"},"24:3866:3605":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"2:4268:3473":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:8231:9236":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:2845:5217":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:7913:30426":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:6753:7544":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:587:6731":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:13632:5948":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:41384:7905":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:45394:7936":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:878:5015":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:11281:5449":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:2887:5224":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"21:433:4993":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"5:1464:8446":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"24:4869:3258":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"1:1764:628":{"crate_id":1,"path":["std","env"],"kind":"module"},"5:2959:2135":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:4856:7134":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:3655:5277":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"24:2845:2220":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"2:1547:5031":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:45665:7947":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:6376:21329":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:534:4469":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"16:7318:6378":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:505:4464":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:8978:21403":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"24:89:1885":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"6:5988:7394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:9650:5390":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:12983:5741":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:2574:6216":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"21:988:236":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"24:3049:3587":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"11:844:9112":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:7287:7619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:40146:3405":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:42164:3470":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:45795:7957":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:1067:9114":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:5626:208":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:6979:3378":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:7595:7649":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:9109:221":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"24:5144:2100":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"24:3355:3597":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"6:6735:7533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:12024:5543":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:5814:7299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:6811:9379":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:871:8446":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:10537:9222":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:5076:7248":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:2243:8459":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:7393:3402":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:10949:21516":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"5:629:8918":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:4497:6268":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:12036:379":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:11617:5479":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:45847:7959":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:8218:8480":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:6574:7469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:11535:8287":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:8794:21397":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:483:5077":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"24:4781:3238":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"1:9281:4759":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:12037:961":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:3419:5031":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:1590:1928":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:8980:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:8242:9232":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"21:2577:3505":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"19:0:1058":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:918:9013":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"20:980:3318":{"crate_id":20,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"1:12050:767":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:45825:7958":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:6901:6241":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"24:5055:2551":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"17:12111:5558":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:13685:5954":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:10139:21454":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"5:6769:4687":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:30349:31874":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:2861:5220":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:2450:6211":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:11848:8482":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:12496:5652":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"18:614:34980":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:4526:7019":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:12645:5673":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:12009:9105":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"24:1921:3317":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"1:8225:8568":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"24:4551:1908":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"24:3236:237":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"17:10714:21551":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:6204:8973":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:6425:8367":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:2141:8452":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"24:4361:3639":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"24:4880:3261":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"24:2658:99":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"16:5866:8319":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:11098:21562":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:11023:5440":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:45941:7961":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"5:1011:5007":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:8871:3318":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:39954:8516":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:40704:3390":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:12032:3723":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:11084:14529":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:43781:8579":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:2171:4619":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:21440:9189":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:8357:8101":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"5:7449:227":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"11:2201:3374":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"18:719:5265":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:20861:31788":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:46161:7968":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:3405:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:13906:6003":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:5743:8307":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"24:1771:1884":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"17:8594:21381":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"24:5481:2447":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"2:42914:8549":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"24:5466:3299":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"24:4023:3615":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"5:6558:3318":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:10468:5398":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:4448:3486":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:7023:5099":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:39999:8520":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"24:4904:3266":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"2:2840:3363":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:10750:5401":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:2892:3623":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:44107:8604":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:7529:4681":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"16:3888:6262":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:7657:4475":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:14221:6110":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:10603:8266":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"11:695:9014":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:7434:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:6261:8972":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:7535:8935":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:13040:5748":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"24:5039:2446":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"6:1733:6879":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:1781:9122":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:1681:6857":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:7549:7640":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:11137:21559":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:12677:194":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"21:2014:4705":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"2:11797:8562":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:22862:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"18:574:5246":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:22254:31891":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"21:2729:3339":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"16:6792:8399":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:3797:6260":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"24:4908:3267":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"2:47669:8036":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:22165:8496":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:1076:8917":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:41516:3894":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:10116:9189":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:8855:3319":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:4820:7120":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:4862:6279":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:8181:6252":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"24:4337:3637":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"16:2380:6208":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"14:7:8911":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:3269:32377":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"24:4110:3621":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"1:3348:9211":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"24:4525:1905":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"5:1672:5007":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:9474:3471":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"20:0:1730":{"crate_id":20,"path":["proc_macro2"],"kind":"module"},"24:2175:9189":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"6:6139:7436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:2881:6229":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"24:2947:3583":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"17:10494:8257":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:6850:7604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:1568:4681":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:7573:7644":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"21:367:4708":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"24:4279:3633":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"2:44155:8606":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:11992:3343":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:2596:6217":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"5:7211:4683":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:7360:34935":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:43147:8485":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"24:2641:1939":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"5:3178:8449":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:5746:7255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:43428:8558":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:12172:5569":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:46531:7990":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"11:332:5000":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:43166:8487":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:3315:6256":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:43156:14527":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:2810:6226":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"24:5368:3292":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"21:2426:1960":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"6:4415:6967":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"15:306:20417":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:2899:5208":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:12911:5733":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"24:2675:2485":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"17:13010:5743":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:595:6736":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:5027:7225":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:11261:8281":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:22598:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:2985:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:3049:20464":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:39018:4591":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:11448:21414":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"5:5954:5037":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:2223:9169":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:5060:7245":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:6805:7584":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:4465:6987":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:4074:3323":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:5403:5363":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:1585:8450":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:6960:21332":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:42418:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:12258:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:2366:4609":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:7284:3893":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:43464:8560":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:5418:9323":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:7472:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:7191:3318":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:7128:8127":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:7544:8423":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:31939:2048":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:3072:3328":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:9959:21434":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:6171:196":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"24:4837:3251":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"2:41293:1959":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:4774:6276":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:39162:203":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:5121:6287":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:7567:7643":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:8114:9185":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:41264:9233":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:558:4471":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:4051:9250":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:5640:8611":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"24:5344:2487":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"23:46:3349":{"crate_id":23,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"5:6788:4688":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"11:97:8439":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:5574:6232":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:2904:4176":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:10520:8260":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"24:4296:3634":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"2:43528:8564":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"20:811:1959":{"crate_id":20,"path":["proc_macro2","imp","Span"],"kind":"enum"},"6:4589:7042":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:13487:5850":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:10547:8262":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:582:1973":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:39935:14584":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:40041:9154":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:4909:9301":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"16:6467:8370":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:14090:6051":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"24:1725:9031":{"crate_id":24,"path":["syn","path","printing","span","QSelfDelimiters"],"kind":"struct"},"3:0:453":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:2920:3638":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:1411:3319":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"20:879:1959":{"crate_id":20,"path":["proc_macro2","Span"],"kind":"struct"},"1:8151:8095":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:4747:9261":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:4382:6948":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:10023:21409":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:7231:33393":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:8004:9024":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:8115:8432":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"24:3304:3594":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"1:1817:9131":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:11346:8144":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:5449:9325":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"0:963:1744":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"2:40216:3420":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:13162:5774":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:11562:14672":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:1536:6758":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:7245:3318":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:1473:8447":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:5648:21322":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:11327:8285":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"21:2635:3337":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"17:1184:21440":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"5:7396:31886":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:1750:7663":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"24:3270:3593":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"24:5017:3275":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"2:3514:4683":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:9114:4483":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:43624:8569":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:1561:3318":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:8556:3897":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"23:504:4169":{"crate_id":23,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"2:4783:397":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:12765:5692":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"11:1822:3318":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:1779:9121":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"24:3849:3604":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"2:40277:3424":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"24:3321:3595":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"2:41535:195":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"24:1894:3316":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"1:8863:9354":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:11226:8279":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"24:3895:3607":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"2:40302:3426":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:7067:8415":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"24:870:35333":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"24:5359:3293":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"6:4397:6955":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"24:4233:3630":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"}},"external_crates":{"23":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.33/"},"20":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.67/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.12/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.37/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}