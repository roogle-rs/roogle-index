{"root":"0:0:1844","crate_version":"1.0.195","includes_private":false,"index":{"2:12747:875":{"id":"2:12747:875","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12034:452"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12752:34819":{"id":"2:12752:34819","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12750:34818"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12777:34823":{"id":"2:12777:34823","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44166:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12874:34838":{"id":"2:12874:34838","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4670:34838"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44201:8712","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12849:27007":{"id":"2:12849:27007","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:3812"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12852:29645":{"id":"2:12852:29645","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:3812"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:15751","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12868:28151":{"id":"2:12868:28151","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12758:29604":{"id":"2:12758:29604","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12051:1643"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5551:35512":{"id":"5:5551:35512","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12750:34818":{"id":"2:12750:34818","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12773:8668":{"id":"2:12773:8668","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43888:2957","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12841:34832":{"id":"2:12841:34832","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12869:28152":{"id":"2:12869:28152","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12749:34817":{"id":"2:12749:34817","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12829:34827":{"id":"2:12829:34827","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12443:3812","`DoubleEndedIterator`":"2:7826:128","prim@char":"1:12034:452","str::rmatch_indices":"2:12832:34828"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44052:8761","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492-0:1019:1965":{"id":"0:492-0:1019:1965","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1019:1965","glob":false}}},"0:965:1841":{"id":"0:965:1841","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[96,0],"end":[101,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:12864:2054":{"id":"2:12864:2054","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12404:134","`FromStr`":"2:12403:3433"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42149:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12403:3433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12403:3433","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12872:29549":{"id":"2:12872:29549","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:895:37104"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535":{"id":"5:5535","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5536:35509","5:5537:2215","5:5540:35510","5:5543:35511","5:5551:35512","5:5552:35513","5:5553:3477","5:5554:2419","5:5555:2418"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12763:29602":{"id":"2:12763:29602","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1844":{"id":"0:0:1844","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[101,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2021\n# use serde_derive::{Deserialize, Serialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.195\")]","#![allow(clippy::branches_sharing_code, clippy::cognitive_complexity,\nclippy::collapsible_match, clippy::derive_partial_eq_without_eq,\nclippy::enum_variant_names, clippy::manual_map,\nclippy::match_like_matches_macro, clippy::needless_pass_by_value,\nclippy::too_many_arguments, clippy::trivially_copy_pass_by_ref,\nclippy::used_underscore_binding, clippy::wildcard_in_or_patterns,\nclippy::unnested_or_patterns,)]","#![allow(clippy::cast_possible_truncation, clippy::checked_conversions,\nclippy::doc_markdown, clippy::enum_glob_use, clippy::indexing_slicing,\nclippy::items_after_statements, clippy::let_underscore_untyped,\nclippy::manual_assert, clippy::map_err_ignore, clippy::match_same_arms,\nclippy::match_wildcard_for_single_variants, clippy::module_name_repetitions,\nclippy::must_use_candidate, clippy::similar_names, clippy::single_match_else,\nclippy::struct_excessive_bools, clippy::too_many_lines,\nclippy::unseparated_literal_suffix, clippy::unused_self, clippy::use_self,\nclippy::wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:964:1833","0:965:1841"],"is_stripped":false}}},"2:12770:29627":{"id":"2:12770:29627","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12769:2835"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12826:34826":{"id":"2:12826:34826","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12443:3812","`DoubleEndedIterator`":"2:7826:128","prim@char":"1:12034:452","str::matches":"2:12823:2181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44124:8765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:15751","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12839:34831":{"id":"2:12839:34831","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12746":{"id":"2:12746","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12747:875","2:12748:2185","2:12749:34817","2:12750:34818","2:12752:34819","2:12755:2947","2:12756:34820","2:12757:340","2:12758:29604","2:12759:2074","2:12761:29601","2:12763:29602","2:12765:29603","2:12767:34821","2:12768:34822","2:12769:2835","2:12770:29627","2:12771:2428","2:12772:2422","2:12773:8668","2:12774:33417","2:12775:33419","2:12776:28796","2:12777:34823","2:12778:33430","2:12779:2287","2:12782:29011","2:12785:29013","2:12788:2737","2:12792:4359","2:12796:28795","2:12799:29635","2:12802:29637","2:12805:34824","2:12808:34825","2:12811:29639","2:12814:29641","2:12817:29643","2:12820:29644","2:12823:2181","2:12826:34826","2:12829:34827","2:12832:34828","2:12835:34829","2:12837:34830","2:12839:34831","2:12841:34832","2:12842:34833","2:12843:34834","2:12846:2093","2:12849:27007","2:12852:29645","2:12855:34835","2:12858:34836","2:12861:34837","2:12864:2054","2:12866:28149","2:12867:29545","2:12868:28151","2:12869:28152","2:12870:28153","2:12871:29548","2:12872:29549","2:12873:29550","2:12874:34838","2:12876:10300","2:12877:34839"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5553:3477":{"id":"5:5553:3477","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12802:29637":{"id":"2:12802:29637","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12443:3812","`DoubleEndedIterator`":"2:7826:128","prim@char":"1:12034:452","str::split":"2:12796:28795"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43920:8681","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:15751","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12771:2428":{"id":"2:12771:2428","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12034:452"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43872:8749","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12805:34824":{"id":"2:12805:34824","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12443:3812","str::split":"2:12796:28795","prim@char":"1:12034:452","`DoubleEndedIterator`":"2:7826:128","str::rsplit_terminator":"2:12808:34825"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43952:8755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12837:34830":{"id":"2:12837:34830","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12765:29603":{"id":"2:12765:29603","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12866:28149":{"id":"2:12866:28149","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12775:33419":{"id":"2:12775:33419","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12774:33417"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44185:8769","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12811:29639":{"id":"2:12811:29639","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:3812","str::rsplitn":"2:12814:29641"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44006:8758","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5540:35510":{"id":"5:5540:35510","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12756:34820":{"id":"2:12756:34820","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12871:29548":{"id":"2:12871:29548","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:895:37104"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5554:2419":{"id":"5:5554:2419","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12869:28152"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86-0:994:2059":{"id":"0:86-0:994:2059","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[21,0],"end":[21,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::internals::case::RenameRule","name":"RenameRule","id":"0:994:2059","glob":false}}},"2:12870:28153":{"id":"2:12870:28153","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:2418":{"id":"5:5555:2418","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12870:28153"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12774:33417":{"id":"2:12774:33417","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12775:33419"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44176:8768","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12796:28795":{"id":"2:12796:28795","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12443:3812","`DoubleEndedIterator`":"2:7826:128","prim@char":"1:12034:452","str::split_whitespace":"2:12774:33417","str::rsplit":"2:12802:29637"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43902:8678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:2215":{"id":"5:5537:2215","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12759:2074":{"id":"2:12759:2074","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42004:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12846:2093":{"id":"2:12846:2093","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:3812"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12792:4359":{"id":"2:12792:4359","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42004:198","prim@char":"1:12034:452","self::pattern":"2:12443:3812"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:15751","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8:1958":{"id":"0:8:1958","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[216,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:12761:29601":{"id":"2:12761:29601","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42004:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12782:29011":{"id":"2:12782:29011","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:3812"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12767:34821":{"id":"2:12767:34821","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12040:1538","str::slice_mut_unchecked":"2:12768:34822","crate::ops::Index":"2:39580:2592"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12855:34835":{"id":"2:12855:34835","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:3812"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:15751","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5552:35513":{"id":"5:5552:35513","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2029","`String`":"5:7535:250"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2029","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12776:28796":{"id":"2:12776:28796","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44156:8766","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12861:34837":{"id":"2:12861:34837","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:3812"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:15751","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:964:1833":{"id":"0:964:1833","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[88,0],"end":[93,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:12757:340":{"id":"2:12757:340","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12758:29604","`u8`":"1:12051:1643"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12768:34822":{"id":"2:12768:34822","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12040:1538","crate::ops::IndexMut":"2:3161:3418","str::slice_unchecked":"2:12767:34821"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12817:29643":{"id":"2:12817:29643","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12858:34836":{"id":"2:12858:34836","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:3812"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:376":{"id":"0:63:376","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1881,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:86-0:994:2059"],"is_stripped":false}}},"2:12820:29644":{"id":"2:12820:29644","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:15751","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12843:34834":{"id":"2:12843:34834","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:3812"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12468:15749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:493-0:404:1966":{"id":"0:493-0:404:1966","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[14,0],"end":[14,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:404:1966","glob":false}}},"2:12867:29545":{"id":"2:12867:29545","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39949:29538","Self::is_ascii":"2:12866:28149"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39949:29538","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12873:29550":{"id":"2:12873:29550","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:895:37104"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12785:29013":{"id":"2:12785:29013","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:3812"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:15751","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12832:34828":{"id":"2:12832:34828","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12443:3812","`DoubleEndedIterator`":"2:7826:128","prim@char":"1:12034:452","str::match_indices":"2:12829:34827"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44070:8762","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:15751","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12788:2737":{"id":"2:12788:2737","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42004:198","prim@char":"1:12034:452","self::pattern":"2:12443:3812"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12835:34829":{"id":"2:12835:34829","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5543:35511":{"id":"5:5543:35511","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12778:33430":{"id":"2:12778:33430","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44194:8770","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12842:34833":{"id":"2:12842:34833","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12876:10300":{"id":"2:12876:10300","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4671:10300"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44210:8706","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12799:29635":{"id":"2:12799:29635","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:3812"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12259:8680","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12877:34839":{"id":"2:12877:34839","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4668:34839"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44219:8711","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12814:29641":{"id":"2:12814:29641","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12034:452","str::splitn":"2:12811:29639","self::pattern":"2:12443:3812"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44024:8759","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:15751","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12772:2422":{"id":"2:12772:2422","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12034:452"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43878:8750","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12823:2181":{"id":"2:12823:2181","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12443:3812","`DoubleEndedIterator`":"2:7826:128","prim@char":"1:12034:452","str::rmatches":"2:12826:34826"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44106:8764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12769:2835":{"id":"2:12769:2835","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12770:29627"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12779:2287":{"id":"2:12779:2287","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:3812"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12748:2185":{"id":"2:12748:2185","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12755:2947":{"id":"2:12755:2947","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11998:15753"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12808:34825":{"id":"2:12808:34825","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12443:3812","str::split":"2:12796:28795","prim@char":"1:12034:452","str::split_terminator":"2:12805:34824"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43970:8756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:15750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:15751","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1023:2062":{"id":"0:1023:2062","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"5:5536:35509":{"id":"5:5536:35509","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2029","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2029","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:4234:3585":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:12255:8476":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:9681:3552":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"24:4576:2040":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"24:3231:1996":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"2:9833:233":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"21:478:5088":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"2:41773:8094":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"24:4197:3713":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"17:14426:5878":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:42130:3987":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:9888:3562":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:30618:3551":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"24:4604:1825":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"24:2976:3671":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"24:1525:2055":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"type_alias"},"24:3299:1964":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"6:6079:7593":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:918:10068":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:21466:7864":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:44497:8788":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:4647:7234":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:15212:6125":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"24:5163:2322":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"2:44912:8807":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:14633:5897":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:3344:15776":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:40499:8088":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:10513:10432":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"2:40546:8719":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:43274:8114":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:13273:5647":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:1477:8643":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"5:2979:3675":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:12077:22869":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:8192:3505":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:15480:6209":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:8564:8820":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:16109:6374":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"24:1169:8392":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"2:22003:10394":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:40728:8723":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:46392:8156":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:6893:6541":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:15311:6152":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:15507:6221":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"21:2722:3594":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"2:46192:8143":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:22722:8696":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:6318:6496":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:6569:6432":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:14509:5895":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"24:4922:3335":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"11:1603:21686":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:12053:1641":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:2744:6416":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:3278:10428":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:41215:3476":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"14:160:9829":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:6687:8582":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:3001:5311":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:2710:264":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"23:281:2058":{"crate_id":23,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"16:4921:6474":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:6059:7585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:12148:8752":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:4774:6469":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"24:5524:3390":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"1:867:8643":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"24:4325:3722":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"16:8294:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:12387:22884":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"20:732:1969":{"crate_id":20,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"18:681:8435":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:5051:28008":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:363:4577":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"24:5515:3389":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"9:52:10047":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:9918:22700":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:15160:6109":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:6222:7634":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:8332:7700":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:9536:33859":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:6868:7768":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:10667:35931":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:4102:33821":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:13869:5774":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:2169:22791":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:40812:3516":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:435:5411":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:21573:10591":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:32418:244":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"16:5574:6425":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:21182:4348":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:40650:3495":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"5:4777:719":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:10299:112":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"20:815:2048":{"crate_id":20,"path":["proc_macro2","imp","Span"],"kind":"enum"},"17:14221:5841":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:4764:7255":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:8003:28029":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:2183:8652":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:48348:8243":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:7691:4564":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"11:1160:9835":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:6041:22622":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"18:548:150":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:1315:9835":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:43237:8740":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:5140:7444":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:3600:6451":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:30562:4638":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:5743:8504":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:10016:22676":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:4417:6459":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:11122:8314":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:11426:22802":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:8171:10393":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:5123:7440":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:6128:7612":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"24:2080:3413":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"21:183:4424":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"21:2788:1981":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"6:5009:7384":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"24:2755:3661":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"17:12153:22855":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:12614:22710":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"5:3581:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:2370:10381":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:8354:8296":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:12468:15749":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:6071:7592":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:6162:5184":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"21:2742:1969":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"16:2907:6423":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"24:4419:3729":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"16:6879:6539":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:21204:33714":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:44282:15764":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:15710:6275":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:1545:4774":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:48234:8235":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:11175:8326":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"5:4366:271":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:7908:8814":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"22:0:3298":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"2:12403:3433":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"24:5534:3394":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"24:2806:3663":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"24:3452:274":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"2:42556:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:43055:135":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:22268:10680":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:3409:3584":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:4496:7167":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:32533:113":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:6804:7727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:6781:7720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"11:883:10317":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:1596:6989":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:22693:32489":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"5:4411:5125":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"11:2326:10318":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:401:22692":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:5068:7409":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:44319:8777":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:44398:8781":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:12659:22679":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:2228:22779":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:3594:3409":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:43645:33435":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"21:961:4816":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"16:8050:3312":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:3738:3546":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:9882:127":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:928:10314":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:14989:6071":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:6545:6500":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:4506:7173":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:7376:3408":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:31164:203":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:5625:227":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"11:2151:10319":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:7474:22632":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:15294:6148":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:39580:2592":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:40530:32480":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"0:964:1835":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"1:1902:10354":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:10530:246":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:8938:10562":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:13297:5651":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:41192:8730":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:48371:8244":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:3988:10456":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:12050:795":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:13724:5753":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:6913:7790":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:8387:3979":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:4440:7140":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:14843:6046":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:10618:35921":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:12035:1659":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"24:2704:105":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"24:5397:2364":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"7:31:21589":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:10803:22708":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:5982:7536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:4351:7077":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"24:1792:10247":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"2:9877:118":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:15612:6250":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"20:680:3546":{"crate_id":20,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"11:299:8637":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:39584:8704":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:5381:10531":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:13044:162":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"11:102:8636":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"24:4520:2314":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"24:5024:63":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"16:6386:6498":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:12057:1698":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:10959:8758":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:10941:22723":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"24:3854:3690":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"5:5650:4780":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"24:4571:1995":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"2:39494:15775":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"21:2653:3428":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"2:41206:3474":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:7102:22630":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"24:4951:3359":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"1:7867:8813":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:10716:22706":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"24:561:135":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"6:4595:7216":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:11590:8460":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:22548:7866":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:44185:8769":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:10569:35932":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:22604:8694":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:40780:3499":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:6299:3523":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:14359:5871":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:12052:1640":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"24:1102:2058":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"2:10312:5159":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:7668:7846":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:1528:6945":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"21:2444:2049":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"5:7498:8666":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:0:3175":{"crate_id":16,"path":["gimli"],"kind":"module"},"21:2595:3596":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"24:5530:3392":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"2:10246:5156":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:16160:6384":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:41756:8092":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"9:393:21604":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:32388:2746":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:12230:8468":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:11243:22761":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:10775:22707":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:44895:178":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:7679:7847":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"24:4566:3314":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"1:945:10316":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:1541:4776":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:13707:5750":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"24:2019:3411":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"17:2031:22762":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:11342:8339":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:44709:15935":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"24:5151:1981":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"5:1270:8614":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:6430:10552":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:12324:8480":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:7503:3471":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:42515:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:15013:6076":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:533:6894":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"21:2346:1981":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"1:2202:10373":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:2618:6411":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:4149:4681":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"24:2908:3667":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"24:4168:3711":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"24:3027:2667":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"16:5939:8524":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:3232:6391":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:3199:10430":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:13478:5695":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"5:7004:5142":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:7621:22634":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:5928:7510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:10735:8824":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"5:3818:4774":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:14087:5820":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:14324:5859":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:44124:8765":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:46247:8146":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:939:10315":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"18:609:35937":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:13339:4688":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:21575:7864":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:5634:8493":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:11657:8466":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:15301:6149":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:6243:2011":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:2323:636":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"24:5241:2366":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"6:4529:7181":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:12930:22713":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"24:904:36094":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"6:5897:7497":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:12784:8485":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:40439:8706":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"11:2423:3408":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:5992:7543":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:39701:223":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"24:5216:3372":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"1:11390:8839":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:4821:10467":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"24:5368:2347":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"24:4395:3727":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"24:1817:1974":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"2:21851:10394":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"24:559:233":{"crate_id":24,"path":["syn","error","Result"],"kind":"type_alias"},"6:1664:7042":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:9166:28046":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"2:11001:15744":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:7482:32480":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13383:5667":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"24:3163:235":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"2:42739:3554":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:5082:28008":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:40659:3505":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"24:563:8390":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"17:10471:35913":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:12051:1643":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:15943:5624":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"24:3129:3678":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"1:11621:8841":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:13056:5598":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:2209:10374":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"24:4852:3346":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"2:39533:4683":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"24:3992:3699":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"2:40690:3506":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:548:6903":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:475:1970":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:8072:6641":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:9445:136":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:10136:10399":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"20:806:35959":{"crate_id":20,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"16:6968:22628":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:3797:6453":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:574:6916":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:44194:8770":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"5:7451:4568":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"24:4866:3347":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"6:7651:7841":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:43477:8118":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"16:8181:6445":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:40803:3515":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"24:3866:3691":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"2:10520:10394":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:1537:6950":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:4625:10457":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:32531:2007":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"20:984:3408":{"crate_id":20,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"2:11519:15740":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:2548:6408":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:15101:6098":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:22442:8689":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:849:3413":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:3163:27916":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:7694:6442":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:12746:8484":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"24:4308:3721":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"16:7582:6590":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:1882:4726":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:4865:224":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:34073:4269":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:3065:5366":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:40672:3496":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:4998:856":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:3323:10421":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:7342:35900":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:7138:32370":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:41230:3480":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:43952:8755":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:41939:8815":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"5:1536:10320":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"24:912:36096":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"23:235:4266":{"crate_id":23,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"17:12953:5584":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:7616:7833":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:14021:5795":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"24:4594:3327":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"11:811:4774":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:8294:10477":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:4569:10504":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:15493:6215":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:5746:10550":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:2426:3182":{"crate_id":1,"path":["std","io"],"kind":"module"},"14:221:6725":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"11:2443:4776":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"6:6120:7610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:1521:6942":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:12220:5541":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:7792:22636":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:8816:8314":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"5:1495:10312":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"23:0:1228":{"crate_id":23,"path":["quote"],"kind":"module"},"17:12701:5573":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:3241:10433":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:6583:8578":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:15990:6345":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"5:6960:270":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:6818:8597":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:12674:118":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:6843:4780":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"20:955:2668":{"crate_id":20,"path":["proc_macro2","Literal"],"kind":"struct"},"20:908:3430":{"crate_id":20,"path":["proc_macro2","Delimiter"],"kind":"enum"},"24:3924:3695":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"17:15733:6279":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:22328:10672":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:13322:5656":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:7736:6597":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"24:4214:3714":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"24:5510:3388":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"24:4955:3338":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"1:640:10303":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:9096:184":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"24:1166:8391":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"17:11755:22847":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:5088:6479":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:42132:4700":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"24:5387:2649":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"17:11321:5484":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"18:636:5358":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"11:2231:8648":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"11:1107:21682":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:14497:5888":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:14373:5872":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:10520:35923":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:6742:8583":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"24:4069:3704":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"2:47200:8189":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:43806:15742":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"24:4967:3361":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"9:507:6840":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:13235:114":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:14156:5834":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:11136:8315":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:1650:7031":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:7317:34584":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:6171:213":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:14099:5822":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:12046:800":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"5:1301:10318":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:1710:7062":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:9541:10070":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:42192:3409":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"5:7029:5145":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:13118:15803":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:4449:7145":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:1896:7861":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:39679:221":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:4783:7263":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"21:0:1176":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"2:30602:4640":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:40681:3497":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"24:4628:2242":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"2:44462:8783":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:9036:8322":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:15087:6095":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:10316:27977":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:42087:3983":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:5866:8516":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:5712:8499":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:11226:22773":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:45915:8132":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"24:1657:1824":{"crate_id":24,"path":["syn","parse_macro_input"],"kind":"macro"},"2:2439:111":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:11439:22774":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:10556:4564":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:12463:15751":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:10093:150":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:8975:10074":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:6530:5101":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:7840:4964":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:3837:10449":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"21:2727:2049":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"2:22843:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:7556:7829":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:4806:6470":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:3184:3409":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"20:889:2049":{"crate_id":20,"path":["proc_macro2","TokenTree"],"kind":"enum"},"17:10813:35933":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:11065:5478":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:41790:10443":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:6718:7700":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:10242:5464":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:4700:10513":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:3160:31061":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:7719:10307":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:11014:22728":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:10355:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:48295:8240":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:5974:7531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"24:0:1822":{"crate_id":24,"path":["syn"],"kind":"module"},"21:2259:3431":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"21:2793:2668":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"24:2789:3662":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"2:4504:3575":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:7782:8621":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:4698:7238":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:22631:7871":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"24:677:36090":{"crate_id":24,"path":["syn","expr","precedence","Precedence"],"kind":"enum"},"2:23710:7885":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:8921:3985":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"14:202:2415":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:10516:10428":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:9023:10076":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:11617:8462":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:2777:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:8798:10537":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:119:16207":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"16:2832:6420":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:46091:8139":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"24:3350:3683":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"16:5727:8502":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:15177:6116":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"24:5434:1964":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"1:4167:10481":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:2983:26955":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:5363:6482":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:12457:8441":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:3493:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:7610:7832":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:12380:5548":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:3980:10455":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:43784:15733":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:6146:5169":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:22729:7884":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:44874:9589":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:1796:10336":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"24:4831:3342":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"23:35:10394":{"crate_id":23,"path":["quote","ext","private","Sealed"],"kind":"trait"},"2:48012:8228":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"24:4870:3348":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"2:4737:15788":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:8328:10514":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:2670:6413":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"11:0:3171":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:10950:22741":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"11:2124:8614":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"21:140:4810":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"5:790:5104":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:43920:8681":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:22091:10676":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"11:1728:153":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:5612:6430":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:9354:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:5431:10534":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:10918:15743":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:11539:10449":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:22743:8699":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:44839:214":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:10726:35919":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:9032:15750":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:5961:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:11497:5492":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:14878:6047":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:501:6871":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"24:4942:3337":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"2:43284:8744":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:4800:7273":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:12180:22881":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:15329:6156":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"24:936:36095":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"6:1576:6975":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:42972:8106":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"24:4354:3724":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"24:5547:3397":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"1:8405:8305":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:42002:201":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:12037:1152":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:15659:6264":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:9050:27008":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:4159:10480":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:4922:7331":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:10716:10515":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:22677:32473":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:15367:6164":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:42141:4569":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"24:3248:3681":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"1:8980:114":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:42217:203":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:4513:3576":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:12684:5425":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:5696:22618":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:5419:5458":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:11675:5559":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:44350:8780":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:3032:6446":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"24:3146:3574":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"24:5115:2640":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"16:6721:22626":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:22564:8691":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:4380:3565":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:5830:8510":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:32921:5312":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:4180:10482":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"24:509:3419":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"6:4968:7358":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"20:712:3594":{"crate_id":20,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"17:11041:5484":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"24:2636:3658":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"24:5006:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"2:21219:33718":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:8830:8315":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:3049:21759":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:6086:7594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:7544:8620":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"24:5070:2607":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"6:4616:7224":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:7285:8661":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:4516:7176":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:10962:22735":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:504:4554":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"24:3878:3692":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"17:13935:5783":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"14:187:21699":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:4533:3577":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"23:345:2669":{"crate_id":23,"path":["quote","quote_spanned"],"kind":"macro"},"11:1917:8647":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:8246:3488":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:2996:3453":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:13742:5754":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"24:5256:3379":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"2:42595:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:2644:6412":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:13334:5657":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:7660:6594":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:7554:6440":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:1682:7049":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:2380:10386":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:11818:5209":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:4830:7288":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"18:538:5344":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:5829:7453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"11:1891:4776":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:307:1589":{"crate_id":1,"path":["std","thread"],"kind":"module"},"1:10451:5200":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2:3736:3408":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:6159:7620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:11395:22767":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:1567:2018":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"11:1025:10318":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:6107:7606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:32348:6776":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:15631:6255":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:43000:33702":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:16049:6358":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"11:1007:8614":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"18:521:26909":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:40603:10372":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:7826:128":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:3251:2018":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:45961:8134":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:1743:659":{"crate_id":1,"path":["std","env"],"kind":"module"},"11:2569:3464":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:44653:8125":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"20:698:8428":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"6:4814:7279":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:14001:5792":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:6901:6434":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:7542:9853":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:33293:5314":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:10293:2957":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:11307:22758":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:12345:5547":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:5017:6477":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:10946:26999":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:7343:7814":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:6682:7684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:16146:6383":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"6:5910:7498":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:13254:5646":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:7879:3490":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:9880:118":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"24:4971:3362":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"2:3317:15838":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:4914:7326":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:7360:35891":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:48333:8242":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:45939:8133":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:14194:5839":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:6711:7696":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:2975:7857":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:6169:7623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:21447:10590":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:32419:3600":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"24:4407:3728":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"24:2874:3666":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"18:644:5340":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"24:2268:2671":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"1:4639:7715":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:8209:2957":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"24:3895:3693":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"17:15125:6103":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:12718:22711":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:10137:5461":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"14:31:9829":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:22755:10451":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"24:1771:10246":{"crate_id":24,"path":["syn","path","printing","span","QSelfDelimiters"],"kind":"struct"},"6:4543:7189":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:12410:5552":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:4473:7159":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:13202:5635":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:32409:8703":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"6:4847:7299":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:43262:154":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:3122:2532":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:1697:7058":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:1534:3409":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:7635:4775":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:1556:8646":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"24:3418:3687":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"1:7850:8812":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:12560:22921":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"6:5891:7496":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"18:766:26906":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"11:1883:3409":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"24:4110:3707":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"2:10807:15738":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:9028:1975":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:11449:5335":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:6929:6544":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"11:1887:3408":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:3888:6455":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"24:1659:2056":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"2:3126:138":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:11486:15739":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"7:78:21596":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"21:107:4807":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"17:11269:5476":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:14145:5832":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:41981:8102":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:10818:27952":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"24:5431:3383":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"1:3735:10447":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"11:700:3408":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"11:396:5096":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:1546:6956":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:15321:6155":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:21236:33723":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"24:4947:3358":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"6:5052:7404":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:40630:3494":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"24:3180:3679":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"24:4878:3332":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"24:1369:3550":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"6:6012:7559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:6605:3408":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:3936:10452":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:4308:3548":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"21:1836:4797":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"2:46659:8164":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:2662:10425":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:1203:22736":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:6426:3474":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"24:4856:3330":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"2:40480:15795":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:34419:3725":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:7028:5193":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:12127:22857":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:4919:32681":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:2586:5173":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:47414:8192":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:43888:2957":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:11052:22706":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:40751:3512":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"24:4436:3730":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"1:9452:10389":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"5:1505:10067":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:2943:116":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:5044:7402":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"24:4874:3349":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"17:10915:22721":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:1691:5125":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"24:3837:3689":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"2:40473:8714":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:8008:10078":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:256:35924":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"21:244:36007":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"2:41006:3521":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:922:10313":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:1514:6940":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:5395:10532":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:44006:8758":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:1758:10326":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"5:7268:4689":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:8148:8290":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"24:877:10394":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"2:47264:8191":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:10051:5458":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:2658:15800":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:10172:5462":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:7524:5132":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:10790:126":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"1:10931:10535":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"16:2810:6419":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:39637:219":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:22228:4711":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"16:4527:6462":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"24:2993:3672":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"16:7768:6431":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:6467:8567":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:10918:9844":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:12244:8472":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:13093:212":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:2933:21757":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:47076:8187":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:12166:22854":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:14181:5837":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:3372:3582":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:149:5089":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:8115:8629":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:4957:10435":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"5:692:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:0:314":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:11345:5489":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"24:2772:123":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"16:7884:22637":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:5780:10073":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:12584:22891":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"16:2864:6421":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"24:1967:3407":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"11:1896:4774":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"24:5426:3384":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"16:6346:10042":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"16:6156:8554":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"23:11:3438":{"crate_id":23,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"16:2788:6418":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:14822:6041":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:2062:10321":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:1777:635":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:2700:160":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:22199:10394":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:10225:10539":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"24:3958:3697":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"6:6666:7672":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:7925:9849":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:7523:8619":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"24:5065:2648":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"6:1639:7023":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:3201:10431":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:47762:8225":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:41962:8101":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"18:727:5362":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:42208:3408":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:14251:5846":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:6100:7605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:6297:227":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:3098:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:14399:5874":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:3732:10448":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:2946:135":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:8553:8313":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:580:6919":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:11294:22759":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:1632:7019":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"23:148:4008":{"crate_id":23,"path":["quote","__private","HasIterator"],"kind":"struct"},"11:2383:3409":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"18:624:35936":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:7015:6549":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:3011:5324":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:2944:233":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:6898:7785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:44106:8764":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:4740:10468":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"24:1479:26931":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"2:21392:10394":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:5015:7385":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:12445:22889":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:621:9843":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"24:5417:3385":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"1:6194:10077":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:46109:8140":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:44070:8762":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:13419:5672":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:7665:4565":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"5:7511:8669":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"20:119:8427":{"crate_id":20,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"2:43745:8119":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:12548:22887":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"16:7041:8607":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:15680:6270":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"18:582:4348":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:4986:6476":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:46840:8168":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:16098:6373":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"24:5527:3391":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"21:2396:2668":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"5:6484:4776":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:4311:10484":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:13961:5787":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:42320:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:6376:22624":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"11:2536:1969":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:9813:22698":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:3482:3559":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"18:80:26894":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:13633:5732":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:7613:22633":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:13856:5771":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:22:733":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"24:4624:3328":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"2:46918:8184":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:5322:6481":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:8844:8316":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:44333:8779":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:1063:10319":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:8922:10560":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:6844:6535":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"24:3316:3682":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"1:11012:5201":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"11:710:10067":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:7751:3492":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"9:450:21603":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:11595:8340":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:9149:8823":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:5154:5131":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:2333:4711":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:11399:22756":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:4114:33732":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:6596:10557":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:11023:5202":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:4584:7211":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:7657:7842":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:2428:6403":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:15049:6081":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:3602:4776":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:42753:3563":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:15:2810":{"crate_id":2,"path":["core","write"],"kind":"macro"},"11:2469:4774":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:4126:108":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:6837:7742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:8154:22638":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:5995:8488":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:33704:5317":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:7935:176":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:10725:8678":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"11:687:3413":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"21:433:5087":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"16:7597:35863":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:7722:6433":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"24:952:3369":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"17:10925:22722":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:6332:6424":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"24:5536:3395":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"2:1617:2534":{"crate_id":2,"path":["core","mem"],"kind":"module"},"16:7828:6605":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:42359:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:11141:22749":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:43902:8678":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:46007:8136":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:1538:3408":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:12202:22882":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:2766:6417":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:39755:15839":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:1507:6937":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:32445:251":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"5:5392:15729":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:3510:10413":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:48120:8230":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"13:226:6772":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:10700:3413":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:7331:3408":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:2472:6405":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"24:3975:3698":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"16:7568:6441":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:12041:1624":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"23:38:3046":{"crate_id":23,"path":["quote","format_ident"],"kind":"macro"},"6:4535:7184":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:10800:8291":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"5:886:5109":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:10745:8812":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"2:30688:32483":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:5500:10535":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"24:5042:1989":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"20:515:3428":{"crate_id":20,"path":["proc_macro2","LexError"],"kind":"struct"},"21:2618:8426":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"6:527:6891":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:13695:5748":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"24:4911:3355":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"1:8906:10561":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:4742:10470":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"24:2670:3660":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"2:43245:8742":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:13145:1981":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"21:648:3597":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"2:5687:5125":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:7462:6589":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:14346:5870":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:281:2029":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"24:1527:3535":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"16:2722:6415":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"24:5542:3396":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"3:0:479":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:0:534":{"crate_id":2,"path":["core"],"kind":"module"},"17:13347:5658":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:6263:7660":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"24:3061:3674":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"5:3607:3413":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:13066:33557":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:44621:8796":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:1873:9845":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:1558:6965":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:6862:4781":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"24:2687:2029":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"2:46706:8165":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:5825:5179":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"20:878:259":{"crate_id":20,"path":["proc_macro2","TokenStream"],"kind":"struct"},"5:7423:3464":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:5639:8809":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:5004:7382":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"24:4507:3873":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"24:4591:3326":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"1:4469:10486":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:12034:452":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:44024:8759":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:7604:7831":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:13516:5703":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:1094:22731":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:6279:6493":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:357:4576":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:42982:3551":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:4375:7094":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:40623:10390":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:41240:3482":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:1718:7066":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:8288:10485":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:9188:28095":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:46584:8162":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"24:5532:3393":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"6:4947:7343":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"23:322:2671":{"crate_id":23,"path":["quote","spanned","Spanned"],"kind":"trait"},"1:12055:1639":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:10988:22730":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:12514:15758":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"18:707:8441":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:8159:8291":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:15224:6126":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"24:4081:3705":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"1:2911:5176":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:6753:8584":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:7269:35877":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"24:2857:3665":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"2:48280:8239":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"23:46:3439":{"crate_id":23,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"2:41248:3484":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:38915:5323":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:2321:6392":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:12264:8477":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:14969:6063":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:495:6869":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"21:216:10025":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"24:3912:3694":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"2:4459:3574":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:4915:10512":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:836:3409":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"24:2925:3668":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"17:15192:6118":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:4808:7277":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:48269:8238":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:22639:7872":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:13365:5666":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:40828:3517":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:15557:6234":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"11:2369:21687":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:43714:15737":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:7277:3408":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"24:5246:3378":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"16:7391:22631":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"20:360:3428":{"crate_id":20,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"24:337:3546":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"5:6872:4782":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:43734:15736":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:4884:7313":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:46760:8167":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:5876:3498":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:2048:3546":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"18:507:5340":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:22005:10592":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"24:5359:2344":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"2:47154:8188":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:4603:7220":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:3196:34597":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"24:1442:2053":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"2:43872:8749":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"5:1387:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"24:5162:2058":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"5:1024:5101":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"11:1051:10319":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:40760:3522":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:6560:5091":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"24:3010:2366":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"1:12039:1505":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:569:6914":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:3764:6452":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:22214:10679":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"24:5129:2116":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"2:44219:8711":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"24:2942:3669":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"13:110:35853":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"0:0:1844":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"16:6268:35879":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:46039:8137":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:7756:9844":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"5:7339:217":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"24:4371:3725":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"6:4480:7163":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:10101:154":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"5:7535:250":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:11155:8449":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:1054:10318":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:9111:159":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:42242:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:23761:243":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:15062:6087":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:4038:10459":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:12432:22890":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"16:3915:6456":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:6013:16127":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:2368:10380":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"24:4057:3703":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"24:4562:3313":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"17:0:3176":{"crate_id":17,"path":["object"],"kind":"module"},"24:4279:3719":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"1:2200:136":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"24:5407:3382":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"17:3584:22831":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:5146:7446":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:44487:8784":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"24:95:10394":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"24:1542:3536":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"17:10035:5457":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"21:2609:3595":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"5:1685:5101":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"24:879:5306":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"24:5206:3374":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"24:2653:3659":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"2:22616:32482":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:42131:3986":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"24:1908:3405":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"1:2354:10377":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:212:4692":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:40518:8718":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:12040:1538":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:15535:6228":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:4265:3586":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:6644:240":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:23151:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:43012:6619":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:542:6900":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:11991:5531":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:14439:5879":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"11:1923:2018":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"5:7549:8670":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:46538:8160":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:2236:34632":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:42398:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:2657:10394":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:5971:5185":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:11690:22844":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:21453:10593":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:12510:5555":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:41199:3472":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:42437:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:48158:8231":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:3461:6450":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:13097:5607":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:13787:5764":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:3753:10321":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"18:671:26908":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:4835:6471":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:2697:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:23548:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:4789:7266":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"11:2140:10318":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:6961:7808":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:7307:5112":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"11:351:35845":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"21:2661:3408":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"21:2551:4799":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"17:511:22693":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:12049:799":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:5632:5185":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:5753:10551":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:1455:3408":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:5571:10536":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"5:5992:5131":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:7217:3504":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:12474:5484":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"16:6083:21730":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:15645:6257":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:21881:7865":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:6813:7730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:11978:22811":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"5:7560:9837":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"24:1637:3532":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"1:8868:3408":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:10896:5474":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:6960:22627":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:6357:183":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:9860:22699":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"18:719:5359":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:11256:22760":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:12047:797":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:8252:3489":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"24:3941:3696":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"17:14887:6051":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"20:950:1981":{"crate_id":20,"path":["proc_macro2","Ident"],"kind":"struct"},"1:914:10067":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:10133:2352":{"crate_id":1,"path":["std","sys","pal","unix","os_str","Slice"],"kind":"struct"},"2:2420:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:13504:5700":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:43878:8750":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:8455:8114":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:4745:6468":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:11998:15753":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:15235:6130":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:11800:5497":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:7128:8322":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:13663:5741":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:15689:6272":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:4401:7114":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:7318:6571":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"20:744:2668":{"crate_id":20,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"17:13676:5743":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:44937:8808":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:11469:22804":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"4:0:3167":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:557:4561":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:3357:34000":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:12191:5536":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:13754:5756":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:30794:32477":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:13882:5502":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:12999:5588":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"24:2568:3734":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"24:4156:3710":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"6:4902:7322":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:2526:6407":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:5588:6428":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:4870:7308":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:62:16153":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:14413:5877":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:4444:5127":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:15855:5621":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:43724:8685":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"24:5561:67":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"2:44645:8802":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:489:6866":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:46608:8163":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:6531:8576":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:39657:222":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:4497:6461":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:8234:10445":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:14698:5948":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:10559:22704":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:4053:6457":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:0:1530":{"crate_id":1,"path":["std"],"kind":"module"},"17:16134:6380":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"24:3333:2018":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"6:6691:7690":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:11459:22803":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:40992:3520":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:44633:8799":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"24:1484:26932":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"2:48223:8234":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:10141:8676":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"21:1403:2062":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"17:10785:35926":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:5648:22617":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:46069:8138":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"24:4891:3352":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"23:504:4262":{"crate_id":23,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"24:4342:3723":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"2:6494:4800":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:13285:5650":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:11113:22727":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"24:5077:3367":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"1:588:10299":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:4020:4776":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:11384:8838":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"24:4895:3333":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"17:13162:5624":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:12091:22878":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"3:234:233":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:1784:4635":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:14296:5853":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:13436:5680":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:6700:7691":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:33527:3454":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:2522:202":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"16:5816:8509":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:43771:3494":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:7677:217":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:22580:7867":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"9:0:3169":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"14:215:8634":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:10075:28030":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"11:673:3409":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:12273:5577":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:1406:153":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:12038:339":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"6:6047:7580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:48074:8229":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:5004:5125":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"23:78:2050":{"crate_id":23,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"1:8961:8321":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:13246:5169":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:2985:4332":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:9106:242":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"24:566:5299":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"20:704:259":{"crate_id":20,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"11:1582:21685":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:6070:5180":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"18:481:8430":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"11:2403:3413":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"16:8134:8632":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"24:4998:2592":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"17:10881:22720":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:40513:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:7645:10394":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:40409:8709":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:42078:3408":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:40466:8713":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:2600:5160":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:38281:5319":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"24:4267:3718":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"1:10073:27978":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"21:2287:1969":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"1:9016:28009":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:39597:220":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:44882:8128":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:4724:7240":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:41221:3478":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:11604:8461":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:3338:15777":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:44641:8801":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:13182:5634":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:8495:10526":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:12828:5577":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:9968:22701":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:11701:22845":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:7054:8609":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:48410:8245":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:43970:8756":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:8202:3519":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:7531:2062":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:1040:8614":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:44629:8798":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:13684:5745":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"24:2087:3415":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"24:4465:3732":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"24:5552:3398":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"2:43492:8746":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:11193:8334":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"6:1913:17556":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"11:774:8643":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"24:4900:3353":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"1:9949:8735":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"24:2721:2363":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"24:98:3864":{"crate_id":24,"path":["syn","token","private","CustomToken"],"kind":"trait"},"1:6897:5192":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"16:4862:6472":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:40593:5149":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:11126:22726":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:33645:5316":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"24:3078:3675":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"24:944:36097":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"17:11001:22729":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:2380:6401":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:6136:7614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:42053:171":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:15374:6166":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:21221:33720":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:44672:129":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"21:2767:2375":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"17:2197:22757":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:12459:5476":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:7601:5197":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:33107:5313":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"21:367:4801":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"5:3155:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:2881:6422":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:4898:420":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:39776:7960":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:14470:5885":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"24:5564:3386":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"1:893:4776":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:14266:5850":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:14041:5796":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:11309:8833":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:6513:8568":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"24:3367:3684":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"16:2596:6410":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:12850:5541":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:4491:10487":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:11292:5204":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"6:5117:7437":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"16:7492:8615":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:5049:6478":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"24:288:36215":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"1:3994:10457":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:15747:6282":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:3425:8293":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:11372:9599":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:21238:33709":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:14385:5873":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:880:8644":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"24:4098:3706":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"2:5763:3510":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:32501:4335":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:2694:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:1905:4725":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"24:153:1975":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"16:8195:8633":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:11194:22751":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:4566:7202":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:12335:5544":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:39723:3458":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:6249:5185":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:46562:8161":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:7111:2795":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:11029:5203":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:11714:22810":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:533:4559":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:1674:7048":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:3443:10391":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:12054:1642":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:44530:8793":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:1562:8647":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:9730:22695":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"24:4226:3715":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"17:15356:6163":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:2703:7858":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:44476:15765":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:3687:5101":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"24:2959:3670":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"17:13909:5780":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"24:4839:3344":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"2:43253:8743":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:8276:8815":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:11148:27953":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:1286:10319":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:6489:8674":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:8302:10446":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"11:1087:35851":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:13948:5785":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:10102:5460":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:11968:15896":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"5:7468:8663":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"24:3095:3676":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"2:22495:8690":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:6985:9852":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:10809:27950":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"20:883:2048":{"crate_id":20,"path":["proc_macro2","Span"],"kind":"struct"},"1:11455:5206":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:8860:10563":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"24:1940:3406":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"2:21394:10594":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:10408:10537":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"20:0:1821":{"crate_id":20,"path":["proc_macro2"],"kind":"module"},"24:3282:261":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"17:10608:22705":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:5121:6480":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:8547:3409":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:4030:5125":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:7933:3546":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:1969:204":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:2622:9848":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"24:5539:2539":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"17:12898:22712":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:14057:5801":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:9678:22682":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:4635:7711":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"16:8205:22640":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:13648:5736":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"5:2973:34579":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"9:357:21618":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"14:0:3173":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"24:3384:3685":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"2:41819:2048":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:123:16208":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:13976:5790":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"5:3191:8646":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:23074:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:13309:5654":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"11:787:8644":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:1703:7059":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:4860:7304":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"24:96:4406":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"1:6610:5190":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:14170:5836":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:10676:3409":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"20:934:2047":{"crate_id":20,"path":["proc_macro2","Spacing"],"kind":"enum"},"24:5341:3380":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"20:904:1969":{"crate_id":20,"path":["proc_macro2","Group"],"kind":"struct"},"2:40379:32476":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:12052:5534":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:7388:7828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:5075:7412":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:5308:127":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:42070:3413":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:21250:33712":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:12045:695":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"11:328:8640":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:4381:5127":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:7862:8622":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:4383:10478":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:8097:8626":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:32384:2137":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"11:1066:21681":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:3394:5125":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"18:755:8448":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:40367:8708":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:4628:7233":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:3225:8645":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:5023:7390":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:1909:706":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:40742:3511":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"18:113:26896":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"18:736:26905":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:12005:10309":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:12536:22888":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"2:30630:32460":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:14934:6059":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:42120:3984":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:2504:6406":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:40350:8706":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"23:344:1228":{"crate_id":23,"path":["quote","quote"],"kind":"macro"},"2:43037:3551":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:38226:5321":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:14896:6052":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:12058:1248":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"24:5555:3399":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"5:7435:3465":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:12059:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:43696:8682":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:40710:3508":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:5592:5125":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"20:738:1981":{"crate_id":20,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"2:44425:8782":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:44156:8766":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:7784:143":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:11478:10448":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:9349:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"20:122:35974":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"2:44637:8800":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:22362:10671":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:12009:5484":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"10:36:6779":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"20:825:1969":{"crate_id":20,"path":["proc_macro2","imp","Group"],"kind":"enum"},"17:10422:22702":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:12140:22856":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"11:1910:8646":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:6499:6444":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"5:4050:5101":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:15244:6133":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"24:4383:3726":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"2:41903:32463":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:10845:15746":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"24:2011:3409":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"24:4908:2323":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"1:9071:8325":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:2696:6414":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:12208:8760":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:4928:22898":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"24:4597:1998":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"2:4376:228":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:9896:3561":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:4745:7243":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:44924:4687":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"18:699:8439":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"24:4861:3331":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"1:4050:10462":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"24:260:9827":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"1:5128:211":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:596:6928":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:15133:6105":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"24:5214:3376":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"11:2548:6774":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:4168:15779":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:10880:8681":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:8222:8766":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:5969:7530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"24:4477:3733":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"24:2138:2605":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"6:5941:7519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"24:4538:3311":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"5:5344:5101":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:5085:7417":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:9624:22675":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:2335:4712":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:12758:5575":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:2144:4554":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:5446:112":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"24:4620:2198":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"6:4776:7262":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:6248:7649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:5905:8518":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"24:4987:3365":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"6:4455:7147":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:3930:10453":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:10964:8316":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:10768:8680":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:12115:22880":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:10432:35922":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:637:10302":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:7281:32508":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"24:4827:3341":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"6:4955:7348":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:3280:10429":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"20:15:8876":{"crate_id":20,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"12:0:3172":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:5982:8527":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"24:956:3041":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"24:3214:2716":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"6:4428:7137":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:6415:8563":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"24:920:36093":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"17:14208:5840":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:43860:8748":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:5987:227":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"24:4180:3712":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"16:4344:6458":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:3332:144":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:42062:3409":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:9101:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"24:4122:3708":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"17:11088:5480":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:13765:5757":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:44510:8792":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"9:177:10058":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:40419:8710":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:4462:6460":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:13584:5707":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"21:2657:3593":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"21:53:4800":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"17:261:35927":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:1486:8644":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:4893:7316":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:9943:22681":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"5:2474:7855":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:11563:8458":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"11:742:10068":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"20:792:259":{"crate_id":20,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"24:5573:2537":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"2:44821:226":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"5:2256:8657":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"24:5356:2632":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"2:44304:8771":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:22282:4711":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"6:4824:7285":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:830:5107":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:10780:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"6:4738:7241":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:16016:6351":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"2:2992:4334":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:15566:6236":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:4906:10511":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"21:992:259":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"24:4930:3336":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"24:2602:3656":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"1:1821:10342":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"24:960:3370":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"17:11476:8648":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:859:3408":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:14312:5857":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:4613:6465":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:6456:8566":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:10973:8759":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"24:4631:2321":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"1:909:10312":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:12418:22897":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:723:151":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"15:327:10043":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:13121:5621":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"24:5392:2361":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"2:46210:8144":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:8986:4558":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:40852:3502":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"24:4448:3731":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"2:9892:213":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:33900:5302":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"11:875:10316":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:12443:3812":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:42149:233":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:4719:6467":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:903:4774":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:12310:5543":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"11:364:5094":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"10:0:3170":{"crate_id":10,"path":["adler"],"kind":"module"},"2:40356:8707":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:40719:3509":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:46170:8142":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:5130:7443":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:7333:3468":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:4556:7195":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:9651:22694":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"24:5146:2638":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"17:15589:6249":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"13:0:3166":{"crate_id":13,"path":["std_detect"],"kind":"module"},"11:430:35847":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:43826:15741":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:43077:3553":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:34246:5301":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:1760:10327":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:2339:6394":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:7740:10344":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:11945:22813":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:7857:8250":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:11817:22849":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:41733:168":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:5661:8497":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:15003:6075":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:43816:8687":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:10852:22719":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:5885:7493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"11:1903:8645":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"21:2648:259":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"1:4151:10479":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:8243:3485":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:1691:7055":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:5568:7621":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:15279:6144":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:32395:33347":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"24:1375:36107":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"17:15961:5634":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"24:4045:3702":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"18:599:5303":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:4461:7150":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:5384:22616":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:15117:6101":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"15:306:21712":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:4889:6473":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:12921:5544":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"18:531:8432":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:47620:8224":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:46737:8166":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:5798:6486":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:21564:10394":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:11357:8836":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:2829:10357":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:4964:3975":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:8852:3409":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:40447:8712":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:6811:10588":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:2788:135":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"18:652:5340":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"24:5558:3400":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"2:4:1115":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:22226:32985":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"24:253:9826":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"18:614:35940":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"24:4494:2661":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"1:4798:5177":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:8310:8295":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:1570:6973":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"15:394:21721":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:4129:32373":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:21192:33714":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:11666:8467":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:8167:22639":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:5807:258":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:46294:8147":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:8215:8678":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"11:837:10313":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:2305:21756":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"5:7347:8662":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:5673:6429":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:3251:22812":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:2941:3581":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:595:2062":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:40982:3519":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:23386:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:15384:6171":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:15432:6208":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:11958:5529":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:15546:6233":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"23:272:2058":{"crate_id":23,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"2:3327:261":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:2092:4684":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:9559:22677":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"24:4544:2182":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"17:11767:22848":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:2706:265":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"24:2738:115":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"2:10987:15745":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:16170:5651":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:951:10317":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:46340:8154":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:32500:3601":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:9884:3554":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:4434:7138":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:9130:8326":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"11:2352:10319":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:46140:8141":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:10207:5463":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:9886:2585":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:8139:3471":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:4560:3578":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:14235:5844":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"18:574:5340":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:2352:4702":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:10510:10430":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"17:12301:8479":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:4686:7237":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"21:2521:3595":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"17:15287:6147":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:42746:3562":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:2528:209":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:12600:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:43292:8745":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:10922:6837":{"crate_id":1,"path":["std","sys","pal","unix","os_str","Buf"],"kind":"struct"},"5:683:257":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:15108:6100":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:14765:6003":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:8283:8816":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"24:3112:3677":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"1:10054:10336":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"24:4250:3717":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"17:15200:6119":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"24:5212:3377":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"6:563:6911":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:4449:3573":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:11607:28041":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:10510:22703":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:12044:693":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:2417:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"24:4938:3357":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"17:12872:5579":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:6944:35864":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:6352:8559":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:3366:3478":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"21:404:36021":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"24:5099:2538":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"2:23228:197":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"6:6114:7607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:4932:7337":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:26163:273":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:12448:15750":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:7734:10308":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:6696:6523":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:4042:10460":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:40431:8711":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:13896:5779":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:44818:147":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:15337:6158":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:11523:8454":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:42476:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:46486:8158":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:12486:5554":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:42732:2585":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:43846:8121":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:2953:2512":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:11315:10540":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:8874:8317":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:13463:5689":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"24:5142:3368":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"17:9759:22696":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"5:2972:2224":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:22175:10678":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:44697:8804":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:2486:208":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:32420:252":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:9894:3560":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:3239:10432":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"24:4296:3720":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"5:5388:15728":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:12032:402":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"24:5126:3042":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"2:4385:3566":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"24:928:36092":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"17:11215:8452":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:9252:4850":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:16123:6378":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"24:4843:3329":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"17:14786:6011":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:12185:8757":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"24:4904:3354":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"17:11412:22755":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:22997:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:645:10304":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:44166:8767":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:6401:6426":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"24:5353:210":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"1:1819:4850":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:4977:7364":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:7747:3493":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:6889:7782":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"24:345:36214":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"2:9890:3563":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:7619:4774":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:21445:10394":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:6540:9850":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:536:8487":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"14:7:9829":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"24:3435:3688":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"6:5859:7478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"24:5094:3366":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"6:6798:7725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:6466:5189":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:1439:3413":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:1115:35807":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:11727:22826":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:42634:10072":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:7436:6588":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:11560:4723":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:6741:7718":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:1131:34578":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:4028:10458":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:33763:5318":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"24:4016:3701":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"16:4949:6475":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:8290:33857":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:15267:6141":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:10770:8250":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:42200:3413":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:15027:6077":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:4549:7192":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:1966:205":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:415:182":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"21:2708:2048":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"2:1972:186":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:2491:132":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:8239:2746":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:15903:6330":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:23629:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:47950:8227":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:7788:163":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:41926:8738":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"10:44:6780":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:46964:8185":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:6658:7667":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:1527:217":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:11243:8335":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:33586:5315":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:46440:8157":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:15519:6224":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:15868:6300":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"5:266:5101":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:5760:22619":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"11:2542:6773":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"11:832:10312":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:4092:3413":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:4854:7301":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:11779:5495":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:40:4690":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:12290:8478":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:654:16564":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:6764:7719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:12797:5576":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"11:800:4776":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:4773:22893":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:8228:10446":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"11:2304:8614":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:3500:10392":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:2948:254":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"24:2840:1994":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"2:43028:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:9852:141":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:7513:8618":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:4989:7373":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:7371:7817":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"9:237:8114":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:46370:8155":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"11:434:35839":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"24:861:3533":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"17:14282:5851":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:6687:5101":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"11:490:151":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:3315:6449":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:5240:210":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"11:844:10314":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:22656:32455":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:2406:6402":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:4585:6464":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:6204:10027":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:6261:10026":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:3670:10444":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:13284:149":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:15980:6344":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"21:2772:2047":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"5:3230:34592":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:9891:22678":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"20:781:26916":{"crate_id":20,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"2:6483:3500":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"20:928:2375":{"crate_id":20,"path":["proc_macro2","Punct"],"kind":"struct"},"2:44052:8761":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:6361:8560":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:1734:7071":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"18:564:5346":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:44201:8712":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:4703:10486":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"15:288:21711":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"11:1676:5098":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:13491:5699":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:43705:8683":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:4998:7379":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:16087:6372":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"16:7503:6438":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:5963:22620":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"7:0:1688":{"crate_id":7,"path":["unwind"],"kind":"module"},"24:4848:3345":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"6:4908:7323":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:6819:7731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:4676:7236":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"18:690:8438":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"24:5568:3387":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"5:634:9836":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:7797:3491":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:1591:6987":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"24:1173:8394":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"16:8281:6647":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:5104:7431":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:4364:7086":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:7365:7815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"14:165:21692":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:555:6906":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:40771:3513":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"11:856:10315":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"24:4983:3364":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"15:0:3174":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:7845:10389":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:6226:22623":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:1604:6994":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:10740:8826":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"20:834:1981":{"crate_id":20,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"16:6425:8564":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:43496:8747":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"24:1523:3421":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"1:12033:1035":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"18:660:26907":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:2969:21758":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:483:6863":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:9790:22697":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:4231:10483":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:4755:7250":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:7651:22635":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:1151:35805":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"24:5120:2643":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"17:11507:5493":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:46516:8159":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:23467:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"18:96:26895":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:6017:22621":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:12056:850":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"5:6117:5125":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:12572:22892":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:14757:6000":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:40395:8087":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:14904:6053":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:15079:6092":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"24:2221:10394":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"24:4835:3343":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"2:7563:3473":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:5111:7434":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:7880:137":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:31192:4348":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"20:722:2048":{"crate_id":20,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"17:14122:5831":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:46229:8145":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:11549:8457":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:4710:7239":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:6600:22625":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:4637:7713":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:9457:5199":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"17:15671:6266":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:4488:7165":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:30596:4639":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:44617:8795":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:39762:7959":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"5:1789:4774":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:6927:7799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:7708:6443":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"21:1202:215":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"2:44210:8706":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:8893:8318":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:4878:7312":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:7645:7840":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:0:880":{"crate_id":6,"path":["libc"],"kind":"module"},"24:128:1969":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"2:36295:3727":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:13922:5782":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:4182:5125":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:5033:7396":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:40793:3514":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:12972:5587":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:11645:8464":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"14:40:1981":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"18:491:8431":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:7702:7853":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:12000:10080":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:16004:6349":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"24:4918:3356":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"5:3343:4774":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:6792:8596":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:2518:10424":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:5403:5457":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"24:4934:2249":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"24:4610:1986":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"17:14921:6054":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:10337:5467":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:3655:5371":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"20:843:2668":{"crate_id":20,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"21:2032:4798":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"17:13407:5671":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"24:4975:3339":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"17:13832:5770":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:39949:29538":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:13218:5639":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:22313:10394":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"6:1496:6932":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:38336:5322":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:2359:6400":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:30333:10450":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:11932:22814":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:7582:5195":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:1516:10068":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"24:89:1975":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"24:4963:3360":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"16:4557:6463":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:45895:8131":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"24:1569:2993":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"18:515:5343":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:8239:10442":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"11:1142:21683":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:11614:8841":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:5877:4776":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:15253:6134":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:12396:5549":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:16076:6367":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"17:11536:8456":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"24:2585:3655":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"6:7622:7834":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:46994:8186":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:6915:6435":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:48318:8241":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:12029:5533":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"21:1066:2048":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"24:5402:2365":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"24:5208:3373":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"16:7534:6439":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"24:3044:3673":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"17:11485:22780":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:44625:8797":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:7368:3408":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"19:0:1132":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"6:6228:7635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:5415:10533":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"21:2320:2375":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"17:11369:5491":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:38171:5320":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:7284:3983":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:2703:142":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:48243:8236":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:44649:8803":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:45985:8135":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:21893:33721":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:14455:5881":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:13026:5594":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"5:4212:5125":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:40700:3507":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"24:4887:3351":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"1:482:5171":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"5:7297:4776":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:11983:9600":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:7382:28979":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"24:5411:2536":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"18:0:3177":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:13235:5641":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:11632:8463":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:1501:6934":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:7639:7839":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:12103:22879":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"23:239:4268":{"crate_id":23,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"1:3166:27912":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:6351:10682":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:3132:140":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"20:775:3431":{"crate_id":20,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"1:7917:27902":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"18:590:5347":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"24:4915:3334":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"2:11984:9841":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:3460:22815":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:7598:7830":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"24:2619:3657":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"1:11156:8125":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:47872:8226":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:12016:26997":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:5921:7506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:11743:22846":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:40842:3518":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:6189:8557":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:2154:8650":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"24:5210:3375":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"8:0:3168":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:7633:7838":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"24:4533:3312":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"2:10329:5160":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"11:1566:21684":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:2574:6409":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"24:2823:3664":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"24:4004:3700":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"6:507:6874":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:48196:8232":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:14778:6010":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:12366:22883":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:6543:10555":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:3161:3418":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:588:6924":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:8537:8817":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:4523:7179":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:22920:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:3966:10454":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"24:4139:3709":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"17:15725:6276":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:13448:5683":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:11518:10447":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:10974:5476":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"11:2554:35848":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:1072:9835":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:903:3409":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:10758:8832":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"16:4641:6466":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"21:2747:3430":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"2:39613:217":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:3111:3583":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:1814:1189":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:7903:4842":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:3129:139":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:16032:6356":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:7646:4578":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:23305:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"24:4979:3363":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"6:4666:7235":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"24:2275:10394":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"1:8993:26998":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"24:1994:3408":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"5:1424:3409":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:48254:8237":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:4388:7104":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:12596:22709":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"11:2562:6777":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:40560:10359":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:4610:7222":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:2450:6404":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:7090:8613":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"20:708:3428":{"crate_id":20,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"1:1550:8645":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:3491:28254":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:8013:10426":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:11027:5448":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"0:965:1842":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"2:44831:234":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:43797:8686":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"20:801:8429":{"crate_id":20,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"2:47230:8190":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"24:4028:132":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"9:426:21605":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:4744:10471":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:5435:6483":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:3254:218":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"24:610:3408":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"17:13809:5765":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:5152:7449":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:9834:3559":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"24:3265:260":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"24:5001:3340":{"crate_id":24,"path":["syn","expr","FieldValue"],"kind":"struct"},"17:14485:5544":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:15842:5607":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"23:150:4007":{"crate_id":23,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"24:620:3409":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"6:4939:1102":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:7067:8612":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:13395:5670":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"24:3401:3686":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"17:15184:6117":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:11212:159":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"24:3197:3680":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"17:10315:5466":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:2205:4717":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:5955:7529":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:3217:8647":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:15345:6159":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:13989:5791":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:16062:6364":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:15527:6227":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:4578:7208":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"23:407:4147":{"crate_id":23,"path":["quote","__private","RepInterp"],"kind":"struct"},"2:21856:10596":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"24:1652:3545":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"24:5047:2535":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"2:48214:8233":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:4841:7296":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:42281:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:7692:7851":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:13083:5606":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:3021:3712":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:3080:4682":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:15037:6078":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:22357:10673":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"21:1023:3594":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"24:2891:138":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"16:7006:22629":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:12224:8763":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"24:4238:3716":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"16:6485:6427":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:11576:8459":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:8804:206":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:10344:5164":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"24:53:2057":{"crate_id":24,"path":["syn","token"],"kind":"module"},"16:2284:21731":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:14662:5917":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:6943:7805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:40454:15794":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:14950:6062":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:10067:5459":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:22136:10677":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"24:2286:5308":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"17:11168:22750":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:7670:4567":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"9:486:21602":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"24:5204:2189":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"2:12259:8680":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:5867:7480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"9:330:6817":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:8478:8308":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"11:123:5092":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:32402:3574":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"6:6934:7802":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:3830:6454":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:16180:5656":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:12048:798":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:7897:126":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"24:4991:2004":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"5:4252:3409":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"24:4883:3350":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"17:12356:8482":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:44176:8768":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:10657:5484":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:786:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"}},"external_crates":{"23":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.35/"},"20":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.76/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.12/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.48/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}