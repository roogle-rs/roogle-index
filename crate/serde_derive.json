{"root":"0:0:2387","crate_version":"1.0.203","includes_private":false,"index":{"2:13349:35838":{"id":"2:13349:35838","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12952:4372","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::matches":"2:13346:2726"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44256:9537","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:16524","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13378:35847":{"id":"2:13378:35847","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:4372"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:16524","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:964:2376":{"id":"0:964:2376","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[89,0],"end":[94,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:13298:28690":{"id":"2:13298:28690","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44288:9538","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13325:29199":{"id":"2:13325:29199","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12952:4372","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::split":"2:13319:28689"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44052:9457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:16524","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13283:35833":{"id":"2:13283:35833","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12361:1734","str::slice_mut_unchecked":"2:13284:35834","crate::ops::Index":"2:39699:3136"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13391:28605":{"id":"2:13391:28605","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:493-0:404:2513":{"id":"0:493-0:404:2513","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[14,0],"end":[14,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:404:2513","glob":false}}},"2:13328:35836":{"id":"2:13328:35836","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12952:4372","str::split":"2:13319:28689","prim@char":"1:12355:475","`DoubleEndedIterator`":"2:8320:129","str::rsplit_terminator":"2:13331:35837"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44084:9527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13277:29165":{"id":"2:13277:29165","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42155:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8:2505":{"id":"0:8:2505","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[216,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:13400:11061":{"id":"2:13400:11061","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5015:11061"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44342:9481","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13392:28606":{"id":"2:13392:28606","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13393:28607":{"id":"2:13393:28607","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13265:35829":{"id":"2:13265:35829","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13319:28689":{"id":"2:13319:28689","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12952:4372","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::split_whitespace":"2:13293:34189","str::rsplit":"2:13325:29199"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44034:9454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13290:2973":{"id":"2:13290:2973","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12355:475"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44004:9521","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13358:35841":{"id":"2:13358:35841","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13331:35837":{"id":"2:13331:35837","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12952:4372","str::split":"2:13319:28689","prim@char":"1:12355:475","str::split_terminator":"2:13328:35836"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44102:9528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:16524","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13381:35848":{"id":"2:13381:35848","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:4372"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13271:3491":{"id":"2:13271:3491","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12499:16526"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13346:2726":{"id":"2:13346:2726","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12952:4372","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::rmatches":"2:13349:35838"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44238:9536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13305:29207":{"id":"2:13305:29207","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:4372"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492-0:1019:2512":{"id":"0:492-0:1019:2512","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1019:2512","glob":false}}},"0:86-0:994:2606":{"id":"0:86-0:994:2606","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[21,0],"end":[21,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::internals::case::RenameRule","name":"RenameRule","id":"0:994:2606","glob":false}}},"2:13281:29167":{"id":"2:13281:29167","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5696:36544":{"id":"5:5696:36544","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7747:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13401:35851":{"id":"2:13401:35851","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5012:35851"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44351:9486","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2387":{"id":"0:0:2387","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[102,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2021\n# use serde_derive::{Deserialize, Serialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.203\")]","#![allow(unexpected_cfgs)]","#![allow(clippy::branches_sharing_code, clippy::cognitive_complexity,\nclippy::collapsible_match, clippy::derive_partial_eq_without_eq,\nclippy::enum_variant_names, clippy::manual_map,\nclippy::match_like_matches_macro, clippy::needless_pass_by_value,\nclippy::too_many_arguments, clippy::trivially_copy_pass_by_ref,\nclippy::used_underscore_binding, clippy::wildcard_in_or_patterns,\nclippy::unnested_or_patterns,)]","#![allow(clippy::cast_possible_truncation, clippy::checked_conversions,\nclippy::doc_markdown, clippy::enum_glob_use, clippy::indexing_slicing,\nclippy::items_after_statements, clippy::let_underscore_untyped,\nclippy::manual_assert, clippy::map_err_ignore, clippy::match_same_arms,\nclippy::match_wildcard_for_single_variants, clippy::module_name_repetitions,\nclippy::must_use_candidate, clippy::similar_names, clippy::single_match_else,\nclippy::struct_excessive_bools, clippy::too_many_lines,\nclippy::unseparated_literal_suffix, clippy::unused_self, clippy::use_self,\nclippy::wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:964:2376","0:965:2384"],"is_stripped":false}}},"2:13263:1005":{"id":"2:13263:1005","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12355:475"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13372:28281":{"id":"2:13372:28281","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:4372"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13397:35850":{"id":"2:13397:35850","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5014:35850"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44333:9487","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13360:35842":{"id":"2:13360:35842","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13343:29206":{"id":"2:13343:29206","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:16524","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13322:29197":{"id":"2:13322:29197","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:4372"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12767:9456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13365:35845":{"id":"2:13365:35845","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5692:36543":{"id":"5:5692:36543","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:303:2576","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:303:2576","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5708:36547":{"id":"5:5708:36547","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:303:2576","`String`":"5:7747:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:303:2576","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13287:29194":{"id":"2:13287:29194","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13288:29195"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13262":{"id":"2:13262","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13263:1005","2:13264:2730","2:13265:35829","2:13266:35830","2:13268:35831","2:13271:3491","2:13272:35832","2:13273:335","2:13274:29168","2:13275:2621","2:13277:29165","2:13279:29166","2:13281:29167","2:13283:35833","2:13284:35834","2:13285:3379","2:13286:29191","2:13287:29194","2:13288:29195","2:13290:2973","2:13291:2967","2:13292:9443","2:13293:34189","2:13295:34187","2:13298:28690","2:13300:35835","2:13301:34195","2:13302:2832","2:13305:29207","2:13308:29208","2:13311:3281","2:13315:5136","2:13319:28689","2:13322:29197","2:13325:29199","2:13328:35836","2:13331:35837","2:13334:29201","2:13337:29203","2:13340:29205","2:13343:29206","2:13346:2726","2:13349:35838","2:13352:35839","2:13355:35840","2:13358:35841","2:13360:35842","2:13362:35843","2:13364:35844","2:13365:35845","2:13366:35846","2:13369:2639","2:13372:28281","2:13375:29209","2:13378:35847","2:13381:35848","2:13384:35849","2:13387:2601","2:13389:28603","2:13390:30359","2:13391:28605","2:13392:28606","2:13393:28607","2:13394:30362","2:13395:30363","2:13396:30364","2:13397:35850","2:13400:11061","2:13401:35851"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13315:5136":{"id":"2:13315:5136","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42155:190","prim@char":"1:12355:475","self::pattern":"2:12952:4372"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:16524","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13293:34189":{"id":"2:13293:34189","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13295:34187"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44308:9540","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5693:2760":{"id":"5:5693:2760","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7747:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13394:30362":{"id":"2:13394:30362","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1063:40835"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13395:30363":{"id":"2:13395:30363","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1063:40835"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13375:29209":{"id":"2:13375:29209","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:4372"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:16524","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13364:35844":{"id":"2:13364:35844","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13396:30364":{"id":"2:13396:30364","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1063:40835"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13340:29205":{"id":"2:13340:29205","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13266:35830":{"id":"2:13266:35830","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13308:29208":{"id":"2:13308:29208","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:4372"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:16524","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13390:30359":{"id":"2:13390:30359","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40054:5127","Self::is_ascii":"2:13389:28603"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40054:5127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13352:35839":{"id":"2:13352:35839","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12952:4372","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::rmatch_indices":"2:13355:35840"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44184:9533","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5710:2964":{"id":"5:5710:2964","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13392:28606"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13286:29191":{"id":"2:13286:29191","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13285:3379","str::split_at_mut_checked":"2:13288:29195"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:965:2384":{"id":"0:965:2384","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[97,0],"end":[102,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:13334:29201":{"id":"2:13334:29201","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:4372","str::rsplitn":"2:13337:29203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44138:9530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13387:2601":{"id":"2:13387:2601","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12913:136","`FromStr`":"2:12912:3983"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42286:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12912:3983","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12912:3983","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5709:4028":{"id":"5:5709:4028","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7747:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13301:34195":{"id":"2:13301:34195","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44326:9542","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13285:3379":{"id":"2:13285:3379","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13287:29194","str::split_at_mut":"2:13286:29191"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13295:34187":{"id":"2:13295:34187","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13293:34189"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44317:9541","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13362:35843":{"id":"2:13362:35843","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13369:2639":{"id":"2:13369:2639","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:4372"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13389:28603":{"id":"2:13389:28603","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1023:2609":{"id":"0:1023:2609","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"2:13272:35832":{"id":"2:13272:35832","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13311:3281":{"id":"2:13311:3281","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42155:190","prim@char":"1:12355:475","self::pattern":"2:12952:4372"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13279:29166":{"id":"2:13279:29166","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13264:2730":{"id":"2:13264:2730","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13288:29195":{"id":"2:13288:29195","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13287:29194"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13292:9443":{"id":"2:13292:9443","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44020:3501","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13355:35840":{"id":"2:13355:35840","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12952:4372","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::match_indices":"2:13352:35839"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44202:9534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:16524","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13384:35849":{"id":"2:13384:35849","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:4372"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:16524","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:393":{"id":"0:63:393","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1881,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:86-0:994:2606"],"is_stripped":false}}},"5:5691":{"id":"5:5691","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5692:36543","5:5693:2760","5:5696:36544","5:5699:36545","5:5707:36546","5:5708:36547","5:5709:4028","5:5710:2964","5:5711:2963"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13273:335":{"id":"2:13273:335","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13274:29168","`u8`":"1:12374:1864"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13291:2967":{"id":"2:13291:2967","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12355:475"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44010:9522","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13268:35831":{"id":"2:13268:35831","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13266:35830"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13275:2621":{"id":"2:13275:2621","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42155:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13274:29168":{"id":"2:13274:29168","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12374:1864"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5707:36546":{"id":"5:5707:36546","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7747:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13300:35835":{"id":"2:13300:35835","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44298:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13302:2832":{"id":"2:13302:2832","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:4372"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5699:36545":{"id":"5:5699:36545","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7747:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5711:2963":{"id":"5:5711:2963","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13393:28607"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13366:35846":{"id":"2:13366:35846","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:4372"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12978:16522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13337:29203":{"id":"2:13337:29203","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12355:475","str::splitn":"2:13334:29201","self::pattern":"2:12952:4372"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44156:9531","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:16523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:16524","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13284:35834":{"id":"2:13284:35834","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12361:1734","crate::ops::IndexMut":"2:3484:3971","str::slice_unchecked":"2:13283:35833"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:9170:3958":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:6953:4050":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"24:5078:2787":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"2:42872:4106":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:6790:8337":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:21720:34012":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:14968:6745":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:11680:9108":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:5349:7980":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"6:5165:7902":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:2272:9424":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:2570:7101":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"24:5341:3901":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"14:31:10576":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:16165:7064":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"14:187:22968":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:11674:11312":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:9984:23970":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"24:5894:2511":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"17:12659:24158":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:13972:6200":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:3257:6002":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:6890:7123":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:41400:4033":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"24:6015:3949":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"6:5551:8075":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:44102:9528":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:12370:899":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:39831:4009":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:11237:9454":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"24:3290:2541":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"5:1392:11080":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:9755:23945":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:11790:5891":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:42326:3959":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"11:2366:22955":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"5:4486:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"9:328:7479":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"24:3528:4225":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"5:5545:16501":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:4477:5459":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"24:6033:3081":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"2:44184:9533":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"24:5659:2734":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"2:43831:9458":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:12359:334":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"18:635:6050":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"18:643:6032":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:10643:9452":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:3597:24102":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"24:3477:3211":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"5:935:5782":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"24:3375:4218":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"5:3804:5776":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"18:613:37550":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"24:4792:4273":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"17:15822:6976":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:15214:6800":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:7168:7224":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:5462:8042":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:15701:6947":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:38461:6013":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"24:5388:3906":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"16:2880:7115":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:1620:5558":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:953:10702":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"11:1049:11080":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:944:11073":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:15418:6853":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"24:1943:2603":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"24:4915:4282":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"17:14147:6499":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:46144:8899":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:3096:4225":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:8179:9576":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:43627:9519":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:12381:1429":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:8165:7130":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:5709:23885":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:5316:11198":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:11405:24029":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:2772:7110":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"24:3494:4223":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"21:109:5590":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"2:13610:16577":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"5:4167:5776":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"24:1802:4084":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"17:11354:24031":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:8483:3861":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:32476:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"24:4548:4256":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"2:21749:11156":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:41142:4068":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:2606:5497":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"1:2780:11188":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:22534:11448":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"23:322:3215":{"crate_id":23,"path":["quote","spanned","Spanned"],"kind":"trait"},"17:13292:6333":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:3393:11195":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"21:2291:2528":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"24:4454:4250":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"1:5965:11322":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:7508:9383":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:14066:6488":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:13375:6348":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:15944:6319":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:592:5340":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:5098:11283":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"17:13024:23984":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:12361:1734":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"0:0:2387":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"1:11874:11212":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"24:4589:4259":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"6:5405:8006":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:10818:23977":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:4120:7150":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:8267:8553":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:15039:6760":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:10346:33576":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"2:23212:8608":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"17:12251:24126":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:5117:7898":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:11080:5886":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:13855:6455":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"18:563:6038":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:3048:23027":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:14284:6537":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"24:5565:3184":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"16:8151:7140":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:46484:8931":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:4201:11234":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"24:661:9159":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"6:4829:7766":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:5649:7179":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:47223:8995":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"24:4304:4240":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"18:754:9219":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"11:798:5560":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:7209:5824":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:10720:37536":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:43173:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"21:2490:5582":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"2:3665:16549":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"20:883:2595":{"crate_id":20,"path":["proc_macro2","Span"],"kind":"struct"},"1:8803:11298":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:14372:6549":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:7747:242":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"11:842:11075":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:3575:210":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:6111:9268":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:8249:10597":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:44851:226":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"24:4345:4243":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"1:8622:9064":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"24:3834:4235":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"2:45984:8882":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"20:933:2594":{"crate_id":20,"path":["proc_macro2","Spacing"],"kind":"enum"},"16:7716:37471":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:6738:37481":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:3396:5463":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:4303:32621":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:6421:9259":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"18:726:6054":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:2486:7097":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:5638:11306":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"20:738:2528":{"crate_id":20,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"24:1757:28251":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"17:11865:24119":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:8209:7128":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:7397:5880":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:9916:23968":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:6708:8310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"24:3392:4219":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"1:4772:11281":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"24:5016:3863":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"2:818:11214":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:3427:4134":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:22496:11447":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"6:7316:8395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:1696:7721":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:8717:5995":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:10218:6158":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:6573:9325":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"24:3239:4212":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"6:5471:8048":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:3529:4029":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:39619:16548":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:15992:7027":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"24:5044:3876":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"24:1702:2600":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"2:22968:34303":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:9710:11151":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"24:5293:3878":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"6:5629:8112":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"16:3126:23028":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:2796:7111":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:1844:700":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:23068:9471":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:8066:23906":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:10284:6160":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:12379:974":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:7308:8390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"24:5429:3912":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"6:1684:7717":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:10915:37521":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:7507:5560":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:1008:3959":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:14131:6494":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:4937:7829":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:8174:11151":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:3436:11191":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:12225:24128":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:14271:6535":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:5069:7895":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"15:0:3718":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:7703:4054":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:9858:23966":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:12912:3983":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:11031:11156":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:8022:5343":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:11547:6027":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:13387:6349":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:465:2517":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:6098:23886":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:5282:7958":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:4501:5802":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:6183:5867":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:41915:8821":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:4874:4129":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:4929:7827":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:2724:7108":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:23157:8603":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"5:3368:2565":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:12695:24162":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"16:2748:7109":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:22850:9465":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:5379:7176":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:11350:2897":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:10638:11160":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:1500:7599":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:1895:5558":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"16:8528:9400":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:40673:8817":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"24:2451:3963":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"16:7075:23897":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:8843:9581":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"24:5298:3894":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"1:8489:11155":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:7879:10601":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:10399:3501":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"21:2705:2920":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"2:44452:9549":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:15769:6967":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:14311:6539":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:2950:7118":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"24:4688:4266":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"1:10913:9590":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"23:235:5043":{"crate_id":23,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"6:4902:7812":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:14402:6555":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:8373:4040":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:9308:33580":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:47128:8982":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"5:303:2576":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:42767:10706":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"24:4466:4251":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"17:16176:7069":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:11668:9597":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:5670:8129":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:22957:9469":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"24:1085:37731":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"17:11293:24022":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:3592:9062":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:44595:9555":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:40578:9487":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:46729:8940":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:6509:219":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:10710:23976":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"24:3052:4206":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"17:16079:7042":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"2:13924:5852":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"24:5549:3082":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"1:9154:3959":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:11605:6191":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:6493:8204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"24:3341:140":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"1:12373:892":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:13509:6370":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:40466:9481":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"20:113:9198":{"crate_id":20,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"5:5305:5808":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:15608:6921":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:12863:6273":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:5004:11243":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:44256:9537":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"24:153:2522":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"2:34544:4275":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:40977:4065":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:43849:16512":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:12213:24151":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:559:7576":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:219:5473":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:47200:8988":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"24:5669:3927":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"2:22797:9464":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"5:2354:37394":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:6150:16908":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"18:581:5123":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"5:0:308":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:9844:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"5:7829:5558":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:513:23964":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:517:7553":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:42081:9511":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:5602:11304":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:40717:9492":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:3067:137":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"24:1294:2605":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"2:42286:225":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:14386:6551":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:5570:8083":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"24:4775:4272":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"16:6822:23895":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"17:9938:23969":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:42237:4716":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"24:5372:3884":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"2:0:567":{"crate_id":2,"path":["core"],"kind":"module"},"24:4316:4241":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"24:5497:3079":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"6:5249:7939":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:11719:9602":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:6799:11326":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"24:1620:4101":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"6:586:7590":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:12647:24159":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:10170:6156":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:39771:214":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"11:1674:5773":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:5335:203":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"24:4717:4268":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"16:5172:7169":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"11:881:11078":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:7487:3958":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:46051:8886":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:7990:4022":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:2957:162":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:2967:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:8267:7306":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:8859:9081":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:8626:9407":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:7907:7290":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:6406:10710":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:11841:24117":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:15342:6831":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:2990:7120":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:42531:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:12464:24154":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:13485:6368":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:3089:2769":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:7044:7129":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"24:5570:3187":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"17:10573:37540":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"5:5541:16500":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:3035:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:13723:6430":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:5282:7173":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:2541:3726":{"crate_id":1,"path":["std","io"],"kind":"module"},"5:6665:5560":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:8353:8573":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"21:2383:2596":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"2:3452:141":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"24:5579:2662":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"6:6770:8329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"16:3308:7088":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:4869:7799":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"21:591:4147":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"2:21822:8582":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:12089:6229":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"24:363:37922":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"24:4944:3205":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"2:3199:4132":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"24:3324:4216":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"2:30787:4103":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"11:434:37441":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:13424:6355":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:15957:6997":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"24:53:2604":{"crate_id":24,"path":["syn","token"],"kind":"module"},"2:44004:9521":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:1098:24002":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"24:4869:4279":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"1:12360:1700":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:6037:5861":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:42269:5483":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:15720:6952":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:23088:9474":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:7765:7272":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:36420:4277":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:43181:4103":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:1089:11079":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"11:1005:9388":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"10:36:7441":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:46708:8939":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"2:21802:11156":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:12353:419":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:7563:8513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:6984:7141":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"24:5354:3903":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"16:7259:9370":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:4947:7835":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"20:744:3212":{"crate_id":20,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"16:6408:9298":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:8608:11253":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:12408:6241":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:13959:6472":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:12306:10317":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:5295:7963":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:13633:4060":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"1:10955:9097":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"6:5019:7870":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:6808:7121":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:5139:7900":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:896:37479":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"16:5742:6156":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:15463:6863":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:21703:34023":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:5972:5800":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:6358:5850":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"18:573:6032":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:5593:8090":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:7521:9386":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:8788:9076":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:10929:9596":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"6:6623:8278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:47002:8976":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"18:651:6032":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:13881:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:12362:1824":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:13844:6454":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:8282:164":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:40854:4056":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:11930:9109":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"5:3870:11082":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:8853:3959":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:32387:243":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:11499:16518":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:7325:5879":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:15734:6954":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"24:5544:3915":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"6:8008:8535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:5520:8063":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"5:6532:11454":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"16:3987:6071":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"17:11524:24073":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:403:23963":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"24:4618:4261":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"5:2374:9431":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:3342:9419":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:4404:7155":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:4215:11236":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:12713:9532":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:11063:24006":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"21:2592:3977":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"24:5358:2868":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"17:12808:6271":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:11215:28533":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:23099:11227":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:8255:8551":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:42248:4098":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:13344:6344":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:15010:6752":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:4902:7161":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"24:5365:3883":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"16:3441:7146":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"18:659:28226":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:40541:9484":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:3432:4005":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"5:1583:9417":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:5301:7966":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:2550:7100":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:12300:24153":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:4843:4127":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:8298:9396":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:7969:9393":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:32444:4151":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"23:148:4737":{"crate_id":23,"path":["quote","__private","HasIterator"],"kind":"struct"},"2:12952:4372":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:11242:24020":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"24:5333:3899":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"24:4442:4249":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"17:16235:7080":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:12318:6239":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:11142:6182":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:44483:9552":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"24:4572:4258":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"3:233:225":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:43961:16514":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:42492:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:45916:8874":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:11755:9237":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:1657:7704":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:2820:7112":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:11392:9457":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:288:5776":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"24:6028:3937":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"17:15410:6852":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"20:719:3977":{"crate_id":20,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"2:43387:9515":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"24:4957:4605":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"13:229:7434":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:22205:11366":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"6:5682:8134":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:8028:7291":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"24:4845:4277":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"1:4927:11247":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:261:37474":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:12729:9535":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:2704:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:22982:8589":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:3414:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"11:430:37447":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:2467:5485":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"24:4507:4253":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"2:22360:11362":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:13738:6434":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:3653:146":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:40729:3501":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"2:11471:9530":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"24:6021:67":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"16:6658:10661":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:10967:9060":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:8471:9059":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:9361:9093":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"24:3817:4234":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"2:4564:4136":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:33880:6009":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:44620:9556":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:5449:7178":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"24:2094:11006":{"crate_id":24,"path":["syn","path","printing","span","QSelfDelimiters"],"kind":"struct"},"17:14475:6571":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"11:830:11073":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:3658:32749":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"24:5337:3900":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"24:5828:2892":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"17:12707:23980":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:6143:4059":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:15655:6933":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:5381:7992":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:42342:3958":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"24:5970:3938":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"21:53:5583":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"6:4890:7807":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:46036:8885":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:6691:8300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"17:2037:24033":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:47060:8978":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:12824:23982":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:4564:5800":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"24:5716:3929":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"2:39861:16614":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:22625:11450":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"24:5413:3909":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"2:40936:4062":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:12289:6234":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"21:1090:207":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"24:4362:4244":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"16:8223:9395":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:12278:24152":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:22227:8583":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:9886:23967":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:12978:16522":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:1530:3959":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:980:11077":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:12127:6231":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:2037:675":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:40658:9489":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:2149:5510":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:5488:8054":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2:39868:8688":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:7702:4053":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"5:7551:3958":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"24:3205:4211":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"2:9839:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"21:912:251":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"24:708:3958":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"2:21804:11360":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:10439:6165":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:6823:8346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:32355:3290":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:15190:6796":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:7999:5344":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:14994:6751":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:9220:11330":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:33813:6008":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"24:718:3959":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"2:40513:34057":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:8746:4039":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:7949:7135":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:10068:23952":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"24:4886:4280":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"2:46434:8929":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"24:5592:3917":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"11:2148:11080":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"24:98:4424":{"crate_id":24,"path":["syn","token","private","CustomToken"],"kind":"trait"},"24:5289:3893":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"1:5289:33572":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:4810:7158":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:3841:11207":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"24:5987:3941":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"17:11256:9220":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"11:2440:5560":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"16:6837:10676":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"11:299:9411":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:15058:6761":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"24:5324:3898":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"16:7223:9358":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:6942:9340":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"24:5612:2605":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"17:0:3720":{"crate_id":17,"path":["object"],"kind":"module"},"17:15333:6830":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:4487:11261":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"24:6002:3946":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"16:4983:7164":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:1507:7602":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:6534:8221":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"24:3630:4229":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"1:4153:11231":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:7070:5566":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:11574:9422":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"9:355:22886":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:11998:16509":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:11942:33594":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"21:2730:3212":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"17:15092:6773":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"11:2566:4015":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:3141:6058":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:44934:179":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:12900:6274":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:1407:11079":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:43619:8851":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:15814:6973":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:14575:6242":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:16269:6354":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"24:1105:3585":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"16:4766:7157":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:7060:5565":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:9109:198":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:5428:8017":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:3342:11194":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:5179:7903":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:10828:37539":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:1421:10582":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:7161:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:2590:7102":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:40906:4060":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:10396:4113":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:42334:3963":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:8085:10591":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:8519:4068":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:1098:11080":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:14933:6744":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:12388:9249":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"5:5942:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:8462:4022":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:21676:34018":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:10326:225":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"6:6882:8358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:2322:11136":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:4976:7846":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:14545:6579":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:8228:5639":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"24:1931:4094":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"24:1798:3970":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"1:3395:11196":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:32474:2554":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:11223:8858":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:623:11060":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:6640:23892":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"1:9274:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:14298:6538":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:500:5853":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:3248:5109":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:10948:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"5:7642:4015":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"24:5992:3943":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"1:12376:1852":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:6696:23894":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:30508:11213":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:14489:6572":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:7152:11358":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:12264:24125":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:43434:9518":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:6678:4025":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:10412:11311":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:23730:235":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:14016:5469":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"11:102:9410":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:7924:5882":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:1129:5776":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:5779:11308":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:2506:7098":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"24:4833:4276":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"5:3698:181":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"18:507:6032":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:5603:8095":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:42197:3958":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"24:4374:4245":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"1:10918:9576":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:13877:6462":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:15197:6797":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:6067:5800":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:13753:6439":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"11:2533:2516":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:4816:7756":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"24:5613:2867":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"17:13146:6296":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"21:1785:5580":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"6:8273:8554":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:11306:9101":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:10350:6162":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"24:5012:3862":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"17:16032:6322":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"6:7361:8419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:4354:11259":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:6652:8291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:16187:7070":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:2931:16572":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"11:1914:9421":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:6381:8138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:7807:37489":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"11:1158:10582":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:13593:35014":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"2:23223:8609":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"6:4921:7825":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:11189:6178":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:22239:34010":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"21:2725:2528":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"16:8096:23907":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:42115:8830":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"24:3902:267":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"16:8636:23912":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:4561:11254":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"11:708:10701":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"24:3443:4222":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"17:12597:6252":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:3438:11192":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:7212:9357":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"7:0:1914":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:43951:9462":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:1703:7724":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"18:706:9212":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:1859:11088":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:10997:6172":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:2203:24028":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:884:3963":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"20:889:2596":{"crate_id":20,"path":["proc_macro2","TokenTree"],"kind":"enum"},"16:5113:7167":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"24:5819:2889":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"6:570:7581":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:1220:36894":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:43160:34037":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"6:1489:7594":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:43219:4105":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:46546:8933":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:23256:8612":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:8700:4710":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:6599:8266":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:44709:9568":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:0:1726":{"crate_id":1,"path":["std"],"kind":"module"},"2:8320:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:8330:8567":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:15445:6860":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"11:488:153":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:5357:7981":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"21:2710:2594":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"1:9545:5627":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"6:6449:8182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:14723:6595":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:4595:4137":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:11634:9227":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:44643:9564":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:10852:5845":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:42247:4099":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"24:4700:4267":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"17:13568:6393":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:6659:8292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:11089:24001":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:8179:7298":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"24:5345:3882":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"2:45852:8868":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:7431:8443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:3559:5800":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:5168:4706":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:4914:7821":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:8667:9065":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"18:538:6036":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:41166:4070":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"15:327:10677":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:14752:6615":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"24:3426:4221":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"1:4103:11229":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:8784:34943":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"24:2602:11156":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"16:8058:23905":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:15383:6845":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:12372:911":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:12724:23981":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"15:306:22981":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:3046:137":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:8308:8562":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:5311:7970":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:12499:16526":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:9256:9089":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"24:1916:4081":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"17:15273:6814":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:6507:8214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:11812:24081":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"24:1800:2602":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"type_alias"},"23:239:5045":{"crate_id":23,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"2:47276:8998":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"5:1561:3958":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:32376:9478":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"24:128:2516":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"17:13089:6286":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:7159:9356":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:6462:23891":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"24:5368:3905":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"6:4970:7843":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:5727:6155":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:2262:5332":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"5:4577:5802":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:46973:8975":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:1530:7612":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:0:3719":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:6084:9264":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:12365:741":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"2:44034:9454":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"5:4332:5800":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"24:5306:3879":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"24:1077:37727":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"2:42728:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"24:5456:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"2:33679:6006":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"21:214:10659":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"6:6902:8372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:4925:11246":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:6853:10711":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"24:5857:2909":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"24:5984:3940":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"23:514:3213":{"crate_id":23,"path":["quote","quote_spanned"],"kind":"macro"},"16:7016:9350":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:6502:22998":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:4929:7162":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:11003:11307":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"6:5107:7897":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:47081:8979":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:5060:7165":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"9:176:10692":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:15222:6802":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:6959:9450":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"6:1563:7635":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:42886:4115":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:9328:9090":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:3303:33347":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"20:723:2595":{"crate_id":20,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"6:523:7556":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:12949:6239":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:14847:6698":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:12557:6174":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"6:5658:8122":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"2:23234:8610":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"2:46596:8935":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:46019:8884":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"24:3681:2543":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"16:155:5765":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"24:3018:4284":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"24:4898:4281":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"24:5847:3193":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"2:46613:8936":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"24:355:4095":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"24:4531:4255":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"1:8590:9579":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:40787:11152":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"16:8546:9403":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:12201:24150":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:14325:6542":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:6713:2558":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"24:5816:3176":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"17:13173:6304":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:43932:9461":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:8004:5346":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"11:1888:5560":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:1642:2565":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:2640:7104":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:40945:4049":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:46275:8906":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:6723:8315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:2232:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"5:3935:5558":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"24:5421:3911":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"17:12478:6246":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:10382:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:23006:34039":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:46357:8910":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"24:5054:2368":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"6:1569:7637":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"21:2666:2596":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"2:41390:4031":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"24:5070:2743":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"17:11153:23977":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"18:598:5992":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:3486:11182":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:12543:24160":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:12368:739":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"2:12072:5508":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:1831:5314":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"1:4223:11238":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:894:3958":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"5:7559:209":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:9120:9082":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:44084:9527":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:6917:8383":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"24:5384:2794":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"1:8597:9580":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:5417:7177":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:5036:7878":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:15249:6806":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:11647:9228":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:2483:11142":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:2318:5502":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:11280:9456":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"24:5852:2906":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"2:46374:8911":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:5278:34004":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:7030:7201":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:3252:4003":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:4442:34860":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:10954:23990":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"24:3647:4230":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"5:7537:37340":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:13904:5850":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:5089:11282":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"15:394:22990":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:6411:8163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:2450:7089":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:8669:3290":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:40993:4066":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:7234:5827":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:1690:7720":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"24:2163:11007":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"11:740:10702":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:9320:2522":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:5844:5867":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:32369:4126":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:41947:11206":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:4325:11256":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:8509:4055":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:22:823":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:12238:24127":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:10218:9508":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"2:22639:5496":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"2:47315:9014":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:46123:8898":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:40845:4047":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:6904:9337":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:10612:23974":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:7469:8454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:6302:9287":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"20:948:2528":{"crate_id":20,"path":["proc_macro2","Ident"],"kind":"struct"},"2:43105:8836":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:10486:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:11357:16519":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:7548:8508":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:3264:24083":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:15281:6815":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:16093:7046":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:13832:6452":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:5507:8062":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"6:5205:7917":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:14012:6480":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:15582:6912":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:44720:16718":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:26130:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:22558:11156":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:7869:2609":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:320:1786":{"crate_id":1,"path":["std","thread"],"kind":"module"},"17:15596:6918":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"5:1545:3963":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:11367:6174":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"24:3851:4236":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"6:7577:8522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:7539:8505":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"21:2686:3979":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"1:12322:10717":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:11102:24000":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:6389:23889":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"9:422:22873":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:14977:6749":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:9193:9086":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:14212:6529":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:4796:4126":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:4430:34863":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:44837:163":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:15748:6961":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:8234:4043":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"21:2587:251":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"17:14189:6520":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:1922:11104":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:938:5558":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:6998:9342":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:13581:6397":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:45837:8865":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:45899:8873":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:14235:6530":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:15760:6963":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:14503:6575":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"11:785:9418":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:41352:9503":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:10344:28488":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:21930:8582":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:8480:9060":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:5676:8131":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:6255:5800":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"24:5706:3928":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"17:10419:6164":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:5341:7979":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"5:4302:5800":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:40874:4057":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:43880:8852":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:9442:9094":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"24:607:3968":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"1:8070:11106":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"24:3273:4214":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"16:6028:7122":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:5057:7886":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"21:2460:126":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"1:9411:5877":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"17:10092:23972":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"11:2137:11079":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:43869:16511":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:44351:9486":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:13437:6356":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:491:7533":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:32916:6003":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:45998:8883":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:2802:201":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:40883:4058":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:12494:6247":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"24:3460:2911":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"2:40958:4063":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:4873:7160":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:11324:24044":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"24:4970:2859":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"5:3460:5558":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:44288:9538":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:1597:7656":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:11276:161":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"6:7350:8414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:47238:8996":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:9518:16523":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:23278:8614":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"5:7036:5564":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"24:5437:3914":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"1:3667:11154":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:7372:7132":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:44685:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:12584:23977":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:15:3354":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:47031:8977":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:1075:9388":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"5:2301:9426":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:22200:11156":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"6:5375:7991":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:7341:8413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:6097:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"11:2228:9422":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:473:7525":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:8331:33565":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:43780:34469":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:974:11076":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:6680:8298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"10:0:3714":{"crate_id":10,"path":["adler"],"kind":"module"},"24:2509:3149":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"21:2265:2920":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"24:4927:4283":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"16:6843:9333":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:7416:23899":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"24:95:11156":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"2:44156:9531":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:4722:4118":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:11853:24118":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"20:878:251":{"crate_id":20,"path":["proc_macro2","TokenStream"],"kind":"struct"},"24:5663:3924":{"crate_id":24,"path":["syn","lit","LitCStr"],"kind":"struct"},"5:3308:9420":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:6876:7199":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:553:7573":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"14:165:22961":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:12380:1924":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:8014:7138":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:11773:6257":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:42570:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:546:9258":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:3032:5858":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:1631:9420":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"11:1893:5558":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:42059:34304":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"20:904:2516":{"crate_id":20,"path":["proc_macro2","Group"],"kind":"struct"},"24:4287:4239":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"24:2188:2521":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"2:40585:16567":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:4167:11233":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:43115:4103":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:22934:8585":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"11:2380:3959":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"24:5380:3885":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"23:11:3988":{"crate_id":23,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"17:15116:6775":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:7401:37467":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:11567:24075":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"24:5667:3925":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"2:41931:8823":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:12993:23983":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"23:407:4930":{"crate_id":23,"path":["quote","__private","RepInterp"],"kind":"struct"},"6:1625:7681":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:7495:9435":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"24:5081:2866":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"17:12768:23950":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:15390:6846":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:5265:7947":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:915:9418":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:4643:4097":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:15301:6822":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:2216:188":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:8551:11208":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:40686:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:7487:8465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:3695:7148":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:6781:7195":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:6368:9295":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:4406:11260":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"20:806:37581":{"crate_id":20,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"16:6953:9341":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:2234:24050":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:3903:11211":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:13308:6337":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"24:3222:123":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"2:23041:34052":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:12973:16524":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:4184:7152":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:3241:5107":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"5:3334:9421":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:11621:9225":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:7984:5357":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:10759:6182":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"24:4983:3861":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"1:675:11064":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:9280:5337":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:7597:3339":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:8137:7139":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:14876:6709":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:11657:8847":{"crate_id":1,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"16:6042:7125":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:12516:24168":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:10671:37533":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:1861:11089":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:9384:186":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:44841:218":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"16:5224:7171":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:4821:24164":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:47185:8987":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"24:5425:3888":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"16:6337:9289":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:21751:11364":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:12422:9251":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:22918:9466":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:2966:7119":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:11269:24021":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"21:1978:5581":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"6:5224:7925":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:41017:4052":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:7653:4016":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:6876:8357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"24:2390:3961":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"17:11493:24038":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:8196:9577":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:15023:6757":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:5044:7882":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"22:0:3844":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"6:8031:8548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:30766:5417":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:7386:7245":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:6682:11323":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:14356:6548":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:8343:8571":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:379:5356":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:16198:7071":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:949:10701":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:11485:9531":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:7058:9352":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:12621:6253":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:33340:6005":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"5:2591:8575":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:3834:7149":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:7959:9392":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:3201:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"24:5320:3897":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"1:8641:11286":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:7463:8453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:6205:23888":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:44238:9536":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"20:982:3958":{"crate_id":20,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"5:6792:3958":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"11:396:5771":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:8740:4038":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:8319:8566":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:8105:7295":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"24:274:10574":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"17:11016:23992":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:4844:7159":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:9146:9084":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:7986:8534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:46176:8901":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:40562:9486":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:42189:3963":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"6:532:7562":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:22584:34643":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"2:10386:3129":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:7424:23900":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:14855:6701":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:732:10583":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"5:7517:5787":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:46065:8887":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:4819:8436":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"6:545:7568":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:46806:8972":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:4211:11235":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:33612:4004":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"11:1601:22954":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:4241:7153":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:11583:24051":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:39753:211":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:39881:8689":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:3014:23026":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"24:5975:3939":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"6:1539:7618":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:4496:16552":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"6:1584:7649":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:40739:11120":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"18:608:37548":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:46679:8938":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"1:957:11074":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:15138:6779":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:6731:10660":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"20:0:2364":{"crate_id":20,"path":["proc_macro2"],"kind":"module"},"24:5433:3913":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"18:80:28214":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:11313:9223":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"18:689:9209":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:1675:7711":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:5112:11284":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:16151:7061":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"24:5867:3932":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"4:0:3711":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:2765:134":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:8233:23908":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:8121:209":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:908:37474":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"5:1633:209":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:22572:11449":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:13526:6378":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:5241:7935":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:11537:24045":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:10534:37528":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:32445:5110":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:13473:6365":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"24:5350:3902":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"2:46094:8889":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:22712:11443":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"16:7838:23903":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:3473:24086":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:8598:23911":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:5588:11303":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:40823:4055":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:43426:9517":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:13412:6354":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:568:5338":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"24:3715:252":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"11:328:9414":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:39716:212":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:4341:11258":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:43941:16515":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"18:521:28228":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:2074:1367":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:5325:7975":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:656:10590":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:15799:6972":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:7736:5809":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"24:664:5986":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"20:775:3980":{"crate_id":20,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"6:6631:8279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:6758:8327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:39703:9479":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:10595:152":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:23168:8604":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"2:44317:9541":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:40814:4045":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"5:6129:5808":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:758:153":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"21:2232:2516":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"6:5622:8109":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:12792:6120":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"18:531:9203":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:15426:6855":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:7990:9394":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:8241:33330":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:5255:7172":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:9671:23948":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:44010:9522":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:46307:8908":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:1521:7607":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:8616:11209":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:23120:11156":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"2:41975:2595":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:12508:6250":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:14079:6489":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:9235:11332":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:7472:32627":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:14038:6483":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:12483:10588":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:8043:37469":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:7717:32795":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:5635:8115":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:23245:8611":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"2:2951:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:6462:8183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:12056:6227":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:13497:6369":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:40624:9488":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"5:5497:5776":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"24:1941:2367":{"crate_id":24,"path":["syn","parse_macro_input"],"kind":"macro"},"18:491:9202":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"24:4746:4270":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"24:1364:9161":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"2:43132:8845":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"11:1920:2565":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:14560:6583":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:12030:24085":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:1601:11073":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:11392:24030":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:1494:7596":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:43395:9516":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:8711:7348":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:6461:5867":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:11018:28384":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:10715:11191":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"20:518:3977":{"crate_id":20,"path":["proc_macro2","LexError"],"kind":"struct"},"24:2649:3215":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"2:3927:5560":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:42172:172":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:11204:9083":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:7883:7289":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:14516:6576":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"9:236:8847":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:44630:9560":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:10388:4114":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"24:4676:4265":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"2:44326:9542":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"23:504:5039":{"crate_id":23,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"24:4630:4262":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"24:5999:3083":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"6:8261:8552":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:8296:8560":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"24:5576:3586":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"1:9341:28390":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:42414:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:8050:4024":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:4807:11233":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:12653:9524":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"24:2338:3957":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"17:13766:6441":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:42278:5349":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:6731:8316":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"16:5085:7166":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:23075:8602":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"24:5994:3944":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"2:31172:5123":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"9:390:22872":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:4672:11263":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:6716:8314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"2:21667:5123":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:5007:7864":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"24:5871:3080":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"17:9781:23965":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"18:515:6035":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"24:3256:4213":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"6:5586:8088":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:9460:9587":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:2620:7103":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:42375:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:5837:219":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:47119:8981":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"11:809:5558":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:41381:4029":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:8208:139":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:11702:9232":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:44558:9554":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:1589:7651":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"21:2534:4146":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"1:2469:11139":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:10769:37525":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:42133:8831":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:6740:8319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"24:5047:2545":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"17:15102:6774":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:12887:9256":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:12767:9456":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:12572:6182":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:2010:791":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"5:5146:5800":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"11:1140:22951":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:4354:5800":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:5412:1252":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"18:718:6051":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:15126:6776":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"24:306:37714":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"21:2596:4144":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"5:1376:9388":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:43198:137":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"21:0:1354":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"2:21687:34018":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"24:5492:2536":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"2:3267:6015":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:6666:8293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:6123:7126":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"11:364:5769":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"14:40:2528":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"20:953:3212":{"crate_id":20,"path":["proc_macro2","Literal"],"kind":"struct"},"17:13015:6242":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"24:4560:4257":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"16:2920:7117":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:44834:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"20:693:4095":{"crate_id":20,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"24:5441:2551":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"24:4729:4269":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"10:44:7442":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:9287:28293":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"24:3188:116":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"2:44950:9571":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"19:0:1300":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"24:1069:37728":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"17:14246:6532":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:6764:4072":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:891:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:5318:7174":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"24:3409:4220":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"1:2076:196":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"24:5801:3930":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"24:4519:4254":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"2:46226:8903":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:7448:8448":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:9732:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"20:927:2920":{"crate_id":20,"path":["proc_macro2","Punct"],"kind":"struct"},"17:16138:7055":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:871:3959":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:40570:9481":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"11:835:11074":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:14436:6568":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:2635:11187":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:13674:6405":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:2796:194":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"24:267:10573":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"11:2301:9388":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"16:2900:7116":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"20:815:2595":{"crate_id":20,"path":["proc_macro2","imp","Span"],"kind":"enum"},"18:735:28224":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"11:1880:3959":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:672:11063":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:16249:7081":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:13325:6339":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:8000:7137":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"24:3103:4209":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"5:4212:3963":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:12150:6232":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:10251:6159":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"24:4988:3860":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"11:1884:3958":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:6437:8178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:8612:7142":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:4842:7776":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:1974:10592":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:10938:9019":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"24:0:2365":{"crate_id":24,"path":["syn"],"kind":"module"},"24:3120:4210":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"1:9401:233":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:479:7528":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"24:1752:28250":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"5:6881:5776":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:15635:6930":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:5708:11307":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"24:5026:2587":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"5:3313:37354":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:14177:6518":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"24:2311:3956":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"2:7818:4019":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"16:6970:7124":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:4:1265":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:928:5560":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:5622:11305":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:46243:8904":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:4060:3958":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:2821:8578":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:4896:7809":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"21:1351:2609":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"16:6188:9275":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:39731:209":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:3087:11119":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"24:2667:5998":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"13:0:3710":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:1632:7685":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"24:5417:3910":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"17:437:6106":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:14599:6593":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"24:3749:2511":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"2:47139:8983":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"24:4647:4263":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"2:41366:4025":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:5387:7995":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:22586:5496":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:10638:5885":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2:46389:8912":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:4008:11212":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:15206:6798":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"18:589:6039":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:1961:5800":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"2:21718:34016":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:6419:8165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:6611:8271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:5025:7873":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:7518:8491":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:40702:16650":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"20:715:251":{"crate_id":20,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"5:1791:5776":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:44973:9572":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:12683:24163":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:10837:5841":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"24:1061:37729":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"17:11026:23993":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:11788:24115":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:5255:7941":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:1642:11081":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:40924:4071":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:14868:6708":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:11430:16516":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:1711:7728":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:41359:4023":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:42153:193":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:11443:6187":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:13363:6345":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:10503:28489":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"18:481:9201":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"11:0:3715":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:11166:6176":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:39040:6014":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:2154:4095":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"24:5661:3923":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"11:772:9417":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:10327:4111":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:6239:7184":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:45969:8881":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:5420:8012":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"24:5601:2528":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"24:5665:3922":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"21:141:5591":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"0:965:2385":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"2:44892:10306":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:7731:4715":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:13774:6443":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:44020:3501":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:5641:8118":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:5450:8033":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"5:7760:9445":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:5654:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:4694:7156":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"24:4664:4264":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"24:4478:134":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"2:10390:4115":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:8556:11205":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:2930:11156":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:7724:9444":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:2954:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:31145:195":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"18:113:28216":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"11:2323:11079":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"18:670:28227":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:2840:7113":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:1551:7627":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:3282:5461":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"6:5051:7884":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:43906:4044":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:8291:4041":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"11:1900:9419":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:13026:16531":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:45884:8872":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:42689:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:12399:9250":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:8222:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"11:1907:9420":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:44900:8862":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"11:2349:11080":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:1637:9421":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:3449:140":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:42609:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:2707:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:4267:7154":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:6796:10598":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:1616:5560":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"18:698:9210":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:44466:9551":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:10877:23978":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"24:5520:3151":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"16:6173:9273":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"11:854:11076":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:7587:3958":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:8532:9454":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:2660:7105":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"24:5474:63":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"14:214:9408":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:23201:8607":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"17:13922:6468":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:2604:5496":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"2:3730:4135":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:5533:8064":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:4694:11264":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:2963:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:1256:36889":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:2684:7106":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:11510:24026":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:6513:11453":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"24:4425:4248":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"2:21810:11363":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:12671:24192":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:11949:9605":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:14341:6544":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:6813:8343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:32351:2683":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:5395:8000":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:11042:23994":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:4137:5560":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"11:2121:9388":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:3677:11175":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:14260:6534":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"24:5401:3908":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"17:15456:6861":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:46928:8974":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:41408:4035":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:4984:7851":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:5958:11321":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:44829:8861":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"6:5562:8081":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:12371:905":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:34371:5990":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:46080:8888":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"24:4495:4252":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"17:11128:6146":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:986:11078":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:40665:9490":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"2:3206:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:9407:4717":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"24:1053:37730":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"2:45867:8869":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:2741:10596":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:3287:5462":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"24:3613:227":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"2:10394:4112":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:2719:5841":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"24:5527:3916":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"1:11694:9600":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:903:37482":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:14587:6586":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"18:548:152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"20:116:37572":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"17:13594:6398":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:1667:7710":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:4964:7841":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:7542:9387":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"11:351:37448":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:44924:11451":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"6:6638:8280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:12374:1864":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:3659:16550":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:14986:6750":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:12141:5896":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:7770:10584":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:6012:5560":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"23:0:1407":{"crate_id":23,"path":["quote"],"kind":"module"},"17:14414:6557":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:11595:6190":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"20:792:251":{"crate_id":20,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"2:40968:4064":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:9269:10707":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:44609:16538":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:11557:24074":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:15289:6816":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:40502:9483":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:7337:7240":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"24:1368:9163":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"2:10171:4104":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:46258:8905":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:10984:28535":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"11:1564:22952":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"24:659:137":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"11:2466:5558":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:12371:6275":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:13538:6381":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:6443:8181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:1514:7604":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:42648:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:47159:8985":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"20:687:3981":{"crate_id":20,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"2:40767:11133":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"23:150:4736":{"crate_id":23,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"2:47148:8984":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:5494:8056":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:10031:10704":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:6608:205":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:13606:6401":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:44202:9534":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:42879:4114":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"24:6012:3948":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"2:43144:7320":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:14091:6490":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:2179:11083":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"24:1004:4082":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"16:7350:7242":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:4883:11285":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:2467:7091":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:7354:10600":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:44416:16537":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:5198:7170":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"9:0:3713":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:902:9417":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"14:7:10576":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:597:2609":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"24:5302:3895":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"1:4161:11232":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"24:2116:37723":{"crate_id":24,"path":["syn","precedence","Precedence"],"kind":"enum"},"24:3698:4231":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"1:8526:3501":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:6765:8328":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:14111:6493":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:22684:11442":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"5:895:5779":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:3090:35779":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:13814:6451":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:6526:8216":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"18:96:28215":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:4372:3959":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:10603:156":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:46575:8934":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:11688:9231":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:9737:23947":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:11674:9230":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:2705:5855":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:43416:8847":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:11227:23997":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:41375:4027":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:32385:236":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"5:3100:28268":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:10976:28525":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:15678:6946":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:8602:11262":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:12382:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"24:3596:4126":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"2:10754:5838":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:12375:1846":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:15521:6905":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:46463:8930":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:0:1010":{"crate_id":6,"path":["libc"],"kind":"module"},"1:11973:5894":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"17:13399:6352":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:10661:23975":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"24:5281:3891":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"17:13046:6282":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:22990:8590":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:821:189":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:42351:195":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:5805:5564":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:11513:16517":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:4956:7163":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:14912:6739":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:5271:7950":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:13553:6387":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:6700:8306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"2:3211:3056":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"24:1101:3918":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"11:685:3963":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:4997:7857":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:9406:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:15324:6827":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:15078:6769":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:12929:6275":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:6680:23893":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"5:7668:5348":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"24:3868:4237":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"17:10137:23946":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:9715:5884":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"21:127:5763":{"crate_id":21,"path":["proc_macro","bridge","client","state","set","RestoreOnDrop"],"kind":"struct"},"24:96:5183":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"6:5477:8051":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:2337:5465":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"24:5277:3890":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"1:9133:9083":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:2726:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:8233:9578":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:43859:9460":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:10755:5343":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"24:3035:4205":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"11:873:11077":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:15266:6813":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:11715:9233":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:6521:8215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:4923:11244":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:8271:145":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:10622:37535":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:44342:9481":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:7586:8525":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:3820:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"24:5405:3887":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"14:160:10576":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:7789:37475":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:12338:28394":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:2175:24062":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:8341:11189":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:8302:8561":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:10995:10591":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"24:5361:3904":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"1:2495:11148":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:1625:9419":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"24:3154:104":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"24:1020:11156":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"5:3724:3963":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:4805:7748":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:9807:23953":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:5258:33572":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:11212:3963":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:12175:24140":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:7368:8423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:7684:9438":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:46161:8900":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:4792:7739":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:23190:8606":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"2:40864:133":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:6749:7192":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:12356:1886":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:5776:8344":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:40892:9496":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"24:3171:2908":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"20:825:2516":{"crate_id":20,"path":["proc_macro2","imp","Group"],"kind":"enum"},"23:513:1407":{"crate_id":23,"path":["quote","quote"],"kind":"macro"},"17:10887:37541":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:10026:34944":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"24:3579:4228":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"6:578:7586":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"24:6018:3950":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"2:4454:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"24:6024:3936":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"17:11661:9229":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"24:5862:2910":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"17:12043:24084":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"24:4758:4271":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"6:497:7536":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"18:0:3721":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:6199:219":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"9:480:22870":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:9162:11333":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:30772:5418":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:6256:4048":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:3347:37349":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:22717:11441":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:1609:3959":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"7:32:22857":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:5447:202":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:4990:7854":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"21:421:5764":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"17:10524:23973":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:3711:3959":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:12378:1840":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:46336:8909":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"24:4857:4278":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"24:3137:2576":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"2:13750:16575":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:42206:4715":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"9:500:7502":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"21:895:5597":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"16:3587:7147":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"24:3307:4215":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"5:3301:3959":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:4139:11230":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:4886:11263":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:39699:3136":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:3455:142":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:12851:9255":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"5:7712:9441":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:3889:6063":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:7282:9371":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:3297:29078":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"11:671:3959":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:43980:8854":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:4821:8438":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"1:8870:9584":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:6269:9281":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:1727:7733":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:13211:6319":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:12327:11070":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:9424:161":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:5257:437":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:15646:6931":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:11730:9234":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:2760:200":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:8199:8549":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:5689:7180":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"11:1064:22949":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:2313:138":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:4986:24169":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"16:7578:9090":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:8428:177":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:4152:7151":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:40757:5831":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"13:110:37454":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:5648:8121":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:11877:6193":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"11:1023:11079":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:40528:8816":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"15:288:22980":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"20:358:3977":{"crate_id":20,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"23:272:2605":{"crate_id":23,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"24:3562:4227":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"2:44531:9553":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"24:6007:3947":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"1:10595:11309":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:10044:23971":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:7554:23902":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"24:5701:2911":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"24:5060:2533":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"6:5482:8053":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:538:7565":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:11467:6189":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:13188:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:4109:11228":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:12031:16510":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"21:2600:3958":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"17:14449:6569":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"21:952:2595":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"17:16259:6349":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"16:2435:23025":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"24:5891:3933":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"2:10384:4106":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:5515:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:45931:8875":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:13252:6322":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:10709:11193":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"24:4606:4260":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"1:12366:744":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:2485:11143":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:3678:34952":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:10712:11195":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"24:1821:4085":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"1:373:5355":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:12369:917":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:23179:8605":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"24:3511:4224":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"2:40915:4061":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"24:1626:37783":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"24:1093:37732":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"1:4817:8434":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"21:181:5201":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"6:6480:8195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:14051:6485":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:4905:4130":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:11764:9238":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"24:3885:4238":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"1:11503:5889":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"17:12433:6242":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:5348:7175":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:15368:6841":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"7:79:22864":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:8336:10715":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"11:2400:3963":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"16:7358:7131":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:6588:7189":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"16:6144:23887":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:7980:7136":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:32386:4150":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:4717:4117":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:40551:9485":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"11:1105:22950":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:12377:1858":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:3110:7143":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:2590:676":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:12530:24161":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:5992:4711":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:10392:205":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:2142:5512":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"17:16121:7053":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"24:3800:4233":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"24:3766:4232":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"17:13797:6448":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:12969:6277":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:32362:34793":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"16:6064:7127":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:3649:4111":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:8539:9538":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:22452:11446":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:46501:8932":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"21:2548:126":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"5:7595:3958":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:5217:7924":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:7938:9389":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"11:2559:7439":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:1897:11098":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"24:89:2522":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"24:4994:2727":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"2:44308:9540":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:44961:5468":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"20:834:2528":{"crate_id":20,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"1:6718:5874":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:4981:5859":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"24:1022:5987":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"17:11341:24032":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:12362:9248":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:11241:9094":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:16050:6332":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"24:2365:3958":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"1:5851:9573":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:5196:7912":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:12076:24082":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:7414:8442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"18:623:37549":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"24:4408:4247":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"1:8645:8423":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:5366:7985":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:13116:6292":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:43919:16505":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:43404:156":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"24:4328:4242":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"1:3610:11153":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:15616:6924":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:44138:9530":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:15473:6868":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:11915:24120":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"24:5671:3926":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"2:43379:9513":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:5085:16561":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"24:4804:4274":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"24:5886:3934":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"2:40836:4046":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:12355:475":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:9703:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:4852:4128":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:3065:225":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:47253:8997":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:7332:8407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:6564:8244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:11035:9084":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"16:6159:9270":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:8169:5636":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:12485:24155":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:963:11075":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:13899:6463":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:15931:6305":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"24:5316:3896":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"2:44859:206":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:12328:9239":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:9103:11309":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:9205:11331":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:7192:23898":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"24:5041:3875":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"2:3279:5460":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:11098:5888":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:42865:3129":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"24:5813:202":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"1:11813:11211":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"20:843:3212":{"crate_id":20,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"2:23026:34041":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:39791:213":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"24:5392:3886":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"17:13785:6446":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:44913:35012":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"6:8249:8550":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:15376:6844":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"24:4391:4246":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"16:6440:23890":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:22358:11156":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:9416:5878":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"5:7697:16650":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:44667:8858":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"23:38:3590":{"crate_id":23,"path":["quote","format_ident"],"kind":"macro"},"24:1361:9160":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"2:8238:4042":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:11419:6182":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:432:184":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:11258:9100":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"6:5288:7961":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:12454:9253":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:12690:9529":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"20:908:3979":{"crate_id":20,"path":["proc_macro2","Delimiter"],"kind":"enum"},"14:0:3717":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:3906:11210":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:5088:7896":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:38351:6012":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:5334:7978":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"5:795:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:5441:8027":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:4786:4125":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:13455:6364":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:4881:7802":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"24:2382:3959":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"11:1085:37440":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"24:5074:3877":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"20:732:2516":{"crate_id":20,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"24:3732:253":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"2:13698:35215":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:11214:23998":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:4957:7838":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:15778:6969":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:39811:215":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:22903:8584":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:15356:6838":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:9315:10709":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:8186:9019":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"11:2420:3958":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:41007:4067":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:16223:7077":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"5:4912:808":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"24:5515:3192":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"6:6473:8191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:13235:2528":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:7983:11156":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"5:6711:5776":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:47102:8980":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:11075:6174":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:8064:11069":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:4713:220":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:30798:34048":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"24:5996:3945":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"2:46883:8973":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:44298:9539":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:8585:23910":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:5127:7899":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:10325:11098":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:1860:3078":{"crate_id":2,"path":["core","mem"],"kind":"module"},"1:2003:11116":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"14:220:7426":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"9:445:22871":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"21:2338:3212":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"2:40794:4044":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:15400:6849":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:1207:24007":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:13064:6285":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:15836:6979":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"23:78:2597":{"crate_id":23,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"2:39655:5464":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"24:5877:3935":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"1:11725:9603":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"12:0:3716":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:10820:5840":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:10185:6157":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:11041:238":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:1643:7693":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"24:4821:4275":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"17:11115:23999":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:6625:9328":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:16212:7075":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:30734:5416":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:12967:9212":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"24:3545:4226":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"24:1109:3919":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"2:21918:11156":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:14463:6570":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:6964:5583":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:10982:23991":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:7767:34460":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"24:3783:2565":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"11:1580:22953":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"24:5451:3889":{"crate_id":24,"path":["syn","expr","FieldValue"],"kind":"struct"},"2:8737:149":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:10155:6155":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"21:929:4145":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"16:6256:9280":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:11708:10316":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:15168:6790":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:6374:5866":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:5144:7168":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"21:2681:2516":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"24:5448:3136":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"1:2073:197":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:14788:6646":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:11743:9235":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"24:2458:3965":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"1:6867:5875":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"2:21732:34020":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:11853:11210":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:7495:9381":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"23:46:3989":{"crate_id":23,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"17:14529:6577":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:1107:10582":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:13187:6305":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:15434:6856":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:12342:9243":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:6852:9334":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:11898:6195":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:9176:9085":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"11:698:3958":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:12958:16523":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:11497:24027":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:15624:6925":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:5230:7928":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:3272:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:7305:7236":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:2704:7107":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:12354:1183":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:5541:8069":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:44437:9543":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"23:281:2605":{"crate_id":23,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"2:3693:4133":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:3300:33355":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:527:5332":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"21:2647:2595":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"16:7919:23904":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:22670:11156":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:4333:11257":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"21:2557:9197":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"2:32309:7438":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:13961:151":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:6794:9330":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"1:12367:760":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:14025:6481":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:5186:7905":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:44333:9487":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:43993:9520":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:13999:6478":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"3:0:509":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:8723:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"20:801:9200":{"crate_id":20,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"24:2279:3955":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"24:3664:3260":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"17:10905:23979":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:10317:6161":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:10377:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"5:7478:5470":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:13272:6332":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:5151:7901":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"20:781:28235":{"crate_id":20,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"5:40:5471":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:12443:6245":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:11956:9605":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"0:964:2378":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"1:6924:232":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:46634:8937":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"1:9389:5871":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"16:2415:22999":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:3092:8577":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:12358:1323":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"5:7527:9436":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"11:123:5767":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:44661:9566":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:2044:5413":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"23:35:11156":{"crate_id":23,"path":["quote","ext","private","Sealed"],"kind":"trait"},"2:2140:5511":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:6672:8296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:40691:9491":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"24:5311:3880":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"2:34198:5046":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:21928:11361":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:4875:7800":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:16105:7048":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"11:1725:155":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"8:0:3712":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:786:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"24:5397:3907":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"24:3069:4207":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"24:5990:3942":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"2:12467:16666":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:680:11065":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:991:5784":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:2860:7114":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:40054:5127":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:5319:7974":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:6572:185":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:6777:8330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:42093:9579":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:12353:9247":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:3638:16613":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:11319:16513":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"24:1848:3537":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"21:365:5584":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"24:657:225":{"crate_id":24,"path":["syn","error","Result"],"kind":"type_alias"},"2:21701:34014":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"14:202:2960":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:43840:9459":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"18:765:28225":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"9:53:10681":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:8014:8537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:1236:35778":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:15176:6793":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:1613:3958":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:3340:11193":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:45952:8880":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:13986:6477":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:5002:216":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"11:2539:7435":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:10380:119":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"17:256:37482":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:8565:9406":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:3648:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"24:5285:3892":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"17:16069:7041":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"5:7845:5559":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"11:2551:37450":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:1493:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"24:2656:11156":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"20:709:9199":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"24:5673:3921":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"5:7567:9437":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:13725:204":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:11799:24116":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:8320:23909":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"21:2661:4145":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"17:12189:24149":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:1920:5627":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:33746:6007":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:3337:4262":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"5:3855:4095":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:11092:5887":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:7471:7250":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"21:242:37594":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"2:23267:8613":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:1481:155":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:42181:3959":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:15313:6823":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:10889:11287":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"5:2168:11082":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:10345:143":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:8765:8847":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"5:1611:10701":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:485:7531":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:47174:8986":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:11051:24012":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:3484:3971":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"24:3086:4208":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"1:6282:5862":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:8545:11209":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:15569:6906":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:6544:8228":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:46290:8907":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:13946:6469":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:6914:9338":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:11413:7499":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"18:680:9206":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:6866:23896":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:564:7578":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:10018:23949":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"24:5021:2542":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"1:8050:11068":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:8290:8559":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:7462:23901":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:11191:9082":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:5358:985":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:8503:7342":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:12107:6182":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:38406:6010":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:40472:9482":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:7391:8441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"11:2545:7436":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:6748:8320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:41152:4069":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:42453:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:10908:9588":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:33128:6004":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:11188:3959":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:4531:5800":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:9397:5800":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"17:11825:24097":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:3443:3076":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:46205:8902":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:8284:8558":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"24:3358:4217":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"2:2960:144":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"21:2204:3980":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"24:5328:3881":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"1:8257:4095":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:34025:5991":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:7454:8450":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"24:5596:3182":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"2:41893:169":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:38296:6011":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:7604:8528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:15151:6785":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:1592:9418":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:2530:7099":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:5757:7181":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:2315:11135":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"5:1622:10702":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:44052:9457":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"}},"external_crates":{"23":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.36/"},"20":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.84/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.12/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.66/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}