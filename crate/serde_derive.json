{"root":"0:0:1841","crate_version":"1.0.195","includes_private":false,"index":{"5:5540:35013":{"id":"5:5540:35013","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5552:35016":{"id":"5:5552:35016","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2026","`String`":"5:7534:249"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2026","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12876:29619":{"id":"2:12876:29619","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:3808","str::rsplitn":"2:12879:29621"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44025:8752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12817:34322":{"id":"2:12817:34322","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12815:34321"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12815:34321":{"id":"2:12815:34321","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12838:8662":{"id":"2:12838:8662","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43907:2954","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12864:29615":{"id":"2:12864:29615","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:3808"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12324:8674","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12891:34329":{"id":"2:12891:34329","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12508:3808","`DoubleEndedIterator`":"2:7900:127","prim@char":"1:12032:451","str::matches":"2:12888:2178"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44143:8759","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:15745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12904:34334":{"id":"2:12904:34334","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12923:34339":{"id":"2:12923:34339","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:3808"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12885:29624":{"id":"2:12885:29624","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42023:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:15745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12897:34331":{"id":"2:12897:34331","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12508:3808","`DoubleEndedIterator`":"2:7900:127","prim@char":"1:12032:451","str::match_indices":"2:12894:34330"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44089:8756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:15745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:35012":{"id":"5:5536:35012","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2026","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2026","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12873:34328":{"id":"2:12873:34328","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12508:3808","str::split":"2:12861:29613","prim@char":"1:12032:451","str::split_terminator":"2:12870:34327"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43989:8750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:15745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12811":{"id":"2:12811","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12812:873","2:12813:2182","2:12814:34320","2:12815:34321","2:12817:34322","2:12820:2944","2:12821:34323","2:12822:339","2:12823:29584","2:12824:2071","2:12826:29581","2:12828:29582","2:12830:29583","2:12832:34324","2:12833:34325","2:12834:2832","2:12835:29606","2:12836:2425","2:12837:2419","2:12838:8662","2:12839:32550","2:12840:32551","2:12841:31937","2:12842:34326","2:12843:32801","2:12844:2284","2:12847:28985","2:12850:28987","2:12853:2734","2:12857:4354","2:12861:29613","2:12864:29615","2:12867:29617","2:12870:34327","2:12873:34328","2:12876:29619","2:12879:29621","2:12882:29623","2:12885:29624","2:12888:2178","2:12891:34329","2:12894:34330","2:12897:34331","2:12900:34332","2:12902:34333","2:12904:34334","2:12906:34335","2:12907:34336","2:12908:34337","2:12911:2090","2:12914:28983","2:12917:29625","2:12920:34338","2:12923:34339","2:12926:34340","2:12929:2051","2:12931:29334","2:12932:29484","2:12933:29335","2:12934:29333","2:12935:29332","2:12936:29487","2:12937:29488","2:12938:29489","2:12939:34341","2:12941:10294","2:12942:34342"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12814:34320":{"id":"2:12814:34320","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492-0:1019:1962":{"id":"0:492-0:1019:1962","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1019:1962","glob":false}}},"5:5535":{"id":"5:5535","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5536:35012","5:5537:2212","5:5540:35013","5:5543:35014","5:5551:35015","5:5552:35016","5:5553:3473","5:5554:2416","5:5555:2415"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:965:1838":{"id":"0:965:1838","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[96,0],"end":[101,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"0:8:1955":{"id":"0:8:1955","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[216,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:12843:32801":{"id":"2:12843:32801","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44213:8764","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12926:34340":{"id":"2:12926:34340","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:3808"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:15745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12894:34330":{"id":"2:12894:34330","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12508:3808","`DoubleEndedIterator`":"2:7900:127","prim@char":"1:12032:451","str::rmatch_indices":"2:12897:34331"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44071:8755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12826:29581":{"id":"2:12826:29581","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42025:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42023:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10597:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10597:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12936:29487":{"id":"2:12936:29487","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:37097"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12861:29613":{"id":"2:12861:29613","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12508:3808","`DoubleEndedIterator`":"2:7900:127","prim@char":"1:12032:451","str::split_whitespace":"2:12839:32550","str::rsplit":"2:12867:29617"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43921:8672","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12939:34341":{"id":"2:12939:34341","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4744:34341"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44220:8706","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:2212":{"id":"5:5537:2212","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12840:32551":{"id":"2:12840:32551","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12839:32550"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44204:8763","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12834:2832":{"id":"2:12834:2832","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12835:29606"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12902:34333":{"id":"2:12902:34333","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12867:29617":{"id":"2:12867:29617","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12508:3808","`DoubleEndedIterator`":"2:7900:127","prim@char":"1:12032:451","str::split":"2:12861:29613"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43939:8675","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:15745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:375":{"id":"0:63:375","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1881,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:86-0:994:2056"],"is_stripped":false}}},"2:12908:34337":{"id":"2:12908:34337","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:3808"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12533:15743","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12933:29335":{"id":"2:12933:29335","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:493-0:404:1963":{"id":"0:493-0:404:1963","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[14,0],"end":[14,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:404:1963","glob":false}}},"2:12836:2425":{"id":"2:12836:2425","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12032:451"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43891:8743","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5543:35014":{"id":"5:5543:35014","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12832:34324":{"id":"2:12832:34324","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12038:1536","str::slice_mut_unchecked":"2:12833:34325","crate::ops::Index":"2:3232:2589"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12813:2182":{"id":"2:12813:2182","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1023:2059":{"id":"0:1023:2059","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"0:86-0:994:2056":{"id":"0:86-0:994:2056","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[21,0],"end":[21,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::internals::case::RenameRule","name":"RenameRule","id":"0:994:2056","glob":false}}},"2:12911:2090":{"id":"2:12911:2090","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:3808"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12820:2944":{"id":"2:12820:2944","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12063:15747"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12917:29625":{"id":"2:12917:29625","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:3808"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42023:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:15745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12942:34342":{"id":"2:12942:34342","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4742:34342"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44238:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12842:34326":{"id":"2:12842:34326","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44185:8761","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:2415":{"id":"5:5555:2415","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12935:29332"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12906:34335":{"id":"2:12906:34335","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12937:29488":{"id":"2:12937:29488","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:37097"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12841:31937":{"id":"2:12841:31937","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44175:8760","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12941:10294":{"id":"2:12941:10294","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4745:10294"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44229:8700","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12879:29621":{"id":"2:12879:29621","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12032:451","str::splitn":"2:12876:29619","self::pattern":"2:12508:3808"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44043:8753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:15745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12839:32550":{"id":"2:12839:32550","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12840:32551"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44195:8762","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12812:873":{"id":"2:12812:873","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12032:451"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12822:339":{"id":"2:12822:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12823:29584","`u8`":"1:12049:1641"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12830:29583":{"id":"2:12830:29583","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10597:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10597:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12824:2071":{"id":"2:12824:2071","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42025:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42023:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10597:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10597:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12828:29582":{"id":"2:12828:29582","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10597:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10597:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12833:34325":{"id":"2:12833:34325","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12038:1536","crate::ops::IndexMut":"2:3236:3415","str::slice_unchecked":"2:12832:34324"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12888:2178":{"id":"2:12888:2178","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12508:3808","`DoubleEndedIterator`":"2:7900:127","prim@char":"1:12032:451","str::rmatches":"2:12891:34329"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44125:8758","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12907:34336":{"id":"2:12907:34336","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12914:28983":{"id":"2:12914:28983","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:3808"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42023:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5551:35015":{"id":"5:5551:35015","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12882:29623":{"id":"2:12882:29623","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42023:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12847:28985":{"id":"2:12847:28985","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:3808"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12934:29333":{"id":"2:12934:29333","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5553:3473":{"id":"5:5553:3473","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12857:4354":{"id":"2:12857:4354","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42025:197","prim@char":"1:12032:451","self::pattern":"2:12508:3808"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42023:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:15745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12823:29584":{"id":"2:12823:29584","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12049:1641"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12837:2419":{"id":"2:12837:2419","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12032:451"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43897:8744","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12932:29484":{"id":"2:12932:29484","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39972:29491","Self::is_ascii":"2:12931:29334"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42023:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39972:29491","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12850:28987":{"id":"2:12850:28987","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:3808"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:15745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12853:2734":{"id":"2:12853:2734","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42025:197","prim@char":"1:12032:451","self::pattern":"2:12508:3808"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42023:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12920:34338":{"id":"2:12920:34338","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:3808"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12528:15745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12929:2051":{"id":"2:12929:2051","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12469:133","`FromStr`":"2:12468:3429"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42168:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12468:3429","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12468:3429","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12938:29489":{"id":"2:12938:29489","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:37097"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12900:34332":{"id":"2:12900:34332","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5554:2416":{"id":"5:5554:2416","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12934:29333"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1841":{"id":"0:0:1841","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[101,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2021\n# use serde_derive::{Deserialize, Serialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.195\")]","#![allow(clippy::branches_sharing_code, clippy::cognitive_complexity,\nclippy::collapsible_match, clippy::derive_partial_eq_without_eq,\nclippy::enum_variant_names, clippy::manual_map,\nclippy::match_like_matches_macro, clippy::needless_pass_by_value,\nclippy::too_many_arguments, clippy::trivially_copy_pass_by_ref,\nclippy::used_underscore_binding, clippy::wildcard_in_or_patterns,\nclippy::unnested_or_patterns,)]","#![allow(clippy::cast_possible_truncation, clippy::checked_conversions,\nclippy::doc_markdown, clippy::enum_glob_use, clippy::indexing_slicing,\nclippy::items_after_statements, clippy::let_underscore_untyped,\nclippy::manual_assert, clippy::map_err_ignore, clippy::match_same_arms,\nclippy::match_wildcard_for_single_variants, clippy::module_name_repetitions,\nclippy::must_use_candidate, clippy::similar_names, clippy::single_match_else,\nclippy::struct_excessive_bools, clippy::too_many_lines,\nclippy::unseparated_literal_suffix, clippy::unused_self, clippy::use_self,\nclippy::wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:964:1830","0:965:1838"],"is_stripped":false}}},"2:12870:34327":{"id":"2:12870:34327","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12508:3808","str::split":"2:12861:29613","prim@char":"1:12032:451","`DoubleEndedIterator`":"2:7900:127","str::rsplit_terminator":"2:12873:34328"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43971:8749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12835:29606":{"id":"2:12835:29606","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12834:2832"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12821:34323":{"id":"2:12821:34323","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12931:29334":{"id":"2:12931:29334","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12844:2284":{"id":"2:12844:2284","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12508:3808"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12513:15744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:964:1830":{"id":"0:964:1830","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[88,0],"end":[93,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:12935:29332":{"id":"2:12935:29332","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:3200:138":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:12310:5537":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"24:3418:3683":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"24:3992:3695":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"2:43921:8672":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:13314:5163":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:44301:15758":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:7284:3979":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:15049:6075":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:11816:5203":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"24:2221:10388":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"23:235:4261":{"crate_id":23,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"17:11269:5470":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:2993:3597":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:3048:5311":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:939:10309":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:12029:5527":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"11:396:5090":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:42456:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"24:4843:3326":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"6:4893:7310":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"5:1151:34277":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:3830:6448":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:3155:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:6929:6538":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:41947:8732":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:1821:10336":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:7342:35894":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:8281:8810":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:2256:8651":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:3236:3415":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:6960:22620":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:7102:22623":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:11605:31247":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:12103:22872":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:8904:10555":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:46502:8152":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:43074:134":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"13:226:6766":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:8237:10436":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:580:6913":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"15:327:10037":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:13961:5781":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:42151:4694":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"24:3180:3675":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"16:6499:6438":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"21:2442:2046":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"5:7534:249":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"24:4839:3341":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"24:4383:3722":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"17:10803:22701":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:11617:8456":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"5:5004:5119":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"24:5047:2532":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"2:41242:3474":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:43096:3549":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"18:699:8433":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:30891:32885":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:13491:5693":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"21:2607:3591":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"17:11743:22839":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:48090:8223":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:44481:8777":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:40721:3503":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:14921:6048":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:13869:5768":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:39607:8698":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:10833:8674":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"9:450:21596":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:13832:5764":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"20:15:8870":{"crate_id":20,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"2:3151:4676":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:12057:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:10051:5452":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:8169:10387":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:10535:10426":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:9651:22687":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:9467:135":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"5:7296:4770":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:23351:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:6079:7587":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:9971:8729":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"5:830:5101":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:3197:137":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:40567:8713":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:48426:8239":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"5:2236:35701":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:588:10293":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:13754:5750":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:16016:6345":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"16:6600:22618":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:42141:3980":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"24:4168:3707":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"16:5648:22610":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:1743:658":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:43664:32802":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:5240:209":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:7577:3467":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"15:288:21704":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:15659:6258":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"24:920:36236":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"1:5568:7615":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:5023:7384":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:6415:8557":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:2990:4327":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:15133:6099":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"11:1896:4768":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:9164:31233":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"24:5558:3397":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"17:15671:6260":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:4:1113":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:5049:6472":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:2062:10315":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"20:843:2665":{"crate_id":20,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"24:4852:3343":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"2:4243:15773":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:44185:8761":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:2421:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:4698:7232":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"24:1525:2052":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"type_alias"},"24:4296:3716":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"24:3452:273":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"2:39636:216":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:2202:10367":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:0:878":{"crate_id":6,"path":["libc"],"kind":"module"},"24:5206:3371":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"17:11041:5478":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:4860:7298":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:10741:3406":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:2600:5154":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:10559:22697":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:12972:5581":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:4625:10451":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"21:2646:258":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"2:46386:8149":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:15384:6165":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:8385:3975":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:1527:216":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:3600:6445":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:13882:5496":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"20:889:2046":{"crate_id":20,"path":["proc_macro2","TokenTree"],"kind":"enum"},"2:43753:15730":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:2380:10380":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:11307:22751":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"24:4947:3355":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"17:14778:6004":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:4182:5119":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:6686:5095":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:13218:5633":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"24:4057:3699":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"2:10945:8675":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:23165:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:12739:117":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:3753:10315":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"24:566:5293":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"24:4922:3332":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"1:12046:796":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:12533:15743":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:11197:8320":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:8991:31029":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:9730:22688":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:8842:8310":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"24:5530:3389":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"18:644:5334":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:15546:6227":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:11497:5486":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:951:10311":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:2339:6388":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:14878:6041":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:12468:3429":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:4639:7709":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:13935:5777":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:42211:3406":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:11453:5200":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:12513:15744":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:557:4556":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"24:5214:3373":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"2:39724:222":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:12930:22706":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:1094:22724":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:1538:3405":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:15374:6160":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:1618:2531":{"crate_id":2,"path":["core","mem"],"kind":"module"},"11:2151:10313":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:13448:5677":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:12035:1150":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:12301:8473":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:5075:7406":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:15287:6141":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:32485:2743":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:8011:10420":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:7828:6599":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:5104:7425":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:40749:8717":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:11625:4717":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"24:4436:3726":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"6:4480:7157":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:15244:6127":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:4755:7244":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"13:110:35846":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:4042:10454":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"24:5024:63":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"17:12872:5573":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:7657:7836":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:12324:8474":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:7895:125":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:2472:6399":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:7450:4563":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:4932:7331":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:13989:5785":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:5921:7500":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:3915:6450":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:13896:5773":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:7580:5189":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"11:2469:4768":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:12009:5478":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:2324:635":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:3182:3579":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:9026:1972":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:11593:8334":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:6357:182":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"24:2080:3410":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"24:4197:3709":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"2:22724:32806":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:3343:4768":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:12410:5546":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:12052:1640":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:7291:3500":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:5746:10544":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:5384:22609":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:495:6863":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:32481:2134":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:9968:22694":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:39778:15833":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:22616:7860":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"21:2655:3589":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"1:4915:10506":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:11313:10534":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:11038:8753":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:9759:22689":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:8453:8108":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:15321:6149":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:41924:32788":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:2548:6402":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:5392:15723":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:12264:8471":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:42575:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:4440:7134":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"20:0:1818":{"crate_id":20,"path":["proc_macro2"],"kind":"module"},"17:15013:6070":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"24:1657:1821":{"crate_id":24,"path":["syn","parse_macro_input"],"kind":"macro"},"2:46186:8136":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:6228:7629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:6169:7617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:3065:5360":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:501:6865":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:41983:8095":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:12230:8462":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:3584:22824":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:2972:2221":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:2474:7849":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:10812:125":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:12445:22882":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"20:781:26909":{"crate_id":20,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"24:5402:2362":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"1:4637:7707":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:8232:10439":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:4309:3581":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:7668:4562":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:6741:7712":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:8239:2743":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:6297:226":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:1710:7056":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"5:1315:9829":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"24:4861:3328":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"6:6071:7586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:12166:22847":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:11817:22842":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:4311:10478":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:6583:8572":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:8363:32665":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:6162:5178":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:5897:7491":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:44716:8798":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:6818:8591":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:44220:8706":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:9106:15744":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:2975:7851":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:6811:10582":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:8009:175":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"24:4538:3308":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"6:4595:7210":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:14156:5828":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:6691:7684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"20:801:8423":{"crate_id":20,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"2:8316:3481":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"24:4250:3713":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"12:0:3169":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:7554:6434":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:3491:32409":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"24:3061:3670":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"2:4224:4675":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"21:2651:3424":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"2:1815:1187":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:42002:8096":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:40373:8700":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:13676:5737":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:2618:6405":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:4461:7144":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:3201:10425":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:40487:8707":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:4939:1100":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:14282:5845":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:5088:6473":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:9094:183":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:12153:22848":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:266:5095":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:6764:7713":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:6696:6517":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:1521:6936":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:10822:8285":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"24:4883:3347":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"6:5867:7474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"21:990:258":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"1:415:181":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:4129:28691":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:1406:152":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:12953:5578":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:11551:15733":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:11701:22838":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:1270:8608":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"20:984:3405":{"crate_id":20,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"17:15224:6120":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"24:4571:1992":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"6:654:16557":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:44195:8762":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"11:1923:2015":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"24:4967:3358":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"24:4951:3356":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"14:31:9823":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:5588:6422":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:7391:22624":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:922:10307":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:48311:8234":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:7523:8613":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:7862:162":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:6531:8570":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:13365:5660":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:43835:8681":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:1545:4768":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"14:165:21685":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"24:3912:3690":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"5:7548:8664":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:10941:22716":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:6012:7553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"24:2925:3664":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"6:4556:7189":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:2979:3671":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"21:1064:2045":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"1:7732:10302":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:2969:21751":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:5712:8493":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"7:0:1686":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:44672:8119":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"24:5564:3383":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"2:6557:3496":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:23196:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:4740:10462":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:44847:233":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:40430:8703":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:12579:15752":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:4998:7373":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:10944:6831":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"20:806:35945":{"crate_id":20,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"24:3316:3678":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"5:903:3406":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:4491:10481":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:5816:8503":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"24:3350:3679":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"17:1203:22729":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:10881:22713":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:30693:4633":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"24:928:36241":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"18:671:26901":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:3278:10422":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"21:140:4804":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"6:4676:7230":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:867:8637":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:11243:22754":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"24:2942:3665":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"24:3027:2664":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"16:7884:22630":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:4986:6470":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:3980:10449":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:1591:6981":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:11945:22806":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"24:1771:10240":{"crate_id":24,"path":["syn","path","printing","span","QSelfDelimiters"],"kind":"struct"},"2:43733:15731":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:3988:10450":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:11340:8333":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:1054:10312":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:46856:8162":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:15235:6124":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:7371:7811":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:5661:8491":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:4902:7316":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"21:478:5082":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"6:4455:7141":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:22267:10388":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:14904:6047":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"24:5542:3393":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"6:5891:7490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:7663:4560":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"5:1024:5095":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:4151:10473":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:1819:4844":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:918:10062":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:2948:115":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"24:1542:3532":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"2:12063:15747":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:14181:5831":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:149:5083":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:6934:7796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:14497:5882":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"23:281:2055":{"crate_id":23,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"6:6943:7799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"21:1021:3590":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"2:41261:3478":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:30699:4634":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:2830:10351":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"17:13083:5600":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:43001:3547":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:10767:8806":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:4776:7256":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:22243:10672":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:13765:5751":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"0:0:1841":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"17:14757:5994":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:7825:3488":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:6426:3470":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"24:4591:3323":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"11:1582:21678":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"5:3581:179":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:11549:8451":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:41027:3517":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"5:7467:8657":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:39702:220":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"24:3248:3677":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"1:8936:10556":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"11:2140:10312":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:6961:7802":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:6927:7793":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:21272:32928":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:46532:8153":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:6804:7721":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:13407:5665":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:8330:7694":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:16180:5650":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"6:5033:7390":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:9954:3558":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"5:2983:26948":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:30785:32887":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"20:722:2045":{"crate_id":20,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"16:6361:8554":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"24:956:3038":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"21:433:5081":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"2:46675:8158":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:13145:1978":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:10667:35913":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:46600:8156":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:16098:6367":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:10097:31243":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"24:4963:3357":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"17:15160:6103":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:5015:7379":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:4700:10507":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:10337:5461":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:7316:35369":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:44911:177":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:43939:8675":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"18:538:5338":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"7:78:21589":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:42417:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"18:531:8426":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:4666:7229":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:43293:8108":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:13856:5765":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:21250:4343":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:4854:7295":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:5419:5452":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:4177:32783":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"24:912:36239":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"24:5359:2341":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"24:3941:3692":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"6:4884:7307":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"11:1603:21679":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"18:652:5334":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:5950:3494":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:12850:5535":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:4212:5119":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:12273:8754":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:46263:8140":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:47246:8184":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:44652:8793":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:4462:6454":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:11369:5485":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:2334:4705":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:15747:6276":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:11536:8450":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:8978:113":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:8207:2954":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:12191:5530":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:21949:7859":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"24:4604:1822":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"17:13273:5641":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:12999:5582":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:32492:32795":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:903:4768":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:4870:7302":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"13:0:3163":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:3482:3555":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:5123:7434":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"24:2602:3652":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"5:3594:3406":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:5009:7378":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"21:2720:3590":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"1:12038:1536":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"24:2019:3408":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"2:43264:8736":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"11:1917:8641":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:4613:6459":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"24:3895:3689":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"17:10172:5456":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"24:5115:2637":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"24:53:2054":{"crate_id":24,"path":["syn","token"],"kind":"module"},"2:44648:8792":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"11:1891:4770":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:9958:212":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:4878:7306":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:9048:31094":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:8858:10557":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:14969:6057":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:7639:7833":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:42074:170":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:1966:204":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:23072:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"24:5387:2646":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"21:244:35972":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"2:10207:8670":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"24:1375:36100":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"17:11978:22804":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"5:1495:10306":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:1528:6939":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:4020:4770":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"4:0:3164":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"6:1596:6983":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:7708:6437":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:11523:8448":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:9952:2582":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:10378:5153":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"5:5344:5095":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:2944:3577":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:12051:1639":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:3091:5314":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:43845:15735":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:3251:22805":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"23:322:2668":{"crate_id":23,"path":["quote","spanned","Spanned"],"kind":"trait"},"2:40772:3508":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:5017:6471":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"24:5515:3386":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"1:7644:4573":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:6861:4775":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:1301:10312":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:12273:5571":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"20:119:8421":{"crate_id":20,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"16:5727:8496":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"21:2257:3427":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"1:1758:10320":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"3:0:478":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:2998:112":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"24:3866:3687":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"1:1063:10313":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:42099:3405":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:7931:3542":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"24:4620:2195":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"5:3607:3410":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:7003:5136":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:8993:3983":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:3677:4770":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"11:490:150":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:42765:3558":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:4557:6457":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:11168:22743":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"5:6117:5119":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:9186:31445":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:21534:7858":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:22632:8685":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:3032:5318":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"20:908:3426":{"crate_id":20,"path":["proc_macro2","Delimiter"],"kind":"enum"},"2:40711:3502":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:4159:10474":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:2670:6407":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:12432:22883":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:13695:5742":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:3230:35381":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:4993:33247":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:7436:6582":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"24:2585:3651":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"1:880:8638":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:11516:10441":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:44516:8782":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:40520:8082":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"24:5426:3381":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"2:5837:3506":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:12828:5571":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:40539:8712":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:10657:5478":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:3936:10446":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"24:98:3860":{"crate_id":24,"path":["syn","token","private","CustomToken"],"kind":"trait"},"2:43825:15736":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:5446:111":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"24:5006:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"1:12056:1246":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:3568:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:7597:35857":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"11:1883:3406":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"24:2704:104":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"1:8551:8307":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:1682:7043":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:12758:5569":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:5877:4770":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:1501:6928":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:44238:8705":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:43272:8737":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:40693:3492":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"24:4930:3333":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"24:1637:3528":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"1:893:4770":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"11:1142:21676":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:7668:7840":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:3251:2015":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"20:904:1966":{"crate_id":20,"path":["proc_macro2","Group"],"kind":"struct"},"2:43897:8744":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"5:6351:10676":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:5004:7376":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:5987:226":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"20:934:2044":{"crate_id":20,"path":["proc_macro2","Spacing"],"kind":"enum"},"16:6041:22615":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"18:113:26889":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:5431:10528":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"24:861:3529":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"5:7346:8656":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:10293:2954":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:5395:10526":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:43907:2954":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:32499:3570":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:12459:5470":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"24:2619:3653":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"6:6798:7719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"24:4934:2246":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"17:15267:6135":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:15184:6111":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:42378:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"18:766:26899":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:2622:9842":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"20:792:258":{"crate_id":20,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"14:221:6719":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:4830:7282":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"24:509:3416":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"2:23134:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:4523:7173":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:15689:6266":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"24:5146:2635":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"1:2354:10371":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:7276:3405":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:1760:10321":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:9021:10070":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:12033:15889":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"24:879:5300":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"17:13633:5726":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:4616:7218":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"18:80:26887":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:4914:7320":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:6666:7666":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:10813:35914":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"24:4325:3718":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"16:7660:6588":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:5632:5179":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:11144:8308":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:363:4572":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:15557:6228":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"18:548:149":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:12584:22884":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:261:35912":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"24:4942:3334":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"24:4610:1983":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"6:6222:7628":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:13787:5758":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:12659:22672":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:6114:7601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:13352:148":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:6376:22617":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"24:4856:3327":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"23:150:4002":{"crate_id":23,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"1:12049:1641":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:14324:5853":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"24:5547:3394":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"1:12054:848":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:6467:8561":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:12510:5549":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1:1562:8641":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:44444:8776":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:4529:7175":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:11170:31451":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:5982:8521":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:12031:1033":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:8115:8623":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:3099:5313":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:11485:22773":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:6901:6428":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"21:2593:3592":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"17:11779:5489":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:1913:17549":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"18:736:26898":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:16032:6350":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"6:4603:7214":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"24:2755:3657":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"24:5210:3372":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"1:0:1528":{"crate_id":1,"path":["std"],"kind":"module"},"1:11045:5196":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"24:2857:3661":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"24:4028:131":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"17:4773:22886":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:15868:6294":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"24:5070:2604":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"24:1484:26925":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"16:536:8481":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:4455:3561":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:5859:7472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:21304:32937":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:11226:22766":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"10:0:3167":{"crate_id":10,"path":["adler"],"kind":"module"},"2:43056:3547":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"20:122:35965":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"17:11991:5525":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:22350:4705":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"24:2806:3659":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"2:3010:5305":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:4050:10456":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:7067:8606":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:9147:8817":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:596:6922":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"24:5256:3376":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"6:4428:7131":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:542:6894":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:14633:5891":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:12614:22703":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:46980:8179":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"24:3435:3684":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"2:1778:634":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"5:7510:8663":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"11:2383:3406":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"14:215:8628":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:7015:6543":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:6711:7690":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:4719:6461":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"9:486:21595":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"24:1652:3541":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"2:44204:8763":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:12042:691":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:1534:3406":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:6568:4794":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:10896:5468":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:2492:131":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:39521:15769":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:11088:5474":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:40494:8708":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:4524:3569":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"14:0:3170":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:1387:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:3888:6449":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:11158:8309":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:7041:8601":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:9474:10383":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:13684:5739":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:8137:3467":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:43764:8113":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:12003:10303":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"5:7338:216":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:46085:8132":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:1439:3410":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:11998:10074":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:22381:10388":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"14:160:9823":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"11:2536:1966":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:2093:4678":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:9891:22671":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"10:36:6773":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:256:35915":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:8308:8289":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:46408:8150":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:15645:6251":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:48212:8226":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:5974:7525":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"11:1107:21675":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:1785:4629":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:23413:7879":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:15279:6138":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"11:710:10061":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:7355:32659":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:3484:3580":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:6868:7762":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:16170:5645":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"6:5130:7437":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:13235:5635":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"24:5368:2344":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"24:5099:2535":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"2:2701:159":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"24:2653:3655":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"17:10510:22696":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:10962:22728":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:7622:7828":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:44417:8775":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:15612:6244":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:4906:10505":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"24:1994:3405":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"1:12048:793":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:8213:8672":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:42772:3559":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"18:481:8424":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:12560:22914":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:40614:5143":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:40551:32803":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:3510:10407":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:13026:5588":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"20:775:3427":{"crate_id":20,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"1:4469:10480":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"24:3854:3686":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"1:8157:8285":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:11476:10442":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:44953:8802":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"16:4585:6458":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:7616:7827":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"24:5142:3365":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"5:786:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:5995:8482":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"21:959:4810":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"5:1115:34276":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:7534:6433":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"24:4494:2658":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"2:44529:8786":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:5140:7438":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:40849:3513":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"23:148:4003":{"crate_id":23,"path":["quote","__private","HasIterator"],"kind":"struct"},"17:11001:22722":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:4635:3574":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:10578:4559":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:43256:8734":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:8984:4553":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:10312:5150":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:12180:22874":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"24:260:9821":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"24:4866:3344":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"6:4628:7227":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"21:216:10019":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"17:12718:22704":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:7599:5191":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"24:4887:3348":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"24:1940:3403":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"2:3203:139":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:2766:6411":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:5941:7513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:12508:3808":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"21:2659:3405":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"2:21919:10388":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"6:5085:7411":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"24:3878:3688":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"24:4507:3869":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"24:4998:2589":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"17:10775:22700":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"18:719:5353":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:4800:7267":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"18:582:4343":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"24:5431:3380":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"5:3225:8639":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:5673:6423":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"11:2548:6768":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:10569:35921":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:595:2059":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"0:965:1839":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"6:1514:6934":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:6893:6535":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"21:0:1174":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"2:9956:3559":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:41840:2045":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:12522:8435":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:10242:5458":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:11395:22760":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:6189:8551":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:6569:6426":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:40452:8705":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"24:4594:3324":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"1:4569:10498":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"21:2725:2046":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"1:8300:10440":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:5068:7403":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:16004:6343":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"5:1505:10061":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:13395:5664":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:8814:8308":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:44668:8797":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"11:2554:35836":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:2352:4696":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:3020:5307":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:6687:8576":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:13297:5645":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:4921:6468":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:13724:5747":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:11537:10443":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:7540:9847":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:3044:5310":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:836:3406":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:7462:6583":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:15329:6150":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:44175:8760":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"24:4874:3346":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"2:42236:202":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:12596:22702":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:1969:203":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"18:609:35938":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:9196:8324":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"24:4122:3704":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"1:6610:5184":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:2336:4706":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:14989:6065":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:41003:3515":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:7026:5187":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:3419:15770":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:5031:10429":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:45955:8127":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:11065:5472":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:40624:10366":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:5574:6419":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"22:0:3295":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"11:742:10062":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:1072:9829":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:14312:5851":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:3057:3708":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:4610:7216":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:11476:8642":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:9900:3555":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:11459:22796":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:9860:22692":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:3074:5295":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:6346:10036":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:6128:7606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:7900:127":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:22790:8690":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:43281:153":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:7375:3405":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:7365:7809":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:21924:10590":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:14359:5865":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"24:3231:1993":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"1:3366:3474":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"24:5151:1978":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"6:6086:7588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:4488:7159":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:13182:5628":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:5961:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:6844:6529":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"24:4419:3725":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"2:39680:221":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:44369:8774":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"24:95:10388":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"24:3299:1961":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"17:12127:22850":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:22425:10667":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:14765:5997":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:12053:1637":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:4972:419":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"5:1685:5095":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:11469:22797":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"15:306:21705":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:4742:10464":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:11690:22837":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"21:2318:2372":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"2:30430:10444":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:9678:22675":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:22204:10671":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"24:4308:3717":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"19:0:1130":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"24:1369:3546":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"17:12486:5548":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:10167:153":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"24:952:3366":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"6:4566:7196":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:12140:22849":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:10202:10393":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"24:2275:10388":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"1:8802:205":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:14385:5867":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:15519:6218":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:21460:10388":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:44125:8758":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:3049:21752":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:42160:4564":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:47170:8182":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"9:0:3166":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:9943:22674":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:40833:3512":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:2958:2509":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:3402:260":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:46023:8130":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:1897:7855":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:42108:3979":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:11675:5553":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:12324:8674":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:40671:3491":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:3193:2529":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:40440:8704":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:4798:5171":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:42168:232":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:16049:6352":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:5666:5119":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:12356:8476":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"24:345:36235":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"17:11439:22767":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:4038:10453":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:6889:7776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"11:299:8631":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:12572:22885":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:2368:10374":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:3670:10438":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:22745:32787":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:32445:6770":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:47092:8181":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:15943:5618":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"15:394:21714":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:40781:3518":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:1576:6969":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"24:5216:3369":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"2:31289:4343":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"21:2791:2665":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"17:11755:22840":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"24:2993:3668":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"2:2704:141":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"24:3078:3671":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"5:2703:7852":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:32506:8697":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"11:434:35840":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:10915:22714":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:9034:8316":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:11034:5195":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:3160:32295":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:15117:6095":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"24:2823:3660":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"2:48230:8227":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"24:960:3367":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"16:2722:6409":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:0:533":{"crate_id":2,"path":["core"],"kind":"module"},"2:40468:8706":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"21:2770:2044":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"2:8319:3484":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:10137:5455":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:11113:22720":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"11:2352:10313":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:12746:8478":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:11507:5487":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:13383:5661":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:21515:10584":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:9099:240":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"24:5536:3392":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"1:5500:10529":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"24:5341:3377":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"17:12548:22880":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:10035:5451":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:9943:117":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:43879:8742":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:5760:22612":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:43019:32890":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"24:5534:3391":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"1:5571:10530":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:11981:9594":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:8403:8299":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:22073:10586":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:7269:35865":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:10618:35918":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:42495:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:7503:6432":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:11294:22752":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:41013:3516":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"24:4878:3329":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"16:6279:6487":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:9104:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:40460:8700":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:16087:6366":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:26260:272":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:14194:5833":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"24:4448:3727":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"2:43816:8680":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:14509:5889":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"24:3112:3673":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"24:5407:3379":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"2:42300:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:10790:8672":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:22430:10665":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"6:5885:7487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:4381:5121":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:5905:8512":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:7090:8607":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:4647:7228":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:40501:15789":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:8281:6641":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:2321:6386":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:48174:8225":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"24:2908:3663":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"1:12039:1622":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:11584:15734":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:2707:264":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"24:4911:3352":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"17:10950:22734":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:14662:5911":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:14934:6053":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:44143:8759":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:13463:5683":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:4745:6462":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:3103:5316":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:48259:8230":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:533:6888":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"24:1523:3418":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"2:40731:3504":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:3232:6385":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"21:2786:1978":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"6:7679:7841":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:5939:8518":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:7953:3486":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:44495:15759":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:10155:2349":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:8220:8760":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:3169:123":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:2183:8646":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:40:4684":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:10471:35911":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:5634:8487":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"24:2789:3658":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"2:45931:8126":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:40379:8701":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"18:614:35931":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:401:22685":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:44928:8801":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"24:5397:2361":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"16:2526:6401":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:6983:9846":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:43031:6613":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"24:5552:3395":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"18:96:26888":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:15842:5601":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:2518:10418":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:5388:15722":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:6721:22619":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:2586:5167":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:39972:29491":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"24:4915:3331":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"2:30727:32884":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:13285:5644":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:3764:6446":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:6560:5085":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:15855:5615":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:7717:10301":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:3036:3450":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"24:2687:2026":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"17:16109:6368":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"2:40792:3509":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:6596:10551":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"16:4053:6451":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"14:7:9823":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:44338:8771":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:5650:4774":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"0:964:1832":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"6:4764:7249":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:281:2026":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:6456:8560":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:13254:5640":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"5:1455:3405":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:11714:22803":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"21:183:4419":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"2:3095:5315":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:0:3173":{"crate_id":17,"path":["object"],"kind":"module"},"5:4252:3406":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"11:875:10310":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"24:5532:3390":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"16:8072:6635":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"24:4465:3728":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"6:6898:7779":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:2996:2004":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:3040:5309":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"11:364:5088":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:3797:6447":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:123:16201":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:15480:6203":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"11:430:35839":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:21641:10585":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"11:351:35832":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"16:8181:6439":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"20:738:1978":{"crate_id":20,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"17:10726:35908":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:1040:8608":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:7901:4836":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:8973:10068":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:12033:1657":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"18:660:26900":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"21:1401:2059":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"5:6871:4776":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"11:700:3405":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:7006:22622":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:2406:6396":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"24:4004:3696":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"5:2154:8644":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:7694:6436":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:7582:6584":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:10988:22723":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"24:4891:3349":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"2:9950:3550":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"18:727:5356":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:12047:797":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:11051:5197":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:6059:7579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:7838:4958":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:3837:10443":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"21:107:4801":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"24:128:1966":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"5:7618:4768":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:11619:8835":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:555:6900":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:2946:251":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:12366:22876":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"20:878:258":{"crate_id":20,"path":["proc_macro2","TokenStream"],"kind":"struct"},"9:177:10052":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"11:837:10307":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:3394:5119":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:7360:35874":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:13162:5618":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"11:1087:35837":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:11563:8452":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:10925:22715":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:5969:7524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:13112:161":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:14413:5871":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"20:732:1966":{"crate_id":20,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"11:844:10308":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:4231:10477":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:7054:8603":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:10355:135":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:23858:242":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:4989:7367":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:4388:7098":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"24:3924:3691":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"2:3052:5312":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"18:636:5352":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:8545:3406":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"24:5241:2363":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"1:12055:1696":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:41777:8086":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"5:7634:4769":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"24:1169:8386":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"24:1166:8385":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"6:489:6860":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:11215:8332":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"24:2959:3666":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"5:7434:3461":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:43515:8741":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:10207:5457":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:6644:239":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:10780:8826":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"24:4904:3351":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"24:1817:1971":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"17:9790:22690":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"18:507:5334":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"24:5204:2186":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"24:1908:3402":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"6:6813:7724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:8205:22633":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:621:9837":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:7318:6565":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"18:690:8432":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:1632:7013":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:6742:8577":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:40824:3511":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"24:4069:3700":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"9:507:6834":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:2574:6403":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"11:1676:5092":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:48028:8222":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:15079:6086":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"11:774:8637":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:3443:10385":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"24:563:8384":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"24:5094:3363":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"20:834:1978":{"crate_id":20,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"1:6146:5163":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:4364:7080":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:43047:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:44837:225":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"16:7651:22628":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:6513:8562":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:7865:8807":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"14:202:2412":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:48349:8236":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:3738:3542":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:4641:6460":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:12396:5543":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"11:856:10309":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:723:150":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:47778:8219":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:1873:9839":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"5:7367:3405":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:6425:8558":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:15:2807":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:40863:3514":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:11590:8454":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:5308:126":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:3166:28934":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:5072:854":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:22699:7865":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"24:4991:2001":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"16:8154:22631":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"18:0:3174":{"crate_id":18,"path":["memchr"],"kind":"module"},"24:3197:3676":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"17:15087:6089":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"21:367:4795":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"17:14485:5538":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:9602:32667":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:1536:10314":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:2658:10388":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:4686:7231":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:39799:7954":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"24:2840:1991":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"2:2778:122":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:4806:6464":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:13478:5689":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:16062:6358":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"18:707:8435":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:48250:8229":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"24:4597:1995":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"6:5982:7530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:3232:2589":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:46208:8137":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:12037:1503":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:46578:8155":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:14087:5814":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:8292:10471":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"20:950:1978":{"crate_id":20,"path":["proc_macro2","Ident"],"kind":"struct"},"20:708:3424":{"crate_id":20,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"2:3811:3405":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:21287:32936":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:3735:10441":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:637:10296":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"24:5510:3385":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"2:43743:8679":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"24:4955:3335":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"17:12335:5538":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:42091:3410":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:8286:10479":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:2418:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"11:102:8630":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:12536:22881":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:12032:451":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:23258:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"16:2832:6414":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:44549:8787":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:2428:6397":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"24:153:1972":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"11:1903:8639":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:9415:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:1550:8639":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:13334:5651":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"24:3265:259":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"16:7722:6427":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:39660:218":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:40680:3501":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:507:6868":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:6047:7574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:15631:6249":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:6401:6420":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:10597:245":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:40702:3493":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:16076:6361":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:2698:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:12244:8466":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:7689:4559":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:12014:31447":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:13099:146":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:4434:7132":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:13909:5774":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:22159:10670":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:11052:22699":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"24:5001:3337":{"crate_id":24,"path":["syn","expr","FieldValue"],"kind":"struct"},"5:4865:223":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:3323:10415":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:6540:9844":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:1424:3406":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:3069:4264":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:4383:10472":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:8097:8620":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:5128:210":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:4351:7071":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"24:3214:2713":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"24:5077:3364":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"16:5612:6424":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:482:5165":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:3500:10386":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:21260:32928":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:3163:28924":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:4964:3971":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:475:1967":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:7380:31051":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:14057:5795":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"24:4477:3729":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"17:10315:5460":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:4028:10452":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:41269:3480":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"24:4971:3359":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"16:0:3172":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:2504:6400":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"20:698:8422":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"16:6226:22616":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:46226:8138":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:1541:4770":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:4814:7273":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:9069:8319":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:40763:3507":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:14896:6046":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:2380:6395":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:12036:338":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:1567:2015":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"20:680:3542":{"crate_id":20,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"24:4354:3720":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"20:360:3424":{"crate_id":20,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"1:11612:8835":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:2440:110":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"18:590:5341":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"11:1066:21674":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:6913:7784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"11:2403:3410":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"5:2048:3542":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:14208:5834":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:4579:3571":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:4401:7108":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:13202:5629":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"24:3163:234":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"18:599:5297":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:4588:3572":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:2596:6404":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:41236:3472":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:46356:8148":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"14:40:1978":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:307:1587":{"crate_id":1,"path":["std","thread"],"kind":"module"},"1:5825:5173":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:640:10297":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"11:1910:8640":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"21:2519:3591":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"2:32593:4331":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:46934:8178":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"24:2891:137":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"6:7633:7832":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:13663:5735":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"16:5830:8504":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:8195:8627":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:43303:8738":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:11234:158":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"23:239:4263":{"crate_id":23,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"2:8995:3981":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:3930:10447":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:7544:8614":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:15725:6270":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:11399:22749":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:1556:8640":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:569:6908":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:4783:7257":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:10872:15732":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:11382:8832":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:10974:5470":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:15212:6119":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"21:2740:1966":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"2:48296:8233":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:6543:10549":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:42534:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:15903:6324":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"16:2644:6406":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"24:2087:3412":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"24:4139:3705":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"2:22707:7866":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:9479:5193":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:12418:22890":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"24:4918:3353":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"16:2450:6398":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:10608:22698":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:4908:7317":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:45911:8125":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"24:4900:3350":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"24:4576:2037":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"24:2721:2360":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"6:7702:7847":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:3015:5306":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:44323:8765":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:7610:7826":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:44025:8752":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:15311:6146":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:12213:8746":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"8:0:3165":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:4824:7279":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"20:704:258":{"crate_id":20,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"21:2394:2665":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"2:22563:8684":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:4366:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"18:521:26902":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"20:825:1966":{"crate_id":20,"path":["proc_macro2","imp","Group"],"kind":"enum"},"2:21318:32923":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:5082:31244":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:4774:6463":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:11321:5478":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:62:16146":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"16:4344:6452":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:563:6905":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:6968:22621":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"23:407:4142":{"crate_id":23,"path":["quote","__private","RepInterp"],"kind":"struct"},"1:6896:5186":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:12250:8751":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"18:574:5334":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:10716:22699":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:5152:7443":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"5:1131:35364":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:15062:6081":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:14296:5847":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:11632:8457":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:8274:8809":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:31261:202":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:12290:8472":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"16:5435:6477":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:12797:5570":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:42261:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"5:3217:8641":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"24:4407:3724":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"1:5625:226":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:14099:5816":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"24:2874:3662":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"24:5163:2319":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"1:8476:8302":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:7645:7834":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:39785:7953":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:13056:5592":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:4578:7202":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"24:3401:3682":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"24:4631:2318":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"17:12202:22875":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:8866:3405":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"23:0:1226":{"crate_id":23,"path":["quote"],"kind":"module"},"2:43724:8677":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"24:5392:2358":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"17:11767:22841":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:11126:22719":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:10520:35909":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"18:624:35929":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"24:3044:3669":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"17:14122:5825":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:40388:8702":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:8828:8309":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"24:620:3406":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"1:10953:10529":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:15037:6072":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:15535:6222":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:7604:7825":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:15733:6273":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:2711:263":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"24:5356:2629":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"17:15493:6209":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"24:1102:2055":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"2:2487:207":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:15356:6157":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:46456:8151":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"24:4110:3703":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"17:11141:22742":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:23227:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:12050:1638":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:15566:6230":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:13097:5601":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"24:4238:3712":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"1:10802:136":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:11370:9593":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"24:677:36093":{"crate_id":24,"path":["syn","expr","precedence","Precedence"],"kind":"enum"},"17:10067:5453":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:3732:10442":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:44691:128":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:5051:31244":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"24:5539:2536":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"1:7915:28922":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:14251:5840":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:15125:6097":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:14822:6035":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:9813:22691":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"23:38:3043":{"crate_id":23,"path":["quote","format_ident"],"kind":"macro"},"2:40644:10384":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"20:955:2665":{"crate_id":20,"path":["proc_macro2","Literal"],"kind":"struct"},"17:15710:6269":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:44890:9583":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:5403:5451":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"24:561:134":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"2:22672:8688":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:1496:6926":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"7:31:21582":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:22684:32799":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"24:944:36237":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"2:2695:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:22797:7878":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:41227:3470":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"24:1442:2050":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"2:42083:3406":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:2696:6408":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:4777:717":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"24:5353:209":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"2:3064:5296":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:10432:35922":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:48270:8231":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:12684:5419":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:15003:6069":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:11388:8833":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"24:2670:3656":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"2:21289:32934":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:39746:3454":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:12255:8470":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:8920:10554":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:5798:6480":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:6248:7643":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"20:928:2372":{"crate_id":20,"path":["proc_macro2","Punct"],"kind":"struct"},"2:41794:8088":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:46055:8131":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:10422:22695":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"24:1479:26924":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"2:4608:3573":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"24:3837:3685":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"17:13121:5615":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"9:52:10041":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"5:6013:16120":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"23:11:3434":{"crate_id":23,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"2:42653:10066":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:13161:211":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:22:731":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"24:5555:3396":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"5:6484:4770":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:3994:10451":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"24:877:10388":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"24:4562:3310":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"2:40475:15788":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:14373:5866":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:5963:22613":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:43971:8749":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"24:4831:3339":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"2:22510:8683":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:4527:6456":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:10321:111":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:7768:6425":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:8493:10520":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:8959:8315":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:533:4554":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"5:6604:3405":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:16160:6378":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"11:687:3410":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:4710:7233":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:2228:22772":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:3966:10448":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:14455:5875":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:6386:6492":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:692:116":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:13407:4682":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:10338:31160":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:22648:7861":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:10986:8310":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:2864:6415":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:3032:6440":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"20:815:2045":{"crate_id":20,"path":["proc_macro2","imp","Span"],"kind":"enum"},"1:357:4571":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:6156:8548":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:11194:22744":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"11:673:3406":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"20:744:2665":{"crate_id":20,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"16:6083:21723":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:13948:5779":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:8294:134":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:14698:5942":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:9899:232":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"1:6070:5174":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"24:3958:3693":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"11:328:8634":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"18:564:5340":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:14843:6040":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:40740:3505":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:46156:8135":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"24:2011:3406":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"24:4908:2320":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"5:3818:4768":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:10792:8244":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:48239:8228":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"5:6842:4774":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:11604:8455":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:44660:8795":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:3184:3406":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:4549:7186":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"24:1792:10241":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"6:6819:7725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:22296:4705":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:44855:213":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:21643:7858":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:44352:8773":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"24:559:232":{"crate_id":24,"path":["syn","error","Result"],"kind":"type_alias"},"1:10762:8820":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"6:4375:7088":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:11178:8119":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:1902:10348":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:44940:4681":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:7871:3487":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:15589:6243":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:6171:212":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:12600:134":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"24:2138:2602":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"2:2943:3596":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:119:16200":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"24:288:36283":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"6:1507:6931":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:2523:201":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"16:7621:22627":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:14266:5844":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:13309:5648":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:7792:22629":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:3239:10426":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"24:4987:3362":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"17:10102:5454":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:3460:22808":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:10430:10531":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:6352:8553":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:23382:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:7692:7845":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:2031:22755":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:7677:216":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:40814:3510":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:3001:4330":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"24:2738:114":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"11:1160:9829":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:47010:8180":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"24:1967:3404":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"11:2562:6771":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:14470:5879":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:11666:8461":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"5:886:5103":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:42023:200":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:46107:8133":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"24:4544:2179":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"1:10831:31448":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"5:4050:5095":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:13742:5748":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:5322:6475":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:44071:8755":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:4383:3544":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:6682:7678":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:12387:22877":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:12784:8479":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:10757:8818":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:2907:6417":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:790:5098":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:7738:10338":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:13347:5652":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:4496:7161":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:11426:22795":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:4889:6467":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:6563:8668":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"24:2268:2668":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"5:7422:3460":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:8994:3982":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:6837:7736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:2284:21724":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:4703:10480":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:6017:22614":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:5971:5179":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:8850:3406":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:44636:8789":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:40801:3495":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:21961:32926":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:6249:5179":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:16146:6377":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"11:2542:6767":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"11:832:10306":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:15980:6338":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"5:7028:5139":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:6332:6418":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"24:2976:3667":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"2:3329:217":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"24:5417:3382":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"24:5065:2645":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"24:5126:3039":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"6:1718:7060":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:22071:10388":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:8562:8814":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:12044:798":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:14001:5786":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:43989:8750":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:13976:5784":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:11727:22819":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:47216:8183":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"24:4983:3361":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"17:12345:5541":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"23:345:2666":{"crate_id":23,"path":["quote","quote_spanned"],"kind":"macro"},"1:2911:5170":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"11:1728:152":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:3241:10427":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:14399:5868":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:4841:7290":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:14145:5826":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:6530:5095":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:4105:5119":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:23103:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"24:3975:3694":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"16:7568:6435":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:44664:8796":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:15192:6112":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"11:1566:21677":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:4808:7271":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"21:1200:214":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"1:9128:8320":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:3108:5317":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:4189:32751":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"24:610:3405":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"9:426:21598":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"5:7284:8655":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:41251:3476":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:12091:22871":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:2426:3179":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:3447:3578":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"24:5561:66":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"16:8050:3309":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:43865:8115":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"11:2423:3405":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"17:14950:6056":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:7513:8612":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:44043:8753":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:6136:7608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:41811:10437":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:4584:7205":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"11:2443:4770":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:3407:143":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"11:123:5086":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:43891:8743":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:11932:22807":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:42614:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:11307:8827":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:3315:6443":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"24:936:36240":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"17:11027:5442":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"11:1051:10313":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:42758:3550":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:5829:7447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:2946:134":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"5:2973:35363":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:46753:8160":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:4411:5119":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:5780:10067":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:11014:22721":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:7613:22626":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:3005:3449":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:22811:8693":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:8535:8811":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"24:1527:3531":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"2:11052:15739":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:10852:22712":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"11:2369:21680":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"24:4156:3706":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"2:7821:3489":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:8167:22632":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:2944:232":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:9109:158":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"23:78:2047":{"crate_id":23,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"17:11155:8443":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"21:404:35971":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"17:10016:22669":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:4543:7183":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:47280:8185":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"23:46:3435":{"crate_id":23,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"6:1639:7017":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:5154:5125":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:15345:6153":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:22761:32786":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:6100:7599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"21:2549:4793":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"6:5146:7440":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:43496:8112":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:10738:10509":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:1883:4720":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:30715:3547":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"5:3191:8640":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:40873:3498":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:13134:32468":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:2788:6412":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:7136:28695":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:1570:6967":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:43311:8739":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"24:4342:3719":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"17:14021:5789":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:6204:10021":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:7598:7824":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:7858:142":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:3026:5308":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:4201:107":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:21521:10587":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:2305:21749":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:2659:15794":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:11645:8458":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"16:6318:6490":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"24:4081:3701":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"6:4506:7167":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:6753:8578":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:14439:5873":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:574:6910":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"24:5042:1986":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"21:1834:4791":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"1:12043:693":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:2169:22784":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:5807:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:2744:6410":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"21:53:4794":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"17:15507:6215":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:7474:22625":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"11:811:4768":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:8006:10072":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:11066:15738":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:8326:10508":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"18:755:8442":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:15301:6143":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"24:3282:260":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"6:4789:7260":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:10765:3410":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:5955:7523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:5866:8510":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"11:800:4770":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:504:4549":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:48364:8237":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:9607:10064":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"23:344:1226":{"crate_id":23,"path":["quote","quote"],"kind":"macro"},"17:12474:5478":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:10410:5158":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:42227:3405":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:7343:7808":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:48334:8235":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:13516:5697":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:22336:10674":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"23:35:10388":{"crate_id":23,"path":["quote","ext","private","Sealed"],"kind":"trait"},"24:5411:2533":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"2:41213:8724":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:8796:10531":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:3085:3723":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"21:2030:4792":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"24:5212:3374":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"2:9420:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:9624:22668":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"24:4938:3354":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"2:13186:15797":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:4949:6469":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:48387:8238":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:9946:117":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"17:4928:22891":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:7923:9843":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:8891:8312":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:1286:10313":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:47888:8220":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"24:4395:3723":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"6:4449:7139":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:1546:6950":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"24:4628:2239":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"1:3280:10423":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:914:10061":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:2205:4711":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:14426:5872":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:9960:3556":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"11:787:8638":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:43803:15727":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:212:4686":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:4417:6453":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:11800:5491":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:10473:5194":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:16134:6374":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"5:3196:35387":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:13419:5666":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"5:7267:4683":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"24:3129:3674":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"16:6243:2008":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:11024:8752":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"24:4279:3715":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"2:40416:8081":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:2370:10375":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:6792:8590":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:11345:5483":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:6718:7694":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:42751:2582":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:4092:3410":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:6879:6533":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:5415:10527":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:6781:7714":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:4444:5121":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:39620:219":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:44089:8756":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:12528:15745":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"24:4566:3311":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"11:883:10311":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:1906:4719":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:7878:136":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"5:3687:5095":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:2933:21750":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:3461:6444":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:634:9830":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:7754:9838":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:3425:8287":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:15367:6158":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:10076:10330":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:15680:6264":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:10840:31450":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:14887:6045":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:4835:6465":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:8001:31238":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"11:2304:8608":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:22823:10445":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:11355:8830":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:10785:35910":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"18:515:5337":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:39560:4677":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"18:491:8425":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:5381:10525":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:15961:5628":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:13322:5650":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:13584:5701":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:10095:28700":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"24:5246:3375":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"2:47966:8221":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:9962:3557":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:44640:8790":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"3:234:232":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:41220:3468":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"24:0:1819":{"crate_id":24,"path":["syn"],"kind":"module"},"2:3392:15832":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"24:4214:3710":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"21:2616:8420":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"2:44506:8778":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"24:904:36238":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"1:8872:8311":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:4738:7235":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:7637:3469":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:10910:15740":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:22282:10673":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"24:5162:2055":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"24:3010:2363":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"24:1173:8388":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"15:0:3171":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:4821:10461":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"5:1486:8638":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:15253:6128":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:44898:8122":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"24:5129:2113":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"1:7855:8244":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"5:7523:5126":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:40651:3490":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:7128:8316":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"11:2231:8642":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:6263:7654":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:4460:3562":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:4724:7234":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:3079:3721":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"24:1659:2053":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"2:4340:3582":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:6159:7614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"24:2568:3730":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"2:10983:15737":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:6430:10546":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:10247:10533":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:6120:7604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:5743:8498":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:44728:15928":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"24:4016:3697":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"2:46776:8161":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:12921:5538":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:6959:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:9918:140":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:7643:10388":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:4167:10475":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:40534:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:4497:6455":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:12898:22705":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:44656:8794":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:7848:8806":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"24:96:4401":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"17:511:22686":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:5696:22611":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"11:2326:10312":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"5:7330:3405":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:3199:10424":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:6700:7685":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:44229:8700":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"24:4533:3309":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"2:3413:15771":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:645:10298":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:7843:10383":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:1537:6944":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:44213:8764":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:4745:7237":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:5111:7428":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:14786:6005":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"24:4848:3342":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"1:8146:8284":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"5:7306:5106":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:2947:250":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:7556:7823":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:15294:6142":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:4977:7358":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"21:2285:1966":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"1:2200:135":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"24:5568:3384":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"2:8325:3485":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"21:2344:1978":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"6:483:6857":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:7497:8660":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:48136:8224":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:43511:8740":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"21:2706:2045":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"2:1692:5119":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:22294:33085":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:14346:5864":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:12052:5528":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:3655:5365":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:588:6918":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:14041:5790":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:11412:22748":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"24:5573:2534":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"2:46245:8139":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:40400:32773":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:1734:7065":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:2359:6394":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:4451:227":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:40581:10353":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"16:6545:6494":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:2936:243":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:13809:5759":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:2953:253":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:5117:7431":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:527:6885":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:849:3410":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"21:648:3593":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"16:6268:35893":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"24:5120:2640":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"6:1558:6959":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:48285:8232":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:435:5405":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:5992:5125":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:2197:22750":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:7529:2059":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:8134:8626":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"14:187:21692":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:10940:9838":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:21462:10588":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:10532:10424":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:15177:6110":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:4968:7352":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:7782:8615":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:2209:10368":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:5052:7398":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:46310:8141":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:9948:126":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:2789:134":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:12115:22873":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:6915:6429":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:42339:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"24:4835:3340":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"17:12380:5542":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:1674:7042":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:11256:22753":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:14235:5838":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"24:4267:3714":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"1:4180:10476":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:2662:10419":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:12049:9835":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:13504:5694":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:5363:6476":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:10587:10388":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:12045:795":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:15432:6202":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:13707:5744":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:11958:5523":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:10538:10422":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:5992:7537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:11215:8446":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"5:2144:4549":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"11:2124:8608":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"9:357:21611":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:12030:401":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:46554:8154":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:15337:6152":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:6485:6421":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"9:393:21597":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:43715:8676":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"24:4895:3330":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"1:5639:8803":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:3432:33235":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:8190:3501":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"24:2286:5302":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"1:945:10310":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:5761:5119":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:9559:22670":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:21306:32931":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:4862:6466":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"24:4975:3336":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"20:515:3424":{"crate_id":20,"path":["proc_macro2","LexError"],"kind":"struct"},"1:5753:10545":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:1516:10062":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:909:10306":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:9747:3548":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:13648:5730":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:4744:10465":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"24:3333:2015":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"2:7185:2792":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:1789:4768":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:4635:7705":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:21632:10388":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:1703:7053":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:2881:6416":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:12289:8757":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"24:253:9820":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"17:15027:6071":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"24:1569:2990":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"23:504:4257":{"crate_id":23,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"17:14170:5830":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"24:337:3542":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"23:272:2055":{"crate_id":23,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"17:15200:6113":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"20:883:2045":{"crate_id":20,"path":["proc_macro2","Span"],"kind":"struct"},"2:2529:208":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:7388:7822":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:928:10308":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:6658:7661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:12077:22862":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"24:4180:3708":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"6:1650:7025":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"24:3146:3570":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"9:237:8108":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:11449:5329":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"24:3367:3680":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"11:0:3168":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"18:681:8429":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:10159:149":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"24:4624:3325":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"16:7492:8609":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"10:44:6774":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:4922:7325":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"24:5208:3370":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"2:23320:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:8226:10440":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:4516:7170":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"24:4098:3702":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"2:41754:167":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:4473:7153":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"24:2636:3654":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"17:13922:5776":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:22396:10666":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:15990:6339":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:9918:22693":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:46722:8159":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"20:712:3590":{"crate_id":20,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"16:2810:6413":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:12220:5535":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:8200:3515":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:9014:31213":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"11:1887:3405":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"24:4827:3338":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"6:5044:7396":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:683:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:9274:4844":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:859:3405":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:30659:4632":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:4535:7178":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:47636:8218":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:7736:6591":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:4947:7337":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"5:7559:9831":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:46624:8157":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:6107:7600":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:16123:6372":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"11:1025:10312":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"24:5434:1961":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"24:4226:3711":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"2:21513:10388":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:1691:7049":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:5928:7504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:10968:31231":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:6261:10020":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:6373:3519":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:46001:8129":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"24:4870:3345":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"1:1796:10330":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"24:4045:3698":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"1:6194:10071":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"24:3095:3672":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"1:6466:5183":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:5910:7492":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"11:1007:8608":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:42219:3410":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:23289:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:10395:5154":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:45977:8128":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:7651:7835":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"11:2569:3460":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"21:2745:3426":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"2:4534:3570":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:1604:6988":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:5121:6474":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:13303:113":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:1909:704":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:47430:8186":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:15101:6092":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"24:3384:3681":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"5:1477:8637":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"21:2765:2372":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"24:89:1972":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"17:11576:8453":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:8352:8290":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:548:6897":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:1664:7036":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"9:330:6811":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:14221:5835":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:7407:3464":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:46125:8134":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:12701:5567":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:1973:185":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"24:4979:3360":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"2:4811:15782":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:11657:8460":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:11290:5198":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:41960:8809":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:44644:8791":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:4847:7293":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:42991:8100":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"6:1697:7052":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"24:4520:2311":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"24:5527:3388":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"24:4371:3721":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"16:7862:8616":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:6944:35856":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:7906:8808":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"24:5524:3387":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"2:43790:3490":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"24:2772:122":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"17:15527:6221":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:15108:6094":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:7481:32803":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13436:5674":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:4955:7342":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"}},"external_crates":{"23":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.35/"},"20":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.76/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.12/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.48/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}