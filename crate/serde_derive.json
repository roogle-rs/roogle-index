{"root":"0:0:1704","crate_version":"1.0.164","includes_private":false,"index":{"2:12191:35611":{"id":"2:12191:35611","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:14376"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:14374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12102:2350":{"id":"2:12102:2350","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11917:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43480:8380","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12108:33230":{"id":"2:12108:33230","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43796:8400","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12079:35589":{"id":"2:12079:35589","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12095:27002":{"id":"2:12095:27002","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12085:2773":{"id":"2:12085:2773","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11345:14377"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:345":{"id":"0:63:345","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1805,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:85-0:958:1911"],"is_stripped":false}}},"2:12103:8301":{"id":"2:12103:8301","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43490:2786","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12089:1926":{"id":"2:12089:1926","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41537:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12147:35598":{"id":"2:12147:35598","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12165:35603":{"id":"2:12165:35603","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12169:35605":{"id":"2:12169:35605","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12171:35606":{"id":"2:12171:35606","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12122:4130":{"id":"2:12122:4130","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41537:179","prim@char":"1:11917:418","self::pattern":"2:11778:14376"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:14374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12199:4448":{"id":"2:12199:4448","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12204:35613":{"id":"2:12204:35613","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4536:35613"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43821:8341","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12076":{"id":"2:12076","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12077:815","2:12078:2032","2:12079:35589","2:12080:35590","2:12082:35591","2:12085:2773","2:12086:35592","2:12087:314","2:12088:27003","2:12089:1926","2:12091:27000","2:12093:27001","2:12095:27002","2:12097:35593","2:12098:35594","2:12099:2670","2:12100:27026","2:12101:2356","2:12102:2350","2:12103:8301","2:12104:33253","2:12105:33238","2:12106:29074","2:12107:35595","2:12108:33230","2:12109:1963","2:12112:27043","2:12115:27044","2:12118:2575","2:12122:4130","2:12126:27033","2:12129:27035","2:12132:27037","2:12135:35596","2:12138:35597","2:12141:27039","2:12144:27041","2:12147:35598","2:12150:35599","2:12153:3110","2:12156:35600","2:12159:35601","2:12162:35602","2:12165:35603","2:12167:35604","2:12169:35605","2:12171:35606","2:12172:35607","2:12173:35608","2:12176:1945","2:12179:26123","2:12182:27045","2:12185:35609","2:12188:35610","2:12191:35611","2:12194:1907","2:12196:4446","2:12197:26917","2:12198:4447","2:12199:4448","2:12200:4449","2:12201:35612","2:12203:3415","2:12204:35613"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5428:2062":{"id":"5:5428:2062","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7282:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12100:27026":{"id":"2:12100:27026","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12099:2670"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12132:27037":{"id":"2:12132:27037","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11778:14376","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11917:418","str::split":"2:12126:27033"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43522:8312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:14374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12153:3110":{"id":"2:12153:3110","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11778:14376","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11917:418","str::matches":"2:12153:3110"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43708:8394","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12197:26917":{"id":"2:12197:26917","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39574:3417","Self::is_ascii":"2:12196:4446"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39574:3417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12203:3415":{"id":"2:12203:3415","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4539:3415"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43812:3416","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8:1811":{"id":"0:8:1811","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[215,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:12150:35599":{"id":"2:12150:35599","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:14374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12194:1907":{"id":"2:12194:1907","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11739:127","`FromStr`":"2:11738:3283"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41679:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11738:3283","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11738:3283","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:326-0:954:1813":{"id":"0:326-0:954:1813","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[5,0],"end":[5,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:954:1813","glob":false}}},"2:12099:2670":{"id":"2:12099:2670","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12100:27026"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5427:36261":{"id":"5:5427:36261","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:1880","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7015:4464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:273:1880","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7015:4464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5446:2346":{"id":"5:5446:2346","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12200:4449"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12185:35609":{"id":"2:12185:35609","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:14376"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:14374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12201:35612":{"id":"2:12201:35612","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4538:35612"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43803:8342","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12080:35590":{"id":"2:12080:35590","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12196:4446":{"id":"2:12196:4446","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12182:27045":{"id":"2:12182:27045","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:14376"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:14374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5443:36265":{"id":"5:5443:36265","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:273:1880","`String`":"5:7282:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:1880","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7015:4464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12087:314":{"id":"2:12087:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12088:27003","`u8`":"1:11934:1505"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12135:35596":{"id":"2:12135:35596","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11778:14376","str::split":"2:12126:27033","prim@char":"1:11917:418","`DoubleEndedIterator`":"2:7306:121","str::rsplit_terminator":"2:12138:35597"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43554:8385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5426":{"id":"5:5426","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5427:36261","5:5428:2062","5:5431:36262","5:5434:36263","5:5442:36264","5:5443:36265","5:5444:3310","5:5445:2347","5:5446:2346"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12118:2575":{"id":"2:12118:2575","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41537:179","prim@char":"1:11917:418","self::pattern":"2:11778:14376"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12176:1945":{"id":"2:12176:1945","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:14376"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12156:35600":{"id":"2:12156:35600","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11778:14376","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11917:418","str::matches":"2:12153:3110"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43726:8395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:14374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12141:27039":{"id":"2:12141:27039","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:14376","str::rsplitn":"2:12144:27041"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43608:8388","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12091:27000":{"id":"2:12091:27000","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41537:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:931:1701":{"id":"0:931:1701","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[100,0],"end":[105,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"5:5444:3310":{"id":"5:5444:3310","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7282:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12077:815":{"id":"2:12077:815","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11917:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:930:1692":{"id":"0:930:1692","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[92,0],"end":[97,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:12078:2032":{"id":"2:12078:2032","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12098:35594":{"id":"2:12098:35594","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11923:1402","crate::ops::IndexMut":"2:2984:3268","str::slice_unchecked":"2:12097:35593"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12082:35591":{"id":"2:12082:35591","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12080:35590"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12198:4447":{"id":"2:12198:4447","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:375-0:351:1814":{"id":"0:375-0:351:1814","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[8,0],"end":[8,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:351:1814","glob":false}}},"2:12115:27044":{"id":"2:12115:27044","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:14376"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:14374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12200:4449":{"id":"2:12200:4449","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12129:27035":{"id":"2:12129:27035","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:14376"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11601:8311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12179:26123":{"id":"2:12179:26123","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:14376"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12086:35592":{"id":"2:12086:35592","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12109:1963":{"id":"2:12109:1963","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:14376"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5434:36263":{"id":"5:5434:36263","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7282:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12162:35602":{"id":"2:12162:35602","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11778:14376","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11917:418","str::match_indices":"2:12159:35601"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43672:8392","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:14374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5442:36264":{"id":"5:5442:36264","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7282:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12112:27043":{"id":"2:12112:27043","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:14376"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1704":{"id":"0:0:1704","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[105,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2018\n# use serde_derive::{Serialize, Deserialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.164\")]","#![allow(unknown_lints, bare_trait_objects)]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: derive_partial_eq_without_eq, clippy ::\nenum_variant_names, clippy :: manual_map, clippy :: match_like_matches_macro,\nclippy :: needless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: let_underscore_untyped, clippy ::\nmanual_assert, clippy :: map_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:930:1692","0:931:1701"],"is_stripped":false}}},"2:12144:27041":{"id":"2:12144:27041","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11917:418","str::splitn":"2:12141:27039","self::pattern":"2:11778:14376"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43626:8389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:14374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12138:35597":{"id":"2:12138:35597","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11778:14376","str::split":"2:12126:27033","prim@char":"1:11917:418","str::split_terminator":"2:12135:35596"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43572:8386","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:14374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12167:35604":{"id":"2:12167:35604","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85-0:958:1911":{"id":"0:85-0:958:1911","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[22,0],"end":[22,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"internals::case::RenameRule","name":"RenameRule","id":"0:958:1911","glob":false}}},"2:12188:35610":{"id":"2:12188:35610","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:14376"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12097:35593":{"id":"2:12097:35593","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11923:1402","str::slice_mut_unchecked":"2:12098:35594","crate::ops::Index":"2:2980:2306"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5445:2347":{"id":"5:5445:2347","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12199:4448"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5431:36262":{"id":"5:5431:36262","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7282:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12104:33253":{"id":"2:12104:33253","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12105:33238"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43778:8398","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12106:29074":{"id":"2:12106:29074","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43758:8396","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12126:27033":{"id":"2:12126:27033","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11778:14376","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11917:418","str::split_whitespace":"2:12104:33253","str::rsplit":"2:12132:27037"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43504:8309","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12107:35595":{"id":"2:12107:35595","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43768:8397","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12088:27003":{"id":"2:12088:27003","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11934:1505"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12105:33238":{"id":"2:12105:33238","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12104:33253"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43787:8399","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12159:35601":{"id":"2:12159:35601","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11778:14376","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11917:418","str::rmatch_indices":"2:12162:35602"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43654:8391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:983:1914":{"id":"0:983:1914","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"2:12172:35607":{"id":"2:12172:35607","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12101:2356":{"id":"2:12101:2356","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11917:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43474:8379","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12173:35608":{"id":"2:12173:35608","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:14376"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11803:14372","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12093:27001":{"id":"2:12093:27001","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:43726:8395":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"11:332:4865":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:10721:5313":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"20:504:4032":{"crate_id":20,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"21:2775:2508":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"2:40124:7751":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:8867:9177":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:6763:4913":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:1924:8977":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:44227:8426":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"24:4826:3190":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"16:535:8123":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:11401:9062":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:3083:9050":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:44243:8430":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:47757:7894":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"22:790:233":{"crate_id":22,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"2:43572:8386":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"24:4859:3197":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"17:13240:5861":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:2855:5095":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"11:793:8934":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:41450:32777":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:5787:4952":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:11585:5440":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:13453:5916":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:6508:9171":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:4505:6866":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"24:877:37554":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"6:4388:6808":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:541:6563":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:7271:7474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:8835:7982":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:5848:7177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:3934:9069":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:7268:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:901:4549":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:11721:5464":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"24:2686:108":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"17:12550:5634":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:43370:14356":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:13082:5823":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:4290:6741":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"24:4290:3516":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"1:5742:8557":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:4445:6126":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:5643:8133":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:13015:5804":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:41535:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"5:3569:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"24:2669:2287":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"21:2724:1822":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"16:6671:6188":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"24:4524:1893":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"5:1301:8845":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"3:229:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:2162:4485":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"6:4482:6853":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"24:5063:1968":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"21:53:4573":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"22:730:1822":{"crate_id":22,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"16:6981:21149":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"21:1818:4570":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"24:4514:3164":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"5:1410:3259":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:5525:9152":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:10527:21385":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"18:507:5112":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:7537:4967":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"24:4442:2501":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"17:13443:5913":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:8176:8309":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:11422:9064":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:9188:37153":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:20622:33945":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:7961:29910":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"24:885:37550":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"2:40849:3313":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:2319:6057":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:7077:21150":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:42639:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:46517:7847":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:1466:2244":{"crate_id":2,"path":["core","mem"],"kind":"module"},"1:1594:1870":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:9641:21254":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"22:832:1833":{"crate_id":22,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"1:4597:7370":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:11866:8605":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:20650:34157":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:2961:7516":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"18:614:37167":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:7488:8252":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"24:3802:3483":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"1:11936:1503":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"5:7115:3258":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:7619:4222":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:9098:21221":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"0:930:1694":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"6:7504:7489":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"24:4355:3521":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"5:7362:4547":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:40079:14426":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"5:3211:8279":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"24:5459:3240":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"24:4779:3179":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"2:5531:3341":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:9796:5254":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:40268:3327":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:4877:9127":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:6840:7461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:13612:5970":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"20:239:4038":{"crate_id":20,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"2:21504:7525":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:7498:8253":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:11272:8468":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:21791:8321":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:7669:6107":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:8979:37158":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"5:1373:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:2481:9039":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:11360:9063":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:3141:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"22:804:37321":{"crate_id":22,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"6:6014:7265":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:9534:21247":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:1583:8280":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"11:1858:1870":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:22300:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"16:4540:6129":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:9057:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:6236:8507":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:1982:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:39241:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:2524:6072":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:3193:9046":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:13865:6040":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:9959:8100":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:7815:9009":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:3168:14409":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:44299:8434":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:11544:5428":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"20:148:3760":{"crate_id":20,"path":["quote","__private","HasIterator"],"kind":"struct"},"2:47673:7892":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:11928:644":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:22531:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:2757:5083":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"18:590:5119":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:4455:6840":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"21:2749:2215":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"24:3298:3476":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"2:40614:3351":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"24:4922:3212":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"1:4704:9085":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:480:4942":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:10731:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"9:0:3003":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:3898:9068":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"21:1195:196":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"20:10:3135":{"crate_id":20,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"24:4783:3180":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"17:10712:21387":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"21:367:4574":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"6:6710:7386":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:3047:20282":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:11254:8604":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:10104:5258":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:3934:4896":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:43054:8376":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:4615:6900":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:11478:8002":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"5:3216:36639":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:41738:3258":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:7661:3321":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:1978:21282":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:2767:5085":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"5:5064:4902":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:10026:21347":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:9173:3410":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"11:1845:8280":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:5774:7138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:8936:8558":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:11422:5407":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:2795:5089":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:6164:8191":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:7078:3258":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:12194:5558":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:3488:9031":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:2799:5090":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:4916:7028":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:501:4211":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:7556:4969":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:8498:8446":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"21:2754:1900":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"2:46085:7821":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:1574:6639":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:4872:6139":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:12158:5552":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:1048:8248":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"5:1472:8278":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"21:2600:8077":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"17:247:37161":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:8214:2585":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:46753:7851":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:11037:21231":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:4962:7054":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:11920:1053":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:4780:6960":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:5950:4896":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:12522:5630":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"18:113:25119":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"18:681:8083":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:6043:7273":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:4769:6952":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:44116:8422":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:5471:4896":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"24:5095:2168":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"2:45739:7804":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:10545:5304":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"24:4319:3518":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"2:2469:14432":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:4010:9075":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:4894:7012":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"21:2014:4571":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"16:2572:6074":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:22018:8327":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:11372:5398":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:11653:5460":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:2215:4492":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:12607:5642":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"18:652:5112":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:3703:9062":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:11844:5507":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:3446:6116":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:1915:4459":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:2783:3287":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:4926:3729":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"5:2034:3378":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:1577:8279":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:11529:8470":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:10039:21312":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:6170:7319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:21516:33949":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:9227:3412":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:42846:8374":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:8180:21160":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:13488:5924":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:6431:8200":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:39201:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:43310:8316":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:47611:7891":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"24:1601:3365":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"16:6061:20254":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:10660:5308":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:7245:8299":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"24:4215:3511":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"2:3181:34144":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"24:1089:1910":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"16:7757:8255":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"22:696:8071":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"2:2505:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:10823:5194":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:8813:3259":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:22663:7545":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"16:7572:37097":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:2140:8283":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:2353:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:41603:3263":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"24:1883:3256":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"1:10010:8959":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:11915:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:20877:9225":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:42544:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:30861:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:5418:6149":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"24:4510:3163":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"16:8072:8260":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:46115:7822":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"24:5175:2205":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"2:39394:3391":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"16:7588:21153":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:40290:3328":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:7827:7915":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"24:4874:3201":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"21:988:233":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"17:10416:21381":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"21:2639:3425":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"18:736:25128":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"24:4455:3651":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"17:10705:5312":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:5377:9148":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:2683:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:11345:14377":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:9217:2299":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"5:5756:4549":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:4793:6965":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:42854:8375":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"24:4940:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"1:8416:7777":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:3585:6117":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:5976:8124":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:13135:5836":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:1755:4499":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:9826:21259":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:8283:21209":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:11921:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"18:521:25132":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:45638:7800":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:2517:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:9879:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:2705:2434":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:13385:5895":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:9658:4930":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:7883:8858":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:2830:6085":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:11136:5345":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:13194:5848":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:8521:21216":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:1783:8949":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"14:187:20229":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"24:5500:3236":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"2:44235:8428":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:40318:3338":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:30327:32823":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:2514:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:7711:6263":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:30385:32789":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:1895:8854":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:11032:7979":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:6132:8188":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:5283:14352":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"18:719:5131":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:7624:4224":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:4517:6872":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:2933:21314":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:3904:9067":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:9592:4927":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:4753:6943":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:13309:5877":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:6488:8202":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:8718:5225":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:46359:7830":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:2337:6059":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:10691:21386":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:12419:5608":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:42052:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:6376:6091":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:35:4465":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"11:817:8937":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"14:221:6389":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:30291:4294":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:2502:6071":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:3191:9045":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"24:1332:3382":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"1:917:8934":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:5899:7201":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:7652:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"24:4981:2245":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"6:7585:7506":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"5:4195:4896":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"24:5190:3227":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"24:5349:3233":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"1:10255:28886":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"11:630:3259":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:3237:1870":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:3233:3400":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:3141:14458":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:32081:1989":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:13399:5902":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:10635:5307":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:7277:3323":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"24:4343:3520":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"24:5334:2289":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"6:5024:7081":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:6218:1863":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:11879:5511":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:4818:6137":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:6780:9211":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:9907:5255":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:7837:8443":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:2594:6075":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"20:45:3136":{"crate_id":20,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"18:531:8080":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"22:953:2508":{"crate_id":22,"path":["proc_macro2","Literal"],"kind":"struct"},"17:11573:5437":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:10440:21383":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:9617:21246":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:4480:6127":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:11923:1402":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:7697:6098":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:11522:8470":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:5881:7189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:3736:8943":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:7875:26806":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"24:88:1886":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"16:5630:21137":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:6027:7269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:5305:6147":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:0:3010":{"crate_id":17,"path":["object"],"kind":"module"},"16:5655:6094":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:6865:4964":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:7820:8442":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:3300:6115":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"24:1133:8041":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"2:4436:3395":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:4412:6822":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:8997:7987":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:10334:5247":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:41972:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:41595:3259":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:1565:3258":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:9032:7990":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:2642:6077":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:7264:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"24:4116:3504":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"17:13506:5927":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:12374:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:11891:5513":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:1732:6735":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:3158:26794":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:7529:6105":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:13689:5995":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:5708:8138":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"5:628:8846":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:11011:5337":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:5462:9151":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"18:624:37166":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:12770:5654":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:8456:9141":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"21:244:37308":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"17:12835:5705":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:4783:9082":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"24:3111:212":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"17:9734:21261":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"24:4906:3208":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"21:2533:4572":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"1:11933:742":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:6876:6099":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"19:0:1035":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"24:2516:3527":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"2:20815:9223":{"crate_id":2,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"2:45606:7799":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:43412:14364":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:8765:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:21876:7527":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"24:4839:3193":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"24:3993:3495":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"17:8548:21217":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:11803:14372":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:21952:32822":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:568:6577":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:6179:8508":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:4928:7037":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:6561:9173":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:554:6569":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:10257:21316":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:4075:3263":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"24:1533:2795":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"17:9443:21240":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:7698:35335":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:9866:21277":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:32045:6440":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:21180:9014":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:7694:4614":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:2832:3520":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:8883:9176":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"11:844:8939":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:4937:7043":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:2511:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:731:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:1701:6723":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"24:844:5078":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"5:5686:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:7029:8243":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:4351:9093":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:22630:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:43796:8400":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:43462:8378":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:11937:1504":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"5:6631:4555":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"6:1910:16167":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:562:6574":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"24:3952:3493":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"11:657:3258":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"24:2958:2205":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"24:4576:2046":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"6:4549:6886":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:20995:9014":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:4045:4456":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:6834:3301":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:6617:7355":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:46829:7853":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"24:5136:2036":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"24:3826:3485":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"24:4856:2169":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"24:3366:3480":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"24:94:4177":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"24:4809:3186":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"1:3996:9073":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:2967:20281":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:4677:6905":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:12224:5577":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:40446:3348":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:12616:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:39359:14459":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"24:5138:3221":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"2:44251:8432":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:4022:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:47842:7899":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:4495:6859":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:3481:9012":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:5993:7252":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:21055:9014":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"24:2856:3460":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"17:8573:21218":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"5:1522:8942":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:2470:6070":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"24:4227:3512":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"2:43888:14388":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:44259:7788":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:9436:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"24:151:1886":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"6:1680:6713":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:39992:8338":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:41852:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:46183:7825":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:42807:8372":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:7123:3258":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:11315:14508":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"5:3582:3259":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:43608:8388":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:39305:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:7699:8439":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:9011:28880":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:46161:7824":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:154:4860":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:2694:6079":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"24:2771:3457":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"22:702:233":{"crate_id":22,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"16:6474:6109":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:10967:5335":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:42012:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:8195:21196":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"24:5466:3243":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"17:11924:5521":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"22:799:8072":{"crate_id":22,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"17:12799:5674":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:6243:37099":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"24:4413:3525":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"2:43821:8341":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"24:4367:3522":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"5:7271:4903":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:10465:21359":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:2241:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:2347:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"24:2822:3459":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"5:1513:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:5804:7155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:11337:4978":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:5779:6151":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"11:1538:20217":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:7016:8241":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:2890:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:2892:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:11783:14373":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:273:1880":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:10657:9130":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:10837:14362":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:13639:5982":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:1787:21265":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:3670:4872":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:40859:3315":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"24:4894:3205":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"17:9721:21262":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:4327:6124":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:40421:3346":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:1602:6658":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:10721:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:1572:4547":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:6890:6100":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:45708:7803":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"15:198:20236":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:11502:5423":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:47917:7904":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:1629:587":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:11220:5363":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"24:1140:8045":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"16:5847:8152":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"5:7086:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"22:887:1902":{"crate_id":22,"path":["proc_macro2","TokenTree"],"kind":"enum"},"17:10681:8117":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"18:538:5116":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:45939:7817":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:5949:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:7608:7512":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:39983:8337":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:653:15177":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:47947:7906":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"24:2873:3461":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"17:9028:21220":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:5073:7104":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:3962:9072":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"24:4863:3198":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"24:4796:3183":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"2:3151:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:3640:5142":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:10125:5260":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"18:481:8078":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:43448:7784":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:13678:5994":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:8156:6110":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:43758:8396":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:9424:5239":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"24:4244:3513":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"2:11792:8089":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:4868:9126":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:11484:5415":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:1821:8959":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"5:7094:8295":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:11120:7991":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"24:921:2871":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"9:352:20150":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:676:8929":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:585:2312":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:6719:7389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:1101:36946":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:6327:8193":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"24:3213:2293":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"2:45809:7807":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:8271:7960":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:5716:9167":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:40867:3317":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:8931:5231":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:44311:14548":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:21:683":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"24:3247:1819":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"17:9876:5110":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:8422:14373":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:4380:3392":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:40346:8353":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:4427:6828":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:7543:6106":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:46137:7823":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"18:636:5130":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:8256:6313":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"8:0:3002":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:11064:7788":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:44511:8437":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"24:5487:3248":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"2:9221:3414":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:10649:8115":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:7231:3324":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:5014:7076":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:10231:8312":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:684:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"24:4902:3207":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"6:482:6526":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:6704:7384":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"10:36:6443":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:4419:6826":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"24:4568:2042":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"2:40020:7750":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:844:3259":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:911:4547":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:2376:9006":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:10080:21349":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:386:21207":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:20982:9227":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"24:5462:3241":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"17:10000:5319":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:41747:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:39327:3291":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:4878:1005":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"24:909:37553":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"22:678:3378":{"crate_id":22,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"17:8420:21213":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"24:2941:3465":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"6:5057:7101":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:3948:9070":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:9469:21242":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:3203:8281":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:40411:3345":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:13777:6018":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"24:4843:3194":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"2:42172:8553":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:2850:5094":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:10971:4974":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:2366:9001":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"24:5496:3235":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"2:2150:588":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:9275:37157":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:12072:5540":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:13791:6025":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:2931:20280":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:975:21250":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:41486:8444":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:4954:7049":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:1689:6719":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"24:2164:9014":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"2:42617:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:10452:21360":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:12019:5265":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:12461:5616":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"24:3872:3488":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"2:40369:3343":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"24:343:37541":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"14:160:8839":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:2426:6068":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:10445:9045":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:8736:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:9839:21258":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"24:4145:3506":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"17:13857:6037":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:3472:32200":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"5:258:4872":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:10876:28877":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:10303:21313":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"22:926:2215":{"crate_id":22,"path":["proc_macro2","Punct"],"kind":"struct"},"17:13257:5864":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:10402:21372":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"12:0:3006":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:11930:744":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:953:8938":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:2620:9040":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:39100:14408":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:10676:8453":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:8315:7961":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:44420:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"9:388:20136":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:11922:1372":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"24:4087:3502":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"24:3162:2555":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"1:3378:4896":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:21057:9215":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:3233:9048":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"21:2269:1822":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"17:9822:21270":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:12576:5636":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"24:4914:3210":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"24:4818:3188":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"2:2508:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:8237:8444":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:41430:1901":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"5:6391:3258":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:10989:5304":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"24:4926:3213":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"16:5386:5222":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"11:1611:4869":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:4684:6907":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:9523:21248":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"24:4787:3181":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"2:40811:3305":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:43787:8399":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"11:1501:20215":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:7467:8249":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"24:5033:2248":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"24:3940:3492":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"2:43910:8401":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"13:0:3000":{"crate_id":13,"path":["std_detect"],"kind":"module"},"24:4976:1841":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"2:4605:14420":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:7307:8847":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:11060:5308":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:532:6557":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:6066:7279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:45494:7794":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:8759:9153":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:12033:5536":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"24:826:3364":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"21:107:4580":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"16:5616:8129":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"20:37:2878":{"crate_id":20,"path":["quote","format_ident"],"kind":"macro"},"17:10283:5292":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:12403:5607":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:5766:7136":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"11:644:3263":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:6575:21145":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"24:5291:2188":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"2:47932:7905":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:21900:8325":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:1630:6683":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:43626:8389":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:6520:6165":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:4568:6130":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"20:0:1111":{"crate_id":20,"path":["quote"],"kind":"module"},"24:103:4175":{"crate_id":24,"path":["syn","token","CustomToken"],"kind":"trait"},"2:9223:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:13516:5932":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"24:4162:3507":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"1:2350:8997":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:13292:5870":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:6355:29911":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"5:1491:8548":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:55:6298":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"6:4853:6990":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:44103:8418":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:1589:8281":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:12361:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:44255:8433":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:47219:7887":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:7574:7505":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:11391:5403":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:4823:6977":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:14:2645":{"crate_id":2,"path":["core","write"],"kind":"macro"},"11:2060:8941":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:4871:7001":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:6804:7444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:888:8278":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:6572:7331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:10751:29615":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:10051:3263":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:7803:6271":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:11969:5527":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:6211:4950":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:6254:6157":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:45893:7810":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"24:4870:3200":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"17:12646:5652":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"24:3976:125":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"2:5589:3330":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:4703:6919":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:41772:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:4601:7374":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:2773:5086":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:6156:8561":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:30297:4295":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:5007:7073":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"24:2703:3454":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"22:982:3258":{"crate_id":22,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"2:43654:8391":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:47868:7901":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:547:6566":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"24:3128:3472":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"6:5736:7111":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:8525:8449":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:11883:8564":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"11:2194:6441":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:13265:5866":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:4649:6903":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:7043:31791":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:6506:8210":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"5:2959:36549":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:3152:32199":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:1137:36944":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:6588:7343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"18:96:25118":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"24:1910:3257":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"16:8090:8263":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:10352:14367":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"24:3889:3489":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"5:4003:4549":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"24:2218:9014":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"2:42092:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"11:2180:6438":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:8443:21214":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:4845:6138":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"11:2033:8248":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:11193:5355":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:1648:6695":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"24:4396:3524":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"17:9453:21241":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"5:4349:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:6544:6097":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:5571:6093":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:41671:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:7635:6260":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:1117:36541":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:11993:5528":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:40628:3352":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:21189:7523":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:40470:3333":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:4435:6831":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:6470:4872":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:10761:21228":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:11174:4976":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"16:6819:6200":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:5919:7217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"24:1338:37374":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"16:6336:8194":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:13411:5905":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:12448:14435":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:40155:32793":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"21:433:4858":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"1:6032:4953":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"24:5442:3237":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"1:8805:7981":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:10598:5335":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:20833:9219":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"17:10068:21348":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:12902:5760":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:9476:8308":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:675:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"24:893:37552":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"17:11109:5344":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:11556:5429":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:21989:32790":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"18:609:37175":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:1671:4872":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"11:1012:8941":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:43231:34123":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"7:32:20121":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:6644:29911":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:10798:21229":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:5032:6144":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:21973:32774":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"5:2222:36662":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:21063:9217":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:7867:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:20942:9220":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:6793:8231":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:13121:5832":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:7449:21152":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:13564:5969":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:562:1914":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"21:2635:3277":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"24:3349:3479":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"6:4462:6843":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:2969:25777":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:8821:9179":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:1441:3258":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:12138:5549":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:1846:8965":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:2404:6067":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:8753:5226":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:62:14767":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"24:549:128":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"11:749:4549":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:7227:3325":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"24:5011:3215":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"5:4033:4872":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:10092:21350":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"22:813:1901":{"crate_id":22,"path":["proc_macro2","imp","Span"],"kind":"enum"},"1:11044:7980":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"24:1736:8868":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"2:42799:8370":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:44093:8414":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:5071:6145":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:9869:9014":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:6919:37096":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:12923:5768":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:43956:8410":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:9906:8365":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:4340:6778":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:11932:746":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:4625:6901":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:530:4216":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"24:4852:3196":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"17:13159:5838":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:43402:8318":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:9228:37165":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:41344:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:3647:3258":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:1433:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:5357:9147":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:43504:8309":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"22:720:1901":{"crate_id":22,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"6:6687:7379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:39261:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:3317:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:21187:9221":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"0:0:1704":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"17:9557:5247":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:5050:7098":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:5954:7238":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"22:906:3279":{"crate_id":22,"path":["proc_macro2","Delimiter"],"kind":"enum"},"22:512:3277":{"crate_id":22,"path":["proc_macro2","LexError"],"kind":"struct"},"1:11191:8462":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:7378:4548":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:7296:8303":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:11069:21232":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:43320:14359":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:12483:5627":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"21:183:4196":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"6:6007:7263":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:3225:6114":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"16:5944:21140":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"24:4425:3526":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"5:4165:4896":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:10960:4973":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"24:335:3378":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"6:6819:7449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:11641:5457":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:12293:5591":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:9138:21222":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:10897:5333":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:3063:5138":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"24:4468:2160":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"6:6795:7441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:4809:6972":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:4144:3403":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"24:5366:1819":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"17:3142:21317":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"22:0:1682":{"crate_id":22,"path":["proc_macro2"],"kind":"module"},"2:12579:4940":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:42574:6285":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:43282:8313":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:6893:8862":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:4599:7372":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:2928:3434":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:9772:5252":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:7366:21151":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:5724:8140":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:6035:7271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:7850:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:6609:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:6390:8197":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:10491:21357":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:11490:29889":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"24:2992:3466":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"2:44247:8431":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"21:2328:1833":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"6:4400:6813":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:8200:9057":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"11:1818:3259":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"24:4558:1838":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"6:1544:6620":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"22:779:25139":{"crate_id":22,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"2:42599:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:5393:9149":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:5579:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:6696:21146":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:6108:4940":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:43291:8314":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:9409:21239":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:3424:9011":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:8316:3740":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"22:932:1900":{"crate_id":22,"path":["proc_macro2","Spacing"],"kind":"enum"},"2:40277:3336":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:8829:3258":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:12331:5596":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"24:4017:3497":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"2:1666:1091":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:8954:26113":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:13041:5810":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:7249:7473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:4279:9099":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"5:7282:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:0:496":{"crate_id":2,"path":["core"],"kind":"module"},"6:4663:6904":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:11446:5411":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:1594:6653":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:8170:8267":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"24:3814:3484":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"2:46336:7829":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"22:881:1901":{"crate_id":22,"path":["proc_macro2","Span"],"kind":"struct"},"16:6293:6160":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:9110:8452":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:4373:6802":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:1010:4872":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"24:4545:1850":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"5:7258:8302":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"5:2169:8285":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:4119:9094":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:9127:29866":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"6:6135:7294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:6935:21147":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:8922:7986":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"20:77:1903":{"crate_id":20,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"6:4786:6963":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:9675:4931":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"11:667:8548":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"22:773:3280":{"crate_id":22,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"17:242:37151":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:4694:6914":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:13249:5862":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:2842:5093":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:47833:7898":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:40299:3329":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:5797:8145":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:1568:4549":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"9:52:8528":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:4531:9119":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:2546:6073":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:6867:7467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:10686:8442":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:3196:3398":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:8163:3350":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:5677:21138":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"24:842:9014":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"16:5693:8135":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:40218:4920":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"24:4104:3503":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"24:5358:3232":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"9:174:8539":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:7043:3306":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:11918:1521":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:2695:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"24:4878:2096":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"2:4335:3391":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:43357:3326":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:9091:7992":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:857:3263":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:5817:7156":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"24:5142:3222":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"16:7259:3737":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"24:5339:3230":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"2:8315:3741":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"24:4029:3498":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"24:1405:1906":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"2:46563:7848":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"11:399:37085":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:8244:8445":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"24:1962:3261":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"1:11942:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:11266:8467":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:5043:7095":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:42534:7769":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"21:0:1079":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"6:7462:7488":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:44473:8597":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:2786:6083":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:8667:5223":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:4760:4948":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:2846:5091":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:8360:21211":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"18:660:25130":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"24:93:9014":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"6:4841:6986":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"5:1775:4547":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"0:931:1702":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"1:11224:8001":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:7317:37119":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:413:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"24:2567:3450":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"1:307:1454":{"crate_id":1,"path":["std","thread"],"kind":"module"},"1:5709:9166":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"15:219:8524":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:573:6579":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:9108:37148":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:8348:3733":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"22:902:1822":{"crate_id":22,"path":["proc_macro2","Group"],"kind":"struct"},"2:45828:7808":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:13233:5859":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"18:707:8089":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"18:644:5112":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"10:0:3004":{"crate_id":10,"path":["adler"],"kind":"module"},"2:41662:4473":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"20:150:3759":{"crate_id":20,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"16:2616:6076":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"5:3721:3378":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"21:957:4589":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"1:11101:8000":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"5:2242:8290":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:2298:20255":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:11434:5408":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:47970:7907":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:42836:7777":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:6442:8201":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:7859:21157":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:10324:8389":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:9670:21264":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:5933:4950":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"24:2584:3451":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"1:10977:4975":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:4037:6123":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:2219:8994":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:41892:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:4596:6131":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:6651:2630":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:7596:21154":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"15:180:20235":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:40185:8979":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"2:39387:34130":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:11532:5427":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:5402:5223":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:3872:6121":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:9415:4971":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:1080:8845":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:2391:3015":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:10354:5296":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"21:648:3429":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"2:30491:32788":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:40248:3326":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:8651:5222":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:10743:21227":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:2737:4106":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:22039:8330":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"24:3264:3475":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"2:2779:5096":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:8977:29900":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:7810:4733":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:22597:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:1746:7520":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:2879:6087":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:3899:6122":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:3266:21333":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:2691:3397":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:13066:5820":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:8120:7956":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:4586:6898":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"11:311:8274":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:8289:9129":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:21011:9213":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:8971:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:12046:5537":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:3815:6120":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:44278:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:821:4878":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:8104:3304":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:8317:3739":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:4199:9098":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:40098:8344":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:4817:6976":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:11566:8393":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:7626:21155":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:8984:8560":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:2808:6084":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"24:4302:3517":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"2:9225:3411":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:1499:6598":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"5:4760:670":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:3270:9043":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:6670:7378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:867:3258":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:8854:7983":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:10936:5334":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:13744:6011":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:7673:8930":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:7654:3318":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:8256:21194":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"20:281:1910":{"crate_id":20,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"24:3400:247":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"6:1535:6614":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"24:2754:3456":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"16:6321:8523":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"16:6535:4862":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:8293:7359":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:6319:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"14:202:2343":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:3805:9064":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:13659:5988":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"14:40:1833":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:10448:9047":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:11459:5413":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:39380:2585":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:7966:8562":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:6854:6204":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"24:2805:3458":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"2:4254:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"24:2788:1846":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"6:7510:7490":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"24:1506:3368":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"2:45560:7797":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:7599:9014":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:1708:6726":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:4764:388":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:13721:6010":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:13651:5985":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:487:21208":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:43939:8409":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:10310:8388":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:3162:14410":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:42294:2299":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"18:699:8087":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:2521:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:22025:7544":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"24:901:37549":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"6:4722:6927":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:5876:14741":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"24:3315:3477":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"1:7706:8967":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"11:1517:20216":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:21077:7523":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:22564:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"16:7743:6096":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:11941:1131":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:5367:20253":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"24:4174:3508":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"6:1556:6629":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"24:2907:3463":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"13:110:37087":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:39366:7622":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:10516:5299":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:13477:5920":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"24:4005:3496":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"16:5594:6095":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:11056:29617":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"11:1831:4547":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:3348:3311":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"24:5288:2472":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"2:43925:8407":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:4728:6930":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:20952:4484":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:10864:9151":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:2745:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"24:3077:3471":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"17:12634:5645":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:5090:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:46207:7826":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:7182:3298":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"21:2770:1833":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"24:5049:2480":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"5:1481:8934":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:7522:7492":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:6351:21144":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:2752:3286":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"16:6990:6214":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:6767:8230":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:9946:8099":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:4437:9101":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:10885:8120":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"5:4847:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:5920:8160":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"24:5285:190":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"2:22498:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:8366:7970":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:45538:7796":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:10029:28883":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"6:595:6592":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"24:0:1681":{"crate_id":24,"path":["syn"],"kind":"module"},"17:9380:21238":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:5529:4553":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:47361:7888":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:42132:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:2764:6082":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:4325:3390":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:6717:8217":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:3998:33199":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"24:2890:3462":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"18:766:25129":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"24:258:8838":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"5:1272:8941":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:13211:5853":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:9512:21249":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:13101:5824":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:6155:7308":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:1502:8549":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:2602:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:13667:5989":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:21161:9214":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:45668:7801":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:2921:2242":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"24:1448:25155":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"24:4791:3182":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"6:4847:6987":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:13763:6016":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"24:3145:3473":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"17:13332:5880":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"18:574:5112":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:40056:8341":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"24:1851:3255":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"16:7437:6255":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"24:4046:3499":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"16:2720:6080":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:7064:36625":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:1526:6609":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:46863:7854":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:4665:9101":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:10851:8853":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"9:234:7777":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:12358:5598":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:12980:5803":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:46305:7828":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:7294:7487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:3156:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:40072:8342":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:21935:7532":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"24:1487:3271":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"24:4519:1847":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"17:12592:5638":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:7509:6104":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:3749:6118":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"11:2186:37078":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"24:1136:8043":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"2:41812:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:21156:9014":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"24:4999:2488":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"2:2984:3268":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:4394:6810":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:6318:4872":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"24:2924:3464":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"17:12372:5601":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:11331:8850":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"24:2635:1880":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"1:930:8935":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"11:986:8940":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:6564:7326":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:3155:26793":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:11197:9156":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:43039:7781":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:12085:5542":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:39283:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:7516:7491":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:1768:609":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:11717:4981":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:4763:6949":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:43778:8398":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:8153:3336":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:12496:5628":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:44223:8425":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:2787:5087":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"24:3383:3481":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"2:43708:8394":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:40034:8339":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"21:140:4583":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"6:4523:6875":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:3638:9059":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:12004:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:6868:6206":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"21:1062:1901":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"1:1561:3259":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:12236:5579":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:9178:21223":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:4605:6899":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"24:3964:3494":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"17:13145:5837":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:11931:745":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:12536:5631":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:6124:4957":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:2668:6078":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:3782:6119":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:926:8549":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:8683:5224":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:2694:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:5741:21139":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"18:80:25117":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:46258:7827":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"9:445:20135":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:45969:7818":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:47795:7895":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:13024:5808":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:13469:5919":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:8899:9178":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:11940:1559":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:3956:9071":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"24:4198:3510":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"17:12259:5588":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:11355:5396":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:4904:6140":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:4706:9086":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:46799:7852":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:4785:33280":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:6392:3307":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:3373:14391":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"5:4943:4896":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:6307:6089":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:123:14822":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:3078:3282":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:44438:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:7557:6256":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:2962:4457":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:12396:34394":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:7293:6236":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"5:5840:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:9577:5243":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:2263:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:5593:4951":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:7244:37101":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:20652:34159":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:2811:5074":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:9340:21226":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:39139:4458":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"21:216:8506":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"2:30066:9065":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:13169:5839":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:4303:6750":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:2743:1859":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:40398:3331":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"24:2839:2154":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"6:506:6537":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:7015:4464":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"24:4384:3523":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"21:2302:2215":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"2:43480:8380":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:4969:6142":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"21:1019:3426":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"11:695:8549":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:7329:3322":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"24:5324:2203":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"2:11738:3283":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:11813:5500":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:8142:21159":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:2378:6066":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:420:5180":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"24:1937:3258":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"2:9428:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:4747:6941":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:11410:5404":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:13461:5917":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:44004:8411":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"24:4256:3514":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"2:45991:7819":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:119:14821":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:12423:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"21:2503:3427":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"6:7545:7498":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:5792:7151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:494:6532":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:4662:9128":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:1543:4896":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"5:7044:4549":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:9072:7991":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:11319:5391":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:587:6587":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:13219:5856":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:4886:7007":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"24:251:8837":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"17:11946:5522":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"24:4831:3191":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"2:10870:14363":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"24:5028:3214":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"2:41679:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:2821:5073":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:526:6554":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"9:325:6480":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"11:968:8248":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"11:836:8938":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:40228:8992":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:46593:7849":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"24:1954:3259":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"17:12282:5589":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:2980:2306":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:6662:8216":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"20:407:3918":{"crate_id":20,"path":["quote","__private","RepInterp"],"kind":"struct"},"17:9596:5245":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:45514:7795":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:7170:3297":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:43058:8377":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:8111:7955":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:5966:7243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:10589:8112":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:49815:9231":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:500:6534":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:22051:9066":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:2826:3518":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:44136:8423":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:12345:5597":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:4389:3393":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:12113:5547":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"20:235:4036":{"crate_id":20,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"17:9038:37155":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:2816:4039":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:4702:6133":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:10711:7915":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:12433:5610":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:8310:21210":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:1505:6601":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"24:3009:3467":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"24:1443:25154":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"18:690:8086":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:4148:9097":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:6505:8859":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:6983:3304":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:10569:8107":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:8439:7973":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"24:5447:3238":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"1:8514:7978":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:41722:3259":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:7683:6108":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:42315:3414":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"24:5148:3219":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"13:226:6436":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:11888:8932":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:9478:21253":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"24:4331:3519":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"1:8183:8396":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:10555:8103":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:7065:8247":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:618:8852":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:922:8548":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:9628:21245":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"24:4890:3204":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"6:4943:7046":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:40389:3344":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:4379:6803":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:9213:4624":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:9895:21283":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:11628:5456":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:9312:21225":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:47013:7855":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:7557:7500":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"24:4070:3501":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"24:2737:3455":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"2:22366:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"21:2729:3279":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"17:11800:5498":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:4:1018":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"24:4273:3515":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"2:7657:3320":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:40171:8349":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:7837:8256":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:41653:3738":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:25920:7547":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:6725:7390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"24:5493:3234":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"17:10670:5311":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:21634:9216":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"24:2601:3452":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"24:5054:2483":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"17:11258:5378":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:13803:6027":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:5522:7280":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:2748:4109":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:2210:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:2468:9014":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:13419:5908":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"11:403:37080":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:2316:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:13821:6033":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:8389:21212":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:10894:7981":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:23110:7546":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:9148:37162":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:8249:9100":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:13433:5910":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:41521:7765":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:11778:14376":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:11934:1505":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:40600:3350":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:9208:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:4972:7060":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:20841:34256":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"11:1838:8279":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:7335:37108":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:4367:6801":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:21632:9014":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"24:4486:3161":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"6:6606:7350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:13053:5815":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:6272:4549":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:9062:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:12059:5539":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:48009:7908":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:4948:7048":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:1062:8940":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:8132:9013":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:20914:9226":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"24:673:37385":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"5:1287:8940":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:5279:14351":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:10269:14366":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:8741:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"24:5319:2489":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"16:7767:21156":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"24:5490:3249":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"16:4624:6132":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"24:2975:2507":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"24:554:5071":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"6:4555:6888":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"24:2228:5080":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"6:4907:7022":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:5889:7194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:21410:9228":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"11:0:3005":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"6:6076:7282":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:6943:21148":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:4587:9072":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:20669:34155":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"24:2720:116":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"11:1852:8281":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:45690:7802":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:41611:3258":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:10158:14361":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"24:598:3258":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"2:30889:4119":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:1785:8950":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:40825:3307":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:11798:14374":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:10451:9043":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:9213:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:6624:7359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:11299:5381":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:3315:9036":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"22:736:1833":{"crate_id":22,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"24:3094:3391":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"5:6719:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:2791:5088":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:9265:21224":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:21844:7526":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:12307:5593":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:12915:5767":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:22333:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"24:4898:3206":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"21:2643:3258":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"2:45791:7806":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"24:5076:3216":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"6:4314:6758":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"20:34:9014":{"crate_id":20,"path":["quote","ext","private","Sealed"],"kind":"trait"},"16:6201:21143":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"5:7024:3258":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"9:481:20134":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:6021:7266":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"21:2704:3426":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"1:9403:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:2448:6069":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:10167:9155":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"5:2958:2073":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:44536:8438":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"24:2081:2445":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"24:5479:3246":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"6:4474:6848":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:6788:4916":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"21:1393:1914":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"1:10681:8455":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:42308:3413":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"11:736:8278":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"16:0:3009":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:5828:7164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:10735:5316":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:2862:6086":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"22:742:2508":{"crate_id":22,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"24:1068:1910":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"6:7539:7497":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:1463:8277":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:9933:8097":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:3272:9044":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:3700:9063":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:42590:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"24:286:37506":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"16:8269:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"11:723:8277":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"18:755:8096":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:0:820":{"crate_id":6,"path":["libc"],"kind":"module"},"24:2618:3453":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"24:5146:3223":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"24:2030:3265":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"2:43474:8379":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"5:7215:8296":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:4235:3259":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:44430:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:8909:2786":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:46675:7850":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:643:8928":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:5876:7188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:781:4875":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"24:3196:3474":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"2:9211:112":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"16:7103:7987":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"14:31:8839":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:3030:6111":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"24:53:1909":{"crate_id":24,"path":["syn","token"],"kind":"module"},"1:11929:747":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"24:4572:2044":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"17:13842:6036":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:6575:4962":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"23:0:3131":{"crate_id":23,"path":["unicode_ident"],"kind":"module"},"2:40064:3416":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:12098:5544":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:43554:8385":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:2357:6065":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:4789:6136":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:4018:9077":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:11497:8003":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:43392:14365":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:9853:21306":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:6647:7377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:21405:9218":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"7:79:20128":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:3463:3410":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:9219:3413":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"11:1048:37079":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:7285:32252":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:10855:6500":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:42815:8373":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:20843:4484":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:43803:8342":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:7488:1914":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"24:5505:2247":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"24:2023:3263":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"24:5363:3231":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"5:6602:4553":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:877:4880":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"24:5471:2249":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"2:32172:4110":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"24:3906:3490":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"9:421:20137":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:13316:5878":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:4728:6134":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:11899:28878":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:2048:8943":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:6774:7427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:9410:9009":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:10857:21230":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:5067:7102":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:20609:4119":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"24:5275:3228":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"18:564:5118":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"22:841:2508":{"crate_id":22,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"2:4186:3380":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:10491:4221":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:11861:5510":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:1947:21260":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"22:116:8070":{"crate_id":22,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"24:497:3269":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"24:5080:2478":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"2:10119:8311":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"24:917:3217":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"1:7726:1989":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:9973:8101":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:39217:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:13698:5997":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:12388:5603":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:4394:4896":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:22432:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"24:4579:2167":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"14:0:3007":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"24:4481:3162":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"2:43672:8392":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:488:6529":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:2910:3399":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:10741:7956":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:9149:29646":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:2897:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:6740:3335":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:8076:9010":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:5586:4950":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"24:5474:3245":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"5:6139:9305":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:41620:3737":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:13376:5894":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:7688:8931":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:9690:4935":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:11600:5446":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:4135:9096":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:2460:7514":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:1512:6604":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:7384:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:5104:6146":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:4637:6902":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:4861:6995":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:4534:6880":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:6558:8212":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"24:4848:3195":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"17:8598:21219":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:6396:9168":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:11601:8311":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:7054:4883":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:10377:5297":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:45584:7798":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:9068:37154":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"24:3043:3469":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"24:547:210":{"crate_id":24,"path":["syn","error","Result"],"kind":"typedef"},"11:2168:1822":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:41586:1881":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:40378:3353":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:6129:7293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:8777:7979":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:5044:29894":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:11520:5424":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:43812:3416":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:10615:8113":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"21:2591:3427":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"2:39401:7623":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"24:5140:3220":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"17:9566:21224":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:2580:8857":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"18:671:25131":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:12959:5798":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:7306:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:8791:7980":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:12671:4463":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:1695:6722":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"24:2211:2510":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"11:365:4867":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:12622:5308":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:11938:1501":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:9172:210":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"1:2348:4475":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:12449:5614":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"21:2709:1902":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"6:4832:6980":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:8909:8551":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:9696:5241":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:11163:5351":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:1820:3401":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:21738:8320":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"5:7198:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:30257:4293":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:41473:8368":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"15:0:3008":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:5835:7168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:9322:37163":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:7600:4234":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:11090:5341":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:9886:21284":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"11:798:8935":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:579:6582":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:2130:4211":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:10386:4972":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:2693:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"24:608:3259":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"2:2838:5092":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:10015:21346":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:10052:21328":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:8195:9060":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"24:4539:3176":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"11:760:4547":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:46439:7831":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:39186:8335":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:47549:7890":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:7551:7499":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:8823:5228":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"22:706:3277":{"crate_id":22,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"2:20802:9222":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:46039:7820":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"24:4186:3509":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"1:638:8927":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:11239:8465":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:959:8939":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"24:4800:3184":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"1:2855:4947":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:22399:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:7042:8246":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:4468:6845":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:9986:8102":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:1985:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:10840:5331":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:9748:5247":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:5013:29894":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"24:4866:3199":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"2:40840:3311":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"18:727:5134":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:44231:8427":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:8047:6307":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:5408:9150":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:11821:5502":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:21860:8322":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:7722:8853":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:8109:8266":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:8947:4215":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:5557:6090":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:47879:7902":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:10027:3259":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:42824:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:6904:6209":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:12568:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"22:119:37320":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"16:7478:6103":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:22465:4225":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:13344:5886":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:4799:6968":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:2311:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:8263:9061":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:10580:8111":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:10478:21358":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:1637:6687":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:5998:21141":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:4097:31796":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:40044:8340":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"24:5060:2872":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"1:8189:9061":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:44494:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:43300:14360":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:2740:3433":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:2762:5084":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:11083:7992":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:5343:9146":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:11282:1833":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:11902:5514":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"24:3179:1848":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"16:6728:8218":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:39977:3416":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:8904:35334":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:9683:21263":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:8989:1886":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"21:2577:3428":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"6:4567:6897":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:1425:3263":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"11:2201:3297":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"20:272:1910":{"crate_id":20,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"16:4932:6141":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:12894:5757":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:41730:3263":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"24:4930:1856":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"16:5346:6148":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:12178:5553":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:2931:3435":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:5798:7154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"21:2378:2508":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"17:11615:5452":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:8508:3259":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:43768:8397":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"24:1623:2074":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"17:10316:5294":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:4258:3384":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"11:805:8936":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"22:357:3277":{"crate_id":22,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"2:40834:3309":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"20:322:2510":{"crate_id":20,"path":["quote","spanned","Spanned"],"kind":"trait"},"2:2700:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:10338:14368":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:5986:7251":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"11:1068:20213":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:1256:8248":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"11:1103:20214":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"24:4492:2030":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"17:12563:5635":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:2544:4944":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:2690:3432":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:40004:32772":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:6146:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:10747:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"24:1491:3367":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"17:13324:5879":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"5:7032:8294":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:10428:21382":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:8170:2786":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:44481:7791":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:10270:21315":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:1034:21252":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:5990:3354":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:7519:8254":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"24:2533:3448":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"6:6597:7349":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:9488:21251":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"24:4886:3203":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"24:2652:99":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"24:4937:2306":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"6:1716:6730":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:5235:4872":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:12318:5594":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"4:0:3001":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:5811:8146":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:8953:5232":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"24:3230:234":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"16:8025:3162":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:4445:6837":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"24:3281:1870":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"6:4991:7068":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:11785:5493":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:40105:14427":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"18:0:3011":{"crate_id":18,"path":["memchr"],"kind":"module"},"24:5468:3244":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"24:551:8040":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"2:39574:3417":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:41401:9058":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:13033:5809":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"11:97:8270":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"24:3060:3470":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"11:2174:6437":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:42301:3404":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"24:5180:3226":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"1:635:8926":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"24:3785:3482":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"5:894:3259":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:1672:6712":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:8255:9092":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:7598:7510":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:11550:8390":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:2212:8993":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:6432:4961":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:2742:6081":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"24:1761:1827":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"24:4542:3177":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"24:2550:3449":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"24:4058:3500":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"22:948:1833":{"crate_id":22,"path":["proc_macro2","Ident"],"kind":"struct"},"22:876:233":{"crate_id":22,"path":["proc_macro2","TokenStream"],"kind":"struct"},"24:5300:2191":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"16:5000:6143":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:4010:33192":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:47853:7900":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"21:2690:1901":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"2:44239:8429":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"24:5464:3242":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"1:7971:9041":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:7499:8863":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"24:3843:3486":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"2:9361:34136":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"24:3026:3468":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"2:41384:7757":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:474:1823":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:44082:14389":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"7:0:1549":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:11924:1486":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:43331:7782":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"24:4552:1684":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"24:126:1822":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"1:361:4233":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:8941:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"24:5456:3239":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"2:1636:4290":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:13879:6043":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"14:165:20222":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:45769:7805":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"24:3332:3478":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"17:9917:5256":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:13356:5887":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:11490:8382":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:40091:8343":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:47822:7897":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"24:5343:2246":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"2:40818:8360":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:8490:21215":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:5963:8163":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:20637:33945":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:4811:798":{"crate_id":2,"path":["core","iter"],"kind":"module"},"24:5484:3247":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"21:478:4859":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"10:44:6444":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:20667:34160":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:11849:14382":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:4702:9083":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:7411:6254":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:4263:3385":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:43383:8317":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"24:3860:3487":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"1:2558:4931":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:5978:7250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:44031:8412":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"5:3170:3259":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"11:1822:3258":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:40328:3339":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:1568:6637":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:2925:2154":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"9:502:6503":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:4757:6135":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:936:8936":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:6361:6162":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:41509:7764":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:44068:8413":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"18:491:8079":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:10196:14369":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:10699:8461":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:10238:9150":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:11935:1502":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"24:4804:3185":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"16:8129:21158":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"21:2630:233":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"5:2689:7517":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:8858:5229":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:45846:7809":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:2588:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:1732:4500":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:3329:4547":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:6400:8198":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:13812:6031":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:777:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:4542:6884":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"22:823:1822":{"crate_id":22,"path":["proc_macro2","imp","Group"],"kind":"enum"},"24:1035:1833":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"24:4814:3187":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"2:47894:7903":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:0:1394":{"crate_id":1,"path":["std"],"kind":"module"},"5:3177:8280":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:3513:4549":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:11939:792":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:2804:3505":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:1662:6706":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"21:404:37268":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"21:2426:1902":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"2:40308:3337":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:947:8937":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"18:599:5075":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:4488:6856":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:9653:21276":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:5202:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:1931:655":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:875:8277":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:40460:3349":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:9218:5247":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:13625:5976":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"24:4835:3192":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"22:14:25164":{"crate_id":22,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"16:6460:6092":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:13499:5925":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:4400:6125":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:12510:5629":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:9545:5217":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:43522:8312":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:9215:3404":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"11:119:4863":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:1844:4624":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:42562:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"5:5860:4902":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:4409:3394":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:4364:4898":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"11:1826:4549":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"5:204:4467":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:7277:7476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"14:7:8839":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:8788:5227":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:10076:8309":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"24:4822:3189":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"17:11339:5392":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:1494:6596":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:13367:5891":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:4127:9095":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:43490:2786":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:11527:8387":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:2965:3468":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:4715:6926":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"24:5004:2447":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"1:10343:9153":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:10923:8121":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"24:4775:3178":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"16:2905:6088":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:2364:9000":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"22:710:3426":{"crate_id":22,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"6:6849:7464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:10626:8114":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:40138:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"21:2241:3280":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"2:47719:7893":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:10505:21384":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:6621:4554":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:3385:14395":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:10079:2196":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"11:1027:20212":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"11:1121:8845":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:10142:21351":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:11917:418":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:11471:5414":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"5:3801:4547":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:9067:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:30313:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:40360:3342":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"18:582:4119":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"24:3923:3491":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"17:8632:21195":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:5270:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:7563:7501":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:6743:7401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:6259:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"24:4918:3211":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"24:1489:1908":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"typedef"},"24:4882:3202":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"2:47471:7889":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:6935:4965":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:9350:37164":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:11770:5489":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"24:4128:3505":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"1:7645:4221":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:5383:4896":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"5:4427:4898":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:11832:5505":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:40143:8348":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:6022:21142":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:32085:8334":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:3406:7958":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:21912:32820":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:1519:6606":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:355:4232":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:2244:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"24:5329:2288":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"18:515:5115":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:6787:34111":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:4510:6128":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:5886:8154":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:1071:8941":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:13426:5909":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:3231:9047":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"24:925:3218":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"17:11234:5364":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"24:869:37551":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"6:4739:6937":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:1919:21295":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:7891:3378":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:4459:9102":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:3182:36633":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:7229:32793":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"11:2049:8940":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:554:4218":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:2160:4484":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:4113:3402":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:4006:9074":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:21927:7531":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"24:4910:3209":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"14:215:8268":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:47813:7896":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:40430:3347":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:3595:3263":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:9498:5241":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"24:1616:3377":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"6:5079:7107":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:40337:3340":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:11916:940":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"3:0:442":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:6833:7458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:1589:6651":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:41367:7755":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:4327:6768":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"24:5144:3224":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"2:44523:4462":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:9471:14437":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:12126:5548":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:5862:7187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:11927:642":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:12006:5531":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:7528:7493":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:4983:7066":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:41932:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"24:4958:62":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"11:285:8271":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:9183:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:13181:5842":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"}},"external_crates":{"23":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.9/"},"20":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.29/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.63/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.22/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}