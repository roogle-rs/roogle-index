{"root":"0:0:1658","crate_version":"1.0.152","includes_private":false,"index":{"2:11493:8032":{"id":"2:11493:8032","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50094:2755","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11549:35367":{"id":"2:11549:35367","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11168:14288","prim@char":"1:12335:409","str::rmatch_indices":"2:11552:35368","`DoubleEndedIterator`":"2:7120:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50258:8145","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11543:3085":{"id":"2:11543:3085","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11168:14288","str::matches":"2:11543:3085","prim@char":"1:12335:409","`DoubleEndedIterator`":"2:7120:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50312:8148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5293:36028":{"id":"5:5293:36028","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7157:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11534:30315":{"id":"2:11534:30315","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12335:409","self::pattern":"2:11168:14288","str::splitn":"2:11531:30313"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50230:8143","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11188:14286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11467:796":{"id":"2:11467:796","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12335:409"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:343-0:971:1760":{"id":"0:343-0:971:1760","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[5,0],"end":[5,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:971:1760","glob":false}},"2:11572:30319":{"id":"2:11572:30319","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11168:14288","prim@char":"1:12335:409"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48124:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11188:14286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11590:35378":{"id":"2:11590:35378","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4495:35378"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50407:8082","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11490:30301":{"id":"2:11490:30301","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11489:30300"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5303:9004":{"id":"5:5303:9004","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7157:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11466":{"id":"2:11466","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10731:1363","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11467:796","2:11468:2086","2:11469:35355","2:11470:35356","2:11472:35357","2:11475:2742","2:11476:35358","2:11477:310","2:11478:30278","2:11479:1872","2:11481:30275","2:11483:30276","2:11485:30277","2:11487:35359","2:11488:35360","2:11489:30300","2:11490:30301","2:11491:2310","2:11492:2304","2:11493:8032","2:11494:32440","2:11495:32436","2:11496:29806","2:11497:35361","2:11498:32605","2:11499:1909","2:11502:30317","2:11505:30318","2:11508:2553","2:11512:4098","2:11516:29805","2:11519:30309","2:11522:30311","2:11525:35362","2:11528:35363","2:11531:30313","2:11534:30315","2:11537:35364","2:11540:35365","2:11543:3085","2:11546:35366","2:11549:35367","2:11552:35368","2:11555:35369","2:11557:35370","2:11559:35371","2:11561:35372","2:11562:35373","2:11563:35374","2:11566:35375","2:11569:28302","2:11572:30319","2:11575:35376","2:11578:1891","2:11581:35377","2:11584:1849","2:11586:4441","2:11587:4442","2:11588:4443","2:11589:4444","2:11590:35378","2:11592:3373","2:11593:35379"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5305:2300":{"id":"5:5305:2300","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11589:4444"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11575:35376":{"id":"2:11575:35376","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11168:14288","prim@char":"1:12335:409"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11188:14286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11498:32605":{"id":"2:11498:32605","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50400:8154","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11469:35355":{"id":"2:11469:35355","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5287:2009":{"id":"5:5287:2009","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7157:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11483:30276":{"id":"2:11483:30276","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9349:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9349:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11512:4098":{"id":"2:11512:4098","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:11168:14288","prim@char":"1:12335:409","`None`":"2:48126:176"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48124:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11188:14286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11537:35364":{"id":"2:11537:35364","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48124:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11593:35379":{"id":"2:11593:35379","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4493:35379"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50425:8076","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11487:35359":{"id":"2:11487:35359","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12341:1363","crate::ops::Index":"2:2970:2260","str::slice_mut_unchecked":"2:11488:35360"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11505:30318":{"id":"2:11505:30318","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12335:409","self::pattern":"2:11168:14288"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11188:14286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:8:1758":{"id":"0:8:1758","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[202,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":false}},"0:947:1652":{"id":"0:947:1652","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[99,0],"end":[104,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"2:11496:29806":{"id":"2:11496:29806","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50362:8150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1658":{"id":"0:0:1658","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[109,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2018\n# use serde_derive::{Serialize, Deserialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.152\")]","#![allow(unknown_lints, bare_trait_objects)]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: derive_partial_eq_without_eq, clippy ::\nenum_variant_names, clippy :: manual_map, clippy :: match_like_matches_macro,\nclippy :: needless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: manual_assert, clippy ::\nmap_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:946:1643","0:947:1652"],"is_stripped":false}},"2:11522:30311":{"id":"2:11522:30311","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11168:14288","prim@char":"1:12335:409","`DoubleEndedIterator`":"2:7120:120","str::split":"2:11516:29805"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50126:8046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11188:14286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11552:35368":{"id":"2:11552:35368","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"str::match_indices":"2:11549:35367","self::pattern":"2:11168:14288","prim@char":"1:12335:409","`DoubleEndedIterator`":"2:7120:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50276:8146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11188:14286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11588:4443":{"id":"2:11588:4443","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11586:4441":{"id":"2:11586:4441","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11491:2310":{"id":"2:11491:2310","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:50078:8133","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11519:30309":{"id":"2:11519:30309","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:11168:14288","prim@char":"1:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10992:8045","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:392-0:368:1761":{"id":"0:392-0:368:1761","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[8,0],"end":[8,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:368:1761","glob":false}},"2:11489:30300":{"id":"2:11489:30300","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11490:30301"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11497:35361":{"id":"2:11497:35361","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50372:8151","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11557:35370":{"id":"2:11557:35370","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:62:341":{"id":"0:62:341","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1952,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:90-0:975:1857"],"is_stripped":false}},"2:11562:35373":{"id":"2:11562:35373","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11546:35366":{"id":"2:11546:35366","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"2:11543:3085","`DoubleEndedIterator`":"2:7120:120","self::pattern":"2:11168:14288","prim@char":"1:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50330:8149","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11188:14286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5286:36026":{"id":"5:5286:36026","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:1827","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6908:4459","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:1827","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6908:4459","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11563:35374":{"id":"2:11563:35374","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12335:409","self::pattern":"2:11168:14288"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11193:14284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11470:35356":{"id":"2:11470:35356","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11592:3373":{"id":"2:11592:3373","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4496:3373"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50416:3374","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1000:1860":{"id":"0:1000:1860","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}},"2:11578:1891":{"id":"2:11578:1891","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12335:409","self::pattern":"2:11168:14288"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5290:36027":{"id":"5:5290:36027","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7157:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11495:32436":{"id":"2:11495:32436","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11494:32440"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50391:8153","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11492:2304":{"id":"2:11492:2304","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:50084:8134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11555:35369":{"id":"2:11555:35369","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11502:30317":{"id":"2:11502:30317","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12335:409","self::pattern":"2:11168:14288"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11561:35372":{"id":"2:11561:35372","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11540:35365":{"id":"2:11540:35365","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48124:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11188:14286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5301:36029":{"id":"5:5301:36029","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7157:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11478:30278":{"id":"2:11478:30278","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12352:1459"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11494:32440":{"id":"2:11494:32440","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11495:32436"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50382:8152","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11488:35360":{"id":"2:11488:35360","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:2974:3275","str::slice_unchecked":"2:11487:35359","`str`":"1:12341:1363"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11525:35362":{"id":"2:11525:35362","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11168:14288","prim@char":"1:12335:409","str::rsplit_terminator":"2:11528:35363","`DoubleEndedIterator`":"2:7120:120","str::split":"2:11516:29805"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50158:8139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11475:2742":{"id":"2:11475:2742","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10736:14289"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5302:36030":{"id":"5:5302:36030","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:288:1827","`String`":"5:7157:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:1827","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6908:4459","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:946:1643":{"id":"0:946:1643","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[91,0],"end":[96,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"2:11581:35377":{"id":"2:11581:35377","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11168:14288","prim@char":"1:12335:409"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11188:14286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11468:2086":{"id":"2:11468:2086","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11559:35371":{"id":"2:11559:35371","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5285":{"id":"5:5285","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5196:1363","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5286:36026","5:5287:2009","5:5290:36027","5:5293:36028","5:5301:36029","5:5302:36030","5:5303:9004","5:5304:2301","5:5305:2300"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11528:35363":{"id":"2:11528:35363","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"prim@char":"1:12335:409","self::pattern":"2:11168:14288","str::split_terminator":"2:11525:35362","str::split":"2:11516:29805"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50176:8140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11188:14286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11499:1909":{"id":"2:11499:1909","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:11168:14288","prim@char":"1:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11485:30277":{"id":"2:11485:30277","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9349:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9349:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11569:28302":{"id":"2:11569:28302","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11168:14288","prim@char":"1:12335:409"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48124:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11476:35358":{"id":"2:11476:35358","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11584:1849":{"id":"2:11584:1849","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:11129:3290","FromStr::Err":"2:11130:126"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48268:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11129:3290","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11129:3290","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11508:2553":{"id":"2:11508:2553","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:11168:14288","`None`":"2:48126:176","prim@char":"1:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48124:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11479:1872":{"id":"2:11479:1872","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48126:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48124:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9349:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9349:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5304:2301":{"id":"5:5304:2301","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11588:4443"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11531:30313":{"id":"2:11531:30313","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"2:11534:30315","prim@char":"1:12335:409","self::pattern":"2:11168:14288"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50212:8142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11566:35375":{"id":"2:11566:35375","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11168:14288","prim@char":"1:12335:409"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11589:4444":{"id":"2:11589:4444","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11481:30275":{"id":"2:11481:30275","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48126:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48124:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9349:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9349:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11477:310":{"id":"2:11477:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11478:30278","`u8`":"1:12352:1459"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11587:4442":{"id":"2:11587:4442","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:90-0:975:1857":{"id":"0:90-0:975:1857","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[23,0],"end":[23,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"internals::case::RenameRule","name":"RenameRule","id":"0:975:1857","glob":false}},"2:11472:35357":{"id":"2:11472:35357","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11470:35356"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11516:29805":{"id":"2:11516:29805","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"prim@char":"1:12335:409","self::pattern":"2:11168:14288","str::rsplit":"2:11522:30311","`DoubleEndedIterator`":"2:7120:120","str::split_whitespace":"2:11494:32440"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50108:8043","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11173:14285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"2:50407:8082":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"24:1809:2425":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"1:1091:7981":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:29826:32477":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:9125:4888":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:9263:21064":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:5541:7055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:21464:9023":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:8774:5168":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"24:2973:3436":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"2:50604:8165":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:4329:9035":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"24:3772:3450":{"crate_id":24,"path":["syn","token","AddEq"],"kind":"struct"},"2:49166:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"5:1212:7981":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:51738:7534":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:2383:4473":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"24:3333:3448":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"18:681:7818":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"24:2451:3416":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"6:4768:6968":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:11315:5368":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"24:4948:3181":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"1:4307:9031":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"22:851:1769":{"crate_id":22,"path":["proc_macro2","Group"],"kind":"struct"},"5:3680:4551":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"24:4985:2203":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"1:8991:3266":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:47288:8104":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:135:14805":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"24:3081:3440":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"5:5142:14262":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:11691:8225":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:3355:14307":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:50330:8149":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"18:644:5055":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"24:4325:3488":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"2:2702:4074":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"24:2116:1851":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"typedef"},"17:11787:5462":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:12816:5746":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:7787:3707":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:4786:6063":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"0:946:1645":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"5:7234:4551":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"6:5568:7074":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:12028:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:487:21033":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"18:507:5055":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"24:2065:36807":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"22:772:1769":{"crate_id":22,"path":["proc_macro2","imp","Group"],"kind":"enum"},"17:8596:5163":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:4635:6910":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:20115:33850":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:12630:5689":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:5703:7887":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"24:4185:3478":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"16:6200:7930":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:6908:4459":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"24:3171:2247":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"6:5741:7158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"24:3917:3460":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"24:3009:3438":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"6:519:6470":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"18:538:5059":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:29401:9022":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"24:2937:3434":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"1:11311:9114":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:11500:5415":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:0:801":{"crate_id":6,"path":["libc"],"kind":"module"},"2:50693:8168":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:38220:4082":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:3319:8990":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:219:4462":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:6665:28295":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"5:5813:4861":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:9318:7740":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:21:667":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:1432:8882":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:7143:3398":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:9553:5181":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"12:738:8010":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"24:4440:2162":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"2:47369:8111":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:13393:5916":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:2257:8950":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"24:5493:2468":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"2:2316:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:2437:9042":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:21273:8057":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:48175:1828":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:9183:21051":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:8414:7699":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"21:2573:7812":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"17:9738:7832":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"24:2703:3425":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"2:6605:33964":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:12884:5761":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:6629:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"24:3842:3455":{"crate_id":24,"path":["syn","token","Bang"],"kind":"struct"},"2:52875:7588":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:1821:3353":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"24:2541:3421":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"24:2266:8817":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"1:8849:7728":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:6903:7745":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:4346:6813":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:47176:7802":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:48251:4468":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:774:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"24:4103:3472":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"2:39416:8069":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"21:369:4596":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"2:9157:4893":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:11784:34703":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"9:896:19885":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:2900:3351":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:4329:6805":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"18:699:7822":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:2825:6008":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:5489:8036":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:2894:20104":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:6284:6031":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:46684:7504":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:1574:6570":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:51991:7544":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"12:1518:20040":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:54132:7643":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:12638:5690":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:5411:6017":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:46872:8073":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:4598:6896":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:3127:8011":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:8871:21045":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"24:2811:3429":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"17:11054:5314":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:5018:9045":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:9577:5187":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:2752:5040":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:47277:8103":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:6735:20971":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:62:14738":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"16:7388:20977":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:9446:21080":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"21:2417:1845":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"1:10894:9001":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:7046:14384":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:495:6459":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:9442:27717":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:4361:6819":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:20774:9181":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"6:4206:6744":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:51022:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:6252:7934":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:2490:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"24:5087:3185":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"1:8740:9051":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:7225:4923":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"24:3876:3457":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"17:12103:5525":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:13059:5808":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:48741:8534":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:21779:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"5:1413:8010":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"24:5426:3208":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"12:1866:8013":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:4441:6053":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"24:1903:2489":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"1:9477:1833":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:11530:7750":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"13:0:2973":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:11718:8227":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:53419:7625":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"5:1366:3266":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:49103:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:4354:6817":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:1707:6656":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:52093:7548":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:2801:5034":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"24:5010:2467":{"crate_id":24,"path":["syn","generics","LifetimeDef"],"kind":"struct"},"17:11300:5362":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"24:4912:3172":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"1:5072:4905":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:10997:1780":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:5595:7081":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:13459:5933":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:9366:9138":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:9475:21090":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"18:652:5055":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:9293:21077":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:49989:8052":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"12:834:8886":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:3689:6042":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:49447:8128":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"5:2873:2020":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:1600:6586":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:9260:7737":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"5:2162:8022":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:8648:7712":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"24:4876:3164":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"2:20246:9184":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"5:6600:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:4797:6987":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:4294:3343":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:2845:14399":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"24:3135:1795":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"2:50108:8043":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:8375:34724":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"21:2550:3386":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"2:10992:8045":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:11123:8213":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"24:5055:2462":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"16:7237:6178":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"9:382:8512":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:12317:28991":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:48884:3367":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:836:4849":{"crate_id":5,"path":["alloc","collections","binary_heap","retain","RebuildOnDrop"],"kind":"struct"},"24:4924:3175":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"2:21713:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"21:2319:1780":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"1:4408:27050":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"12:751:4553":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:9419:8539":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:8211:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:49437:7517":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:46967:14345":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:359:4217":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"12:985:7981":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:56580:9213":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:1695:6652":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"24:4485:3134":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"1:12339:308":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"18:727:5078":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:47380:8114":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:6981:7364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"24:4888:3167":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"16:4217:6046":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:6702:4262":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:51939:7542":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:4212:6747":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:21977:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"20:77:1846":{"crate_id":20,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"1:7974:8874":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:12485:5576":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:52559:7568":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"24:4468:1833":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"2:2816:3486":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:8991:36417":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:49659:8131":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:9223:21062":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:12022:5515":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:5388:6015":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:54042:7637":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:9296:3266":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:973:8884":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"24:1969:9042":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"1:8252:28356":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:46424:8070":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:4690:982":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"5:4938:4867":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:1828:8905":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:49400:8124":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:6275:3265":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:8776:7246":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:646:15144":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:7396:20978":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"24:834:7801":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"16:6345:6019":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:484:4936":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"1:11740:4936":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"18:609:36445":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"12:725:8009":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"24:5477:2146":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"16:6330:6086":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:6781:20973":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:7483:6030":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:12008:5513":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:8216:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:48184:3266":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"24:5502:2160":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"1:7783:8812":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:8649:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:4222:3337":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:598:4207":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:13184:5841":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:4152:6712":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:3263:6037":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:2659:3349":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:2516:8993":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:11149:5330":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:6842:7979":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"24:2073:1849":{"crate_id":24,"path":["syn","parse"],"kind":"module"},"20:137:3733":{"crate_id":20,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"9:863:19884":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:4300:6789":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:954:4551":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:12002:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:20062:33647":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:2661:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"24:5037:2206":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"24:4550:3138":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"17:11576:5432":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:5949:7921":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:1887:4651":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:6161:20968":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:10466:7850":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"24:3243:1817":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"6:5443:6999":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:8477:8150":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"0:0:1658":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"5:7127:8030":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:13031:5800":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"24:632:3186":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"6:4810:6992":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:3716:6043":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"9:709:7517":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:20412:7403":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:9382:5177":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:13141:5831":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:10374:7842":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"12:1065:36353":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:47127:8947":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:3237:9002":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:6302:7236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:6743:20972":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:1811:598":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:11485:5411":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:11436:5386":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"21:2719:3284":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"2:21431:8062":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:567:6502":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:608:6525":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:10973:5299":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:6483:4557":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:13039:5801":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:53957:7632":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:6243:4907":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:7467:4451":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:7567:20980":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:11893:5475":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:48627:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:21452:8065":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:2438:14351":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:12348:727":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:4348:3345":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"24:4202:3479":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"17:10721:5268":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:4519:6054":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:8426:8968":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"21:2232:4593":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"1:10790:9113":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:9501:5175":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:10062:21142":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"24:4856:3159":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"6:4475:6837":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:1511:6534":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:52953:7589":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:21039:9179":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:47259:8101":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:11186:5336":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:10891:8999":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:13436:5932":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:2651:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:9791:7837":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:11173:14285":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:49916:8050":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"24:2301:7803":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"24:1470:5038":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"16:5839:20966":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:2915:2106":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:1678:6645":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"24:3997:3465":{"crate_id":24,"path":["syn","token","Dot2"],"kind":"struct"},"24:2829:3430":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"17:12148:5532":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"5:273:4843":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"12:659:3265":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:12176:5538":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:12306:8878":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"9:920:19886":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:4644:6913":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"24:2297:207":{"crate_id":24,"path":["syn","error","Result"],"kind":"typedef"},"24:2523:3420":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"1:3491:8985":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:54209:7646":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"24:4980:1788":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"2:9541:8043":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:6059:36373":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"24:104:4145":{"crate_id":24,"path":["syn","token","CustomToken"],"kind":"trait"},"2:39425:4075":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:7288:7985":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:2535:5996":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:13374:5910":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:2789:14394":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:5203:5159":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:2880:3436":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"12:0:2979":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"17:10121:5229":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:6865:7980":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:5494:20962":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:20365:9178":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:10360:7838":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:54053:7638":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"24:4812:3149":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"17:13340:5898":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"24:1682:3266":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"6:4489:6838":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"24:4869:3162":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"16:0:2982":{"crate_id":16,"path":["gimli"],"kind":"module"},"9:592:19903":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"24:4284:3485":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"16:5996:8485":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"24:5138:3190":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"2:4076:3354":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"24:1611:3263":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"2:2150:578":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:8831:3697":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:5433:7862":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:2832:14396":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:11708:5450":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:47268:8102":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:3611:3324":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:4723:33525":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:3276:8998":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:8926:8042":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:5095:9040":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:13100:5817":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:5671:9109":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:13024:5799":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"14:0:2980":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"24:4553:3139":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"1:661:8801":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:50078:8133":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"12:762:4551":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"5:6669:4873":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"24:2059:3328":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"6:4367:6821":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:4611:6901":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:10088:5227":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"5:864:4851":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:4558:14338":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"12:274:8004":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:10139:5181":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:11198:30077":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:5238:3696":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:5122:6068":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:10520:5250":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:1701:6655":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"12:646:3270":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:3274:8997":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:9601:5189":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:12198:5549":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"21:2765:2487":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"2:2280:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"22:855:3284":{"crate_id":22,"path":["proc_macro2","Delimiter"],"kind":"enum"},"2:50084:8134":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"24:4260:3483":{"crate_id":24,"path":["syn","token","RemEq"],"kind":"struct"},"2:53749:7628":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:21313:8060":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"22:696:1769":{"crate_id":22,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"16:2727:6004":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"24:4009:3466":{"crate_id":24,"path":["syn","token","Dot3"],"kind":"struct"},"5:6088:4870":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:9873:21174":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:50510:8155":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:3566:6039":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:2487:5994":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:10583:21054":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:3409:7716":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:7044:36371":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"11:44:6364":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"6:4417:6832":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:11800:5464":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:50276:8146":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:13354:5904":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:46936:8076":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:12083:4458":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:4662:9052":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:6975:7362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:1021:21078":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:2842:6009":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"3:223:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:49240:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:4221:9025":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:46338:14326":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:11104:9089":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"24:4498:1854":{"crate_id":24,"path":["syn","attr","Meta","NameValue"],"kind":"foreign_type"},"5:1973:8895":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"24:5050:2459":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"1:8257:8543":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:5219:5160":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:4224:6756":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"24:5190:1635":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"24:4834:3154":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"16:6619:6120":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"18:113:24843":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"24:4366:3491":{"crate_id":24,"path":["syn","token","Sub"],"kind":"struct"},"17:9118:36436":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:3402:6038":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:48665:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:51908:7541":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:9043:4885":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"24:2649:115":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"20:45:3123":{"crate_id":20,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"1:8174:8807":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:10833:4930":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:11330:5374":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:7426:20979":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:51115:4457":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"5:1708:4551":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:50827:8180":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"24:4586:3142":{"crate_id":24,"path":["syn","data","VisRestricted"],"kind":"struct"},"2:49888:8047":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:592:6515":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:51714:7533":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:13413:5919":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:2250:8949":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:2300:5981":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:11748:5458":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:11394:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:6706:9130":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:11763:14355":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:8685:9013":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:5525:7871":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:1632:8013":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:4317:6799":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"22:672:3283":{"crate_id":22,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"24:5510:2204":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"17:12781:5742":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:4257:6771":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:53919:7631":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:2341:5988":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:153:4830":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:1595:6584":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:4259:9028":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:46900:7507":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:10350:5238":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:7083:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:50539:8163":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:9349:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:2055:4198":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:2228:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:9947:21177":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"24:5462:187":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"1:10479:25778":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:242:36418":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:6052:8484":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:47227:8096":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:8470:8043":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:9722:5191":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:4034:4861":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:9061:5181":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:13082:5813":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:3157:14327":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:961:4843":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:9803:14278":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:9775:8142":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:7890:7996":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:46377:4453":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"16:7956:6032":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:46543:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:9193:36431":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"24:4313:3487":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"2:8662:3367":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:52169:7556":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:11247:5349":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:881:3266":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:7637:7989":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"24:2353:3266":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"6:5672:7130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:13327:5892":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:7166:7375":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:3854:6044":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:20371:9180":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:501:6462":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:8772:9087":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"24:5095:1856":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"17:12265:5556":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"24:4120:3473":{"crate_id":24,"path":["syn","token","MulEq"],"kind":"struct"},"2:50212:8142":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"9:0:2976":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:10257:21186":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:8612:8203":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"5:1454:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:2282:5979":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"24:4959:2260":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"6:4673:6928":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:4540:6863":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:48311:3266":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:53995:7633":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:11909:5480":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:50066:8132":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"12:1832:3266":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:46924:8075":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:2930:20105":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:11559:5429":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"24:2020:25331":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"2:47207:8093":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:2483:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:10245:21209":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"24:4908:3171":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"20:135:3734":{"crate_id":20,"path":["quote","__private","HasIterator"],"kind":"struct"},"6:4286:6782":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:8182:3324":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:9499:27556":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:13518:5949":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:9371:21049":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:3984:34783":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"24:3980:3464":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"17:386:21032":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:54117:7642":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"18:491:7814":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"5:679:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:7333:27067":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"24:4412:2480":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"2:53063:7592":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"24:4562:3143":{"crate_id":24,"path":["syn","data","Visibility"],"kind":"enum"},"2:46997:8084":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"21:0:1053":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"9:956:19887":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:52793:7587":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:6742:4920":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:5720:9112":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:9631:21085":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:8368:21041":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"24:762:2068":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"1:9465:28322":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"24:5445:3198":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"1:12333:367":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:4385:6051":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"21:480:4829":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"9:19:8503":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"24:1638:3264":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"2:47023:7508":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:7905:4192":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"24:2739:3426":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"13:220:6357":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"9:676:19892":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:54147:7644":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"20:275:2489":{"crate_id":20,"path":["quote","spanned","Spanned"],"kind":"trait"},"17:13594:5965":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:10685:9112":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"24:5091:3184":{"crate_id":24,"path":["syn","generics","PredicateEq"],"kind":"struct"},"2:48192:3270":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:9485:7745":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:11883:9021":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:2884:25322":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:9658:21132":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:6311:7237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:48437:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"5:7052:3303":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"12:810:8881":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:5684:7137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:11014:5303":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:4621:6905":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:49455:8129":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:8796:5169":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:6210:7931":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:11997:5511":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"24:4796:3145":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"24:5064:1914":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"17:9526:21088":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:5596:6072":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:48319:3270":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:11873:5474":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"12:2184:6358":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:1525:6539":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:13047:5802":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:4606:6057":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:4284:3342":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:10460:8915":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:8162:21035":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:3382:4861":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:8609:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"24:3369:244":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"1:1626:8012":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"12:822:8885":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:8899:7517":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:8881:36428":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"11:36:6363":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:7042:14385":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:52046:7547":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:20322:9042":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"24:3153:3442":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"6:5472:7023":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:4575:6882":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:5720:7152":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:960:8881":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:5877:8037":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"22:480:3283":{"crate_id":22,"path":["proc_macro2","LexError"],"kind":"struct"},"6:1654:6628":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:12850:5758":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:1541:6547":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:1329:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:2663:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:2921:3397":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:11547:5427":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:7168:8034":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:12695:5725":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:4297:6048":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:1615:4551":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"15:0:2981":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:21365:32485":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:12355:1458":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"24:2118:3311":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"24:5032:3182":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"6:4506:6847":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:11491:7738":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:5480:7025":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:2662:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"24:3279:3445":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"17:10921:5279":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:2486:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:2785:14392":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:574:4205":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"5:5549:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:7289:7393":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:50855:8187":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:11271:5351":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"24:1665:3265":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"5:3057:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"24:3027:3439":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"7:32:19871":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:2613:8806":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:11106:5325":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:10774:5238":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:2065:8015":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:3484:4553":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:7278:6025":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:53029:7591":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:6316:7943":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:9283:21079":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"24:4800:3146":{"crate_id":24,"path":["syn","expr","ExprAssignOp"],"kind":"struct"},"2:54170:7645":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:5660:7125":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:52285:7559":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"24:4231:3481":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"6:6554:7352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:6567:7963":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:2715:3395":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:22043:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"5:2375:7395":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:49976:14266":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:12964:5784":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:8752:2755":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:8734:9059":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:7942:20983":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:5374:6012":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:13168:5838":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:9155:21050":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:49963:8051":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:12338:1027":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:3927:4861":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:10706:14466":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"24:5148:3188":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"5:6999:3265":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:50400:8154":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:4551:6870":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:7135:36395":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:9472:8541":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:5472:6016":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:8722:8204":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:5657:9108":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:13192:5842":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:4446:9055":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"22:644:3324":{"crate_id":22,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"1:8922:7731":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:7211:6177":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"24:2114:1850":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"16:6171:6083":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:9909:5193":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"12:1085:20038":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:9584:8045":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"24:5175:2163":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"17:11528:5422":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:5727:7153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:8241:21037":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"24:3045:3343":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"2:2769:5045":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"24:3117:2533":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"2:50258:8145":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"24:5506:3214":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"21:2714:1769":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"2:2571:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:7772:1860":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:513:6467":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:2781:14393":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:11862:9019":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"24:2775:2106":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"17:10476:21212":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:11774:5461":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:47117:4877":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:11158:7658":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"24:4395:3493":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"24:89:1833":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"2:20363:9042":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:4581:6885":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"24:4492:187":{"crate_id":24,"path":["syn","attr","Meta","Path"],"kind":"foreign_type"},"24:5142:3191":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"17:11070:5318":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:8380:8532":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:12033:5516":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:979:8885":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:5706:9111":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:12291:5558":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"21:1396:1860":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"17:247:36414":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:13580:5962":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:11418:4932":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:4321:9033":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:10332:21211":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"12:98:8003":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:47245:8098":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:29620:4281":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:52536:7567":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:8101:4757":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:12354:1457":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:2231:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:10702:29084":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"5:6512:4559":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"18:521:24856":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:6375:7265":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:4659:6920":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:12340:1333":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:4115:6684":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:2916:21140":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:2909:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:11536:5424":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"24:5498:2158":{"crate_id":24,"path":["syn","path","Binding"],"kind":"struct"},"6:4698:6940":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:4267:9029":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:6097:4909":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"24:3951:3462":{"crate_id":24,"path":["syn","token","DivEq"],"kind":"struct"},"2:2911:2199":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:9561:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"24:2865:3432":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"1:11822:9020":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:8666:3364":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:10302:14272":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:4816:6995":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:3130:14400":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:8141:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:7343:6028":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"18:660:24852":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:4103:3355":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:9312:3265":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:48870:3357":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:4103:3266":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:8569:1844":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"2:47605:4262":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:6322:7242":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:7120:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:9671:21103":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:51073:7529":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:54033:7636":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:11174:5335":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:1422:8881":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:2251:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:1470:2201":{"crate_id":2,"path":["core","mem"],"kind":"module"},"17:12060:5519":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:4459:9056":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:1747:7401":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:2836:14397":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:9492:3266":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:47394:8115":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:1967:8932":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:4662:6059":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"7:79:19878":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:12934:5778":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:7497:6020":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:2993:6033":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:47236:8097":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"24:600:36819":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"24:4873:3163":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"1:918:8009":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:1722:6663":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:10708:7854":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:2253:4490":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:10497:21213":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:10506:5247":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:29626:4282":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:545:6490":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:38203:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:7255:7386":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"24:56:2015":{"crate_id":24,"path":["syn","token"],"kind":"module"},"6:6479:7315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"21:2293:2173":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"1:7821:4925":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"24:2685:3424":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"6:5692:7138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:4899:9030":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:3475:25585":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:9520:7748":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:1637:1817":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:2389:5990":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:3972:32307":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:4264:4861":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:4817:6064":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:8339:21040":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:5876:7206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:12341:1363":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:6569:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:6790:6134":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:4144:6045":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:7469:6029":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"24:2667:3423":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"9:505:8523":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:46632:33866":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:49425:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"24:2631:3422":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"21:140:4624":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"24:3351:3449":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"6:4716:6951":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:1550:6553":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:22475:7428":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"21:2744:1843":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"6:4496:6840":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:13231:5854":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"3:0:433":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"22:676:3382":{"crate_id":22,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"17:9681:5053":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:4749:780":{"crate_id":2,"path":["core","iter"],"kind":"module"},"12:320:4834":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:50382:8152":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:50525:8161":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:46857:3374":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"18:80:24841":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:10796:5271":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:2385:8953":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"24:5223:3196":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"24:4808:3148":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"2:2322:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:47167:8901":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:11989:8230":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:2605:5999":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:6932:4553":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:5460:7866":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:10625:5265":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:5782:7169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:10445:5242":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:12349:5567":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:6521:4907":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"5:7111:32496":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:3140:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:49640:7521":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"24:4860:3160":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"12:1029:8890":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:11982:8230":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:13478:5938":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"5:1612:4843":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:1620:8011":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:12225:5551":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"22:105:7809":{"crate_id":22,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"24:4091:3471":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"24:2991:3437":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"1:7895:29487":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"24:2559:1827":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"2:54022:7635":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"24:3963:3463":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"2:21944:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:10270:21185":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"22:781:1780":{"crate_id":22,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"2:9623:14271":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"24:636:2839":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"24:2160:2764":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"2:56937:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:6815:8808":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:20515:9042":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:6430:7278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:4357:6050":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:7909:7999":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:52717:7585":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:50008:8053":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"21:1071:1844":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"2:47084:8934":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"2:21402:32478":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:10385:7846":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:10918:8141":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"24:2505:3419":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"17:11761:5459":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:48361:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:48877:3366":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"24:5220:1992":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"1:8729:8205":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:8981:8206":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:8921:14358":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:6704:6129":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:10546:21053":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:3145:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:13114:5824":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:11288:5359":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:21236:7406":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"17:9539:21087":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:29586:4280":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"5:5704:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:1443:8883":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:54094:7641":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:48589:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:52028:7546":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:50839:8183":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:3599:25587":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:21812:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:8664:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:7910:4202":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"24:4936:3178":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"6:7249:7385":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"18:96:24842":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"18:766:24855":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:6137:7926":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:560:6499":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"24:5196:1785":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"1:11298:8802":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:13572:5959":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"24:3801:3452":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"6:5534:7051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:5163:6069":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:9274:7738":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"22:825:230":{"crate_id":22,"path":["proc_macro2","TokenStream"],"kind":"struct"},"2:47310:8106":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:47070:8089":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:8475:21020":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"12:1836:3265":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"12:2069:8889":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"22:14:24990":{"crate_id":22,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"17:10822:21056":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:6472:6109":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:6329:7246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:21037:9042":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:3093:8012":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:11239:14295":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"24:4062:3469":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"2:1639:4278":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:9328:21074":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"24:94:9042":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"24:5465:2452":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"6:5605:7088":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:47198:8092":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"24:2299:127":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"5:1376:3270":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"24:4591:2202":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"6:4449:6835":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"24:5399:3201":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"16:6654:6124":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"14:202:2297":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:6070:6078":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"9:33:8505":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"1:12346:631":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:3235:9001":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"21:107:4618":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"2:49136:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:11750:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:20094:33846":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:12739:5730":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:2579:4901":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:8941:21046":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:10108:21139":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"24:4479:2114":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"16:2657:6001":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"22:830:1844":{"crate_id":22,"path":["proc_macro2","Span"],"kind":"struct"},"6:7214:7377":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:4145:3326":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:4771:9063":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"24:4521:1856":{"crate_id":24,"path":["syn","attr","NestedMeta","Lit"],"kind":"foreign_type"},"13:108:36359":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"21:2699:1845":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"6:6352:7264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"21:218:8483":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"17:10159:5231":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:46499:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:50736:8177":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:7197:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:47359:8110":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:1580:6572":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"18:564:5061":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:2811:5033":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:8137:21034":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:11594:5433":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"24:4033:124":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"5:7251:4552":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:47042:8088":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:2029:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:4817:4861":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"24:5431:3209":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"1:12356:1455":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"9:649:19905":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"2:52505:7566":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:8872:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:12342:1441":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"24:3225:3443":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"1:9288:7739":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:13203:5846":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"12:1628:4841":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"18:614:36441":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:11841:5470":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:9672:4651":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"12:1120:20039":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:20496:9177":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"24:4243:3482":{"crate_id":24,"path":["syn","token","Rem"],"kind":"struct"},"2:8658:2253":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"22:875:2173":{"crate_id":22,"path":["proc_macro2","Punct"],"kind":"struct"},"2:49154:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"5:3902:4843":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:9789:8143":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"24:0:1632":{"crate_id":24,"path":["syn"],"kind":"module"},"16:5878:20078":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:2747:3491":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:8014:2562":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:6342:4910":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:50416:3374":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:9031:36423":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:10283:21184":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"15:193:20060":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:4702:8879":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"24:5003:2427":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"18:719:5075":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:8506:7703":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:2653:8994":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:50878:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"20:151:3106":{"crate_id":20,"path":["quote","__private","ext"],"kind":"module"},"16:2683:6002":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:7931:4204":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:6524:7337":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"14:187:20054":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:8798:7719":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:3249:21159":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:8668:3365":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"22:748:7811":{"crate_id":22,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"1:3466:3363":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:51969:7543":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:11146:8221":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:20943:33645":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:6948:35226":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:52337:7561":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:1864:8915":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:11951:5501":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:4605:6898":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"24:4843:3156":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"2:51806:7537":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:4635:6058":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:8598:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"16:534:7856":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:6962:3265":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:6434:4917":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"18:481:7813":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:50859:7528":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:3125:21143":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:9831:21173":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:6572:7355":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:5898:4907":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:1686:6646":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:46863:8072":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:3165:29705":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:910:3265":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:4217:3336":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:13527:5953":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:50831:8181":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:4231:6760":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"21:2022:4590":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"2:47639:7509":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:4726:6952":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:48242:3705":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:11323:28307":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:13158:5835":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:46598:14401":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"20:0:1082":{"crate_id":20,"path":["quote"],"kind":"module"},"1:8939:9099":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:20334:9176":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:50556:8164":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:4274:6777":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:10310:21210":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:7166:20975":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:562:1860":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:1826:8904":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:5656:34570":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"24:2847:3431":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"2:1733:4501":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"21:435:4828":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"1:9550:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:1738:6668":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:13404:5917":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:7840:4927":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:7357:6179":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"5:2094:8017":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"24:4821:3151":{"crate_id":24,"path":["syn","expr","ExprBox"],"kind":"struct"},"2:58290:7653":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"21:650:3387":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"5:1257:8796":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:11188:14286":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:7064:3304":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"24:4916:3173":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"16:2631:6000":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:11168:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:20117:33848":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:2871:4904":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"24:1369:36599":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"17:12926:5775":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:8441:21044":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:10736:14289":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:9571:7749":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:3484:8967":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:7093:6158":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:2777:9173":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:12345:630":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:9865:8948":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:1915:4454":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:2248:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:6877:20974":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:12836:5754":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"24:640:3187":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"2:2887:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:4911:7259":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"24:4349:3490":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"12:861:8888":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"14:221:6312":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:1903:21121":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"18:736:24854":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:4804:6990":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:4510:9057":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:10894:5278":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"24:4952:1803":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"24:4272:3484":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"24:5452:3213":{"crate_id":24,"path":["syn","ty","Variadic"],"kind":"struct"},"14:165:20047":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:4297:4863":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:6415:7274":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:21130:8055":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"24:584:36820":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"12:2178:1769":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:5749:7160":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"24:4817:3150":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"2:46455:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:52361:7562":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:6860:3335":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:8055:21021":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"12:387:36354":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"24:5436:3210":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"17:12609:5679":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"5:632:8797":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:51103:8191":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:11407:4931":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:11129:3290":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:48399:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:10875:5275":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:7557:7988":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"24:3315:3447":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"24:5408:3202":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"6:4437:6834":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:2771:6006":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:7659:20981":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:2142:36316":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:46884:32504":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:21438:7426":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:9627:21096":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:965:8882":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"24:5414:3204":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"24:3261:3444":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"2:50631:8166":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"24:830:7799":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"2:50018:14274":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:53561:7626":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:46914:8074":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:10941:8144":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:1632:577":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:0:2983":{"crate_id":17,"path":["object"],"kind":"module"},"22:931:3265":{"crate_id":22,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"2:22010:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"24:4804:3147":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"16:5628:7879":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"15:175:20059":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:1962:21108":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:10957:8147":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"24:5423:2207":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:1500:6529":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:9350:5154":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:2589:4889":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:49926:14269":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:5841:7181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:6463:7949":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:10615:9117":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:9401:5179":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"21:53:4595":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"24:1361:3324":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"16:6123:6011":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:56950:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:20283:9185":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:20309:9186":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:1114:8890":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"12:1872:1817":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"16:6034:1810":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"24:3207:1766":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"6:554:6496":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:8802:34784":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"12:853:8887":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"21:966:4616":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"6:4307:6792":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:9609:8212":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:5504:7041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"24:5416:3205":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"5:1243:8889":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:681:8875":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:4273:9030":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:13007:5792":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:50230:8143":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:12768:5737":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:2763:3482":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"21:406:36503":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"18:599:5035":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:46944:14344":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:305:1411":{"crate_id":1,"path":["std","thread"],"kind":"module"},"6:4527:6859":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:12322:5564":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:8754:7718":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:2974:3275":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:12351:725":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:4843:9078":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:4722:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"24:5448:3199":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"17:11939:5499":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:11643:9118":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:12748:5731":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:11684:5449":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:50911:14509":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:7298:7986":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:9350:9137":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:50094:2755":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"24:4173:3477":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"1:524:4899":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"20:235:2068":{"crate_id":20,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"1:12358:1512":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:29720:32503":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:20522:9182":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:3352:4323":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:6816:7974":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:2822:3488":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"24:4900:3169":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"24:5455:2205":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"6:5582:7075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:6953:7361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:4461:6836":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:46565:3297":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:11188:7699":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:9274:21065":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:13091:5816":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:11606:5435":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:11676:7756":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:6392:7267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:8405:7698":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:52315:7560":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:784:4846":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:4909:7257":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:4368:3346":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:5180:9085":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"12:669:8882":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"24:1414:3276":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"2:47598:8119":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:9734:14276":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:8272:21038":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:719:8877":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"24:5180:3195":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"17:9317:21075":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:12335:409":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:5614:7878":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:52239:7558":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:11957:7758":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:4394:3347":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"18:624:36439":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"21:1813:4588":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"24:5140:3189":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"17:10490:5246":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:6109:6081":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:9857:21154":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:11168:14288":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:49906:14270":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:6517:7950":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:50703:8172":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:12164:5536":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:9433:21071":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:12073:5520":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:52458:7565":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"24:2469:3417":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"17:13071:5809":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:3872:4553":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:48268:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"21:2663:1844":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"24:4839:3155":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"17:10182:5232":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"24:4050:3468":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"2:9516:3270":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:52763:7586":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"9:622:19904":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"17:8212:21036":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"24:3189:231":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"22:702:1780":{"crate_id":22,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"2:48513:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"21:2760:1780":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"1:11424:4933":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:487:1770":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:5861:7195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:1404:8009":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"19:0:1009":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:1476:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:6502:4558":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:6593:7964":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:4215:9026":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:5585:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:12347:730":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:20931:7405":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"18:707:7824":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:0:1355":{"crate_id":1,"path":["std"],"kind":"module"},"6:4335:6808":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:887:3266":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"12:697:8883":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:990:8886":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"21:2616:3265":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"2:48260:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:4559:6874":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:12514:5596":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:11813:5466":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:1604:3266":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:21386:32489":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"24:2577:99":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"2:4:993":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:11343:5378":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"24:827:7798":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"17:12237:5552":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"24:427:36748":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"20:34:9042":{"crate_id":20,"path":["quote","ext","private","Sealed"],"kind":"trait"},"6:4427:6833":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"12:2205:3303":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"24:4892:3168":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"1:10356:8200":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:11511:7528":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"24:2883:3433":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"1:3091:9006":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:10854:21057":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:12336:1475":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"24:5015:3183":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"1:1608:3265":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:11734:5200":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:13214:5847":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:7266:7390":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"22:668:230":{"crate_id":22,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"24:4847:3157":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"16:3599:6040":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:56989:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:47629:4883":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"24:592:36821":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"5:5390:4557":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:781:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"22:897:1780":{"crate_id":22,"path":["proc_macro2","Ident"],"kind":"struct"},"1:9304:9136":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:12874:5760":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:4213:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:2918:3396":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:7309:6026":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"18:755:7831":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:50835:8182":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"24:3784:3451":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"1:8680:9017":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:1756:4500":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:8526:5161":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"24:5136:1983":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"6:5733:7156":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"24:2721:1793":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"6:4280:6779":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:8701:5166":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:13279:5891":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:7097:8027":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:10434:7848":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:10752:5269":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:969:8883":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:9661:14279":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:1532:6542":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:11341:7739":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"21:246:36541":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"6:4294:6787":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:6146:7927":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:49937:7522":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:9644:21084":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:8447:7802":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"24:3825:3454":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"6:5523:7043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:48124:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:8561:5162":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:12948:5781":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"24:5418:3206":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"16:7435:6183":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:8589:28296":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"1:8111:8195":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:36:4460":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:5517:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"24:3813:3453":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"24:3297:3446":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"24:5442:3212":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"9:800:6417":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:47004:14346":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:11259:5350":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:7980:20984":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:7959:8871":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"24:4884:3166":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"17:10075:21141":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"9:977:6436":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"24:5439:3211":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"17:13126:5827":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:5359:28338":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:10642:21055":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:2579:5998":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"12:393:36356":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:20049:4082":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"24:95:4152":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"7:0:1502":{"crate_id":7,"path":["unwind"],"kind":"module"},"24:4928:3176":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:11515:5420":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"24:4426:3617":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"17:1931:21086":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"21:1028:3382":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"6:1636:6616":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:9820:21172":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:50716:8176":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:12896:5764":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:1002:8888":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:9488:21089":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:2465:5993":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:1562:6562":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"24:2613:107":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"1:1889:8921":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:12334:920":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"24:1452:24877":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"1:8398:6176":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:5328:28338":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:4247:6765":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"24:2076:24878":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"4:0:2974":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"24:3934:3461":{"crate_id":24,"path":["syn","token","Div"],"kind":"struct"},"24:1468:9042":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"16:4413:6052":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:3169:32841":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:54068:7639":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:2285:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:353:4216":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:11302:6433":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"5:5138:14261":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:4515:6852":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"24:4509:3136":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"1:7997:8910":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:8158:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:7847:6230":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"24:2487:3418":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"17:12118:5529":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:11199:5337":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:3457:5085":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:10608:5134":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"24:4864:3161":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"24:624:36822":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"2:6469:2607":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:6298:7935":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:2874:35280":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"24:4383:3492":{"crate_id":24,"path":["syn","token","SubEq"],"kind":"struct"},"14:215:8001":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"24:4517:1855":{"crate_id":24,"path":["syn","attr","NestedMeta"],"kind":"enum"},"17:12211:5550":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:944:4553":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:6021:9128":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"12:815:8884":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:12980:5788":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:6156:4553":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:49837:34707":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:48703:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:11661:5444":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"12:1044:20037":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:7786:3708":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:8660:7713":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:12617:5682":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"12:2053:7981":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:5835:7180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:11235:5346":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:12359:1101":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:4139:6702":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:8128:8196":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:9165:36429":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"24:3099:3441":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"2:53213:7593":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:47591:8118":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:4565:6876":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:5740:14712":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"24:2434:3494":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"6:4683:6934":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:50425:8076":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:4849:6065":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:21845:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"24:5411:3203":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"2:9142:4889":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:50847:8185":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:3162:29704":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"24:4144:3475":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"24:3063:209":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"1:12301:8545":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:48327:3265":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:5834:7167":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"24:2228:3319":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"17:9339:21073":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:9422:21072":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:11811:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:967:21076":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:10682:5267":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:3488:3266":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:12550:5627":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:6293:7230":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:1938:8803":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:10845:5242":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:51784:7536":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:4706:6945":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:4888:6066":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"24:1758:3272":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"24:2955:3435":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"2:3996:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:9337:7741":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:11620:4934":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"5:1071:35282":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:6954:28295":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:8110:21019":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"24:5468:2143":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"1:545:4198":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"18:574:5055":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:46616:7503":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:2477:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"16:5510:7868":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:2793:6007":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:57015:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:11971:4898":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:2742:3292":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:5625:7104":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:3184:3350":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:1228:8890":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"24:4301:3486":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"17:10670:7853":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:9303:5175":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:10897:8997":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:575:6507":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:3010:20106":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:47297:8105":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:13221:5849":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:12349:728":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:12177:4941":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:4126:6692":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:50823:8179":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:8106:8948":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:52009:7545":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"24:5212:1988":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"1:628:2266":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:10528:21052":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:52999:7590":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"24:2901:2163":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"17:11368:5382":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:50851:8186":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"22:902:2487":{"crate_id":22,"path":["proc_macro2","Literal"],"kind":"struct"},"1:3427:8966":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"21:1201:193":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"6:6500:7329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"20:37:2840":{"crate_id":20,"path":["quote","format_ident"],"kind":"macro"},"2:1548:4861":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:48200:3265":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:21911:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:8674:9018":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:600:6520":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"24:5082:2457":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"16:5780:7896":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:2670:2415":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"24:424:5031":{"crate_id":24,"path":["syn","expr","parsing","AllowStruct"],"kind":"struct"},"17:13557:5958":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:47037:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"9:111:8506":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"2:50372:8151":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"24:4896:2043":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"22:708:2487":{"crate_id":22,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"2:47329:8108":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:3026:5081":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:4379:6830":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:2794:5044":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:7059:3704":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:4778:6973":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:7970:8000":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:2970:2260":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"5:6917:3265":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:2828:14395":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"9:586:6365":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"1:6818:9133":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:9751:7834":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:52639:7569":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"22:662:7810":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"17:13366:5907":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:39376:6360":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:12361:5574":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:6528:7951":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"20:226:2068":{"crate_id":20,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"2:8652:111":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:4430:9053":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:21340:7413":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"24:4920:3174":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"2:9339:9042":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:49998:14275":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:8166:28326":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:9108:21049":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:5541:7873":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"24:4584:3140":{"crate_id":24,"path":["syn","data","VisCrate"],"kind":"struct"},"2:47320:8107":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"12:1845:4551":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:2474:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"24:4944:3180":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"16:7929:20982":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"24:4219:3480":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"24:4825:3152":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"5:7157:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:10221:21207":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:8599:3363":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:7329:6027":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:8118:7658":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:6998:7374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:1611:4553":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:4064:4861":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"24:4021:3467":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"6:5510:7042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:581:6510":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"24:1690:3268":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"2:47147:8051":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"24:4829:3153":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"9:827:19976":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:5498:7038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"24:3859:3456":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"2:49897:8048":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:11217:5345":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:5412:8035":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:9430:4203":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:51760:7535":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:6376:20969":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:4534:6860":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:39412:1935":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:51868:7539":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"24:2343:3265":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"16:4545:6055":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:12972:5786":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:8822:36432":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:50899:8188":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"23:0:3105":{"crate_id":23,"path":["unicode_ident"],"kind":"module"},"24:2133:3312":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"6:4629:6909":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:20524:7403":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"5:6202:4843":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:3197:8999":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:5815:20965":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:4019:9020":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"24:616:36818":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"2:8654:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:4398:6831":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:52407:7564":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:5558:20963":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:7208:7376":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:29648:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:8464:2755":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:9930:5195":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:10936:4204":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:6558:14387":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"12:1003:8889":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:4761:6965":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:9844:21138":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:1959:3324":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:10207:21198":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:8656:3357":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:9458:21102":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:5793:7857":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:4749:9062":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:8457:8114":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:49224:14452":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:11133:8195":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:53671:7627":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:5189:9086":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:12353:1456":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"24:3888:3458":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"24:4530:1794":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"17:1771:21091":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"22:790:2487":{"crate_id":22,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"24:4454:1769":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"2:7788:3706":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:7603:6194":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"12:1840:4553":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:10321:5234":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:56976:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:1505:6531":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:9242:9113":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"5:3245:4551":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:3221:3352":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:5016:9044":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:11125:5326":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:11548:7755":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:9764:7835":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:6970:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:7511:6186":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:9071:36419":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"24:5061:2128":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"17:13134:5830":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:10455:5245":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:7183:8811":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:4327:6049":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"12:2190:36352":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:9805:5253":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:50176:8140":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:1055:34807":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:4737:6958":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:5014:9041":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:50843:8184":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:5405:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:11721:5453":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"24:1857:2021":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"24:5144:3193":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"2:47217:8095":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:21348:7414":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:6163:4910":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"1:996:8887":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:50126:8046":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:2876:7397":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:54013:7634":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:10881:8136":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:48475:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"14:40:1780":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:7372:36369":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:7117:36397":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:4096:6674":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:1123:8796":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:46439:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:13148:5832":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:6509:7332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:7005:3265":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"21:2694:3382":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"17:420:5120":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:2907:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:8013:8802":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:12134:5530":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:5981:7924":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:6418:4898":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:49188:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"16:6270:6014":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:21257:7408":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:7883:9042":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:6054:8538":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:4019:4450":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:48336:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:7079:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"24:4132:3474":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"24:4161:3476":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"1:411:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"24:608:36817":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"22:327:3283":{"crate_id":22,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"2:58311:7654":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"17:10403:5269":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:3132:35225":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"21:2603:230":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"17:13382:5911":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:12797:5745":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"18:690:7821":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:8911:36433":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:12350:729":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"12:1138:8796":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"8:0:2975":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:9778:7836":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:3199:9000":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:12046:5518":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:6800:6176":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"18:0:2984":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:9362:5181":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:5761:20964":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:46479:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:4665:6923":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"24:4940:3179":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"5:5724:4867":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:3958:9016":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:5664:7885":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:5587:7076":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:10233:21208":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:131:14804":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:7243:7384":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:4267:6774":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:3632:6041":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:6940:4854":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:2411:5991":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"21:2608:3283":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"1:6919:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:3367:14311":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:6466:8542":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:3188:6036":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:1105:8889":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"18:671:24853":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:2952:4452":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:900:3270":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"12:300:8007":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"24:1856:2021":{"crate_id":24,"path":["syn","parse_quote"],"kind":"module"},"5:3477:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:51838:7538":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:4721:6061":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:8540:9015":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:7872:7993":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"12:1534:20041":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"5:1387:3265":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:7474:14383":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:4239:6762":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:50158:8139":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"24:4932:3177":{"crate_id":24,"path":["syn","expr","ExprType"],"kind":"struct"},"21:997:230":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"17:11161:5333":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:4974:9088":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:3151:14328":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:51890:7540":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:4022:9019":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:47189:8091":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:12087:5523":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:11567:7749":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:678:8873":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"11:0:2978":{"crate_id":11,"path":["adler"],"kind":"module"},"6:5772:7166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:9566:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:13492:5940":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"24:4337:3489":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"2:11193:14284":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:51012:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:11087:5320":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:2806:4006":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"24:5318:1766":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"1:6028:9129":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:10394:7847":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:1608:6591":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:6690:6022":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:6923:8025":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:6409:7272":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:9858:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"24:2919:2486":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"17:8981:21047":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:11178:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:2840:14398":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:2401:8957":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"20:10:3122":{"crate_id":20,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"1:5905:4908":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:46961:3374":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:7179:8798":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:6496:20970":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"24:5146:3192":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"2:2728:1806":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:50682:14298":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"0:947:1653":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"24:5420:3207":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"16:4262:6047":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"24:4904:3170":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"16:4574:6056":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:1668:6639":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:6424:7277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:7825:2114":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:5691:9110":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:11356:5379":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:9250:21063":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"5:1091:34803":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:11828:5469":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:6719:36368":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:8631:5164":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:11799:4938":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:5737:7893":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:50052:7524":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:2658:3394":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:11503:30075":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:9712:5190":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"12:353:4836":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:6259:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:3635:3265":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"20:446:4002":{"crate_id":20,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"24:4495:1853":{"crate_id":24,"path":["syn","attr","Meta","List"],"kind":"foreign_type"},"6:6448:7289":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:11960:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:7574:28430":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:5713:7150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:8660:3366":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:8056:6236":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:11853:5471":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"15:214:8499":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"5:3623:8895":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:5235:6070":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:49416:8127":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:46625:2562":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:11639:5443":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:3699:4843":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:53873:7630":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:6829:7976":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:11974:5510":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:9248:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:3067:3289":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:7249:20976":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:46983:8082":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"21:2260:1769":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"22:881:1843":{"crate_id":22,"path":["proc_macro2","Spacing"],"kind":"enum"},"2:47054:32496":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"14:31:8790":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"5:2604:7398":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"24:1494:1774":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"21:2524:4594":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"2:10722:8799":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:6277:7218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:57002:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:3943:3270":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:4251:9027":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:4234:4863":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:2320:5987":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:8393:21042":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:6978:8026":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:5094:4843":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:6545:7349":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:1668:1065":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:53811:7629":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:7470:8893":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:686:8876":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"24:4582:3141":{"crate_id":24,"path":["syn","data","VisPublic"],"kind":"struct"},"24:183:1780":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"17:9885:21175":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"22:108:36588":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"1:11128:8215":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:29662:32505":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"24:4491:1852":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"2:20779:9204":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"5:1463:8894":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:10296:21183":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:7319:7987":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:49127:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"24:1751:3270":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"17:8494:5159":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"24:2248:3323":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"21:2369:2487":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"2:48863:2253":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"24:2757:3427":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"14:160:8790":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:6017:20967":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:586:6512":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:9870:4929":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:11479:7737":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:3501:3270":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"22:739:230":{"crate_id":22,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"22:762:1844":{"crate_id":22,"path":["proc_macro2","imp","Span"],"kind":"enum"},"6:5554:7064":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"24:4852:3158":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"2:20491:9042":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"16:6241:7933":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:4191:6737":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:9008:8209":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:8365:8965":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"12:1852:8011":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:9590:7750":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:52383:7563":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:8886:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"18:582:4082":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:51030:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:10529:2151":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:46521:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:6359:7945":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:2367:5989":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:49655:8130":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"10:0:2977":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:9021:21048":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:21289:7409":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:6668:6126":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:2665:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:3159:28687":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:2261:20079":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:4689:6060":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:8295:21039":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:51694:7532":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"12:60:36355":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:7543:6018":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:9691:21110":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:8997:7736":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:21325:32495":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:8523:7705":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"18:515:5058":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:47345:5072":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:2509:5995":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:52139:7555":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:8625:8204":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"2:21878:4210":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"24:286:36751":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"1:8483:152":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"6:1714:6659":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"21:2494:3385":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"21:2677:3381":{"crate_id":21,"path":["proc_macro","LineColumn"],"kind":"struct"},"2:22076:7427":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:12360:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:1518:6537":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:47614:8120":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:4339:3344":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:6350:4843":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:12860:5759":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:50668:8167":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:4179:6735":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:4921:6067":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:12278:5557":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"18:590:5062":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:6871:9135":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"24:4962:61":{"crate_id":24,"path":["syn","expr","parsing","raw"],"kind":"struct"},"2:47647:8121":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:20096:33851":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:2749:6005":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:5837:9115":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:7090:9174":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:8262:8995":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"24:4880:3165":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"6:4185:6736":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:12730:5726":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:1887:16120":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"24:4535:1836":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"17:12955:5783":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:7990:8192":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"18:531:7815":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:8951:36434":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:9382:9139":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:2757:3461":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"5:7140:8033":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:21183:8056":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"21:2739:2173":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"5:4219:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"24:1579:3262":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"2:52191:7557":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:4749:6062":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:2433:5992":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:3304:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:21746:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"21:2564:3385":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"1:8748:9018":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:51086:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:7267:7982":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:56963:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:4122:9021":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"12:2198:6361":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:46990:8083":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:5774:9114":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:9696:8046":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"21:2612:3376":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"24:4074:3470":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"1:9424:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:7220:7378":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:4745:6960":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:4653:6919":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"12:2080:8890":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"5:3119:8013":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"22:836:1845":{"crate_id":22,"path":["proc_macro2","TokenTree"],"kind":"enum"},"2:47408:8116":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:13506:5947":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:11034:5313":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:2557:5997":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:0:486":{"crate_id":2,"path":["core"],"kind":"module"},"21:183:4320":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"5:688:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:12352:1459":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:5699:7139":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:6538:7346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:12337:5242":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:9700:21109":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"24:3755:3292":{"crate_id":24,"path":["syn","token","Add"],"kind":"struct"},"2:49121:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"6:1643:6620":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"24:5308:3197":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"2:2773:3293":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"24:2595:2161":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"2:49408:8126":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:6269:7213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:3098:35218":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"18:636:5074":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:4590:9058":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:12909:5770":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:507:6465":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:50362:8150":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:7226:7379":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:6186:6013":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:7892:14285":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:539:6487":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:12307:5560":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:25285:7429":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"5:6644:4870":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:50312:8148":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"24:5216:1990":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"1:11939:7757":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"24:4518:1852":{"crate_id":24,"path":["syn","attr","NestedMeta","Meta"],"kind":"foreign_type"},"1:12357:774":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:8666:5165":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"22:0:1633":{"crate_id":22,"path":["proc_macro2"],"kind":"module"},"6:4200:6742":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"12:1859:8012":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"24:2793:3428":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"2:48209:3704":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:5184:20077":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"24:4556:1797":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"1:7884:4218":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:51065:8578":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:2480:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"12:1555:20042":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"5:288:1827":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:4102:6675":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"12:632:3266":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:50488:14293":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:2705:6003":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:2868:6010":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:4977:9062":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:7092:3399":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"12:777:4840":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"16:6676:6021":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:931:8010":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"20:349:3888":{"crate_id":20,"path":["quote","__private","RepInterp"],"kind":"struct"},"6:7279:7391":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:46639:3343":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:11836:14356":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:47620:4323":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:2557:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:3568:4843":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:12756:5732":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:13536:5955":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:20077:33647":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:2411:8962":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:11137:5329":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:4438:9054":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:8418:21043":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:4317:9032":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:9817:14277":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"22:686:1844":{"crate_id":22,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"6:4592:6893":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:6885:4921":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:6651:14379":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:2399:8956":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:48551:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:9405:7744":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"24:5394:3200":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"1:11724:8228":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:10420:5241":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"24:3905:3459":{"crate_id":24,"path":["syn","token","Colon2"],"kind":"struct"},"5:7080:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:14:2622":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:50391:8153":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"14:7:8790":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"24:4792:3144":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"6:7237:7383":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:4913:7261":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:3086:3266":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:11182:7824":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:5891:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:11617:5436":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:7980:7763":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:2026:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:9897:21176":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:11706:8585":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:8510:5160":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:12251:5553":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:3153:1817":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"5:6002:9215":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"22:753:36594":{"crate_id":22,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"5:5615:4553":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"24:4513:3137":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"12:119:4832":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:13176:5839":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:54079:7640":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:10335:14273":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"9:188:8509":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"5:4630:656":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:12674:5720":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:5447:20961":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:8017:1935":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:10949:5285":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:11637:8222":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/1.0.109/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.51/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.23/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"23":{"name":"unicode_ident","html_root_url":null},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"}},"format_version":24}