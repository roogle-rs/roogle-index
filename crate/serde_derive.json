{"root":"0:0:1745","crate_version":"1.0.188","includes_private":false,"index":{"0:0:1745":{"id":"0:0:1745","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[102,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2021\n# use serde_derive::{Deserialize, Serialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.188\")]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: derive_partial_eq_without_eq, clippy ::\nenum_variant_names, clippy :: manual_map, clippy :: match_like_matches_macro,\nclippy :: needless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: let_underscore_untyped, clippy ::\nmanual_assert, clippy :: map_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:963:1734","0:964:1742"],"is_stripped":false}}},"0:492-0:1018:1866":{"id":"0:492-0:1018:1866","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1018:1866","glob":false}}},"2:12288:28230":{"id":"2:12288:28230","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:3666"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11753:8429","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12246:320":{"id":"2:12246:320","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12247:319","`u8`":"1:12050:1544"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12277:2640":{"id":"2:12277:2640","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41757:181","prim@char":"1:12033:427","self::pattern":"2:11937:3666"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12353:1956":{"id":"2:12353:1956","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11898:127","`FromStr`":"2:11897:3336"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41899:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11897:3336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11897:3336","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12300:28234":{"id":"2:12300:28234","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:3666","str::rsplitn":"2:12303:28236"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43820:8507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12324:33450":{"id":"2:12324:33450","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12247:319":{"id":"2:12247:319","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12050:1544"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12360:33459":{"id":"2:12360:33459","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4523:33459"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44015:8461","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12355:26275":{"id":"2:12355:26275","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12266:33442":{"id":"2:12266:33442","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43980:8516","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12356:29336":{"id":"2:12356:29336","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39786:28144","Self::is_ascii":"2:12355:26275"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39786:28144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511:2117":{"id":"5:5511:2117","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12297:33444":{"id":"2:12297:33444","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11937:3666","str::split":"2:12285:28228","prim@char":"1:12033:427","str::split_terminator":"2:12294:33443"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43784:8505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14477","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12306:33445":{"id":"2:12306:33445","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12271:28238":{"id":"2:12271:28238","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:3666"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12248:1976":{"id":"2:12248:1976","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41757:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12294:33443":{"id":"2:12294:33443","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11937:3666","str::split":"2:12285:28228","prim@char":"1:12033:427","`DoubleEndedIterator`":"2:7388:121","str::rsplit_terminator":"2:12297:33444"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43766:8504","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:493-0:404:1867":{"id":"0:493-0:404:1867","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[14,0],"end":[14,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:404:1867","glob":false}}},"0:8:1859":{"id":"0:8:1859","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[216,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:12347:33457":{"id":"2:12347:33457","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:3666"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12330:33453":{"id":"2:12330:33453","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12245:33439":{"id":"2:12245:33439","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12257:33441":{"id":"2:12257:33441","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12039:1441","crate::ops::IndexMut":"2:3056:3321","str::slice_unchecked":"2:12256:33440"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12309:33446":{"id":"2:12309:33446","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14477","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12241:33438":{"id":"2:12241:33438","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12239:33437"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12326:33451":{"id":"2:12326:33451","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12236:832":{"id":"2:12236:832","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12033:427"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12258:2739":{"id":"2:12258:2739","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12259:28221"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12261:2321":{"id":"2:12261:2321","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12033:427"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43692:8499","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:963:1734":{"id":"0:963:1734","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[89,0],"end":[94,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:12235":{"id":"2:12235","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12236:832","2:12237:2087","2:12238:33436","2:12239:33437","2:12241:33438","2:12244:2851","2:12245:33439","2:12246:320","2:12247:319","2:12248:1976","2:12250:28197","2:12252:28198","2:12254:28199","2:12256:33440","2:12257:33441","2:12258:2739","2:12259:28221","2:12260:2327","2:12261:2321","2:12262:8417","2:12263:31623","2:12264:31618","2:12265:31144","2:12266:33442","2:12267:31641","2:12268:2189","2:12271:28238","2:12274:28239","2:12277:2640","2:12281:4211","2:12285:28228","2:12288:28230","2:12291:28232","2:12294:33443","2:12297:33444","2:12300:28234","2:12303:28236","2:12306:33445","2:12309:33446","2:12312:2083","2:12315:33447","2:12318:33448","2:12321:33449","2:12324:33450","2:12326:33451","2:12328:33452","2:12330:33453","2:12331:33454","2:12332:33455","2:12335:1995","2:12338:26074","2:12341:28240","2:12344:33456","2:12347:33457","2:12350:33458","2:12353:1956","2:12355:26275","2:12356:29336","2:12357:26277","2:12358:26278","2:12359:26279","2:12360:33459","2:12362:9032","2:12363:33460"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12291:28232":{"id":"2:12291:28232","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11937:3666","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12033:427","str::split":"2:12285:28228"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43734:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14477","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12256:33440":{"id":"2:12256:33440","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12039:1441","str::slice_mut_unchecked":"2:12257:33441","crate::ops::Index":"2:3052:2495"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12341:28240":{"id":"2:12341:28240","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:3666"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14477","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12357:26277":{"id":"2:12357:26277","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12335:1995":{"id":"2:12335:1995","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:3666"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12303:28236":{"id":"2:12303:28236","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12033:427","str::splitn":"2:12300:28234","self::pattern":"2:11937:3666"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43838:8508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14477","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5509":{"id":"5:5509","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5510:34114","5:5511:2117","5:5514:34115","5:5517:34116","5:5525:34117","5:5526:34118","5:5527:3380","5:5528:2318","5:5529:2317"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12328:33452":{"id":"2:12328:33452","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12237:2087":{"id":"2:12237:2087","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12321:33449":{"id":"2:12321:33449","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11937:3666","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12033:427","str::match_indices":"2:12318:33448"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43884:8511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14477","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12312:2083":{"id":"2:12312:2083","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11937:3666","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12033:427","str::rmatches":"2:12315:33447"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43920:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12259:28221":{"id":"2:12259:28221","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12258:2739"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12318:33448":{"id":"2:12318:33448","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11937:3666","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12033:427","str::rmatch_indices":"2:12321:33449"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43866:8510","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12332:33455":{"id":"2:12332:33455","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:3666"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11962:14475","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12267:31641":{"id":"2:12267:31641","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44008:8519","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525:34117":{"id":"5:5525:34117","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12331:33454":{"id":"2:12331:33454","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12285:28228":{"id":"2:12285:28228","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11937:3666","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12033:427","str::split_whitespace":"2:12263:31623","str::rsplit":"2:12291:28232"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43716:8427","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5514:34115":{"id":"5:5514:34115","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:964:1742":{"id":"0:964:1742","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[97,0],"end":[102,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"0:63:352":{"id":"0:63:352","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1878,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:86-0:993:1961"],"is_stripped":false}}},"0:86-0:993:1961":{"id":"0:86-0:993:1961","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[21,0],"end":[21,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::internals::case::RenameRule","name":"RenameRule","id":"0:993:1961","glob":false}}},"2:12244:2851":{"id":"2:12244:2851","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11497:14479"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:2318":{"id":"5:5528:2318","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12358:26278"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12315:33447":{"id":"2:12315:33447","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11937:3666","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12033:427","str::matches":"2:12312:2083"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43938:8514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14477","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5510:34114":{"id":"5:5510:34114","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:1930","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:4542","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:1930","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:4542","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:34116":{"id":"5:5517:34116","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5529:2317":{"id":"5:5529:2317","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12359:26279"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:34118":{"id":"5:5526:34118","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:1930","`String`":"5:7449:227"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:1930","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:4542","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12338:26074":{"id":"2:12338:26074","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:3666"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12359:26279":{"id":"2:12359:26279","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12350:33458":{"id":"2:12350:33458","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:3666"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14477","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12250:28197":{"id":"2:12250:28197","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41757:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:3380":{"id":"5:5527:3380","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12252:28198":{"id":"2:12252:28198","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12281:4211":{"id":"2:12281:4211","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41757:181","prim@char":"1:12033:427","self::pattern":"2:11937:3666"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14477","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1022:1964":{"id":"0:1022:1964","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"2:12263:31623":{"id":"2:12263:31623","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12264:31618"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43990:8517","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12264:31618":{"id":"2:12264:31618","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12263:31623"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43999:8518","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12344:33456":{"id":"2:12344:33456","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:3666"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14477","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12363:33460":{"id":"2:12363:33460","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4521:33460"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44033:8460","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12239:33437":{"id":"2:12239:33437","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12274:28239":{"id":"2:12274:28239","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:3666"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14477","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12358:26278":{"id":"2:12358:26278","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12265:31144":{"id":"2:12265:31144","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43970:8515","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12268:2189":{"id":"2:12268:2189","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12033:427","self::pattern":"2:11937:3666"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:14476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12260:2327":{"id":"2:12260:2327","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12033:427"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43686:8498","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12238:33436":{"id":"2:12238:33436","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12262:8417":{"id":"2:12262:8417","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43702:2861","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12362:9032":{"id":"2:12362:9032","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4524:9032"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44024:8455","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12254:28199":{"id":"2:12254:28199","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:4895:7101":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:10097:21356":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:6151:5019":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"24:4280:3582":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"17:12086:5498":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:1892:8869":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:8413:8056":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:4719:6219":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"24:4821:3240":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"16:7391:21262":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:8362:8047":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:2855:3357":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:6753:8334":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"21:433:4937":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"16:2907:6175":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"20:878:1950":{"crate_id":20,"path":["proc_macro2","Span"],"kind":"struct"},"2:22546:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"18:644:5191":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"11:986:9049":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:1073:8860":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:45706:7880":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:41670:31898":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"24:4152:3573":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"2:40189:8455":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:1565:4625":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:14420:6102":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:12496:5597":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:13792:5922":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:8154:21269":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:4944:7135":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"13:0:3069":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:10165:2255":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:21147:4562":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:4742:9194":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"24:608:3312":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"17:12737:5632":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:6915:6187":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:10086:9067":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"23:78:1952":{"crate_id":23,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"6:7564:7590":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:46203:7905":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"24:4000:3562":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"2:47041:7939":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"24:4036:3565":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"6:4556:6977":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"24:4222:3578":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"17:12293:5547":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:7805:3390":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:7102:21261":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"21:1393:1964":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"2:2772:231":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:7677:200":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:9762:34857":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"24:4909:3260":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"24:497:3322":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"17:14514:6123":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:44748:8557":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"24:2223:2574":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"17:14221:6055":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:43660:7870":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:6332:6176":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:3228:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:40682:3404":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:14378:6096":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:2766:6169":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:7688:4420":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"24:1068:1960":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"17:11991:5482":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:45951:7890":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:5798:6238":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:7282:3311":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:2472:6157":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"20:509:3330":{"crate_id":20,"path":["proc_macro2","LexError"],"kind":"struct"},"17:12983:5686":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"21:1062:1950":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"6:4963:7143":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:7568:6193":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:46297:7907":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:14434:6104":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:2829:5162":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:12007:5486":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:41030:8479":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:1426:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:13826:5925":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:881:8394":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"24:3390:3548":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"24:5486:3299":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"2:48144:7991":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:43766:8504":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:0:837":{"crate_id":6,"path":["libc"],"kind":"module"},"6:1536:6703":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:5799:7243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:48106:7989":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:44151:8528":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:12765:5637":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:6589:7432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"24:4403:3591":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"2:30509:4493":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:6077:7371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"24:5494:3301":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"2:2910:5171":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:12039:1441":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:2353:184":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"5:4348:248":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"24:5083:3269":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"23:272:1960":{"crate_id":23,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"1:356:4430":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:2881:6174":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:2993:2432":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:46349:7909":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:21000:9325":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"2:2168:4563":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"6:4908:7111":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:8882:8068":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:11356:8584":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:629:8861":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:2876:3572":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"11:1068:20314":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"11:1103:20315":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:10774:8561":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"5:7425:8418":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:10533:9156":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"20:899:1870":{"crate_id":20,"path":["proc_macro2","Group"],"kind":"struct"},"17:10903:21445":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"21:2775:2571":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"6:4328:6857":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"24:4803:3236":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"24:5153:3276":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"17:12724:5630":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"21:2269:1870":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"1:11159:8066":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:3983:31921":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"24:5370:3284":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"17:10628:8216":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:40276:8455":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:8004:31315":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:6560:4941":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:5369:4975":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:10348:14472":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:9521:21332":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"24:4859:3249":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"2:43884:8511":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:39592:14553":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:9752:21336":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:12305:5550":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:6015:7354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:14269:6056":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:12024:5488":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:11235:8227":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:12945:5681":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"18:507:5191":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:1513:6693":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:7503:6190":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:12775:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:1717:6819":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"11:723:8393":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:40812:3421":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:23323:222":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:10420:5186":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:43614:8436":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:7523:8369":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:22089:7616":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"24:5155:3272":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"1:10431:9264":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"8:0:3071":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:10646:5408":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:12685:5626":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:5044:7184":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:4389:6898":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:1075:21361":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:6485:4951":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:41693:8487":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"24:2778:3524":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"24:4790:3233":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"6:4781:7049":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:6467:8317":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:10440:21435":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"5:4426:4977":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:14499:6122":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:48080:7987":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:47225:7941":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"24:5182:2264":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"1:10990:8067":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:12555:31580":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"24:3288:1919":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"2:2520:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:12046:760":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:6415:8313":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"11:2194:6529":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:10310:14464":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:11037:5052":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:9381:196":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:10661:21475":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"24:1332:3453":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"1:6431:3377":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:9998:5299":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:11062:21509":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:7742:8558":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:12136:5505":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"7:32:20221":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:6165:4651":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:6607:7439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:46181:7904":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:46729:7933":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"24:598:3311":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"2:3223:237":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:4764:7038":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:11124:21486":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:4032:4951":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:10059:5331":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"11:2180:6526":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:12045:763":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:44033:8460":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:904:4625":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"24:4350:3587":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"2:44632:207":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:10916:21444":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:4239:9209":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:7191:3311":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:4477:9212":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:2962:7605":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:40840:3423":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:3234:14504":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:40303:8462":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"5:7365:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:6625:7448":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:13710:5901":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:4641:7463":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:582:1964":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"9:393:20236":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"23:344:1139":{"crate_id":23,"path":["quote","quote"],"kind":"macro"},"2:2859:5166":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:7870:8001":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:1582:8397":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:5621:208":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:7342:34809":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"21:2577:3495":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"6:6726:7479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:7231:34337":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"24:4913:3261":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"17:9488:34853":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"20:810:1950":{"crate_id":20,"path":["proc_macro2","imp","Span"],"kind":"enum"},"1:9982:8484":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:11497:14479":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"20:787:236":{"crate_id":20,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"2:6821:3406":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:6879:6291":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"24:151:1876":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"6:579:6671":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:5829:7253":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"24:4362:3588":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"2:21056:9330":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"16:5696:21249":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:30525:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"5:5612:4631":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:3743:9173":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:6167:5036":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:30503:4492":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:2812:3500":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"5:895:3312":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:1011:4951":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:5128:4981":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"5:5318:4951":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:2767:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:41023:3375":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:12055:808":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:9921:21371":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:494:6621":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"24:4944:2495":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"17:8848:21325":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"24:5341:2479":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"2:22645:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"24:1506:3439":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"24:4925:3264":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"10:36:6531":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:9701:21335":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:7388:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"21:1818:4648":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"24:3135:3539":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"2:10462:8507":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:8994:4414":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:11982:8633":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:573:6668":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:7651:21266":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:11291:5055":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:9630:8425":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:3263:9158":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:6243:1912":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:4585:6216":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:1576:8396":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:11023:5385":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:4917:9238":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:3632:3311":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:43734:8430":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:7613:21264":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"11:667:8955":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"24:925:3271":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"1:7662:4421":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:14346:6081":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:39786:28144":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:9844:5014":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:7910:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:13113:5706":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:5785:8961":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:21014:4562":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"16:5830:8260":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"24:4947:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"17:12373:5554":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:8195:8383":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:21186:9322":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"24:258:8853":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"15:0:3077":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:2845:5165":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:13274:5395":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"24:1747:8974":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"2:3003:3502":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:1473:8394":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:4171:3451":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"24:2042:3318":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"16:536:8237":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:12044:659":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"20:979:3311":{"crate_id":20,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"17:256:34851":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"18:609:34875":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"11:2201:3367":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:4374:6891":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:6796:7530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:11518:9173":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:10383:8430":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"24:5087:2541":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"5:6788:4632":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:6916:3371":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:10031:225":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"24:2863:3527":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"17:9086:5309":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:9867:5325":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:3347:9147":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:7802:3388":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:7462:6341":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:619:8867":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:44447:8547":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"24:2035:3316":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"24:1601:3436":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"17:12452:5588":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"14:31:8854":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"24:4885:2151":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"21:478:4938":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"1:12051:1541":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:11454:5057":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"24:4838:3244":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"1:11216:8090":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:8210:3421":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:22843:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:2755:223":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:30539:31941":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:9780:21337":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"23:504:4114":{"crate_id":23,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"16:6968:21259":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:2595:8872":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:6352:8309":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:3800:4625":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:4984:7155":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:47075:7940":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"24:4374:3589":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"16:4986:6228":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:7290:3311":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"24:4065:3567":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"2:10490:14471":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:10292:5335":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:6944:34794":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:7211:4627":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:1928:670":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"6:6130:7382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:4966:3830":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:22264:9177":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:5310:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:4992:7157":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:2918:5170":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:11539:9175":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:2012:21392":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:6648:219":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"15:394:20352":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:12038:1411":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:13876:5942":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:10520:8207":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:6798:4633":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:5564:7369":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:9051:21306":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:11000:5384":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:8838:8066":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"24:5503:3288":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"2:41899:212":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:5979:7339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:2305:20387":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"16:2832:6172":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:4239:209":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"5:878:4959":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:9070:5308":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:8572:8568":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:7523:7581":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"24:4893:3256":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"2:22202:31937":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:7269:34832":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:4557:6215":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:13890:5945":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:14042:5981":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:9933:21365":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:1980:187":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"24:5282:3281":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"2:2927:5174":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:1554:3312":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"24:5475:3297":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"2:43920:8513":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"5:207:4545":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:7253:200":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:7642:9125":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:7436:6340":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"24:2846:2211":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"11:97:8386":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"21:2014:4649":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"2:10021:9125":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:41587:7841":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:12111:5503":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:11314:9267":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"24:4897:3257":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"2:40284:8461":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:22140:7620":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:9138:8078":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"18:521:25359":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:12970:5684":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:9829:5010":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:8946:9289":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:12056:1599":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:22513:179":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"16:2380:6153":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:2817:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:6598:7438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"24:4870:3251":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"2:2777:2412":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:7517:7580":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:13487:5795":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:4887:7096":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:8876:3311":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:42851:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:4823:9193":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"24:4579:3230":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"24:4575:2100":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"17:12196:5518":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:10714:21477":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:12997:5687":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:5074:7193":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:7350:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:46251:7906":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:10476:8508":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:45750:7882":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:2888:4121":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"11:630:3312":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"11:798:9044":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"18:707:8191":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:8156:8041":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"24:4929:3265":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"6:4973:7149":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:11817:5060":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:8978:21329":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:44723:8556":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:4754:7032":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:3114:9161":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:12237:5530":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"5:1672:4951":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:9823:21349":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:11381:5403":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:13897:5947":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:11815:5441":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:11962:14475":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"20:693:8178":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"17:11244:5424":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:7660:6346":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:32257:6528":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:7554:6192":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:4007:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:5737:7200":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:13739:5909":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:2960:33236":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:8473:3840":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:5068:7191":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:14478:6119":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"24:3913:3557":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"2:45818:7885":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:10084:21357":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:4627:9183":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:5008:7162":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:2923:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"16:4641:6218":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"11:836:9047":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"24:4449:2564":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"1:5448:9261":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:5775:7227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:4463:6932":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:2914:5172":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:9985:21358":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:21012:31684":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"2:10989:14465":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:39599:7708":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:10447:21411":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:40610:3401":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"24:3867:3554":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"6:5920:7306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:3464:9122":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:587:6676":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:4787:7052":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"24:93:9125":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"2:41061:3383":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"20:829:1882":{"crate_id":20,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"6:5967:7332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:635:9034":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:8503:9252":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"24:4816:3239":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"2:40430:4999":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"24:1089:1960":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"17:11719:21343":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:4344:6210":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"24:1489:1957":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"type_alias"},"17:12959:5683":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:8200:3407":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"24:4475:2217":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"17:9607:21334":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"21:2503:3494":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"11:285:8387":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"24:1772:1875":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"20:733:1882":{"crate_id":20,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"24:53:1959":{"crate_id":24,"path":["syn","token"],"kind":"module"},"24:5454:3291":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"20:873:236":{"crate_id":20,"path":["proc_macro2","TokenStream"],"kind":"struct"},"17:10112:21379":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:4315:6847":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:6401:6178":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:44015:8461":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:4616:6989":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:5435:6235":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"24:5070:2018":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"1:8395:3834":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:5712:8249":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"18:755:8198":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"11:2186:34781":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:13024:5691":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:1544:4975":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"5:3594:3316":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:11191:5392":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"24:2176:9125":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"24:94:4259":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"20:739:2571":{"crate_id":20,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"24:1405:1955":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"1:3304:9155":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:5743:8254":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:11048:21500":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:10637:8217":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:5816:8259":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:46327:7908":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:1776:4625":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"21:140:4661":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"2:40440:9103":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:2504:6158":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:5890:7283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:7015:6301":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:4393:4975":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"24:5336:2478":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"2:41891:195":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"21:648:3496":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"17:13989:5966":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:8561:8064":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:4475:6937":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:2834:5163":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:9912:21353":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:20964:9323":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:4571:9230":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:2526:241":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"11:119:4942":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:11937:3666":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"5:2690:7606":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:14100:5999":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:8463:7863":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:12036:1073":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"16:3888:6207":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:7309:3395":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:6929:6296":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:500:6623":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:11639:5392":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:46548:7915":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:8134:8382":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"24:343:35020":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"15:288:20342":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:44467:8552":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:6544:8874":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:3512:30683":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:7782:8371":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:7575:7594":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:40216:31938":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:5242:192":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"24:5040:2438":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"24:2608:3519":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"6:1495:6685":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:6792:8346":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:44706:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:5727:8252":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:9350:5317":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:6499:6196":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:46021:7893":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:5517:3412":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:44439:8545":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"5:1464:8393":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:7926:8873":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:13949:5956":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:860:3311":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:10126:8199":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"11:1048:34782":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:782:4954":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"24:5147:3273":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"1:4036:9184":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:6721:21257":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:48182:7993":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:7858:9120":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:14448:6111":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:4587:6987":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:32304:31923":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:12184:5517":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:40204:8457":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:4637:7459":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"18:491:8181":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:414:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:20962:9125":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"7:79:20228":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"11:968:8364":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"11:1838:8395":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:12778:5638":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:3389:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:43569:3396":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:9479:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:9207:5313":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"18:574:5191":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:1055:9049":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:42226:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:2406:3085":{"crate_id":1,"path":["std","io"],"kind":"module"},"24:5102:2225":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"6:7272:7563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:11173:21513":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"18:481:8180":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"24:1448:25382":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"2:41755:183":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:40355:8467":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:10980:5335":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:6984:8876":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"11:1012:9050":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"21:2643:3311":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"1:10819:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"18:538:5195":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:9650:5335":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"24:4933:3266":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"24:4905:3259":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"20:120:34884":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"16:7474:21263":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:1500:6687":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"5:2049:9052":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:12422:5579":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:7667:4423":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:6041:21253":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:1761:624":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:11535:8234":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"24:4493:3213":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"2:9062:33198":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:4685:6996":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:4550:6975":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:11586:5423":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:7492:8365":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"24:4583:2144":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"24:1863:3308":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"16:5403:5308":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:8294:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:41052:3381":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"18:582:4200":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:8895:21326":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:43027:8492":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"24:4807:3237":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"2:3268:3480":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:47683:7975":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:0:1433":{"crate_id":1,"path":["std"],"kind":"module"},"2:9812:5009":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:43266:8495":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:10240:5327":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:8223:8427":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:7544:8370":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:10421:14469":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:11897:3336":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:62:14866":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"21:2690:1950":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"2:44511:8553":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"24:5373:1865":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"5:3720:3449":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:2269:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"5:7245:3311":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:44008:8519":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:2209:21409":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:5575:3400":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"24:844:5157":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"2:43503:8432":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:4391:9204":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:40623:3416":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"20:945:1882":{"crate_id":20,"path":["proc_macro2","Ident"],"kind":"struct"},"2:22810:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:11679:8506":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:1575:6728":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:1603:6747":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:10799:8001":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"5:4234:3312":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"11:311:8390":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:12048:762":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:43522:8434":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:2898:3585":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:6254:5029":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:44642:213":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"24:5298:2247":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"2:50027:9334":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:6720:7478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:4074:3316":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:6547:9282":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:13071:5698":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:46651:7917":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"24:2897:3529":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"2:44100:14490":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:10536:9158":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"24:5507:3289":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"17:11111:21487":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:8930:9287":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:7599:7599":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"23:35:9125":{"crate_id":23,"path":["quote","ext","private","Sealed"],"kind":"trait"},"20:675:3449":{"crate_id":20,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"2:44451:8548":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:1426:3316":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:40460:3396":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:14324:6075":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:547:6655":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"24:2744:3522":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"17:10430:21434":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:2530:240":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"14:187:20330":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:43019:8491":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:13966:5963":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:910:9043":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:12123:5504":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:8242:9171":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:44693:7877":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"24:3254:1865":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"16:4806:6222":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"21:2754:1949":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"24:2241:5159":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"2:48054:7985":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:41882:4551":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:8860:3312":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:39450:200":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"24:4833:3243":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"18:0:3080":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:6171:7408":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"21:2302:2274":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"2:42187:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:4854:7079":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:12053:1543":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:39419:8453":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"11:736:8394":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"23:148:3861":{"crate_id":23,"path":["quote","__private","HasIterator"],"kind":"struct"},"1:868:8393":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"24:1726:8973":{"crate_id":24,"path":["syn","path","printing","span","QSelfDelimiters"],"kind":"struct"},"2:41806:1931":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:39333:14502":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:308:1493":{"crate_id":1,"path":["std","thread"],"kind":"module"},"6:4794:7054":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:8988:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:7862:8372":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:14355:6083":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:46058:7895":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:2322:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:10539:9154":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"5:6439:4627":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:2428:6155":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"20:356:3330":{"crate_id":20,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"2:48025:7982":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:12888:5669":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:12062:5494":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:2815:1908":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"21:2241:3333":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"17:14024:5977":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:9079:8076":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:10534:8208":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"24:4205:3577":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"2:7346:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:4862:7084":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:10764:8572":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:9328:2861":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:11710:5395":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:40397:9090":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"24:4531:1942":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"1:8247:9168":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:32318:8452":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:12208:5519":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:1663:6795":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:8794:21323":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:10726:21478":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:10788:21480":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:4746:9197":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:2548:6160":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:40291:14520":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:8009:8966":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:10370:21386":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:22125:31914":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:11389:21338":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:40549:3411":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"14:165:20323":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:40480:3397":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:11337:21514":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:6156:7397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"24:2761:3523":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"24:1140:8146":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"16:8205:21271":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:41967:185":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"11:2049:9049":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:3995:31930":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:7580:5046":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"15:327:8931":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:10771:5348":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:7378:30278":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:6036:7360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"14:202:2314":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"5:1138:33240":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"21:2328:1882":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"6:4291:6830":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:30279:9176":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:10474:5051":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"18:671:25358":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:41564:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:43036:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:40658:3419":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"24:4901:3258":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"1:4159:9205":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:44348:8542":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:1587:1919":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:12154:5513":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"21:1195:198":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"6:1709:6815":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"11:644:3316":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"24:4077:3568":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"18:515:5194":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"18:113:25346":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:8659:21305":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:40502:3398":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"24:3896:3556":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"6:1595:6742":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:6136:7383":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:8050:3214":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:9044:8073":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:7134:27825":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:44459:8550":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"24:4559:1726":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"16:5905:8268":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:12533:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"23:345:2572":{"crate_id":23,"path":["quote","quote_spanned"],"kind":"macro"},"16:2810:6171":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:2618:6163":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:11393:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:41621:9169":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:4098:3484":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:41831:3311":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:10504:14470":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:39538:205":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"5:2461:7603":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:638:9035":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"5:4985:4975":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:6696:6275":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:46887:7936":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:555:4417":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:13101:5704":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:9067:8958":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:488:6618":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"24:551:8142":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"1:850:3316":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:5982:8277":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:14083:5995":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:3735:9052":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:12034:1560":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:4606:6988":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:4729:7019":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:6279:6245":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:2788:6170":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:4:1035":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:42774:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:5882:7278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"24:2625:3520":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"24:5326:2552":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"24:3305:3543":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"6:5900:7290":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"20:796:8179":{"crate_id":20,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"11:403:34775":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:149:4939":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"24:549:128":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"2:21265:9319":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:48221:7994":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"24:5512:2437":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"1:7853:4812":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:10366:21397":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:4917:7117":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:8236:9172":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:2321:6144":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"24:4873:3252":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"2:45880:7887":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"24:3809:3550":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"2:22057:7615":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:2904:3587":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:44490:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:4745:6220":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:40642:3418":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:8014:9152":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:11295:8230":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"11:1845:8396":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:12057:1159":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"5:7261:8411":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:3150:3335":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:6600:21256":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:12750:5634":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:2921:212":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:4320:3473":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"23:38:2950":{"crate_id":23,"path":["quote","format_ident"],"kind":"macro"},"24:4053:3566":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"2:1467:2434":{"crate_id":2,"path":["core","mem"],"kind":"module"},"1:5628:5029":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:5433:9260":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:8179:9124":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"24:921:2945":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"6:7552:7588":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:14090:5996":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:1558:3311":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:4319:9210":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"24:3033:3535":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"1:2886:5026":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:13723:5906":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:3996:9182":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:12052:1542":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:10227:21390":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:9617:34864":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:3764:6204":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"24:4866:3250":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"1:4702:9239":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"24:1338:35062":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"17:13188:5721":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:5818:7245":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"24:673:35067":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"16:6456:8316":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"24:4881:3254":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"2:46965:7937":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:2765:229":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:11753:8429":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:1257:8364":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:4800:7057":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:4483:6942":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:4417:6211":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:3915:6208":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"9:507:6592":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:7809:3391":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:21613:9324":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:1747:7609":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:5767:7225":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:2243:8406":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:11607:31299":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:13135:5717":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"21:2749:2274":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"17:11226:8226":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:7359:3393":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:11951:8191":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"18:690:8188":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"24:3203:3541":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"24:3959:3560":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"24:4181:3575":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"2:5457:4975":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:915:8955":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:2211:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:4046:9185":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:2379:9111":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"24:909:35215":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"17:13838:5928":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"18:699:8189":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:43604:14468":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:5830:5031":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:1288:9049":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:2406:6154":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:3178:8396":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:10340:5342":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:4949:7137":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:11171:30160":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:8806:9264":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"16:7582:6342":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:8167:21270":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"24:5356:3286":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"17:12074:5497":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"14:160:8854":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:43866:8510":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:3171:3312":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:11201:8218":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:11872:5453":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:10616:8214":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:14110:6002":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:10179:3312":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:42802:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:22579:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:40246:8458":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:929:9045":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:3390:3381":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:13202:5724":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:43980:8516":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:9625:14531":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:11074:21510":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:14536:6129":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:6565:7415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:5673:6181":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:43532:14462":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:21285:7612":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:5751:9277":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:6618:7444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:40256:8459":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"18:624:34872":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"24:5365:3285":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"20:820:1870":{"crate_id":20,"path":["proc_macro2","imp","Group"],"kind":"enum"},"2:43011:8489":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:14316:6074":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:43595:8435":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:2820:4190":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"24:2948:3532":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"24:4193:3576":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"2:47431:7973":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:8983:8962":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"24:5346:3283":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"2:40633:3417":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:9196:30403":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:11886:5454":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:3212:8395":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"24:4263:3581":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"20:801:34876":{"crate_id":20,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"16:6569:6184":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:11022:14466":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:8281:6399":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:22004:8439":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:4527:6214":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:2744:6168":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:6732:2699":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:643:9036":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:3655:5222":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"21:244:34941":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"1:6199:8965":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"5:1273:9050":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:8239:2650":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:6637:4951":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"11:1858:1919":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"24:4024:3564":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"2:20811:33174":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:4469:6934":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:7318:6323":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:4678:6994":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:12040:1525":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:11162:5387":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:6386:6250":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:14401:6097":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:41815:3312":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:14163:6013":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:40601:3415":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"24:4983:1890":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"1:4188:9208":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:41729:7850":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:10383:21385":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:13758:5910":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:21722:33058":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:8914:9288":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:47969:7980":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:2526:6159":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:10186:8202":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"24:4586:2224":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"2:44122:8520":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:9174:31291":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"17:13040:5693":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:3213:14552":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:14033:5980":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:2477:9125":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"24:4234:3579":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"24:2727:116":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"1:502:4410":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:10012:5335":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:3418:4975":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:47823:7977":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:7540:8877":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"4:0:3070":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"6:5863:7276":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:11179:7874":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"21:2770:1882":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"6:554:6658":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"24:3373:3547":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"17:10478:5344":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:13298:5742":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:45981:7891":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:12513:5600":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:44463:8551":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:11617:5424":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:4842:7075":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"5:7349:3368":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:20809:33169":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:261:34863":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:8302:9203":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"24:5478:2439":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"17:13451:5764":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:2982:3481":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"24:1133:8143":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"2:41942:3312":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"24:5187:3279":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"17:14173:6018":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:6844:6287":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:22238:7633":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:21219:9317":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:8284:8563":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:481:5021":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:2250:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:6154:3402":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:21395:9327":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:11054:5054":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:39474:201":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"9:450:20235":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"5:2131:4410":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:7765:8868":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:20781:33060":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:13567:5857":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:4770:31636":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"21:216:8913":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"17:12473:5592":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:7597:34795":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:12671:5353":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:676:234":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"23:235:4118":{"crate_id":23,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"1:7769:2039":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"6:7505:7578":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:2670:6165":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:40268:8460":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:2871:5169":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"24:1533:2897":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"11:1501:20316":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"24:4877:3253":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"6:4955:7138":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:5634:8243":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:5322:6233":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:14296:6068":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:3187:31083":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"18:531:8182":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"22:0:3200":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"2:21388:9125":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"9:0:3072":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:43999:8518":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:4740:7026":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:14282:6062":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:11761:5434":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:8579:14476":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:5363:6234":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:40520:3408":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:7128:8073":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"20:727:1870":{"crate_id":20,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"24:4488:3214":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"24:885:35212":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"24:2557:3516":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"6:4770:7041":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"20:117:8177":{"crate_id":20,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"17:13228:5726":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:7918:31074":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:7731:9040":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:2317:190":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:11215:8222":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:42786:6371":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"24:5145:3274":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"2:31073:185":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:22231:8445":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:1561:4627":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:0:291":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:3238:1919":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:4723:7016":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:11281:5394":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"5:3669:4951":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:6688:7468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:8472:3841":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:2156:601":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:13632:5893":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"24:5143:2091":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"1:7529:1964":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:4938:7132":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:6614:5041":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:9383:3461":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:13868:5939":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"24:5471:3295":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"2:2517:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"24:893:35214":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"2:39560:3361":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:14156:6011":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:7313:3394":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:43970:8515":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:30597:31940":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"24:2230:9125":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"17:13693:5900":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"23:407:3999":{"crate_id":23,"path":["quote","__private","RepInterp"],"kind":"struct"},"2:4030:4534":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:9886:21351":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:5397:9258":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:41037:3377":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:7884:21268":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"11:1517:20317":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:9330:212":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"16:6268:34830":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:46470:7913":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:4818:7065":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:22777:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:952:9048":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"24:3220:2483":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"2:47573:7974":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:43838:8508":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:11742:5431":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:362:4431":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:11467:14607":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"24:2795:1895":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"2:10228:8427":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:3232:21443":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:14056:5988":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:6083:20361":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"18:636:5209":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:22113:8443":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:41079:3387":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:482:6615":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:11145:8065":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:6204:8915":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:3315:6201":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:2573:5010":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:2839:5164":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:10685:21441":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:4058:9188":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:2922:5173":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:11358:21515":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:22678:180":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:6818:8347":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:8894:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:4833:7069":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"24:4917:3262":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"6:1545:6709":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:7463:8419":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"20:15:25383":{"crate_id":20,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"1:12037:317":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:44735:4540":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:8115:8379":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:6901:6186":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"24:2914:3530":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"2:46040:7894":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"11:749:4627":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"20:929:1949":{"crate_id":20,"path":["proc_macro2","Spacing"],"kind":"enum"},"2:40383:8468":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:21834:9320":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"24:5449:3290":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"21:2729:3332":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"16:2450:6156":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"9:52:8935":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:4638:6991":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"24:4811:3238":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"1:11048:5053":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:3225:9157":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"18:614:34874":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:7250:7562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:47011:7938":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"24:3237:237":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"24:4829:3242":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"24:2540:3515":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"2:12008:14484":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"24:3833:3552":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"2:41046:3379":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:894:4627":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:12738:5019":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:5130:193":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"21:183:4278":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"16:5866:8266":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:6742:8333":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:1630:600":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:11407:21339":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"11:332:4944":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:22148:7621":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:12846:5648":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:6687:8332":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:26133:250":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:6834:7547":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"5:1102:33238":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:40672:3420":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:6261:8914":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:12280:5546":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:13148:5718":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:20796:33060":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"16:4774:6221":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:5058:7190":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:13685:5899":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:11687:21342":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:6346:8930":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"11:1538:20318":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"24:4798:3235":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"2:10271:8429":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:5588:6180":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:42811:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"16:5017:6229":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:41604:7843":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"11:805:9045":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:0:3078":{"crate_id":16,"path":["gimli"],"kind":"module"},"24:4094:3569":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"2:9341:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:526:6643":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:2141:8399":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:3223:9156":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:46151:7903":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:21397:7612":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"24:3339:3545":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"24:4546:3228":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"16:3049:20390":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"5:1523:9051":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:6425:8314":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:4518:6961":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"24:4251:3580":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"17:8953:21328":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"24:2812:3525":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"1:3302:9154":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:4796:814":{"crate_id":2,"path":["core","iter"],"kind":"module"},"24:4863:2226":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"1:10829:8042":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:48129:7990":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:7041:8357":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"24:5331:2262":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"2:42756:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"7:0:1589":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:5053:31300":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:11272:8229":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:12576:5611":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:8072:6393":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:7546:7587":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"21:2630:236":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"1:2363:4553":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:8167:8042":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"13:110:34784":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:4949:6227":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:4744:9196":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:9277:5315":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:9373:3454":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:13914:5950":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:2762:3499":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"5:1302:8860":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:11951:5471":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:4848:7076":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"18:660:25357":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:6362:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:9574:34861":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:8181:6197":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:9385:3462":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:6226:21254":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:12876:5667":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:10769:8574":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:3190:31084":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:7360:34827":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:21369:9318":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"6:1673:6801":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:1696:6811":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:7694:6194":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:5923:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:30469:4491":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:41741:7851":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:2766:228":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"20:838:2571":{"crate_id":20,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"5:5769:235":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:13244:5728":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:2247:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:13085:5700":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"9:486:20234":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:11086:21511":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:9104:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:4568:6986":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:43582:14459":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"20:717:1950":{"crate_id":20,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"1:5758:9278":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"11:695:8956":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:13778:5918":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:5384:21247":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:12810:5642":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:6017:21252":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:9390:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:10960:9262":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"18:652:5191":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"24:5061:2546":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"6:4446:6926":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:11788:5435":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:10023:21335":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"24:842:9125":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"2:2809:4187":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:1921:9085":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:5976:3425":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:12033:427":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"23:239:4120":{"crate_id":23,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"1:6471:5040":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:10507:8206":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:7054:8359":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:822:4957":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:40489:3407":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:13676:5898":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:40511:3399":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:9286:4703":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:10809:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:1814:9067":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:4929:7126":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:11198:8078":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:2365:9108":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:9109:220":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:12054:1540":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"5:4002:4627":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:1776:9057":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:4835:6223":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:10750:5346":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:724:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"24:3067:3537":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"2:43494:8431":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:42513:3454":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:9972:21359":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:5648:21248":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:43624:14467":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:7182:4542":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:9157:8571":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:10197:21403":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:40336:7837":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"24:2999:3533":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"24:286:35107":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"5:7545:4626":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"18:96:25345":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"24:4850:3247":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"17:10165:21381":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:42031:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:2150:21422":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:4395:6900":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:10397:21433":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"24:5011:2510":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"2:4129:3485":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"24:554:5150":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"6:6775:7516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"21:404:34938":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"6:6850:7553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:21203:9125":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:40540:3410":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:8147:3374":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:1184:21366":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"5:7529:4625":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:11306:5395":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:653:15276":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"24:5292:192":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"10:0:3073":{"crate_id":10,"path":["adler"],"kind":"module"},"24:4937:1905":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"2:42506:2488":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:3330:4625":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:6900:5043":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:14001:5972":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:5574:6177":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"24:1949:3311":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"2:46775:7934":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"9:177:8946":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"24:4549:3229":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"2:9379:3464":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"24:4921:3263":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"6:1631:6772":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:6028:7358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:4194:4975":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:6600:9284":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:8765:21322":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"24:335:3449":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"1:7737:4693":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:3253:31897":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:5805:7244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:9959:21360":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"11:1027:20313":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:12582:194":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"24:2093:2508":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"17:9445:21331":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:43058:8493":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:43674:8497":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:1514:200":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:5025:7170":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:7221:4962":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:21364:9125":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"11:1831:4625":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:4590:14514":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"24:5307:2250":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"24:3101:3473":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"3:234:212":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:10410:21404":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"24:2965:2264":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"24:1035:1882":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"6:1520:6695":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:12267:5542":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"5:6930:4992":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:11845:5445":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"24:4499:2084":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"24:2523:3594":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"2:43686:8498":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:40530:3409":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:47761:7976":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:2391:9117":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:3265:9159":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"20:923:2274":{"crate_id":20,"path":["proc_macro2","Punct"],"kind":"struct"},"17:13981:5965":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"5:6886:247":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:6044:7362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"20:776:25366":{"crate_id":20,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"2:44328:8541":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"24:88:1876":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"16:7067:8362":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:12047:761":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:837:3312":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"24:3821:3551":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"1:940:9046":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:8340:7448":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:9375:2488":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:5051:7187":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:3919:4975":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:10561:8210":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:10745:9241":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:44280:8532":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:43543:7868":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:5976:5029":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:10547:8209":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"21:2635:3330":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"2:21951:8438":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:1638:6776":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:7722:6185":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:41873:3839":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:1527:6698":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:4524:6964":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:7599:5048":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"24:1623:1958":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"1:2559:5023":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:5877:7277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:43048:7863":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:6545:6252":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"24:3016:3534":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"17:11261:8228":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"16:5963:21251":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:35:4543":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"24:1966:3312":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"2:41650:1950":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"5:5954:4981":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:2867:5168":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"24:1922:3310":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"6:4650:6992":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"24:5149:3275":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"16:4889:6225":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:10494:8204":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:3184:30147":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:21133:9326":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:4167:9206":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:9024:31290":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:10214:21391":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:8097:8376":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:42746:7855":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:9372:5318":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"11:793:9043":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:6079:4975":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:1569:6726":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:9746:5006":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:13422:5744":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:3217:34737":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"24:5469:3294":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"24:1895:3309":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"2:22744:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"24:5466:3293":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"2:39494:204":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:11942:14476":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:7125:3376":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:14335:6080":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:12698:5627":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:4535:6969":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:2608:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"16:7513:8368":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"24:826:3435":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"1:8310:9172":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:12032:957":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:10588:8212":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:12790:5639":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:11718:8512":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:4175:9207":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"11:1852:8397":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"24:1974:3314":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"2:4310:3472":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:3521:9123":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:13259:5732":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:3032:6198":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:4824:7066":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"24:4782:3231":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"1:4002:9183":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:10962:5382":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:2722:6167":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:20826:33171":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:11490:5420":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:6960:21258":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"24:1443:25381":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"5:2035:3449":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"18:766:25356":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"24:5197:3280":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"24:103:4257":{"crate_id":24,"path":["syn","token","CustomToken"],"kind":"trait"},"24:1136:8144":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"11:817:9046":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:1821:3483":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:44443:8546":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:5567:9263":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:4368:6890":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:8119:9121":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:9660:34860":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:12830:5643":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:44137:8526":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:2596:6162":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"23:322:2574":{"crate_id":23,"path":["quote","spanned","Spanned"],"kind":"trait"},"2:22165:31931":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:8336:9240":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:595:6681":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:11063:4575":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:12520:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"24:5056:2543":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"23:281:1960":{"crate_id":23,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"2:40826:3422":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:11642:8501":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:40310:8463":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"24:4420:3592":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"2:2851:5175":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:43716:8427":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"21:1019:3493":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"17:14522:6126":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:8713:21321":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"0:0:1745":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"16:2284:20362":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:13554:5850":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:2213:9104":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"24:3930:3558":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"1:4705:9212":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:46105:7896":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:11448:21340":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"5:1492:8955":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"24:251:8852":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"17:12098:5501":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:6583:8328":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:9852:21350":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:42306:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:44168:8529":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:4664:6993":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:12043:657":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"5:6769:4631":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:7474:8862":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:4248:3467":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:11137:21485":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:45796:7884":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"24:3947:3559":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"2:7065:3374":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"18:736:25355":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:10278:21388":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:11999:8968":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:11547:5422":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"19:0:1053":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:4365:3474":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:2178:21387":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"24:2982:2570":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"21:2591:3494":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"5:1118:33232":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:504:21319":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:42527:3464":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"11:844:9048":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"24:869:35216":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"1:3740:9174":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:1911:16267":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:919:8956":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:9031:8964":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:42109:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:6361:8310":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"21:957:4667":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"5:4759:685":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"24:5481:3298":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"24:2829:3526":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"2:20768:4200":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:40232:7836":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:43512:14463":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:5502:9262":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:22252:8448":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:9896:21352":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:1733:6824":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:12711:5629":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:13215:5725":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:5635:5030":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:6156:8304":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:22612:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"6:474:1871":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"21:2709:1951":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"21:107:4658":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"1:6302:208":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:6008:7352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"21:0:1099":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"24:3356:3546":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"17:13851:5934":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:11595:8092":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:10951:6589":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:43270:8496":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:6531:8326":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"14:0:3076":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:22073:8440":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:1690:6808":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:11327:8232":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:2893:5152":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"24:2574:3517":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"1:10107:31308":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"2:44685:8622":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:11971:5481":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:1506:6690":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:1064:9050":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:14134:6006":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:12830:4541":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:21271:9321":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"20:699:236":{"crate_id":20,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"24:5497:3302":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"18:727:5213":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"24:4988:2435":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"17:14308:6071":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:3056:3321":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:10698:21457":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:22711:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:568:6666":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:434:5262":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:48045:7984":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:9001:26070":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:506:6626":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"24:2931:3531":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"16:6376:21255":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:39613:7709":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:7846:33196":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:6869:31782":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:43251:7867":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:11316:5398":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"11:2060:9050":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:12163:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"24:3850:3553":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"6:5849:7266":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:8824:8065":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:5661:8247":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:7934:3449":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:2359:191":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:10343:26463":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:3944:9178":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:4506:6955":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:5975:14840":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"24:4855:3248":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"1:10838:30159":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"10:44:6532":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:32297:2650":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:6435:9279":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:7863:8561":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:6160:8423":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:8901:8069":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:7295:7576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:9114:221":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:32405:4191":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"5:4164:4975":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:4748:7030":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:6558:3311":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:4879:1022":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"12:0:3075":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"20:884:1951":{"crate_id":20,"path":["proc_macro2","TokenTree"],"kind":"enum"},"2:43820:8507":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:46395:7911":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:40350:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:41823:3316":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"6:6841:7550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:10036:5329":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:6671:7467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:9172:5312":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:14013:5973":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:7609:7601":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:21100:9331":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:12645:5618":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"3:0:452":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:44024:8455":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:43784:8505":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:40317:14521":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:5836:7257":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:40590:3424":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:4413:6912":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:4436:6920":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:5995:8238":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"24:4432:3593":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"2:3305:3482":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:12031:378":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"20:703:3330":{"crate_id":20,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"6:1557:6718":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"24:3050:3536":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"24:3971:3561":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"11:365:4946":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:4456:6929":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:3461:6202":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"24:5463:3292":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"21:2533:4650":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"11:657:3311":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:4626:6990":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:14076:5994":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"24:547:212":{"crate_id":24,"path":["syn","error","Result"],"kind":"type_alias"},"2:42070:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:45850:7886":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:46517:7914":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"21:2600:8176":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"24:4565:1887":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"6:5080:7196":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"24:2676:2477":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"2:2478:14526":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:7768:6183":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:41950:3316":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"14:221:6477":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:10255:9266":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:11702:8509":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:32293:2039":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:13611:5888":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:8825:21324":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:4380:6893":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:7438:4982":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:13286:5735":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:7026:5044":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:7586:7595":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:3678:9170":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"21:2704:3493":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"6:4496:6948":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:7558:7589":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"15:306:20343":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:2574:6161":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:9790:34858":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:14460:6113":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:12554:5604":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:12043:5493":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:6893:6293":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:40558:8472":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"24:5500:3287":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"2:42265:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:39372:4536":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"24:4521:3216":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"2:3498:4627":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:7497:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"24:3792:3549":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"20:903:3332":{"crate_id":20,"path":["proc_macro2","Delimiter"],"kind":"enum"},"17:12621:5617":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"5:7382:8412":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:7199:8410":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:6318:6248":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:41992:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:9491:5050":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"5:2966:3535":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"9:237:7863":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:4872:7090":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:44435:8544":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:40581:3414":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:4050:9186":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"11:2033:8364":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:4908:9237":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:2216:4570":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:9371:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"5:5839:4627":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:12598:5612":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"5:3183:34733":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:4921:6226":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"24:4794:3234":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"1:4639:7461":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"5:4846:206":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"24:5035:3267":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"1:8291:8564":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"0:963:1736":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"21:367:4652":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"24:4338:3586":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"24:2693:108":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"20:950:2571":{"crate_id":20,"path":["proc_macro2","Literal"],"kind":"struct"},"2:4243:3466":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"5:6306:9408":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:10947:8868":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:923:9044":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"24:4462:3728":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"24:4111:3570":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"2:31101:4200":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:8217:2861":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:6820:7538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"24:3407:251":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"1:8852:8067":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:48091:7988":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:2863:5167":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:14145:6010":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:3565:21462":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:8471:3842":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"24:901:35211":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"16:7090:8363":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"24:4825:3241":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"6:6744:7490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:4695:7003":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:10326:9261":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:10949:21442":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:4497:6213":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:3034:4535":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"24:2880:3528":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"1:1570:8395":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:9137:5311":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:8545:8565":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:4053:6209":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:5939:8274":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:531:4415":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:44650:197":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:10139:21380":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"6:4716:7015":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:3600:6203":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:7708:6195":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"24:2642:1930":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"2:9369:112":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:8555:3312":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:2381:9112":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:0:507":{"crate_id":2,"path":["core"],"kind":"module"},"16:5760:21250":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"20:707:3493":{"crate_id":20,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"16:5419:5309":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:9003:21330":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:11477:9174":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:2824:3356":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"9:357:20250":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:2997:2211":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:8318:8046":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:119:14920":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"11:1818:3312":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:44305:8533":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:44294:14491":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:11507:21341":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:1041:8364":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:11383:8586":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"24:5473:3296":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"6:7463:7577":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:13174:5720":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"24:5295:2535":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"1:1839:9073":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"24:5350:2436":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"16:2339:6146":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"11:1121:8860":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:2359:6152":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:13546:5847":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:5992:208":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"0:964:1743":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"17:10316:5340":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"24:3186:1897":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"2:46003:7892":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"21:2639:3492":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"24:3879:3555":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"2:21710:7614":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:14126:6005":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:5987:7340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:2523:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:11614:8589":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:13906:5948":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"11:2174:6525":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:2166:4562":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:10738:21479":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:5612:6182":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:10972:26424":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:22186:31906":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:4341:6867":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:4374:3475":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:9119:8077":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"11:0:3074":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"24:4391:3590":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"18:599:5154":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:13922:5952":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:7828:6357":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:3974:9180":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:9242:5314":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:12658:5621":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:11371:8632":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"24:3271:3542":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"2:2763:3479":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:13162:5719":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:47885:7978":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:12004:9041":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:1983:186":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"24:4846:3246":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"6:6022:7355":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"21:2426:1951":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"16:7621:21265":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"21:988:236":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"24:5018:3268":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"2:46419:7912":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:2969:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:42148:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"24:4297:3583":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"1:7749:9075":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:5383:9257":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:7893:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"24:4552:1899":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"17:13816:5924":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:7540:7586":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:44315:8537":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:2959:2126":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:8969:8072":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"24:5006:2551":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"1:2220:9105":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:4401:6903":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:4862:6224":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:43702:2861":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:45726:7881":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:6705:7473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"24:4123:3571":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"6:5793:7240":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"24:1616:3448":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"2:43692:8499":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:11235:8077":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:12484:5595":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:48159:7992":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"24:4965:62":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"1:8230:8515":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:6805:7533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:14:2714":{"crate_id":2,"path":["core","write"],"kind":"macro"},"24:4517:3215":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"17:12172:5514":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:12531:5601":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"24:2710:3521":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"17:10468:5343":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:11151:21512":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:13802:5923":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"24:917:3270":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"18:719:5210":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:39516:203":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:44471:7874":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:3503:3460":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:2644:6164":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:44216:8530":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:12225:5527":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:47931:7979":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:1590:6740":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:8486:8059":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:2969:20389":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:13575:5858":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"24:4309:3584":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"17:13667:5894":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:11308:8581":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:7006:21260":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:4489:6945":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:9366:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:1778:9058":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:11910:5468":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:41840:3838":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:20828:33173":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:45920:7889":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:7278:7565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:2496:9150":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:42829:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:2933:20388":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"11:399:34780":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"5:6955:4995":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:3052:2495":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:11473:5276":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:5084:31300":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:12015:26429":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:11098:21488":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:3845:9175":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:1918:4537":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"20:0:1722":{"crate_id":20,"path":["proc_macro2"],"kind":"module"},"5:7449:227":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"24:3322:3544":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"1:9206:8082":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:40195:8456":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:41958:3311":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:21832:9125":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:9486:9120":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"24:4526:1896":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"5:5362:14454":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:41071:3385":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"23:46:3342":{"crate_id":23,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"6:1681:6802":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:3204:8397":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:4704:7008":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"24:877:35213":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"20:770:3333":{"crate_id":20,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"2:42384:8960":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:5088:6231":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"21:2378:2571":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"17:10672:21476":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:43990:8517":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:4800:5027":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"24:1621:1725":{"crate_id":24,"path":["syn","parse_macro_input"],"kind":"macro"},"17:13055:5697":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:11389:8587":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"24:3118:214":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"16:3232:6143":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:39434:202":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:2649:9088":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:10203:3316":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"24:126:1870":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"2:45902:7888":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:6067:7368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"21:2724:1870":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"6:562:6663":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:48007:7981":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"24:2591:3518":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"24:3169:2619":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"1:10847:30157":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:11351:5399":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:3065:5217":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:9564:21333":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:9102:5310":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:10456:21410":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:10575:8211":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:21618:9332":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:4304:6839":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:13973:5964":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:8686:21320":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:5015:7165":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:5121:6232":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:11367:5400":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:14068:5991":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:12049:758":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"5:4363:4977":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"21:53:4651":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"24:1491:3438":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"5:2970:25794":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"24:4786:3232":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"17:12437:5583":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"24:4326:3585":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"1:6815:9315":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:43938:8514":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:7880:8562":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:46805:7935":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:8594:21307":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:4749:396":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:9331:3460":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:44523:14647":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:4394:3476":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:8812:188":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:6648:7466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"24:4889:3255":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"2:40572:3413":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"18:681:8185":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:40367:31922":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4428:6918":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"24:3152:3540":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"18:80:25344":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:123:14921":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:1667:1111":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:10579:4420":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:6485:6179":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:11621:8589":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"11:2168:1870":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:48034:7983":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:10265:21389":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:2883:5153":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:12543:5603":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"24:4012:3563":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"9:330:6569":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"24:4842:3245":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"17:14469:6117":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:7792:21267":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:32311:3473":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"16:3797:6205":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:9945:5327":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:4499:9213":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:11573:8235":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:12058:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:21:698":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"11:760:4625":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:9455:34852":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:1756:4577":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:1637:4488":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:44455:8549":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:1702:6812":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:400:21318":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"11:1826:4627":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:2696:6166":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:13010:5688":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:586:9031":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:9036:1876":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:3446:8044":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"5:2170:8401":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:7643:4432":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:5366:14455":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:4137:27829":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:3830:6206":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:10105:26461":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:10787:8580":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"11:1611:4948":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:12050:1544":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:4543:6973":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:2635:9151":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"23:0:1139":{"crate_id":23,"path":["quote"],"kind":"module"},"13:226:6524":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:0:3079":{"crate_id":17,"path":["object"],"kind":"module"},"2:12727:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:42345:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:11661:5426":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:8868:9290":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:11934:1882":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:7511:7579":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"9:426:20237":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:8296:9211":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:7534:6191":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:3988:9181":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"24:3983:125":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"6:4810:7061":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:6868:7556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:2597:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"18:590:5198":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:2223:34340":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:1442:3311":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:9058:26426":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:6075:5032":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:7716:9039":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:6573:7420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:6711:7475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:12911:5678":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"14:215:8384":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:3528:9142":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:9377:3463":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:6171:196":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:7736:6349":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"23:150:3860":{"crate_id":23,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"5:276:1930":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:1837:4703":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:2864:6173":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:9590:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:532:6646":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:42520:3463":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:3000:3501":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:6189:8307":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:3581:3312":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:7284:3838":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:7396:31922":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:9711:34865":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:11341:8091":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:22876:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"18:564:5197":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"23:11:3341":{"crate_id":23,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"24:3084:3538":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"1:946:9047":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:44243:8531":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:12934:5679":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:12607:14529":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"5:1482:9043":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:7412:8415":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:10929:5380":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:9582:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:14118:6003":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:1649:6784":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"24:5491:3300":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"14:40:1882":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:1503:8956":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:3441:21446":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:43443:31913":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"5:261:4951":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"24:2659:99":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"16:6513:8318":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"24:1487:3324":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"6:7529:7582":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:12252:5536":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:5049:6230":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:48065:7986":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:4462:6212":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:11957:14477":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:4420:6916":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:11483:8865":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:7441:3392":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:8899:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:4421:3477":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:3240:14503":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:3938:9179":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:9531:34848":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"14:7:8854":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:2514:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:46571:7916":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"5:1411:3312":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:7337:3367":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:30703:31939":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:5417:9259":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"11:1822:3311":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"24:5151:3277":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"24:5067:2946":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"24:4135:3572":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"6:5955:7327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"24:0:1723":{"crate_id":24,"path":["syn"],"kind":"module"},"6:541:6652":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:45772:7883":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:21263:9125":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:43066:8494":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:12465:5590":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:4613:6217":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:10603:8213":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"24:4169:3574":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"17:8926:21327":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:46373:7910":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:41706:8563":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:1733:4578":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:5994:7341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"}},"external_crates":{"23":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.33/"},"20":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.66/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.11/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.29/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}