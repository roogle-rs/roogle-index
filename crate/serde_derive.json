{"root":"0:0:1656","crate_version":"1.0.152","includes_private":false,"index":{"2:11490:35836":{"id":"2:11490:35836","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split":"2:11478:30292","self::pattern":"2:11130:10269","str::split_terminator":"2:11487:35835","prim@char":"1:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50154:10308","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:10266","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11447:30261":{"id":"2:11447:30261","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11453:2308":{"id":"2:11453:2308","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:50056:10296","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11478:30292":{"id":"2:11478:30292","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11130:10269","prim@char":"1:12298:409","`DoubleEndedIterator`":"2:7086:120","str::split_whitespace":"2:11456:32784","str::rsplit":"2:11484:30296"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50086:4837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5113:2299":{"id":"5:5113:2299","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11550:4442"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11528:35848":{"id":"2:11528:35848","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11130:10269","prim@char":"1:12298:409"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:90":{"id":"0:90","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[23,0],"end":[23,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"internals::case::RenameRule","name":"RenameRule","id":"0:975:1855","glob":false}},"0:947:1650":{"id":"0:947:1650","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[99,0],"end":[104,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"0:343":{"id":"0:343","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[5,0],"end":[5,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:971:1758","glob":false}},"2:11487:35835":{"id":"2:11487:35835","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"prim@char":"1:12298:409","`DoubleEndedIterator`":"2:7086:120","str::rsplit_terminator":"2:11490:35836","self::pattern":"2:11130:10269","str::split":"2:11478:30292"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50136:10309","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5094":{"id":"5:5094","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5005:1360","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5095:36499","5:5096:2007","5:5099:36500","5:5102:36501","5:5110:36502","5:5111:36503","5:5112:4860","5:5113:2299","5:5114:2298"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11511:35840":{"id":"2:11511:35840","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"1:12298:409","str::rmatch_indices":"2:11514:35841","self::pattern":"2:11130:10269","`DoubleEndedIterator`":"2:7086:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50236:10304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11458:21990":{"id":"2:11458:21990","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50340:4838","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11519:35843":{"id":"2:11519:35843","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11514:35841":{"id":"2:11514:35841","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11130:10269","str::match_indices":"2:11511:35840","`DoubleEndedIterator`":"2:7086:120","prim@char":"1:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50254:10305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:10266","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5096:2007":{"id":"5:5096:2007","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6969:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11443:30259":{"id":"2:11443:30259","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48112:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11441:1870":{"id":"2:11441:1870","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48112:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11540:1889":{"id":"2:11540:1889","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12298:409","self::pattern":"2:11130:10269"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5112:4860":{"id":"5:5112:4860","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6969:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11456:32784":{"id":"2:11456:32784","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11457:32799"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50360:10292","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11493:30298":{"id":"2:11493:30298","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12298:409","self::pattern":"2:11130:10269","str::rsplitn":"2:11496:30300"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50190:10256","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11499:35837":{"id":"2:11499:35837","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11546:1847":{"id":"2:11546:1847","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:11091:3288","FromStr::Err":"2:11092:126"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48254:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11091:3288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11091:3288","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11429:796":{"id":"2:11429:796","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12298:409"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11484:30296":{"id":"2:11484:30296","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"prim@char":"1:12298:409","self::pattern":"2:11130:10269","str::split":"2:11478:30292","`DoubleEndedIterator`":"2:7086:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50104:10252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:10266","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11438:35831":{"id":"2:11438:35831","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11534:30304":{"id":"2:11534:30304","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11130:10269","prim@char":"1:12298:409"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:10266","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:8:1756":{"id":"0:8:1756","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[202,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":false}},"2:11555:35852":{"id":"2:11555:35852","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4472:35852"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50403:10301","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11431:35828":{"id":"2:11431:35828","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11474:4097":{"id":"2:11474:4097","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:48112:176","prim@char":"1:12298:409","self::pattern":"2:11130:10269"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:10266","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11548:4440":{"id":"2:11548:4440","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5111:36503":{"id":"5:5111:36503","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:286:1825","`String`":"5:6969:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1825","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6720:4458","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1656":{"id":"0:0:1656","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[109,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2018\n# use serde_derive::{Serialize, Deserialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.152\")]","#![allow(unknown_lints, bare_trait_objects)]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: derive_partial_eq_without_eq, clippy ::\nenum_variant_names, clippy :: manual_map, clippy :: match_like_matches_macro,\nclippy :: needless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: manual_assert, clippy ::\nmap_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:946:1641","0:947:1650"],"is_stripped":false}},"5:5099:36500":{"id":"5:5099:36500","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6969:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11554:3371":{"id":"2:11554:3371","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4475:3371"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50394:3372","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11460:32798":{"id":"2:11460:32798","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50378:10290","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11521:35844":{"id":"2:11521:35844","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5102:36501":{"id":"5:5102:36501","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6969:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11440:30262":{"id":"2:11440:30262","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12315:1456"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11517:35842":{"id":"2:11517:35842","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:392":{"id":"0:392","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[8,0],"end":[8,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:368:1759","glob":false}},"0:62:341":{"id":"0:62:341","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1952,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:90"],"is_stripped":false}},"5:5110:36502":{"id":"5:5110:36502","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:6969:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11537:35849":{"id":"2:11537:35849","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11130:10269","prim@char":"1:12298:409"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:10266","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11461:1907":{"id":"2:11461:1907","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:11130:10269","prim@char":"1:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11470:2551":{"id":"2:11470:2551","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:12298:409","`None`":"2:48112:176","self::pattern":"2:11130:10269"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11523:35845":{"id":"2:11523:35845","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11552:35851":{"id":"2:11552:35851","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4474:35851"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50385:10300","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11437:2740":{"id":"2:11437:2740","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10698:10293"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11464:30302":{"id":"2:11464:30302","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:11130:10269","prim@char":"1:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11508:35839":{"id":"2:11508:35839","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11130:10269","prim@char":"1:12298:409","str::matches":"2:11505:3083","`DoubleEndedIterator`":"2:7086:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50308:10307","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:10266","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1000:1858":{"id":"0:1000:1858","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}},"2:11531:26527":{"id":"2:11531:26527","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11130:10269","prim@char":"1:12298:409"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11432:35829":{"id":"2:11432:35829","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11457:32799":{"id":"2:11457:32799","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11456:32784"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50369:10291","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11428":{"id":"2:11428","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10693:1360","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11429:796","2:11430:2084","2:11431:35828","2:11432:35829","2:11434:35830","2:11437:2740","2:11438:35831","2:11439:310","2:11440:30262","2:11441:1870","2:11443:30259","2:11445:30260","2:11447:30261","2:11449:35832","2:11450:35833","2:11451:30284","2:11452:30285","2:11453:2308","2:11454:2302","2:11455:21871","2:11456:32784","2:11457:32799","2:11458:21990","2:11459:35834","2:11460:32798","2:11461:1907","2:11464:30302","2:11467:30303","2:11470:2551","2:11474:4097","2:11478:30292","2:11481:30294","2:11484:30296","2:11487:35835","2:11490:35836","2:11493:30298","2:11496:30300","2:11499:35837","2:11502:35838","2:11505:3083","2:11508:35839","2:11511:35840","2:11514:35841","2:11517:35842","2:11519:35843","2:11521:35844","2:11523:35845","2:11524:35846","2:11525:35847","2:11528:35848","2:11531:26527","2:11534:30304","2:11537:35849","2:11540:1889","2:11543:35850","2:11546:1847","2:11548:4440","2:11549:4441","2:11550:4442","2:11551:4443","2:11552:35851","2:11554:3371","2:11555:35852"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11449:35832":{"id":"2:11449:35832","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12304:1360","crate::ops::Index":"2:2982:2258","str::slice_mut_unchecked":"2:11450:35833"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11467:30303":{"id":"2:11467:30303","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12298:409","self::pattern":"2:11130:10269"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:10266","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11434:35830":{"id":"2:11434:35830","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11432:35829"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11543:35850":{"id":"2:11543:35850","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12298:409","self::pattern":"2:11130:10269"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:10266","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11502:35838":{"id":"2:11502:35838","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:10266","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11524:35846":{"id":"2:11524:35846","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5095:36499":{"id":"5:5095:36499","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1825","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6720:4458","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1825","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6720:4458","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11550:4442":{"id":"2:11550:4442","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11525:35847":{"id":"2:11525:35847","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12298:409","self::pattern":"2:11130:10269"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11155:10264","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11551:4443":{"id":"2:11551:4443","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11496:30300":{"id":"2:11496:30300","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:11130:10269","prim@char":"1:12298:409","str::splitn":"2:11493:30298"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50208:10254","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:10266","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11549:4441":{"id":"2:11549:4441","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11439:310":{"id":"2:11439:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:12315:1456","str::as_mut_ptr":"2:11440:30262"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5114:2298":{"id":"5:5114:2298","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11551:4443"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11454:2302":{"id":"2:11454:2302","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:50062:10295","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11455:21871":{"id":"2:11455:21871","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50072:2753","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11450:35833":{"id":"2:11450:35833","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:2986:3273","str::slice_unchecked":"2:11449:35832","`str`":"1:12304:1360"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11481:30294":{"id":"2:11481:30294","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12298:409","self::pattern":"2:11130:10269"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10954:10258","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11505:3083":{"id":"2:11505:3083","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"str::matches":"2:11505:3083","self::pattern":"2:11130:10269","prim@char":"1:12298:409","`DoubleEndedIterator`":"2:7086:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50290:10306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11445:30260":{"id":"2:11445:30260","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11451:30284":{"id":"2:11451:30284","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11452:30285"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11459:35834":{"id":"2:11459:35834","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50350:10303","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11452:30285":{"id":"2:11452:30285","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11451:30284"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11430:2084":{"id":"2:11430:2084","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:946:1641":{"id":"0:946:1641","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[91,0],"end":[96,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}}},"paths":{"24:4808:3146":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"17:13091:21344":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:50833:10552":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"24:1579:3260":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"17:10642:17696":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"24:1856:2019":{"crate_id":24,"path":["syn","parse_quote"],"kind":"module"},"21:2613:3374":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"1:3160:21689":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:4192:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"24:2301:22250":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"14:0:2978":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:11356:18156":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:3963:33122":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"24:2757:3425":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"2:54095:10195":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:2869:21670":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:1091:4709":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:3486:4820":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:242:36619":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"5:7063:4551":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:2828:3484":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:562:1858":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"12:669:4702":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"18:590:22632":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:11186:17964":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:2927:2104":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"21:2565:3383":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"24:4550:3136":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"1:11902:10207":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:20474:5085":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"16:7497:17320":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:8666:17475":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:4307:14447":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:4267:14441":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"24:4873:3161":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"6:501:11182":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:4354:14452":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:48863:3364":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:11828:20518":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"21:481:22462":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"24:5394:3198":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"24:4900:3167":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"21:2233:4592":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"2:2494:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:12617:20748":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"24:4103:3470":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"5:4531:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"24:2469:3415":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:12060:20534":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:46877:10363":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:11939:20526":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:8610:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"24:1468:4913":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"1:6495:5012":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:21889:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:12361:20684":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:2764:10439":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"24:2559:1825":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"2:50837:10564":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:10684:10536":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:4441:4930":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:7163:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:1611:4552":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:52866:5156":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:6479:15539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:8105:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:4519:16937":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:10233:17676":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:12310:730":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"9:649:16168":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"21:2700:1843":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"16:5664:17379":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"12:1840:4552":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"21:2261:1767":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"2:53884:5154":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:9691:17551":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:5202:4556":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:11536:17636":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:11088:24695":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:47289:10426":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:12550:20746":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:0:2981":{"crate_id":17,"path":["object"],"kind":"module"},"16:4606:16998":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:11288:18137":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"24:827:22260":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"6:5772:15125":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"24:4980:1786":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"2:49815:21817":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:4574:16993":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:9831:17631":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:7372:22183":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:4398:14456":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:2401:4801":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:534:22032":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:12318:1455":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:7970:17328":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:2320:17300":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:20502:5089":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:47019:4772":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:1903:17565":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:1437:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:49941:10234":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"22:825:230":{"crate_id":22,"path":["proc_macro2","TokenStream"],"kind":"struct"},"17:10997:1778":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:2498:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:4327:16913":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"24:56:2013":{"crate_id":24,"path":["syn","token"],"kind":"module"},"2:11725:10372":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"24:4301:3484":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"17:9700:17550":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:53946:5119":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"24:4834:3152":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"24:1494:1772":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"1:8487:4874":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:5013:4917":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:11155:10264":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"24:3813:3451":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"17:12948:20972":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:7044:22011":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:6392:12015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:9422:17504":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"18:609:36628":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:12964:21304":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:47176:10412":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"20:226:2066":{"crate_id":20,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"17:8418:17718":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"5:2989:4715":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:8212:17710":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:1632:4717":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:6766:4862":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"24:2523:3418":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"1:11306:5004":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:135:10865":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"21:2574:22247":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"16:3599:16398":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:51981:24415":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:2578:4846":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"21:2678:3379":{"crate_id":21,"path":["proc_macro","LineColumn"],"kind":"struct"},"1:11495:4818":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"6:6524:15542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:8411:4834":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"24:104:4144":{"crate_id":24,"path":["syn","token","CustomToken"],"kind":"trait"},"24:4185:3476":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"17:9165:36621":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:36:4459":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:53136:5118":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:13203:21380":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:13374:21428":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:12934:20971":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:4540:14468":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:7266:14629":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:2916:17592":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"22:108:36762":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"24:5220:1990":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"24:4243:3480":{"crate_id":24,"path":["syn","token","Rem"],"kind":"struct"},"1:4894:4901":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:3363:3268":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:9546:10258":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:1476:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:4302:4902":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"12:1518:16350":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:1595:22467":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:1931:17525":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:6593:17403":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:48237:4467":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"14:221:16367":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:8241:17722":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:4262:4900":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:22453:4886":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:21955:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"24:4869:3160":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"16:3026:17459":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:5184:17429":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:9636:4754":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:5498:15104":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:12816:20858":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"12:646:3268":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:7872:17331":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:2290:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"5:779:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:13114:21347":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"18:574:22631":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:47625:10405":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"24:5142:3189":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"2:11712:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:507:11183":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:47124:10234":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:20349:5088":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:5552:10772":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:8991:36613":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:10667:29187":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"12:725:4699":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:545:11187":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:6603:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:10466:17686":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"5:870:3264":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:6233:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:4766:4940":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"12:1065:21970":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"18:515:21538":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:2631:17445":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"24:5442:3210":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"1:9388:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"21:2766:2485":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"16:7483:17325":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:11149:17961":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:20027:4081":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"24:5175:2161":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"2:10954:10258":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:6109:17339":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"24:1470:22618":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"1:6217:5012":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:11945:16384":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:4605:14476":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:48161:1826":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"21:1072:1842":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"2:53286:5142":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:965:4702":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:10257:17651":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:51051:5164":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:4662:17011":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:6617:10399":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"21:2370:2485":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"1:5646:4995":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:7825:2112":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"24:3045:3341":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"2:9127:22493":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"24:2775:2104":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"24:3888:3456":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"24:4812:3147":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"1:11123:4792":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"12:1836:3263":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:9478:3268":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:6014:22467":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:9454:3264":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:4201:3335":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:5587:15111":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:1954:21868":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:13459:21438":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:6790:21869":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:2933:3395":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:51000:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:11163:29296":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:3125:17597":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:5749:24120":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:6690:17322":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:4212:14435":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:8137:17709":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:8863:4981":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:2825:17453":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"5:6876:3302":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:12301:1025":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:9577:17532":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:57036:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:2411:4806":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"9:382:16252":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:4506:14464":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"22:897:1778":{"crate_id":22,"path":["proc_macro2","Ident"],"kind":"struct"},"2:2923:2197":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"22:881:1841":{"crate_id":22,"path":["proc_macro2","Spacing"],"kind":"enum"},"2:9312:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:20072:34116":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:2261:17430":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:7804:22513":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:9346:5018":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:54205:10203":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:4744:4939":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:50534:10278":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:11734:20511":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:1615:4550":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"17:11436:20330":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"9:622:16167":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:9238:5003":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:2785:3291":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"24:5414:3202":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"16:2389:17435":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"24:3261:3442":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"24:5426:3206":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"5:4747:5030":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"24:5423:2205":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"1:686:4693":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:20909:5081":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:50360:10292":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:5536:5030":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:12313:729":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:1608:3263":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:8629:3363":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:46913:10301":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:6774:3263":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:513:11184":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:6210:17394":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:2367:17434":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:52712:5160":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"5:1196:4709":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:2727:3393":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:6017:17390":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:7267:17414":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:47600:10403":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:49113:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:0:486":{"crate_id":2,"path":["core"],"kind":"module"},"1:2385:4797":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:217:4461":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:9112:22489":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:12323:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"24:3297:3444":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"17:8871:17731":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"21:2695:3380":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"17:13580:21479":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:10583:17693":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:11153:4810":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:4185:14432":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"24:4985:2201":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"17:12073:20535":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"24:89:1831":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"2:47047:10501":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:6277:12011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:48305:3268":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"21:53:4594":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"24:5064:1912":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"5:3561:22467":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:4257:14440":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:3470:29695":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"24:4349:3488":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"16:5541:17375":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:3479:4813":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:2671:3347":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"24:4521:1854":{"crate_id":24,"path":["syn","attr","NestedMeta","Lit"],"kind":"foreign_type"},"16:7557:17318":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:677:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"9:920:16233":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:6070:17305":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:8494:17427":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:1944:4197":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:9433:17503":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"5:950:22467":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:52119:24417":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:50829:10551":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:6269:11102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:21161:24660":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"24:4556:1795":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"6:1714:12092":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:2248:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:5672:15116":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:12087:20536":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"24:5411:3201":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"12:1628:22465":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:1562:12078":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:49433:24684":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"21:967:4615":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"16:2300:17432":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:4316:4904":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:6409:15534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"3:0:433":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:13413:21434":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:3188:17460":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:50646:10281":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:6752:4721":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:4706:14488":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4559:14470":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:6322:15533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:12322:20618":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:13404:21431":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:11661:20449":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:8504:4875":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:50582:10279":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:21:667":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"24:3784:3449":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"5:2739:24307":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:10894:17706":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:9071:36612":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:4433:4929":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"24:5144:3191":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"2:46355:4452":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"24:4584:3138":{"crate_id":24,"path":["syn","data","VisCrate"],"kind":"struct"},"6:5523:15107":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"5:2255:21892":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:11276:5001":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:49402:10377":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:2487:17439":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:9369:5065":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:11748:20512":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:5949:17388":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"24:4843:3154":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"24:2297:207":{"crate_id":24,"path":["syn","error","Result"],"kind":"typedef"},"2:48575:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:853:4719":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"12:2178:1767":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:8881:36614":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:4017:4883":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:487:1768":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:3263:17461":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:4565:14471":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:10062:17595":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"24:5003:2425":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"17:10973:17742":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"21:140:4623":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"1:960:4701":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:4042:22471":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:4216:4896":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:5737:17381":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:9223:17490":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:4297:16902":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"21:1397:1858":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"6:6424:15536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"12:834:4706":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:4327:3343":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"24:4920:3172":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"6:7166:16075":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:12874:20904":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:8704:4926":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:11217:17966":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:7211:17306":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:12176:20555":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"22:668:230":{"crate_id":22,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"17:12251:20608":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:1738:12094":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:5011:4916":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:2781:10440":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:12337:17685":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:5733:15123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"24:4495:1851":{"crate_id":24,"path":["syn","attr","Meta","List"],"kind":"foreign_type"},"24:2811:3427":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"1:8903:4983":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"5:2737:2018":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"20:37:2838":{"crate_id":20,"path":["quote","format_ident"],"kind":"macro"},"24:592:36937":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"21:218:24963":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"24:4936:3176":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"24:4050:3466":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"2:1643:4277":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:2399:4800":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:10901:4203":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:11054:17915":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:5839:17386":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:9080:22487":{"crate_id":2,"path":["core","slice","sort","insert_head","InsertionHole"],"kind":"struct"},"1:6676:4261":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:2257:4794":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:5525:17374":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:52166:5083":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"22:836:1843":{"crate_id":22,"path":["proc_macro2","TokenTree"],"kind":"enum"},"6:519:11185":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:6359:17398":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:11515:20333":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"12:1866:4717":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:1387:4699":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:46543:3295":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"21:1202:193":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"2:8617:3355":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"12:1859:4716":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"12:822:4705":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"24:4952:1801":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"24:2721:1791":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"6:0:801":{"crate_id":6,"path":["libc"],"kind":"module"},"17:13518:21469":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:7567:17344":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"24:5510:2202":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"6:4621:14478":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"18:719:21530":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"9:863:16231":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:12103:20537":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:6392:5165":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:12278:20610":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:13082:21343":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:3339:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:4072:4825":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:10796:17702":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:4413:16929":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:7109:3396":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:3194:4856":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:47606:4322":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:13279:21389":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:9696:10253":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:4082:3353":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"24:3825:3452":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"17:8475:17469":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:46938:3372":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:3734:4552":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:46602:2560":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"5:3473:3322":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:7149:25220":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:5568:15076":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:3086:4864":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:52264:5155":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:11343:18143":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:3152:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:48461:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:5447:17369":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:4027:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"24:2228:3317":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"2:50990:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"20:45:3121":{"crate_id":20,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"17:13039:21337":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:1722:12093":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:13436:21435":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"15:175:16375":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"24:4792:3142":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"6:4611:14477":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:2955:4716":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:2285:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"24:5140:3187":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"16:6123:17313":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:3194:3348":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"24:5502:2158":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"17:10434:17684":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:1532:12075":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:7135:22015":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:51911:5159":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:12311:727":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:10497:17689":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"12:2080:4711":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:3716:16449":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"24:5212:1986":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"17:13059:21341":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:4268:4901":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:11841:20519":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:11300:18138":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"24:2353:3264":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"2:54152:10200":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:4449:14460":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:10420:17673":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"5:4626:4825":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:990:4706":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"24:3027:3437":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"2:48322:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:6456:22476":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:5427:4552":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:2557:17442":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"24:5082:2455":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"9:956:16225":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:54220:10204":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:11389:22519":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:4347:3344":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:4496:14463":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:10139:17513":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:12296:367":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:6668:22174":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"24:2865:3430":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"2:2255:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:1604:3264":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"20:151:3104":{"crate_id":20,"path":["quote","__private","ext"],"kind":"module"},"17:13492:21462":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"21:0:1051":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"6:4200:14434":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:2029:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:1212:4711":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:50821:10549":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"24:830:22261":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"1:996:4707":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:8533:1842":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"21:2525:4593":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"2:9751:10254":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:719:4694":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"16:6567:17333":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"13:220:23531":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"24:5136:1981":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"2:2235:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"9:19:16214":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"5:630:25218":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"5:5968:4552":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:7435:17356":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:7357:17336":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:4126:14428":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:1474:2199":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:47266:10425":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:10332:17679":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:4280:14443":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:4673:14485":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:7980:17359":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:1595:12081":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"24:5468:2141":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"17:10321:17644":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:10108:17590":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:1811:598":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:8624:4879":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"18:671:21526":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:12955:20984":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:8075:4791":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:6137:17311":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:4262:16881":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:47325:10429":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:4551:14469":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:8393:17720":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:286:1825":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"7:32:16120":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:12748:20810":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"24:4412:2478":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"2:53102:5136":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"24:4864:3159":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"2:49174:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:12320:774":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"24:5399:3199":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"2:47275:10414":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"24:2020:22253":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"1:9268:5011":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"15:214:16380":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"24:3842:3453":{"crate_id":24,"path":["syn","token","Bang"],"kind":"struct"},"18:481:21536":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:6448:15538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:50609:10280":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"21:183:4319":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"24:3153:3440":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"2:2759:3489":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"24:4553:3137":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"24:4530:1792":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"5:2948:3264":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:10854:17704":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:3404:4812":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"9:111:16182":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:574:4204":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:52434:5117":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:6680:5066":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:8065:4788":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"24:3755:3290":{"crate_id":24,"path":["syn","token","Add"],"kind":"struct"},"22:781:1778":{"crate_id":22,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"24:2793:3426":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"2:48689:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:49875:10240":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:21790:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:7329:17420":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:13176:21377":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"21:2609:3281":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"2:4055:3352":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:1686:12089":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:1405:4701":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:20493:4913":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:1060:21887":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:50104:10252":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:6087:3263":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:52064:5131":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:12926:20970":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:54190:10202":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"24:2613:107":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"2:46891:10365":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"24:2065:22248":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"1:3314:4842":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:9554:4818":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:54141:10199":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:7923:4688":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:11785:4884":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:54167:10201":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:6171:17363":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"24:3963:3461":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"16:7288:17416":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"12:1852:4715":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:62:10798":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:7220:14623":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:10580:5008":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"16:7278:17415":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:782:4718":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:6079:5072":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"24:4880:3163":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"2:48385:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"24:2847:3429":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"2:46477:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"24:4825:3150":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"6:4346:14451":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:12308:630":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:931:4700":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:6252:17396":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:7191:22510":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:3998:4449":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"24:4284:3483":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"24:3772:3448":{"crate_id":24,"path":["syn","token","AddEq"],"kind":"struct"},"6:5684:15117":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:5163:17258":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:39390:1933":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:9658:10252":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:8615:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:4361:14453":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:2899:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"24:3333:3446":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"6:4698:14487":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:5534:15108":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:4659:14483":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"24:834:22262":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"2:21235:21759":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"22:931:3263":{"crate_id":22,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"6:1701:12091":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"22:480:3281":{"crate_id":22,"path":["proc_macro2","LexError"],"kind":"struct"},"24:4454:1767":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"24:2667:3421":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"24:5493:2466":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"17:11485:20331":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"20:0:1080":{"crate_id":20,"path":["quote"],"kind":"module"},"2:51767:24413":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:11909:20523":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:7309:17418":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:10668:10534":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:57088:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:5625:15114":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:8887:10376":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:4239:14438":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:2738:35235":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:13340:21391":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:9475:17529":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:4689:17014":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:7853:10265":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:5506:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"24:640:3185":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"16:7237:17412":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:5178:4964":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:5880:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"22:762:1842":{"crate_id":22,"path":["proc_macro2","imp","Span"],"kind":"enum"},"2:47014:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:12291:20616":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:7659:17312":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:12087:4088":{"crate_id":2,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"24:4509:3134":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"24:3189:231":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"6:6998:15916":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"12:751:4552":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:14:2620":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:51064:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:973:4704":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"24:4132:3472":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"2:49386:10378":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:8686:4877":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:4489:4956":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:10297:10247":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:3365:10323":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"24:4821:3149":{"crate_id":24,"path":["syn","expr","ExprBox"],"kind":"struct"},"24:2118:3309":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"9:586:16156":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"1:1967:4767":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"24:4535:1834":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"18:491:24601":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:3249:17616":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:50086:4837":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:4749:17025":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:20300:4913":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:47350:10415":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:29804:21851":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:5504:15105":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:5699:15119":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:1637:1815":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:48347:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:1636:12084":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:46901:10366":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:8718:4936":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"24:5455:2203":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"1:5394:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:10625:17695":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"24:4517:1853":{"crate_id":24,"path":["syn","attr","NestedMeta"],"kind":"enum"},"1:4908:24207":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:6892:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:47214:10421":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:53072:5133":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:46944:10358":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"16:2579:17443":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:628:2264":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:11143:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"5:6162:22467":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:9118:36616":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"18:0:2982":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:5614:22030":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:20500:5091":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:5219:17425":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:49996:10250":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:7929:17423":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"24:2266:25226":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"1:3347:4322":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:4817:17042":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:21922:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:12638:20802":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:13231:21388":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"24:1809:2423":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"6:4737:14491":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:4312:4903":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"24:2595:2159":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"2:51093:4456":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:7511:17296":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:3594:21592":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"18:113:21554":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"24:5498:2156":{"crate_id":24,"path":["syn","path","Binding"],"kind":"struct"},"17:12033:20532":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:4849:17049":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"24:2451:3414":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"24:2901:2161":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"16:5411:17367":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:6939:4769":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"24:4518:1850":{"crate_id":24,"path":["syn","attr","NestedMeta","Meta"],"kind":"foreign_type"},"6:5835:15153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:8596:17473":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:4690:981":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"21:246:36733":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"16:2605:17444":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:12303:1330":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:11746:34282":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:49226:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:5741:15124":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:11144:10267":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"22:855:3282":{"crate_id":22,"path":["proc_macro2","Delimiter"],"kind":"enum"},"2:3975:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"24:3801:3450":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"24:95:4151":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"17:10385:17681":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:9751:17552":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:567:11190":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:4379:14455":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:11873:20521":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:2740:1804":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:52242:5152":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"12:2198:23534":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:51787:24414":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:608:11196":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:2433:17437":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:12768:20854":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:4921:17072":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:4115:14427":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:9553:17513":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:4475:14462":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:50813:10547":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:10862:4853":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:22054:4892":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:11774:20514":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"18:538:21540":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:12609:20747":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"9:188:16190":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"6:4427:14458":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:5374:17314":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:5203:17427":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"24:624:36933":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"22:739:230":{"crate_id":22,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"2:50503:10274":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:11951:20527":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"24:3279:3443":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"2:7058:3397":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:47577:10401":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:4545:16991":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:10394:17682":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:10859:4857":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:386:17600":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:52012:5139":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:2793:17452":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:6654:17405":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:2981:4717":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:4210:4897":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:7637:17329":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:50394:3372":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:8329:4809":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:48537:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:9623:10259":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:10360:17645":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:4461:14461":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:5780:17383":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:3163:10343":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:47237:10423":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"24:4888:3165":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"2:2232:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:9212:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:21015:4913":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:47308:10428":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:9394:4202":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:1552:4825":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"5:6909:4771":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"21:651:3385":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"1:2903:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"12:98:21971":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:2727:17449":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"14:215:16361":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:6743:17406":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:9371:17517":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:47391:10432":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"24:5448:3197":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"22:708:2485":{"crate_id":22,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"17:1021:17515":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:3169:10342":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"21:2745:1841":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"24:4074:3468":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"17:10296:17648":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"5:3542:4550":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"5:3350:3264":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:10880:10558":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:10245:17677":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"12:659:3263":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:29598:4280":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:4665:14484":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:56653:5162":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:9897:17634":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:11315:18141":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:46433:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:47031:21853":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"24:4120:3471":{"crate_id":24,"path":["syn","token","MulEq"],"kind":"struct"},"24:5015:3181":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"2:2793:10442":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"22:644:3322":{"crate_id":22,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"17:9627:17537":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:6017:5063":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:9436:24969":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"24:2577:99":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"1:8762:4915":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:11547:17637":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:8510:17425":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:13366:21427":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:3157:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:1828:4737":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"18:699:21529":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:12264:24972":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:5087:4911":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"24:5196:1783":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"6:6415:15535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:5727:15122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"24:2703:3423":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"2:53992:5137":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:5852:10434":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:11687:24709":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:20055:33897":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:22021:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:49645:10237":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"5:4951:10230":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:21724:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:8886:4982":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"0:0:1656":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"24:5416:3203":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"2:47615:10404":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:6463:17400":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:21108:24659":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"5:6324:4558":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"16:3566:16390":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:47195:10419":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"24:3315:3445":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"17:11106:17924":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:10490:17688":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:484:22522":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:48856:3355":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:11456:5003":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:9382:17511":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:50062:10295":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:9350:17505":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:411:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"12:985:4709":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:8621:3364":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:12860:20902":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:1002:4708":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"21:2761:1778":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"1:1620:4715":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:12118:20538":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:13071:21342":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:48613:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:6572:15546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:9094:22488":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:50236:10304":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"24:1751:3268":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"24:1414:3274":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"24:2116:1849":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"typedef"},"2:53492:5161":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:6034:1808":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:5464:10413":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"24:3009:3436":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"15:193:16376":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:12781:20855":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:8911:36617":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:50044:10299":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:7869:4191":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:50072:2753":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:5122:17081":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:46616:3341":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"17:11174:17963":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:4124:3324":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"21:407:36687":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"2:54086:10194":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:7749:3704":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:20287:5095":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:4768:14494":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:7059:3702":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:10159:17598":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"24:2937:3432":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"17:10455:17674":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"5:6991:10313":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:2327:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:50801:10543":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"17:420:17299":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:5887:5012":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:2050:21889":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:8014:2560":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:13007:21334":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:49954:10235":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:8162:17719":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:8341:21805":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"24:600:36934":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"17:12225:20606":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"24:5091:3182":{"crate_id":24,"path":["syn","generics","PredicateEq"],"kind":"struct"},"16:2411:17436":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:9383:24967":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:11444:5002":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"21:2740:2171":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"12:300:21974":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"24:3171:2245":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"1:7747:25221":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:4300:14446":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:6816:22176":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"24:4468:1831":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"17:11271:18130":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"24:2299:127":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"1:8122:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:6545:15544":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:5169:4963":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:11468:29298":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:9252:5004":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:4804:14497":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:8092:4793":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:6137:22501":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"24:608:36932":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"2:49626:10528":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"16:6330:17397":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:9061:17513":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:9644:17523":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"12:632:3264":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:1919:4453":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:5631:35020":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"21:2418:1843":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"16:6146:17362":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"14:31:16358":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:9317:17508":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:47376:10431":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:6923:21853":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:10528:17725":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:10755:5000":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:4797:14496":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:4246:4898":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"13:108:36593":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:4629:14479":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"12:353:21972":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:12309:631":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:5720:15121":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:9873:17632":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:52836:5153":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:25263:4887":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:4716:14489":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"18:652:22631":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:29379:4888":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"5:3911:3264":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:2813:10444":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:5433:17368":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:11087:17923":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:4700:33234":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:8796:17729":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:2535:17441":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:7944:4713":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:12304:1360":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"24:2073:1847":{"crate_id":24,"path":["syn","parse"],"kind":"module"},"1:10650:4999":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:2852:10450":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:13184:21378":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:47633:10407":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:7961:4742":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:1962:17549":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:9526:17527":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:7343:17323":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:4373:3345":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"18:96:21553":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"22:851:1767":{"crate_id":22,"path":["proc_macro2","Group"],"kind":"struct"},"5:1227:4710":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:5695:4998":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:9535:5022":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:7603:17341":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:21856:4209":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:2250:4790":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"10:0:2975":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"24:3369:244":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"2:4679:4696":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:3154:21687":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:6200:17393":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"12:738:4700":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:12850:20901":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"24:3135:1793":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"2:51008:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:6352:12038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:4816:14499":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:592:11194":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:2806:10446":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:4329:14449":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:5680:4997":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"12:320:21973":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:8736:4965":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:46402:10452":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:7938:4691":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"9:592:16166":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:20341:4913":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:49122:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"24:5477:2144":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"3:223:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:21267:24314":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:5878:17387":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:2754:3290":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"12:1138:4712":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"24:4817:3148":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"1:2652:4848":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"5:6782:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"22:875:2171":{"crate_id":22,"path":["proc_macro2","Punct"],"kind":"struct"},"6:581:11192":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:2282:17431":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"18:507:22631":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:5480:15103":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:6842:24647":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:4904:24203":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"16:2868:17455":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:21691:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:4778:14495":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:2919:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:13557:21472":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:20261:5094":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"24:5465:2450":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"16:5472:17371":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"24:4366:3489":{"crate_id":24,"path":["syn","token","Sub"],"kind":"struct"},"6:6538:15543":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:2797:10441":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:11034:17855":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:4906:24205":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:8526:17471":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:6345:17319":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:8612:4878":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:1636:577":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:51081:10216":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:52312:5140":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:8055:17708":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"24:4856:3157":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"1:1105:4710":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:7436:4724":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"22:696:1767":{"crate_id":22,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"2:52212:5148":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:6735:4720":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:12305:1438":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"6:5582:15110":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:5900:22476":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:9274:17493":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:5388:17366":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:48170:3264":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:7255:14628":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:9429:28274":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:8226:4849":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:13536:21471":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:7056:5080":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:52531:24424":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"24:5055:2460":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"17:10182:17596":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:1446:4725":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:4527:14466":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:3231:3350":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:9449:17409":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"24:4009:3464":{"crate_id":24,"path":["syn","token","Dot3"],"kind":"struct"},"1:2026:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:4102:14426":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:8447:152":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"17:13158:21375":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:11933:5165":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:46593:10321":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:6837:5074":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:11952:16384":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:600:11195":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:4117:4885":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:52480:5121":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:38198:4081":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:21364:33111":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:5541:15109":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"22:14:25333":{"crate_id":22,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"17:12674:20803":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:6975:15914":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:1580:12080":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:6375:12012":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:7226:14624":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"24:4940:3177":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"24:5431:3207":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"1:11372:22517":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:11330:18142":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:7543:17317":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:8561:17472":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:4683:14486":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:52082:24416":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:12972:21305":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:9764:17580":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"21:2023:4589":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"22:327:3281":{"crate_id":22,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"21:1029:3380":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"6:4335:14450":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"24:3859:3454":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"24:632:3184":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"1:8693:4934":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"24:2541:3419":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"1:10321:21700":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"24:1361:3322":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"1:11920:24558":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:20921:33895":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:1771:17531":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"24:4932:3175":{"crate_id":24,"path":["syn","expr","ExprType"],"kind":"struct"},"6:1541:12076":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:3953:4880":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:4286:14444":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:5009:4912":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:271:22467":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:21988:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"24:5436:3208":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"24:4498:1852":{"crate_id":24,"path":["syn","attr","Meta","NameValue"],"kind":"foreign_type"},"6:1511:12072":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:46661:10333":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:2675:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"12:861:4708":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:1825:3351":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"24:5216:1988":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"1:8589:4877":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"2:8336:21804":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:9778:17553":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:4810:14498":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:6920:28244":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:900:3268":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:1826:4736":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"24:3934:3459":{"crate_id":24,"path":["syn","token","Div"],"kind":"struct"},"1:3377:4825":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"18:80:21552":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:1574:12079":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:5709:4999":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:8627:3362":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:8082:4792":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:11787:20515":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:51963:5151":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:774:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"24:2955:3433":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"16:5815:17385":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:12739:20809":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:4635:14480":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:11798:10373":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:11606:5009":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:11600:24703":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"7:79:16127":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"21:2551:3384":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"16:4721:17017":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:0:1352":{"crate_id":1,"path":["std"],"kind":"module"},"2:48186:3263":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"9:800:16271":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:495:11181":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:8368:17711":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:29640:21849":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:2670:3392":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"24:4591:2200":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"16:7388:17338":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:8130:21683":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"14:7:16358":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:12797:20856":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"20:235:2066":{"crate_id":20,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"5:686:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:49967:10248":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:11135:10265":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"24:4260:3481":{"crate_id":24,"path":["syn","token","RemEq"],"kind":"struct"},"24:1969:4913":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"1:2515:4845":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:10798:22516":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:6186:17315":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:5793:17384":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:11669:25009":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"24:5420:3205":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"1:6784:5070":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:46840:10344":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:10856:4855":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"20:34:4913":{"crate_id":20,"path":["quote","ext","private","Sealed"],"kind":"trait"},"1:5574:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"5:1396:4700":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:4726:780":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:6010:5062":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"24:3099:3439":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"2:48178:3268":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:3157:21688":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:1078:21888":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:12695:20804":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:12046:20533":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:5443:15046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"21:2604:230":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"17:9805:17629":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:10670:17698":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:4537:10316":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:4273:3341":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:2673:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:9031:36620":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:1626:4716":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:9737:10256":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:50809:10546":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:6744:4552":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:48254:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:52042:5127":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:7538:29502":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"24:5408:3200":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"24:4062:3467":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"2:52632:24427":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:20095:34120":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:5841:14339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:10476:17687":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:4254:4899":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"14:40:1778":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:52358:5128":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"24:4839:3153":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"17:9155:17735":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:12896:20968":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:20093:34118":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"12:1845:4550":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"6:4206:14279":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:50056:10296":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:6781:17334":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:5763:5001":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"20:77:1844":{"crate_id":20,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"24:2434:3492":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"17:10721:17701":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"24:5050:2457":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"17:11594:20385":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:11681:24708":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:3079:3287":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"20:137:3731":{"crate_id":20,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"1:954:4550":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"24:616:36935":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"16:7249:17413":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:359:4216":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:54106:10196":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:9484:24551":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:2154:578":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:7942:17424":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:3689:16416":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:9501:17512":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:9835:22515":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:5064:4918":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"24:4479:2112":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"16:3632:16407":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:8339:17726":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:11922:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:3402:17462":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"24:424:22613":{"crate_id":24,"path":["syn","expr","parsing","AllowStruct"],"kind":"struct"},"17:9250:17491":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:9738:17554":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"13:0:2971":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:53744:5150":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"24:4426:3615":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"24:5318:1764":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"6:6430:15537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"24:1682:3264":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"12:119:21975":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"21:370:4595":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"24:5452:3211":{"crate_id":24,"path":["syn","ty","Variadic"],"kind":"struct"},"24:4896:2041":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"17:10546:17692":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:7086:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:2683:17447":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:5361:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:6314:4557":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:4294:14445":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:10506:17652":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"24:4513:3135":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"18:681:21527":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"12:697:4703":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:12237:20607":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:10949:17741":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:8701:17476":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:6440:24970":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:305:1408":{"crate_id":1,"path":["std","thread"],"kind":"module"},"24:4924:3173":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"1:8638:4882":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"24:4313:3485":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"2:48195:3702":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"12:2190:36587":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:7299:28154":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:20343:5086":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:5348:28245":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:9947:17635":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"21:2495:3383":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"24:5087:3183":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"1:2905:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"24:2649:115":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"2:50517:10277":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"18:636:22640":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:6817:3263":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:560:11189":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:2030:35197":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:46499:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:539:11186":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:11014:17854":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:49107:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"1:8421:4835":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:52456:5120":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:2565:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:3422:4811":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:49140:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"21:1814:4587":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"1:8146:3322":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:6903:17409":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"24:3876:3455":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"1:8649:4871":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:57049:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4191:14433":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:10903:10555":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:2840:10447":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"12:1003:4710":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:9302:4913":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:29698:21850":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:6781:5069":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:9362:17513":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:11247:18018":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:1349:3264":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:11654:24706":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:50340:4838":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:12269:4695":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:11990:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"12:0:2977":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:2588:22489":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:20312:5084":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"6:6302:15531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:8470:4873":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:487:17724":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:6885:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:50714:10311":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:12315:1456":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:13192:21379":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:49986:10249":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:38181:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:11093:24697":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:12198:20604":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:54115:10197":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:52609:24426":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:7847:17422":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"24:4847:3155":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"1:8644:4881":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:1887:12230":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:8972:4987":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:2912:3349":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:46316:10341":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:50350:10303":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"0:947:1651":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"17:10270:17650":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:46861:21786":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:54282:10206":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:47205:10420":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:6720:4458":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"24:4892:3166":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"6:4224:14436":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:8177:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"19:0:1007":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:9441:1831":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:1505:12071":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"24:4383:3490":{"crate_id":24,"path":["syn","token","SubEq"],"kind":"struct"},"1:8945:4984":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:7748:3705":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"21:436:22461":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"17:9857:17611":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:50671:10283":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:57075:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"24:0:1630":{"crate_id":24,"path":["syn"],"kind":"module"},"2:48499:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:5516:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:6059:22161":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"24:4904:3168":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"6:7208:14621":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:4231:14437":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"24:1452:21575":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"24:4440:2160":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"17:13527:21470":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:12980:21332":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:50817:10548":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:6826:3333":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:9193:36618":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:12514:20745":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:9539:17526":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:7874:4201":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:50369:10291":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"24:2739:3424":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"17:13478:21444":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"24:4908:3169":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"24:4485:3132":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"2:6437:2605":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:8941:17732":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:10822:17703":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:13126:21350":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:7890:17330":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:4786:17029":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:5625:4825":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"24:2059:3326":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"1:8576:4876":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"24:2133:3310":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"24:5032:3180":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"16:8056:17297":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"24:5308:3195":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"17:10608:17694":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"12:393:36588":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:4969:4966":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"24:5180:3193":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"17:10221:17675":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:9224:5002":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:6639:28244":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:21291:4889":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:9339:17506":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:13221:21387":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"24:286:36781":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"2:12045:4457":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:21409:24664":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:4761:14493":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"24:2076:21576":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"24:4804:3145":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"5:1370:3263":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:6543:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:4425:4928":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"24:183:1778":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"17:9712:17579":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:7117:22014":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:967:17510":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"24:2631:3420":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"17:9844:17588":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"24:4033:124":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"17:12134:20539":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"24:4231:3479":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"2:10843:10556":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:46609:33126":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:11513:24556":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:5494:17372":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"12:60:36591":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"18:624:36624":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"24:1758:3270":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"2:51941:5147":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"24:4948:3179":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"6:586:11193":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:48110:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:53822:5134":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:46575:10454":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"5:6811:3263":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:21214:24312":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"17:11708:20509":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:4096:14425":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:57023:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"12:1044:16347":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:4324:4906":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:524:22498":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:7977:4749":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:7249:14627":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:4598:14475":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:9525:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:9601:17530":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:353:4215":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"24:5148:3186":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"24:1690:3266":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"4:0:2972":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:10698:10293":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:5894:5013":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"24:4021:3465":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"18:766:21534":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:20224:5093":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"6:6329:4968":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:9585:10245":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:4274:14442":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:2491:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:9631:17524":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:11476:10564":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:11199:17965":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:12349:20681":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:6760:35163":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"24:1638:3262":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"2:21326:24319":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"14:202:2295":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:29604:4281":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:4888:17057":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:49894:10242":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:57062:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"21:2617:3263":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"6:1654:12086":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"24:4492:187":{"crate_id":24,"path":["syn","attr","Meta","Path"],"kind":"foreign_type"},"18:582:4081":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:10403:17683":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:9108:17517":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:9765:10257":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:1518:12073":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"18:521:21535":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:1707:4923":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:46981:10361":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"24:4884:3164":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"17:8774:17728":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:10921:17740":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:8138:4847":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"12:1832:3264":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"23:0:3103":{"crate_id":23,"path":["unicode_ident"],"kind":"module"},"17:11893:20522":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:46521:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:11130:10269":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"24:3980:3462":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"17:12022:20531":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:6528:17402":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"24:3225:3441":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"1:10425:4747":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"7:0:1499":{"crate_id":7,"path":["unwind"],"kind":"module"},"22:748:24600":{"crate_id":22,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"5:6481:22479":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:2994:21866":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:9681:17578":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"24:4860:3158":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"16:7956:17327":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:20757:5113":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:4515:14465":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:11853:20520":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:6298:17342":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"24:4395:3491":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"24:5462:187":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"2:21430:4890":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:6316:22501":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:9930:17610":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:11383:22518":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:1751:24309":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:48870:3365":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:50308:10307":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:11639:20443":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"18:614:36626":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"18:564:21541":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:46417:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:5981:22036":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:4318:3342":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"20:10:3120":{"crate_id":20,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"24:4912:3170":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"1:3192:4855":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:8623:3365":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:10774:17680":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:7237:14625":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:7859:29178":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"17:247:36611":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:21303:21755":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"12:2053:4709":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:47185:10418":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"9:676:16212":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:8553:21722":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"5:3485:4727":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:21343:33114":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:4105:22471":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:39394:10479":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"6:4367:14454":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:9401:17509":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:11201:10273":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:11617:20442":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"5:6952:4770":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:12008:20530":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:3611:3263":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:9530:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"24:2160:2762":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"2:54126:10198":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:8441:17721":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:4653:14482":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"11:0:2976":{"crate_id":11,"path":["adler"],"kind":"module"},"1:11133:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"5:5814:5167":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:13134:21351":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:2749:17450":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:5317:28245":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"24:3207:1764":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"1:5660:4996":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"24:4586:3140":{"crate_id":24,"path":["syn","data","VisRestricted"],"kind":"struct"},"1:3232:4858":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:54030:5157":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:4454:4931":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:1426:4703":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:6052:17391":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"15:0:2979":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:4139:14429":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:2771:17451":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:11964:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:47145:4733":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:6270:17316":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:4196:3334":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:50190:10256":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"24:762:2066":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"24:2991:3435":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"1:8070:4789":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"12:2184:23532":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"24:1611:3261":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"1:12321:1509":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:9328:17507":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:1938:4766":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"24:2829:3428":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"17:12148:20540":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:11974:20528":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:52790:5149":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"24:1369:37001":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"17:9303:17512":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:11150:10266":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:4745:14492":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"24:4796:3143":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"2:8172:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:12756:20852":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:4534:14467":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:11721:20510":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:10845:17685":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:1415:4702":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:49411:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:4585:4933":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:2383:4472":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"24:3951:3460":{"crate_id":24,"path":["syn","token","DivEq"],"kind":"struct"},"6:5692:15118":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:7736:1858":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:7747:3706":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:13024:21335":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:12298:409":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:49915:10236":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:7214:14622":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"24:2114:1848":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"16:2657:17446":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:3107:4550":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:4263:3340":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:9885:17633":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:11576:20341":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:2465:17438":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:4644:14481":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:7049:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:12630:20800":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:1550:12077":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:9488:17528":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:2714:4073":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:6719:22172":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:13168:21376":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:1044:35148":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:969:4703":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:50825:10550":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:11263:4749":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:50681:10284":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:4179:14431":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:11703:22522":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:8390:4814":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:9276:3263":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:13031:21336":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:4437:14459":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:11997:20529":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:9573:5076":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"21:2720:3282":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"16:2705:17448":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:2982:2258":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:1737:4500":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:8763:33125":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:9463:28240":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:12312:728":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:2842:17454":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:944:4552":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:7046:4550":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"22:686:1842":{"crate_id":22,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"2:48228:3703":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"12:2069:4710":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:47246:10424":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:2848:10449":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:9183:17736":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"24:5506:3212":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"1:11584:22520":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:887:3264":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:7289:16104":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"21:2320:1778":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"1:12319:1452":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:6851:5075":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:4403:21724":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:7166:17411":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:46974:10360":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"5:3430:22467":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:11098:4791":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:8428:2753":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:21017:5087":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:5235:23308":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:8560:3361":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"5:2960:21865":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:20469:4913":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:46457:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"24:1903:2487":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"17:10682:17699":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:6311:15532":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:50805:10545":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:46967:10359":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"24:4582:3139":{"crate_id":24,"path":["syn","data","VisPublic"],"kind":"struct"},"16:7469:17324":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"12:810:4701":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:50290:10306":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:6708:5073":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:50877:5079":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:20040:33897":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"6:4317:14448":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:9263:17492":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:1760:4499":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"18:599:22615":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"12:815:4704":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:9004:10511":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"16:153:17303":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"24:1857:2019":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"2:2775:3480":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:10752:17683":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:21823:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"5:6295:4556":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:6472:16373":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:13214:21386":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:1114:4711":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:1643:12085":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:11500:20332":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:52948:5141":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:29626:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:13354:21392":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:4657:4927":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:47167:10411":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:9206:5000":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:54243:10205":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:49152:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:11813:20517":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:8625:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:8752:2753":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:8613:111":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"6:4575:14472":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"24:4161:3474":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"17:8272:17723":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:4903:22467":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:6877:17408":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:7426:17340":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"24:5010:2465":{"crate_id":24,"path":["syn","generics","LifetimeDef"],"kind":"struct"},"21:2664:1842":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"1:8369:4863":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:5713:15120":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:2789:5078":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"24:2919:2484":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"1:12322:1099":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"24:5095:1854":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"6:646:11225":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:11559:20338":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"20:135:3732":{"crate_id":20,"path":["quote","__private","HasIterator"],"kind":"struct"},"17:9283:17516":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"24:5037:2204":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"2:50856:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:1600:12082":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:8378:4810":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"22:830:1842":{"crate_id":22,"path":["proc_macro2","Span"],"kind":"struct"},"9:827:16291":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:2485:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"16:2894:17456":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:10207:17664":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"21:107:4617":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"2:1672:1063":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:2844:10448":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:50154:10308":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:1668:12087":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:12317:1454":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:2834:3486":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:979:4705":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:8955:3264":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:1889:4755":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"20:349:3887":{"crate_id":20,"path":["quote","__private","RepInterp"],"kind":"struct"},"2:2964:4451":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:51043:5163":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"22:0:1631":{"crate_id":22,"path":["proc_macro2"],"kind":"module"},"14:160:16358":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"24:3063:209":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"24:4219:3478":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"2:7433:4450":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"22:772:1767":{"crate_id":22,"path":["proc_macro2","imp","Group"],"kind":"enum"},"1:545:4197":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:48313:3263":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"5:1241:4712":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:7785:22511":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"12:777:16345":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"16:5510:17373":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:47584:24681":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:39403:4074":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:598:4206":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:13506:21468":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:4838:4955":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:1312:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"5:6412:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:50378:10290":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:7319:17419":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:12265:20609":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"12:853:4707":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:46834:3372":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"22:662:24599":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"22:753:36778":{"crate_id":22,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"17:13047:21340":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:5510:15106":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:11684:20450":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:6554:15545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:9446:17518":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:4385:16925":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:2674:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"24:4928:3174":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"1:5227:3694":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:12730:20808":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:8216:21667":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:1359:3268":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:10708:17700":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"20:275:2487":{"crate_id":20,"path":["quote","spanned","Spanned"],"kind":"trait"},"16:7298:17417":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:21442:4893":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:47000:10362":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:6829:22177":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:5861:15154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:50136:10309":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:6316:17343":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:52578:24425":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:9458:17543":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:2579:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:8570:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:6953:11140":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:2445:4913":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:4247:14439":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:50403:10301":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"5:6864:3301":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:8631:17474":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"24:5138:3188":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"16:6376:17399":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:7440:10408":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:7012:10409":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:6500:15540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:2769:3459":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:2341:17433":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:4217:16832":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"22:105:24598":{"crate_id":22,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"2:58384:24481":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:9260:3264":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:21251:24661":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:6735:17337":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"12:387:36592":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:47255:10433":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:9293:17514":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:11761:20513":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:11091:3288":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:12485:20744":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:13148:21353":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:12314:725":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:3179:21775":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:7895:4203":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:11288:28269":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"24:4202:3477":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"2:49866:10241":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:5558:17376":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:21757:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:9823:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:2253:4489":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:20752:5090":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:2663:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"18:755:21533":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:11773:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:5996:17389":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:1691:4550":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"6:1525:12074":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"5:6980:10312":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"24:4800:3144":{"crate_id":24,"path":["syn","expr","ExprAssignOp"],"kind":"struct"},"2:47094:4787":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"5:3805:3268":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"11:44:16336":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:48246:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"5:6729:3263":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:7093:17410":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:53026:5129":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:1695:12090":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:2857:10451":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:1982:21890":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:6043:5064":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:11356:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:8295:17727":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:12884:20966":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:5554:15075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:11267:21650":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:9314:5016":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"24:4962:61":{"crate_id":24,"path":["syn","expr","parsing","raw"],"kind":"struct"},"2:48297:3264":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:49904:10243":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:9909:17589":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:2930:17301":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"22:902:2485":{"crate_id":22,"path":["proc_macro2","Literal"],"kind":"struct"},"17:10283:17649":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:6408:22508":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:8110:17730":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"24:4876:3162":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"2:9779:10255":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:11532:5022":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:661:4687":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:39354:4653":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:9820:17630":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:2321:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"24:4562:3141":{"crate_id":24,"path":["syn","data","Visibility"],"kind":"enum"},"2:10919:10557":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:8981:17733":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:20390:5089":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:8951:36610":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"22:672:3281":{"crate_id":22,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"14:165:16359":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:49441:24685":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:11606:20441":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:7045:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:9503:4837":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:7008:10410":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:48849:2251":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"24:3905:3457":{"crate_id":24,"path":["syn","token","Colon2"],"kind":"struct"},"16:7909:17332":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:13327:21390":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:49641:21863":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"21:2715:1767":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"14:187:16368":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:3903:4825":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:8434:4837":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:2801:10443":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:11111:24702":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"16:3854:16452":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:910:3263":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"24:2487:3416":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"24:4144:3473":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"17:10075:17593":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:12316:1453":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"9:0:2974":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:5595:15112":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:9021:17734":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:8441:4838":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"24:2343:3263":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"16:6241:17395":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"18:736:21532":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"12:1029:4711":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:6161:17392":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:20074:34121":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:0:2980":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:6865:22179":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:11846:4885":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:918:4699":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:3015:1815":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:12280:28784":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:53634:5130":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:46921:10357":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:29564:4279":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:49210:4637":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:2682:2413":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"24:3351:3447":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"1:8961:4986":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:5703:17380":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"9:977:16234":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"24:3917:3458":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"17:11368:18157":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:5782:15126":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:11825:4883":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"12:1534:16351":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"5:2747:25689":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:8221:21668":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"12:274:24649":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:4439:656":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"16:6496:17401":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:7396:17421":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:10310:17678":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"12:1085:16348":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"24:5445:3196":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"1:12299:1472":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:46960:10300":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:11070:17916":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:52388:5132":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:4357:16919":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:5387:10422":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:49394:24683":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:9301:5015":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:6790:17407":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:50466:10270":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"21:998:230":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"1:3230:4857":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"24:4852:3156":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"6:7279:16103":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"24:427:36997":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"1:678:4690":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"0:946:1643":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"5:3764:22467":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:4505:4932":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:2677:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:47340:10430":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:7954:4714":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:48651:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:12909:20969":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"24:2505:3417":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"17:10088:17594":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:4592:14474":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:6523:10417":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:12307:20617":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"24:584:36936":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"16:4144:16566":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:50660:10282":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:3377:10327":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:50889:10566":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"18:707:10267":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"22:676:3380":{"crate_id":22,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"1:1864:4747":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:52410:5135":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:5761:17382":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:49089:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:8362:4862":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"24:5146:3190":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"24:1665:3263":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"16:4635:17006":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:6570:32771":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"22:790:2485":{"crate_id":22,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"2:54068:5122":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"24:4272:3482":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"2:47299:10427":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"24:2248:3321":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"2:8619:2251":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:9330:5017":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"24:5223:3194":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"2:3314:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"24:4337:3487":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"16:2509:17440":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:10520:17690":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:3269:4853":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"18:727:21531":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"18:690:21528":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:51879:5126":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:8795:3695":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"9:33:16215":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:50694:10310":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:5826:5006":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:5876:15155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:9830:4789":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"24:3243:1815":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"6:5660:15115":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:1123:4712":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:13100:21345":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:50254:10305":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:9722:17576":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:1608:12083":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"18:531:21539":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:6619:17404":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:10444:28147":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:46849:10364":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"24:4959:2258":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"2:2482:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:8559:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"1:9514:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:12140:22523":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:2818:4005":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"24:3997:3463":{"crate_id":24,"path":["syn","token","Dot2"],"kind":"struct"},"1:7847:4913":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:12164:20541":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:21380:33104":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:8712:4882":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:6969:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:13141:21352":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:4947:10229":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:11235:18017":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"24:4916:3171":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"1:9406:26539":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:47591:4261":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:3457:17463":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:12836:20899":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:1500:12070":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:57010:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"12:762:4550":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:8740:4968":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:50385:10300":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:11800:20516":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:4014:4884":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"9:505:16331":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:12211:20605":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:7848:4217":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:4441:16933":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:575:11191":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"24:4325:3486":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"2:4:991":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"6:5472:15102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"24:94:4913":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"1:12302:308":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:9791:17581":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:47361:4835":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:48727:5061":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"24:3117:2531":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"17:11528:17638":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:21416:4891":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"24:2883:3431":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"12:1120:16349":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:4581:14473":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:47223:24677":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"24:2685:3422":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"6:6509:15541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"9:709:4981":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"24:4944:3178":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"2:49423:4981":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:50030:10302":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:50488:10271":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:6981:15915":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:6293:11061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"24:636:2837":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"2:51833:5146":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:13382:21429":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:11762:21637":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:11125:17925":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:51857:5138":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"24:5061:2126":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"17:10350:17680":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:8847:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"24:4091:3469":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"6:4726:14490":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:2446:4654":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:6676:17321":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"24:5439:3209":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"17:10445:17685":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:7981:1933":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:2488:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:47154:4834":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:51811:5158":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:10121:17591":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"24:2973:3434":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"1:8698:4935":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:3142:10453":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:8822:36622":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:2986:3273":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:58363:24480":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:12297:920":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"20:446:4001":{"crate_id":20,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"1:10494:2149":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:2930:3394":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"18:644:22631":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:6704:17335":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:554:11188":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"24:5418:3204":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"24:4829:3151":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"24:4491:1850":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"16:2993:17457":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"24:3081:3438":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"1:1887:4754":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"12:2205:3301":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:4152:14430":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:131:10864":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:8813:4971":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:5628:17378":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:4972:4939":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"24:5190:1633":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"5:2743:3434":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:13393:21430":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"12:1872:1815":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"12:1555:16352":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:10875:17705":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:11259:18127":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:10374:17647":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:50208:10254":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:52101:5116":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:11069:4967":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:5823:5005":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"8:0:2973":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:9671:17544":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:3951:33113":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:49884:10244":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:47104:4786":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"11:36:23536":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:10264:10246":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:13572:21477":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:1678:12088":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:48423:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:9658:17577":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:9282:5014":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:681:4692":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"18:660:21525":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"21:2294:2171":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"17:13594:21513":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:3010:17458":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"9:896:16232":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:49976:10251":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:21318:24318":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:4417:14457":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:7243:14626":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:8882:10375":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:2612:4839":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:6517:16372":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:8833:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:6284:17326":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:5460:17370":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:11161:17962":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:2477:21891":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:3271:4854":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:11137:17926":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:5605:15113":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:2823:10445":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:11639:24557":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:3461:3361":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"24:4173:3475":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"22:702:1778":{"crate_id":22,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"16:5596:17377":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"}},"external_crates":{"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"23":{"name":"unicode_ident","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"20":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.23/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.51/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/1.0.107/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}