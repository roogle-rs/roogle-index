{"root":"0:0:1695","crate_version":"1.0.163","includes_private":false,"index":{"2:12110:35923":{"id":"2:12110:35923","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11887:419","self::pattern":"2:11715:14351"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11740:14347","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12024:314":{"id":"2:12024:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12025:30256","`u8`":"1:11904:1493"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12044:35910":{"id":"2:12044:35910","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43595:8370","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12138:35927":{"id":"2:12138:35927","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4538:35927"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43630:8316","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5390:36578":{"id":"5:5390:36578","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7255:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:925:1689":{"id":"0:925:1689","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[100,0],"end":[105,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"5:5382":{"id":"5:5382","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5383:36576","5:5384:2048","5:5387:36577","5:5390:36578","5:5398:36579","5:5399:36580","5:5400:3284","5:5401:2328","5:5402:2327"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12030:30254":{"id":"2:12030:30254","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12046:1948":{"id":"2:12046:1948","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11887:419","self::pattern":"2:11715:14351"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12042:32910":{"id":"2:12042:32910","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12041:32909"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43614:8372","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12026:1911":{"id":"2:12026:1911","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41370:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41368:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12102:35918":{"id":"2:12102:35918","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12104:35919":{"id":"2:12104:35919","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12013":{"id":"2:12013","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12014:811","2:12015:2018","2:12016:35904","2:12017:35905","2:12019:35906","2:12022:2747","2:12023:35907","2:12024:314","2:12025:30256","2:12026:1911","2:12028:30253","2:12030:30254","2:12032:30255","2:12034:35908","2:12035:35909","2:12036:30278","2:12037:30279","2:12038:2337","2:12039:2331","2:12040:8275","2:12041:32909","2:12042:32910","2:12043:27511","2:12044:35910","2:12045:32896","2:12046:1948","2:12049:29819","2:12052:29821","2:12055:2556","2:12059:4105","2:12063:27510","2:12066:30287","2:12069:30289","2:12072:35911","2:12075:35912","2:12078:30291","2:12081:30293","2:12084:35913","2:12087:35914","2:12090:3084","2:12093:35915","2:12096:35916","2:12099:35917","2:12102:35918","2:12104:35919","2:12106:35920","2:12108:35921","2:12109:35922","2:12110:35923","2:12113:1930","2:12116:26809","2:12119:30295","2:12122:35924","2:12125:35925","2:12128:35926","2:12131:1892","2:12133:4422","2:12134:30167","2:12135:4423","2:12136:4424","2:12137:4425","2:12138:35927","2:12140:3389","2:12141:35928"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12078:30291":{"id":"2:12078:30291","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11887:419","self::pattern":"2:11715:14351","str::rsplitn":"2:12081:30293"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43435:8361","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12109:35922":{"id":"2:12109:35922","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12019:35906":{"id":"2:12019:35906","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12017:35905"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12037:30279":{"id":"2:12037:30279","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12036:30278"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5402:2327":{"id":"5:5402:2327","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12137:4425"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12128:35926":{"id":"2:12128:35926","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11887:419","self::pattern":"2:11715:14351"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12025:30256":{"id":"2:12025:30256","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11904:1493"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12081:30293":{"id":"2:12081:30293","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11887:419","str::splitn":"2:12078:30291","self::pattern":"2:11715:14351"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43453:8362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5399:36580":{"id":"5:5399:36580","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:280:1869","`String`":"5:7255:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:280:1869","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7004:4440","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5400:3284":{"id":"5:5400:3284","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7255:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12135:4423":{"id":"2:12135:4423","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:924:1680":{"id":"0:924:1680","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[92,0],"end":[97,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"0:372-0:348:1803":{"id":"0:372-0:348:1803","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[8,0],"end":[8,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:348:1803","glob":false}}},"2:12106:35920":{"id":"2:12106:35920","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12122:35924":{"id":"2:12122:35924","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11887:419","self::pattern":"2:11715:14351"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12140:3389":{"id":"2:12140:3389","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4539:3389"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43639:3390","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12036:30278":{"id":"2:12036:30278","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12037:30279"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5384:2048":{"id":"5:5384:2048","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7255:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12075:35912":{"id":"2:12075:35912","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11715:14351","str::split":"2:12063:27510","prim@char":"1:11887:419","str::split_terminator":"2:12072:35911"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43399:8359","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5383:36576":{"id":"5:5383:36576","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:280:1869","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7004:4440","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:280:1869","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7004:4440","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12072:35911":{"id":"2:12072:35911","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11715:14351","str::split":"2:12063:27510","prim@char":"1:11887:419","`DoubleEndedIterator`":"2:7243:121","str::rsplit_terminator":"2:12075:35912"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43381:8358","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84-0:953:1896":{"id":"0:84-0:953:1896","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[22,0],"end":[22,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"internals::case::RenameRule","name":"RenameRule","id":"0:953:1896","glob":false}}},"2:12131:1892":{"id":"2:12131:1892","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11676:127","`FromStr`":"2:11675:3257"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41512:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11675:3257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11675:3257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12090:3084":{"id":"2:12090:3084","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11715:14351","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11887:419","str::matches":"2:12090:3084"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43535:8367","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12113:1930":{"id":"2:12113:1930","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11887:419","self::pattern":"2:11715:14351"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12134:30167":{"id":"2:12134:30167","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39526:3391","Self::is_ascii":"2:12133:4422"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41368:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39526:3391","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12035:35909":{"id":"2:12035:35909","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11893:1395","crate::ops::IndexMut":"2:2982:3242","str::slice_unchecked":"2:12034:35908"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:8:1800":{"id":"0:8:1800","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[202,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:12066:30287":{"id":"2:12066:30287","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11887:419","self::pattern":"2:11715:14351"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11538:8285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12059:4105":{"id":"2:12059:4105","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41370:179","prim@char":"1:11887:419","self::pattern":"2:11715:14351"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41368:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12141:35928":{"id":"2:12141:35928","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4536:35928"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43648:8315","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12023:35907":{"id":"2:12023:35907","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12137:4425":{"id":"2:12137:4425","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:345":{"id":"0:62:345","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1796,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:84-0:953:1896"],"is_stripped":false}}},"2:12043:27511":{"id":"2:12043:27511","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43585:8369","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12093:35915":{"id":"2:12093:35915","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11715:14351","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11887:419","str::matches":"2:12090:3084"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43553:8368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12096:35916":{"id":"2:12096:35916","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11715:14351","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11887:419","str::rmatch_indices":"2:12099:35917"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43481:8364","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12099:35917":{"id":"2:12099:35917","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11715:14351","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11887:419","str::match_indices":"2:12096:35916"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43499:8365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12116:26809":{"id":"2:12116:26809","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11887:419","self::pattern":"2:11715:14351"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41368:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12133:4422":{"id":"2:12133:4422","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5398:36579":{"id":"5:5398:36579","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7255:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:978:1899":{"id":"0:978:1899","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"2:12017:35905":{"id":"2:12017:35905","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1695":{"id":"0:0:1695","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[110,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2018\n# use serde_derive::{Serialize, Deserialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.163\")]","#![allow(unknown_lints, bare_trait_objects)]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: derive_partial_eq_without_eq, clippy ::\nenum_variant_names, clippy :: manual_map, clippy :: match_like_matches_macro,\nclippy :: needless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: let_underscore_untyped, clippy ::\nmanual_assert, clippy :: map_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:924:1680","0:925:1689"],"is_stripped":false}}},"2:12040:8275":{"id":"2:12040:8275","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43317:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12022:2747":{"id":"2:12022:2747","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11282:14352"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12028:30253":{"id":"2:12028:30253","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41370:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41368:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12045:32896":{"id":"2:12045:32896","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43623:8373","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12063:27510":{"id":"2:12063:27510","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11715:14351","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11887:419","str::split_whitespace":"2:12041:32909","str::rsplit":"2:12069:30289"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43331:8283","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12087:35914":{"id":"2:12087:35914","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41368:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12125:35925":{"id":"2:12125:35925","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11887:419","self::pattern":"2:11715:14351"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5401:2328":{"id":"5:5401:2328","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12136:4424"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12069:30289":{"id":"2:12069:30289","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11715:14351","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11887:419","str::split":"2:12063:27510"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43349:8286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12038:2337":{"id":"2:12038:2337","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11887:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43301:8352","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12055:2556":{"id":"2:12055:2556","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41370:179","prim@char":"1:11887:419","self::pattern":"2:11715:14351"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41368:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12136:4424":{"id":"2:12136:4424","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5387:36577":{"id":"5:5387:36577","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7255:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12014:811":{"id":"2:12014:811","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11887:419"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12032:30255":{"id":"2:12032:30255","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:323-0:949:1802":{"id":"0:323-0:949:1802","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[5,0],"end":[5,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:949:1802","glob":false}}},"2:12052:29821":{"id":"2:12052:29821","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11887:419","self::pattern":"2:11715:14351"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12108:35921":{"id":"2:12108:35921","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12015:2018":{"id":"2:12015:2018","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12039:2331":{"id":"2:12039:2331","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11887:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43307:8353","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12084:35913":{"id":"2:12084:35913","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41368:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12049:29819":{"id":"2:12049:29819","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11887:419","self::pattern":"2:11715:14351"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12041:32909":{"id":"2:12041:32909","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12042:32910"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43605:8371","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12119:30295":{"id":"2:12119:30295","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11887:419","self::pattern":"2:11715:14351"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41368:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:14348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12034:35908":{"id":"2:12034:35908","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11893:1395","str::slice_mut_unchecked":"2:12035:35909","crate::ops::Index":"2:2978:2287"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12016:35904":{"id":"2:12016:35904","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"16:6327:8168":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"24:5052:2464":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"24:4484:3135":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"2:4605:14395":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"24:1489:1893":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"typedef"},"17:10897:5311":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:3880:9040":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:7837:8231":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:43275:7757":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"9:421:20096":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:1785:8923":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:9512:21209":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:5816:7145":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:10807:14338":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:6628:7354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"22:825:1822":{"crate_id":22,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"24:925:3192":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"2:46150:7822":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:4811:795":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:1908:16142":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:43553:8368":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:39986:8313":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:0:2983":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:11941:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:7861:3352":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:4667:6882":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"20:239:4014":{"crate_id":20,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"6:4707:6897":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"21:405:37170":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"2:40461:3326":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:30287:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:21558:8987":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"18:614:37066":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:2720:6058":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"24:2531:3423":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"1:4111:9069":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:5051:7073":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"5:1351:3233":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:1454:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"20:0:1104":{"crate_id":20,"path":["quote"],"kind":"module"},"2:4010:32969":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:8256:21154":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:2744:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:41368:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"21:184:4172":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"24:3824:3460":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"2:2824:3493":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:20593:33456":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:10885:8095":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:9312:21185":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:10377:5275":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:8892:7959":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:5988:7240":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:8967:7960":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"24:673:37414":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"1:947:8910":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"24:4512:3138":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"1:6409:4942":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:3998:32970":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"24:3921:3466":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"18:582:4094":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:482:6503":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:20989:9191":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:11503:8366":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:40090:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:43349:8286":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"24:3812:3459":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"6:6821:7438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:13376:5872":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:45265:7776":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:43930:8391":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:44074:8404":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"3:229:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"24:2228:8019":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"2:40016:3390":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"18:707:8064":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:2573:8830":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:45596:7793":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"24:4812:3161":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"24:2820:3434":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"22:699:3251":{"crate_id":22,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"2:42872:7754":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:11687:4961":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:6800:7426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:8140:2760":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"11:399:36975":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"14:7:8812":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:39526:3391":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:44062:8401":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:3874:9041":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:3614:9032":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"24:4900:3181":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"2:9627:4916":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:4571:6875":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:40398:3322":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:40170:4901":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:4431:6806":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:13625:5954":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:45642:7794":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:45718:7797":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:6024:7250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:3166:14384":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:5471:4879":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:13499:5903":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:47504:7879":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"21:2789:2201":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"6:526:6531":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:12449:5592":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:44308:7764":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:30265:4270":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:11355:5374":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:11903:740":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:7317:37011":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:1589:8256":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:8678:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:22523:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:6293:6138":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:2919:2223":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:43197:14331":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"24:4820:3163":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"6:5747:7113":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:40412:3323":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:2319:6035":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:5563:4931":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"11:1688:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:0:2984":{"crate_id":17,"path":["object"],"kind":"module"},"17:12835:5683":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:7497:7468":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:4914:4879":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:7459:1899":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:4845:6116":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:6442:8176":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:2169:35873":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:5571:6071":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:7790:8415":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"11:1873:8256":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:307:1443":{"crate_id":1,"path":["std","thread"],"kind":"module"},"1:11307:4958":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:13194:5826":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"21:141:4561":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"2:41965:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"5:7103:3232":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"20:148:3735":{"crate_id":20,"path":["quote","__private","HasIterator"],"kind":"struct"},"6:4947:7024":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:1982:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:1924:8950":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:11464:8360":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:2243:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:2929:3410":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:6598:7332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:4952:7026":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:573:6556":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:13082:5801":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:2742:1848":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:6696:21106":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:22457:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:40137:8952":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"5:3129:35497":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:21915:32814":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:10313:9127":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"0:924:1682":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"5:5642:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:43858:8385":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"11:2076:8913":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:8837:9151":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:2077:4187":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:2982:3242":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"22:925:1885":{"crate_id":22,"path":["proc_macro2","Spacing"],"kind":"enum"},"1:11071:7973":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"9:481:20093":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:11910:1547":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"22:0:1670":{"crate_id":22,"path":["proc_macro2"],"kind":"module"},"2:9365:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:2933:21274":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:3994:9050":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:4540:6107":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"24:842:8987":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"2:3507:4527":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"24:3950:3468":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"21:2614:3402":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"17:9322:37041":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"11:768:4525":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:10354:5274":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:1594:6616":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:45326:7778":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:2520:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:11715:14351":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:11897:642":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:562:1899":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"24:1962:3235":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"17:8753:5204":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:4255:9072":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:8443:21174":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:8729:9127":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:4619:6878":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:6700:7366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:8180:21120":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:2905:2059":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:10555:8078":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"11:2219:3271":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:2771:5064":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:5926:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"24:1736:8841":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"24:88:1875":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"6:1614:6630":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:10275:14343":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"24:3075:3446":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"6:1622:6635":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:41885:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:5071:6123":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:4596:6109":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:5798:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:11800:5476":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"5:3975:4527":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:45366:7780":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:13015:5782":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:41645:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:11487:8363":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:7797:7888":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"24:4979:2226":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"1:8959:1875":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"24:4329:3494":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"17:242:37057":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:5067:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"24:4833:3166":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"6:1700:6690":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:5818:4885":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:4641:9074":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:1577:8254":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:13332:5858":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:11258:5356":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"11:1540:20176":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:43109:8287":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:22424:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:47314:7867":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"24:4794:3157":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"6:5065:7079":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"21:1029:3401":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"2:11675:3257":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:11641:5435":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:11090:7964":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"18:531:8055":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:2636:7490":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"24:2888:3437":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"24:4143:3481":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"2:9529:4908":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"24:3211:2274":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"2:32121:4085":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:3972:9046":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:880:3233":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:13257:5842":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:46570:7828":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:3154:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"11:2192:1811":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"24:2735:3430":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"11:816:8907":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:9964:3233":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:2572:6052":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"24:5460:3215":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"16:3063:5116":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:4263:3359":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"20:34:8987":{"crate_id":20,"path":["quote","ext","private","Sealed"],"kind":"trait"},"24:5488:3223":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"2:44321:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:10052:21288":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"11:1561:20177":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:4521:6850":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:4818:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:8846:8524":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:5179:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:21853:7504":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:40251:3303":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:9145:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:6935:21107":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:11224:8577":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"11:2198:6415":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:2310:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:9037:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:2906:35469":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:47390:7871":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:3128:32228":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"24:251:8810":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"1:11236:8440":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:13469:5897":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:888:8253":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:4486:6831":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:40107:33725":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"24:5074:3190":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"6:5870:7171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:2814:4015":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:10416:21341":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"21:2401:2489":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"24:5061:1953":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"2:9988:3237":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:39346:3365":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:39972:7723":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"24:5356:3206":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"11:731:8252":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"5:1716:4525":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:11163:5329":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:10681:8092":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:9696:5219":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:2507:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"24:5078:2459":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"2:11282:14352":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:42127:2280":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"11:1009:8913":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:10303:21273":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:5880:7178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:9772:5230":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:12046:5515":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"22:946:2489":{"crate_id":22,"path":["proc_macro2","Literal"],"kind":"struct"},"24:4453:3626":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"24:3245:1808":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"5:1213:8914":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:11339:5370":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"20:235:4012":{"crate_id":20,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"1:10681:7888":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:922:8521":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:7164:3299":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"24:5498:3210":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"24:3962:3469":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"2:41319:8417":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"21:2744:3401":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"16:5418:6127":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:11836:8578":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:9886:21244":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"18:0:2985":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:45496:7790":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:6980:3280":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:10418:9020":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:6236:8480":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"21:1072:1886":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"6:7258:7453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"22:834:2489":{"crate_id":22,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"11:783:4849":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"6:62:14742":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:7643:8903":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"13:0:2974":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:9959:8075":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:39944:8312":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:585:2293":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:41765:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"24:5364:1808":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"17:11372:5376":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:930:8908":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"18:599:5055":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"5:5235:14326":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:2476:9012":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:9498:5219":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"24:3109:212":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"5:4399:4881":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:30863:4094":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"24:2752:3431":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"16:7042:8221":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:45385:7781":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:6765:4897":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"22:695:233":{"crate_id":22,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"20:77:1888":{"crate_id":20,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"17:10743:21187":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:2546:6051":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"24:5440:3211":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"2:44054:8399":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:8283:21169":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:3781:9037":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:355:4208":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:6757:9185":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:11467:7976":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:4932:7015":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:12072:5518":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:2426:6046":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:2912:3443":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:13053:5793":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:10936:5312":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:4398:6788":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:3030:6089":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:8109:8241":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:43715:14363":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:41805:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:11909:789":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"18:624:37061":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:8025:3136":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:41486:3713":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:4045:4432":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:6431:8175":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:8823:5206":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:5032:7059":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:1821:8932":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:13698:5975":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:46386:7826":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:39254:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:7652:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:40095:8322":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:9973:8076":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:21944:8301":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:5693:9141":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:6890:6078":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:2739:3408":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:9612:4912":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:7589:4198":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"24:4102:3478":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"17:11879:5489":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:8598:21179":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:6296:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:4757:6921":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:44126:8407":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"24:3938:3467":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"17:10635:5285":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:8667:5201":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:13033:5787":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:11544:5406":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"18:660:25090":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:41555:3233":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:9154:2280":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:8047:6285":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:10651:8428":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:8360:21171":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:11330:9036":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:2337:6037":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:4439:6809":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:1443:8522":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:11740:14347":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"15:180:20195":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:10864:7954":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:6085:4921":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"24:4411:3500":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"24:4440:2482":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"1:1561:3233":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:9478:21213":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:7478:6081":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:47489:7878":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:5724:8115":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:4435:9075":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:5071:7081":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"11:1859:8254":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:11520:5402":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:9298:34522":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"6:1525:6578":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:10421:9016":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:12403:5585":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:2539:4925":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:55:6276":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"1:10846:26785":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"24:5327:2269":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"2:20769:4460":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:2149:589":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"9:0:2977":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:40057:14402":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"24:4956:62":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"22:975:3232":{"crate_id":22,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"24:4829:3165":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"16:2594:6053":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:6848:7444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:2467:8987":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"7:79:20087":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:2809:5054":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:10000:5297":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:39308:14434":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:7697:6076":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:11600:5424":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:6321:8496":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:1635:4266":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:10068:21308":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:44265:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:7214:3297":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:4507:9092":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:4144:3377":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:2967:20241":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:9061:7965":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:20535:4094":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:4492:6834":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:154:4838":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:41571:3232":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:45117:7770":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:9350:37058":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"20:10:3109":{"crate_id":20,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"6:1728:6703":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:2879:6065":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:9162:3385":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:2516:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:2087:8258":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:4904:6118":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:5811:8121":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:39190:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:12085:5520":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:2240:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:40270:3312":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:43630:8316":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:13763:5994":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:6133:8534":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:9806:8987":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"20:37:2852":{"crate_id":20,"path":["quote","format_ident"],"kind":"macro"},"1:9097:26775":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"5:1463:8915":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"22:874:1886":{"crate_id":22,"path":["proc_macro2","Span"],"kind":"struct"},"13:226:6414":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:731:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"24:2854:3435":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"5:5712:4527":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"24:608:3233":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"2:1665:1087":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:4327:9066":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:4902:3704":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:4991:7044":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:6876:6077":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:8853:9150":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:43535:8367":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"9:445:20094":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:2504:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:45548:7792":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"24:3092:3365":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"17:11299:5359":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:1978:21242":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:39150:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:11902:744":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:12959:5776":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:11538:8285":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:12282:5567":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:680:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:7807:8416":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:3209:9021":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:47370:7869":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:7508:4947":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"22:869:233":{"crate_id":22,"path":["proc_macro2","TokenStream"],"kind":"struct"},"17:12259:5566":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:40024:8316":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"21:2764:1811":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"2:12333:35060":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:10669:8434":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:10334:5225":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:40260:3311":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:11905:1490":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:4022:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:9408:14412":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:4478:6826":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:7269:8277":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:3142:21277":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:45141:7771":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:7243:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"24:1910:3231":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"1:10711:7929":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:7168:3298":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:4005:4853":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:12545:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"9:174:8512":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:2693:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:4980:7038":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:3382:7931":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:6376:6069":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:20868:9194":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"6:5959:7227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:3448:32044":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:487:21168":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:587:6564":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:2502:6049":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"5:3547:3237":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:43289:8351":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:41685:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:43895:8386":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:4538:6858":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:6724:32913":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:6771:3275":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:9374:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:40050:8318":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:40200:3300":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:11887:419":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:5594:6073":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:2262:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"24:1491:3341":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"22:797:37211":{"crate_id":22,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"1:8824:7956":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:9110:3384":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:6400:8173":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:8981:26735":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"23:0:3105":{"crate_id":23,"path":["unicode_ident"],"kind":"module"},"2:42377:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:21430:7498":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:41263:1886":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:12360:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:420:5158":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:11901:743":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:10857:21190":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:8233:9034":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:12770:5632":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:13219:5834":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:45764:7799":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:11946:5500":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:2690:3371":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:2699:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:3169:9019":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"9:325:6457":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"22:505:3251":{"crate_id":22,"path":["proc_macro2","LexError"],"kind":"struct"},"16:5557:6068":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"24:5503:2228":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"24:4114:3479":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"2:25846:7520":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"21:1403:1899":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"1:11898:643":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:7571:4210":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:47436:7875":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:9148:112":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:8253:3715":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:4416:6800":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:45051:7767":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:2694:6057":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:44058:8400":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:11434:5386":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:47566:7881":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:8165:9033":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"11:1091:20173":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:20767:33670":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:12113:5525":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:6218:1852":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:7519:8229":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:7256:26363":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:43381:8358":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"24:4892:3179":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"24:2990:3441":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"24:5178:3200":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"20:150:3734":{"crate_id":20,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"6:532:6534":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:42395:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:4553:6864":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:7437:6233":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:10092:21310":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:10516:5277":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:9877:8338":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"16:4327:6102":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:41428:3233":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"24:4537:3150":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"1:8263:7336":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:41563:3237":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:12158:5530":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"15:219:8497":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:4932:6119":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:30231:4269":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"24:5138:3194":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"24:4816:3162":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"2:43481:8364":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:7352:4526":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:49372:9205":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:4331:6746":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:1981:3352":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:11911:1124":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:7029:8218":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"18:538:5094":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:1314:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"24:5286:2453":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"21:2769:3253":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"5:2916:25723":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:7036:4864":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"11:675:8521":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:12894:5735":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:5798:7133":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:22589:7518":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:21082:8987":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:42432:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:9628:21205":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:3640:5120":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:12522:5608":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:2844:5069":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:2161:4461":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"24:5298:2177":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"24:126:1811":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"2:40321:3317":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"24:4777:3153":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"17:8490:21175":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:3938:9045":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:3131:27272":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"24:5002:2428":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"2:43623:8373":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:9032:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:11109:5322":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:5058:7076":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"18:699:8062":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:10670:5289":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:4875:6979":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:20759:9193":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:8954:8533":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:13101:5802":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:7058:3232":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:13639:5960":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:10261:8362":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:11268:8823":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"11:119:4841":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:4785:35371":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:6180:4890":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"16:6022:21102":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:13453:5894":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:4:1014":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:2668:6056":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:44078:8405":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:2831:4928":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:9545:5195":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:12563:5613":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:11573:5415":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:41725:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:4851:6965":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:12799:5652":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:7066:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:4103:9068":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"24:343:37283":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"2:9156:3387":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:10015:21306":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:9826:21219":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"13:110:36982":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"5:7238:8276":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:6767:8205":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"11:859:8911":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"22:729:1822":{"crate_id":22,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"16:5920:8135":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:13426:5887":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:7557:6234":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"11:1866:8255":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:7853:8831":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:975:21210":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:9577:5221":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:44086:7761":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"24:2650:99":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"2:21113:9195":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"24:4997:2469":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"17:13121:5810":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:6696:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:7230:7450":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:8783:3233":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:5967:7228":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:10798:21189":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:11034:7761":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:40667:3283":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:7201:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"21:2749:1887":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"24:4254:3489":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"24:826:3338":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"17:8521:21176":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:6920:3278":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:2785:5065":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:7225:8273":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:4764:389":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"24:4540:3151":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"2:21106:8987":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"11:991:8223":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:8285:7934":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:40682:3287":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:5239:14327":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:12236:5557":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:45163:7772":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:2848:5072":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:41234:9031":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:9002:7963":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:2549:4912":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"24:3160:2536":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"24:3904:3465":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"24:3279:1859":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"1:7785:8982":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:11821:5480":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:4698:6892":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"24:2081:2426":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"24:917:3191":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"6:4941:7021":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"24:5454:3213":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"2:45672:7795":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:13564:5947":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:5385:9124":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"9:234:7750":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"5:1432:8521":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:3117:3233":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:7591:3292":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:21087:9188":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"24:4850:3170":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"5:2116:8260":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:7103:7960":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"24:2684:108":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"1:11144:4956":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"11:2204:36980":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:13812:6009":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:22358:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:10257:21276":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"19:0:1031":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:46420:7827":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"24:4574:2032":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"16:6904:6187":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:4813:6950":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:8924:26725":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:7931:26813":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:3314:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"24:2030:3239":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"2:40447:3325":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"20:272:1895":{"crate_id":20,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"17:11844:5485":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:7255:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"22:112:37209":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"6:5947:7220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"24:4807:3160":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"22:689:8046":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"24:2701:3429":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"2:3194:3372":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:5976:8099":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"3:0:443":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:40289:3314":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:11014:7953":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:5386:5200":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"24:5491:3208":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"2:43737:8374":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:4818:6115":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:8072:8235":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:41342:7737":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:43399:8359":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:40373:3320":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:4480:6105":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:936:8909":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:5829:7154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:8947:26747":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:5843:7164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:5900:7194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:2793:5067":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:10208:9124":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:21442:33327":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:867:3232":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:8046:8983":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"0:925:1690":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"16:4037:6101":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"24:2582:3426":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"17:9853:21266":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:12019:5243":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:41436:3237":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:9734:21221":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"21:2794:1885":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"21:2713:1886":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"5:1242:8818":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:47028:7862":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:5655:6072":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:12372:5579":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:40298:8326":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"10:36:6420":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:6755:7404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:47230:7865":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"24:2023:3237":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"2:32059:8308":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:8336:7943":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:43499:8365":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:11499:8443":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:43614:8372":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:12194:5536":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"11:638:3233":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"24:4085:3477":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"6:4821:6954":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:9670:21224":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:7195:8270":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:6520:6143":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:10989:5282":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:1692:6689":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:43331:8283":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"24:4928:1845":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"1:4853:9100":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:9265:21184":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"24:4861:3172":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"2:21861:7505":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"11:840:8910":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:2978:2287":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"24:2803:3433":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"2:43239:14339":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:3207:9020":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"14:0:2981":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:21560:9190":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:5935:7215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:11037:21191":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:6785:7421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:20728:9196":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"24:5466:3218":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"2:8841:33443":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:13249:5840":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:4797:6943":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:13066:5798":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:13399:5880":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:6254:6135":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:4624:6110":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"24:4773:3152":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"24:4570:2030":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"24:4126:3480":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"11:393:36978":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:6919:36991":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:20548:33324":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"24:3177:1837":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"2:40658:3281":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:46356:7825":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:13678:5972":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:2797:5068":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:901:4527":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"22:772:25099":{"crate_id":22,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"1:7664:4592":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:1565:3232":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:12419:5586":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:40673:3285":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:2214:8967":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:5764:4933":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:9796:5232":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:11446:5389":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:2819:5053":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:5834:14716":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"24:94:4153":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"17:10465:21319":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"24:4935:2287":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"6:4767:6927":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:11853:8537":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:43909:14364":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:10428:21342":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:13419:5886":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:7669:6085":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:12358:5576":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"8:0:2976":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:500:6511":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:11770:5467":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:6544:6075":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:4377:6780":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"0:0:1695":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"1:8146:8283":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:3641:3232":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:8911:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:6116:7271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:8573:21178":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:2704:2415":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:13612:5948":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:6717:8192":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:11969:5505":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:2361:8974":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:3439:3384":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"24:2514:3502":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"6:0:816":{"crate_id":6,"path":["libc"],"kind":"module"},"5:783:4856":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:7594:4200":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:953:8911":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:5643:8108":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"24:549:128":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"5:211:4443":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"21:2727:3399":{"crate_id":21,"path":["proc_macro","LineColumn"],"kind":"struct"},"2:45296:7777":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:5785:7132":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"10:0:2978":{"crate_id":10,"path":["adler"],"kind":"module"},"2:1745:7493":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:11892:1365":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"24:5188:3201":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"5:7013:3232":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"24:5173:2191":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"11:1071:36974":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:9068:37052":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:11471:5392":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:8775:7954":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"24:2599:3427":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"17:10545:5282":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:2755:5061":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:42657:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:11460:26812":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:2862:6064":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:43585:8369":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"24:1338:37271":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"24:2718:116":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"17:12622:5286":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:5032:6122":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:6691:7363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:11391:5381":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:4681:6883":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:4095:9067":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"11:2212:6418":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:21115:7496":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:3076:3256":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"11:2087:8914":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:5354:9122":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:1895:8827":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:6351:21104":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:21:681":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:8207:8417":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"11:1847:4527":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:21977:9039":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:40433:3324":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:2404:6045":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:1709:6696":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:1433:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:3753:4525":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:40330:3327":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:541:6540":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:13411:5883":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:638:8900":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:4509:6844":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:6598:4532":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:1731:4476":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:10660:5286":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:21838:33722":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:6677:3309":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"24:4876:2082":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"2:22259:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:7676:8940":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"24:4864:3173":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"2:22226:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"5:7028:4527":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:12059:5517":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"18:113:25079":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:2357:6043":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:13777:5996":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:20840:9200":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"24:3126:3447":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"17:9178:21183":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:7757:8230":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:2468:14407":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:10283:5270":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:47527:7880":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"24:2939:3440":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"18:755:8071":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:7538:7477":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:1572:4525":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:10225:26621":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:10649:8090":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:3446:6094":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:10461:4197":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:12224:5555":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:119:14796":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:4751:6919":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:12461:5594":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"24:4857:3171":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"1:1048:8223":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"24:901:37284":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"5:3158:8254":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"24:5289:2174":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"6:6008:7246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:30271:4271":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"5:633:8819":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:6061:20214":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"24:2633:1869":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"21:54:4551":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"5:3163:35484":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:4882:1001":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:1715:6699":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"24:4872:3175":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"2:43147:14334":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:13659:5966":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:9617:21206":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:10615:8088":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:12646:5630":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:8214:2566":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:4844:9099":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:11193:5333":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:41444:3232":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"24:3870:3463":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"24:4938:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"2:20908:9201":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:2895:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:3932:9044":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:9933:8072":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:3139:14433":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:45862:7801":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:3673:3352":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:2315:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:42669:7750":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:8673:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:8359:14348":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"22:919:2201":{"crate_id":22,"path":["proc_macro2","Punct"],"kind":"struct"},"1:11002:7952":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:5104:6124":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"14:187:20189":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"5:6294:4853":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:9120:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:9946:8074":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:6132:8163":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:43766:8382":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:41354:7738":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"24:5026:3188":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"5:5485:4531":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:4167:4879":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"21:1205:196":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"11:97:8245":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:2742:6059":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"21:2526:3402":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"24:3364:3455":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"2:47410:7873":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:3585:6095":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"18:671:25091":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"18:590:5097":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:47352:7868":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"24:103:4151":{"crate_id":24,"path":["syn","token","CustomToken"],"kind":"trait"},"24:5477:3220":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"24:5337:3204":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"17:12923:5746":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:13488:5902":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"11:60:36979":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:43127:14335":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:7016:8216":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"24:4846:3169":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"2:39339:33921":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"11:867:8912":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:6621:26771":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"6:7578:7485":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"24:1533:2769":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"17:11615:5430":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"24:4924:3187":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"24:5142:3198":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"1:10721:27343":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:10823:5172":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:11890:1049":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:43783:8383":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"24:4160:3482":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"2:41453:3712":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"24:844:5058":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"1:6485:9145":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:10247:8361":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"24:4196:3485":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"24:4382:3498":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"2:20878:4460":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:13433:5888":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"22:350:3251":{"crate_id":22,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"24:893:37286":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"2:2781:3261":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:4389:3367":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"14:40:1822":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:21717:8295":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:41845:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:45815:7800":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:12496:5606":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:413:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"5:1042:35880":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:5779:6129":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:6776:7418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:2205:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:6728:8193":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:1071:8914":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"18:80:25077":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:4175:9071":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:10825:6477":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"24:5469:2230":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"17:8979:37045":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:3167:9018":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:13169:5817":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:13135:5814":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:13367:5869":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:123:14797":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:10289:14342":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"18:644:5090":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:21664:8294":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:7335:37001":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:5022:7054":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:9748:5225":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:8799:3232":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:1650:6660":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:2786:6061":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"11:1144:8818":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:1657:6664":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:11891:5491":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:4073:29142":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:7596:21114":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:3457:8985":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:4960:7031":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:7209:33725":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:815:4859":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:6578:7326":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:5708:8113":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"24:5031:2229":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"1:11161:8435":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"24:4522:1878":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"1:8159:9034":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:10527:21345":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:10580:8086":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:4641:6880":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"11:703:8522":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:6981:21109":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:10569:8082":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:22325:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:2616:6054":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"24:1405:1891":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"24:4798:3158":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"16:3300:6093":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:7266:3296":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:10821:8826":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"21:479:4837":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"17:13443:5891":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"18:690:8061":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:1197:8223":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"24:3228:234":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"17:13041:5788":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:1555:6591":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"24:3347:3454":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"1:4680:9058":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:5570:4932":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:10039:21272":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:2346:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:8081:7928":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"21:434:4836":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"16:7529:6083":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:4726:6905":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:4392:6786":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:39332:2566":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:4759:9055":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"22:880:1887":{"crate_id":22,"path":["proc_macro2","TokenTree"],"kind":"enum"},"7:0:1537":{"crate_id":7,"path":["unwind"],"kind":"module"},"20:504:4008":{"crate_id":20,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"2:40229:3310":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"11:305:8249":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:42423:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:12388:5581":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:7532:7476":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:1422:8907":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:8971:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"24:5009:3189":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"17:10735:5294":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"24:2667:2268":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"24:1487:3245":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"17:12483:5605":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:9152:3378":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"22:671:3352":{"crate_id":22,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"17:13857:6015":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:7527:4949":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:11720:14348":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:5346:6126":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:8389:21172":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:6488:8177":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:2587:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"24:4974:1830":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"1:7658:8904":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:5439:9125":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:47276:7866":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:0:1387":{"crate_id":1,"path":["std"],"kind":"module"},"24:3330:3453":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"2:42450:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:5686:9140":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:40180:8965":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:3899:6100":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:13461:5895":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:2513:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:8484:7951":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:3400:8984":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"24:5464:3217":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"1:1583:8255":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"24:4172:3483":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"2:46776:7860":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:46074:7820":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:6545:7303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:43595:8370":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"24:1601:3339":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"2:43920:8387":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:3676:9036":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:10440:21343":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:6446:4853":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"24:4837:3167":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"2:23036:7519":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"18:681:8058":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:11209:8438":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:1058:35468":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"24:1089:1895":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"5:1413:8253":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:44082:8406":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:40043:8317":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:43219:14340":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"24:551:8013":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"24:909:37287":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"2:4254:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:2808:6062":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:40341:3318":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:3160:14385":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:6482:8832":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:5857:7165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:32055:1974":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"21:998:233":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"17:8953:5210":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"21:2623:8052":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"17:13159:5816":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:7572:36992":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:13181:5820":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:42472:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"18:636:5108":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:506:6514":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:7178:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:12331:5574":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:11060:5286":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:13316:5856":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:6535:4840":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:42367:7742":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:7449:21112":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"24:1133:8014":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"5:689:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:7820:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"14:165:20182":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"21:2556:4550":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"17:13803:6005":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:9986:8077":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"24:3024:3443":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"24:4184:3484":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"1:2343:4451":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:2853:5073":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:4803:6946":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:2682:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"16:5000:6121":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:30359:32798":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:6865:8835":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"24:5093:2154":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"24:5494:3209":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"24:4466:2146":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"6:4609:6877":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:40700:3291":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"24:151:1875":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"17:13324:5857":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"5:3688:8916":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:2207:8966":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"11:821:8908":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:39956:32795":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:9469:21202":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:7743:6074":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:11893:1395":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"24:5462:3216":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"24:869:37285":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"24:4394:3499":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"16:6474:6087":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:10056:8285":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:6506:8185":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:9917:5234":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:3521:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:11900:742":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"21:2653:233":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"1:8153:8369":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:8906:8531":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"24:2616:3428":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"24:4904:3182":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"1:8917:4191":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"24:3800:3458":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"24:4789:3156":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"2:21802:7500":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"24:1035:1822":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"24:3783:3457":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"17:13506:5905":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"24:2211:2491":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"24:5361:3205":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"2:41200:7728":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:43831:8384":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:21826:8299":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:5773:7128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:10923:8096":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:959:8912":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:7488:8227":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:8478:3233":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"24:4225:3487":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"2:4325:3364":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:7780:4711":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:10656:8415":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"16:8142:21119":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"24:2837:2140":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"17:10491:21317":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"24:5445:3212":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"24:3143:3448":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"1:4638:9101":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:43453:8362":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"18:574:5090":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:5944:21100":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:9028:21180":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:6367:3232":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:4678:9056":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:6201:21103":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"24:4908:3183":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"24:5341:2227":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"16:2764:6060":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"24:4550:1672":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"21:2264:3254":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"17:10125:5238":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:6724:7378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:8858:5207":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:4186:3354":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:8090:8238":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"18:766:25089":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"24:4543:1839":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"6:4404:6791":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:7845:26793":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:7803:6249":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:4563:9045":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:21336:9202":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:3982:9047":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:5741:21099":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:13344:5864":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:8426:9115":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"24:4880:3176":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"6:5974:7229":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:12592:5616":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"24:2871:3436":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"2:21878:32815":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:568:6554":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:21951:7517":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:8318:3708":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:3815:6098":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:9218:5225":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:11410:5382":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:7366:21111":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:554:4194":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:10104:5236":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:9876:5088":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:44363:8411":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:547:6543":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:10626:8089":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:12293:5569":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:10505:21344":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:9119:27285":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:635:8899":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:11532:5405":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:8791:9153":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:7543:6084":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:12307:5571":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:12550:5612":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:6101:4938":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"18:719:5109":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"11:757:4527":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:2345:8970":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:911:4525":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:9386:4951":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:7696:1974":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"5:3184:1859":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:8225:9065":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:8788:5205":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"24:3007:3442":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"11:326:4843":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:6685:7361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"7:32:20080":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:6819:6178":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:10095:14336":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:11585:5418":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"21:2351:1822":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"2:40076:7724":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:39049:14383":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:10691:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:13211:5831":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:11908:1489":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"5:7044:35476":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:43639:3390":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:4865:6973":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:5998:21101":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:5963:8138":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:2923:2140":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:45893:7802":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"22:806:1886":{"crate_id":22,"path":["proc_macro2","imp","Span"],"kind":"enum"},"18:481:8053":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"22:735:2489":{"crate_id":22,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"1:8735:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:39996:8314":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:11492:8443":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:7692:8826":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:4559:6866":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:1564:6597":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:10402:21332":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:20937:9187":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:1844:4602":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"11:1843:3232":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"11:828:8909":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:3291:9009":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:3149:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"18:652:5090":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:6662:8191":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:10941:4954":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:6307:6067":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"18:96:25078":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:11904:1493":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:12311:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:6009:4934":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:43301:8352":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:7293:6214":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"24:1140:8018":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"6:6651:7355":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:10967:5313":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:5630:21097":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:2750:3260":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:44138:14523":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:13842:6014":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:3354:4879":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:11735:14349":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:39276:3265":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"24:3974:125":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"1:5320:9120":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"5:7335:4525":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"24:3991:3470":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"16:4510:6106":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:3231:3374":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:2378:6044":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:8259:9102":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:41925:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:11282:1822":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"24:877:37289":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"22:941:1822":{"crate_id":22,"path":["proc_macro2","Ident"],"kind":"struct"},"17:12006:5509":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:9866:21237":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"24:4785:3155":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"16:7467:8224":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:5035:4885":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"24:2548:3424":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"17:13145:5815":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:40422:3307":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"24:5482:3221":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"2:2352:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:9042:7964":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"24:4920:3186":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"16:5616:8104":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"21:0:1075":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"2:1467:2225":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:40644:3279":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:39315:7595":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:12600:4439":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:7683:6086":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"24:554:5051":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"2:45916:7803":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:12510:5607":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:44105:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:8156:6088":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"5:2908:7489":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:22292:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:20803:9199":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:43648:8315":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:46310:7824":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"11:359:4845":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:21786:8296":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:13356:5865":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"22:766:3254":{"crate_id":22,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"11:0:2979":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"21:649:3404":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"2:39088:4434":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:45225:7774":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:43184:3300":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:9523:21208":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:4920:7006":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"9:502:6480":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"21:217:8479":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"1:8074:3278":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"24:1937:3232":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"2:2840:5071":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"24:2164:8987":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"24:2565:3425":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"22:792:8047":{"crate_id":22,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"1:10000:26625":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:4702:6111":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:6668:7356":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:5015:7051":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:5755:7115":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:4590:6876":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"24:4868:3174":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"24:3313:3452":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"20:45:3110":{"crate_id":20,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"11:1035:8914":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"21:2810:1822":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"2:1914:4435":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:11869:27283":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:4970:7037":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:7205:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:11832:5483":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:7470:8836":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:43435:8361":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:11484:5393":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:11924:5499":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:5247:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"24:93:8987":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"24:1851:3229":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"5:2407:7487":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:21331:9192":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"24:1954:3233":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"2:20921:8987":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"24:3296:3451":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"17:9453:21201":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:7598:3295":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:3934:4879":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"5:3622:4853":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:7509:7470":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:6553:7308":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:488:6506":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:1404:8252":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:4383:6781":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:39929:3390":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:11371:9035":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:42679:8347":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:2159:4460":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:47425:7874":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:1366:3237":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:7004:4440":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:2359:8973":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:47474:7877":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:9150:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:6814:7435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"24:2973:2488":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"24:5146:3193":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"16:5402:5201":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:7019:8268":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:7568:7483":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:7150:3271":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:780:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:9641:21214":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:6579:4531":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:4688:6885":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"24:3858:3462":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"16:4445:6104":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:676:8902":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"24:5058:2846":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"24:1443:25114":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"6:6569:7320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:9275:37042":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:3134:27271":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:863:4861":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"18:609:37067":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:6605:7336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:6671:6166":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"24:5457:3214":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"2:20981:8987":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"24:4317:3493":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"14:215:8243":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:6830:7441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:10137:9129":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:595:6569":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:11167:9130":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"22:816:1811":{"crate_id":22,"path":["proc_macro2","imp","Group"],"kind":"enum"},"6:4653:6881":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:1546:6586":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:875:8252":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:1628:588":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:3379:14370":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:11252:14483":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"18:727:5112":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:11813:5478":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:5886:8129":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:10478:21318":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:12607:5620":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:1228:8913":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:963:4853":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:5995:7242":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"24:5283:190":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"6:4344:6756":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:917:8907":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:44257:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:1787:21225":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:4423:6804":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:2760:5062":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:11242:8441":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:10834:9125":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:11090:5319":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:42148:3388":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:45071:7768":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:8468:8419":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:30465:32793":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"24:5136:3195":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"24:4003:3471":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"5:1382:3232":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:2692:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"24:5332:2270":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"24:258:8811":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"17:13024:5786":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:7669:8412":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:45526:7791":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:3248:9017":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:11459:5391":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:8805:7955":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"5:1612:4853":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:12433:5588":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:7837:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:5499:7257":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:4288:6718":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:9098:21181":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:7526:7475":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:5809:7141":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:13791:6003":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:30835:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:5367:20213":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:5717:7088":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:13233:5837":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:13516:5910":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"21:2815:2489":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"1:3924:9043":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"24:497:3243":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"2:43058:32904":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:618:8825":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:3246:9016":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:44247:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:5910:4931":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:43752:8380":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:8252:3716":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"20:281:1895":{"crate_id":20,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"2:2689:3407":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"20:322:2491":{"crate_id":20,"path":["quote","spanned","Spanned"],"kind":"trait"},"2:4113:3376":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:1768:610":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:8170:9030":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:8409:7946":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:5908:4879":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"9:388:20095":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:12126:5526":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:926:8522":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:8195:21156":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:8548:21177":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:4827:6955":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"24:4015:3472":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"2:20741:9197":{"crate_id":2,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"1:4124:9070":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:2524:6050":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:13385:5873":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:22490:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"16:2448:6047":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:8269:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:494:6509":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"24:4577:2153":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"6:1736:6707":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:6587:7327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:9488:21211":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:5502:9126":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:11886:936":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"21:967:4567":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"1:8747:7952":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:12178:5531":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"11:1839:3233":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"24:3058:3445":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"1:4413:9074":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:43210:8291":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:40363:3319":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:13865:6018":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:1846:8938":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:11026:27341":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:1594:1859":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:11907:1492":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:47379:7870":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:6332:26771":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:9380:21198":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:2746:4084":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"24:5472:3219":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"17:9721:21222":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:11729:8064":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:4047:3237":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:7570:8987":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:10026:21307":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:47106:7863":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:39135:8309":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:10316:5272":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:8129:21118":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:3872:6099":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:40350:3305":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:45095:7769":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:11861:5488":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:5862:7166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:45450:7783":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:4577:7351":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"16:4872:6117":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:12980:5781":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:2210:4468":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:10415:9018":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:21965:8304":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:9184:4602":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:5779:7131":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"22:899:3253":{"crate_id":22,"path":["proc_macro2","Delimiter"],"kind":"enum"},"5:3276:4525":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"17:9557:5225":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:44338:8410":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:41419:1870":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"9:352:20109":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:43943:8395":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:4682:9059":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:10206:14341":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:9228:37039":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:4409:3368":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:4629:6879":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:8254:3714":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:4790:6941":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"24:1332:3356":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"9:52:8501":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:6336:8169":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:21899:32830":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"5:4336:4881":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:30040:9038":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:46232:7823":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:1544:4879":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:2926:3409":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:40220:3301":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:3225:6092":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"16:6390:8172":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:9653:21236":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"24:885:37288":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"5:6248:4527":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:4789:6114":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:265:4853":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:554:6546":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:42632:8343":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:1919:21255":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:7280:8820":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:40382:3321":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:7498:8228":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"5:280:1869":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:8909:2760":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:44050:8398":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"5:4321:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:11891:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"24:4271:3490":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"24:4213:3486":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"22:783:233":{"crate_id":22,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"17:10589:8087":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:6016:7248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:4728:6112":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"21:1828:4548":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"16:8256:6291":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:1539:6583":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"21:2658:3251":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"1:11885:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:8170:8242":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"24:3194:3449":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"6:4449:6815":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"22:109:8045":{"crate_id":22,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"6:4890:6985":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:1819:3375":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:4207:3233":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:4773:6930":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"24:4824:3164":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"24:547:210":{"crate_id":24,"path":["syn","error","Result"],"kind":"typedef"},"1:9027:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:11894:1475":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"6:4784:6938":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:43137:8290":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:21003:7496":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:42407:6263":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:10701:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"24:5140:3196":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"2:40692:3289":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:6588:2611":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:5797:8120":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:6236:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:7859:21117":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:10774:14337":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"11:1852:4525":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:32019:6417":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"24:4027:3473":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"22:703:3401":{"crate_id":22,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"16:7635:6238":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"24:2786:1835":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"10:44:6421":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"5:5191:4853":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:5693:8110":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:4466:6821":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:653:15152":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:43963:8396":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:6369:3281":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:4472:6823":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"24:4841:3168":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"16:6164:8166":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:4898:6990":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"18:736:25088":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"24:4365:3497":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"1:11858:8905":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:7259:3712":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:12298:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:41605:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:9822:21230":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"24:4556:1827":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"1:8123:3310":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:7936:8535":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"24:4888:3178":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"17:13879:6021":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"24:4517:1836":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"16:2931:20240":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:5847:8127":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"11:1634:4850":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:11721:5442":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:6538:9147":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:9080:8425":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:13667:5967":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"24:1883:3230":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"2:45694:7796":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:2470:6048":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:41512:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"24:3381:3456":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"16:6575:21105":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:7635:33444":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"18:521:25092":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"24:5322:2189":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"22:723:1811":{"crate_id":22,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"17:10142:21311":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:2830:6063":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:4969:6120":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:6057:7259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:4999:7046":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:11220:5341":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"16:7711:6241":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:3179:33323":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"24:598:3232":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"16:7077:21110":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:43605:8371":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:1568:4527":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:9683:21223":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:7767:21116":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:10452:21320":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:1985:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:7555:7482":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:2510:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:9816:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:20983:9189":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:11902:5492":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:4335:3365":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:247:37048":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:8133:3324":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:7941:9014":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"21:245:37142":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"24:3887:3464":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"11:652:3237":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:8718:5203":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:11319:5369":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:7252:7451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:8420:21173":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:4732:668":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"6:7275:7464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:13721:5988":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:1080:8818":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:480:4923":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"24:3262:3450":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"1:643:8901":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"21:2666:3232":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"1:4736:4929":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:6558:8187":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:6188:4931":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:2960:4433":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"24:4300:3492":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"2:41217:7730":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"16:6243:37021":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"14:31:8812":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:42640:8345":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:1034:21212":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:10013:8283":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:39166:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:7626:21115":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:4499:6837":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:5531:3315":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:13292:5848":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:13309:5855":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:8102:8986":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"24:5134:2022":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"6:7520:7474":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:39210:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:43229:8292":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:10721:5291":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:43158:7755":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:10050:2182":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"24:4288:3491":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"2:40031:14401":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:2868:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:4527:6853":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:6907:4945":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:5990:3328":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:9907:5233":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:8241:7933":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"24:4854:2155":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"2:42648:8346":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:20576:33454":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"24:3398:247":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"21:2600:3403":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"6:7485:7466":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:7074:8269":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:9534:21207":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:10947:4955":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:9188:37055":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"24:286:37282":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"24:2769:3432":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"2:45996:7804":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:41306:8341":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:1754:4475":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"24:5273:3202":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"16:5305:6125":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:1062:8913":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:8214:8418":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:10133:14344":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:10168:8286":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:11422:5385":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:45403:7782":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:5589:3304":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:4719:6904":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:8651:5200":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:3047:20242":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:12098:5522":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:4990:26763":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:2642:6055":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:5370:9123":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:7544:7478":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"24:1616:3351":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"11:1050:20172":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:11906:1491":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"14:221:6367":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"24:4341:3495":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"21:2325:2201":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"2:45348:7779":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:7615:4197":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:9038:37060":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:3059:9023":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:10840:5309":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:11448:7975":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"11:1126:20174":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:4307:6728":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:9413:8282":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:8090:7929":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:4436:3369":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:10270:21275":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:7095:3232":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:7443:7465":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:1995:8916":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:1576:6606":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"24:3841:3461":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"6:4294:6719":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:4857:6968":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:530:4192":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"24:5485:3222":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"2:20563:33324":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"16:6146:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:1514:6573":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:10747:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:3088:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:4318:6736":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"22:895:1811":{"crate_id":22,"path":["proc_macro2","Group"],"kind":"struct"},"2:41283:33713":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:6740:4890":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:2908:3373":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"24:0:1669":{"crate_id":24,"path":["syn"],"kind":"module"},"2:9373:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:6943:21108":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:1519:6575":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:6373:9142":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"18:515:5093":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:6586:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:1668:6672":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:42887:8349":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"24:4353:3496":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"6:7503:7469":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:11234:5342":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:4137:4879":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:1721:6700":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:3986:9048":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"24:4044:3474":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"24:1761:1816":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"2:2830:3495":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:6854:6182":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:11427:8355":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:11011:5315":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:40651:8333":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"24:1448:25115":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"2:45195:7773":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:3324:3285":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:41177:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:1609:6628":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:8219:9073":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:5719:8530":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"24:5144:3197":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"24:4490:2016":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"5:3775:4853":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"24:4884:3177":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"24:4479:3136":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"2:47168:7864":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:20595:33452":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:2371:8979":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:6151:7296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:3150:8256":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"12:0:2980":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:11136:5323":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:8386:7750":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:5383:4879":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:40312:3316":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:361:4209":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:41504:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:12385:14410":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:12345:5575":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:9148:37051":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:46120:7821":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"24:4423:3501":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"17:13821:6011":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:8761:7953":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:21770:7499":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:11653:5438":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"24:3041:3444":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"6:579:6559":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:11628:5434":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:6110:7270":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:1588:6614":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"24:2905:3438":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"2:40008:8315":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:2777:5074":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:2866:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"11:452:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:42134:3378":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:44070:8403":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:4743:6915":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:2386:2989":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:10646:8426":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"24:4781:3154":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"2:44300:8570":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:39353:7596":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"18:491:8054":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:7594:3294":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:6990:6192":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:40242:3302":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:12902:5738":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"24:4508:3137":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"1:3679:9035":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:6097:9279":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:9595:4911":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:11912:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"14:202:2324":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"15:198:20196":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:12515:4921":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:5334:9121":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"11:744:8253":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:13240:5839":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:2694:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"24:1506:3342":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"1:3464:9004":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"6:4546:6862":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:42687:8348":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:11069:21192":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"24:1623:2060":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"2:43317:2760":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:12576:5614":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:7411:6232":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"24:4896:3180":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"21:2449:1887":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"2:4380:3366":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"24:4802:3159":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"17:10712:21347":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:8632:21155":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:4573:7347":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"16:7588:21113":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:4568:6108":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:2601:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"18:507:5090":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:11899:745":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"21:2292:1811":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"6:4371:6779":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:4757:6113":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:8495:8422":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"24:4242:3488":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"2:0:497":{"crate_id":2,"path":["core"],"kind":"module"},"17:12915:5745":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:1947:21220":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:44350:4438":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:6361:6140":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:11053:7965":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"15:0:2982":{"crate_id":15,"path":["addr2line"],"kind":"module"},"5:2189:8265":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:7321:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:39935:8311":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:2789:5066":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:9381:8982":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:7244:36994":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:3266:21293":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:7509:6082":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:3749:6096":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"5:4366:4879":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"11:2060:8223":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"24:335:3352":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"6:4732:6908":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"24:921:2845":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"2:2765:5063":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:8931:5209":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:41495:4449":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:6047:7256":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:10930:4953":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:3367:14366":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"17:10705:5290":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:10356:4952":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:46918:7861":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:5077:7084":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:12504:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:12033:5514":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:11556:5407":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:11888:1509":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:6179:8481":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:2836:5070":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:6552:4943":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"21:368:4552":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"17:9424:5217":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:9409:21199":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"5:6608:4533":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"24:2922:3439":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"6:6002:7243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"24:2218:8987":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"2:30301:32803":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:44066:8402":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:562:6551":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:43118:8288":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"5:3534:3233":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"24:4056:3475":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"11:1879:1859":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:22556:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"16:6868:6184":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:6793:8206":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"5:3124:8255":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:11392:9037":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:6706:7367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:6460:6070":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:10691:21346":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:4400:6103":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:10761:21188":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:3782:6097":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:11194:7974":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:8683:5202":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:4845:6964":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"22:14:25124":{"crate_id":22,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"17:9839:21218":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"24:5047:2461":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"5:7162:3272":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:844:3233":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:7491:7467":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:4575:7349":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:13744:5989":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:11786:14357":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"24:53:1894":{"crate_id":24,"path":["syn","token"],"kind":"module"},"24:4916:3185":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"24:4912:3184":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"2:9164:3386":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:7015:29139":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:9566:21184":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:857:3237":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:9108:37059":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:386:21167":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:2905:6066":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"21:2037:4549":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"2:45740:7798":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:5556:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:10627:9103":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:12138:5527":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:45247:7775":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:5021:26763":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:22391:4201":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:3910:9042":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:13689:5973":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:12536:5609":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"21:108:4558":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"24:4068:3476":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"6:4836:6958":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:41580:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:47399:7872":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:1752:6712":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:535:8098":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:1078:35881":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:40280:3313":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:12318:5572":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:2802:3480":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:2613:9013":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:42891:8350":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:1532:6581":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:14:2626":{"crate_id":2,"path":["core","write"],"kind":"macro"},"24:5317:2470":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"2:20578:33457":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"24:4566:2028":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"17:13651:5963":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:11993:5506":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:5677:21098":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:13265:5844":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"20:407:3893":{"crate_id":20,"path":["quote","__private","RepInterp"],"kind":"struct"},"14:160:8812":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:9895:21243":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:42005:8526":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"18:564:5096":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:9138:21182":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:1682:6683":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:2736:4081":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:13477:5898":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:10080:21309":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"24:1136:8016":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"17:9340:21186":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"24:5347:3207":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"6:6136:7285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:9981:8932":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:10598:5313":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:47451:7876":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:2298:20215":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:42141:3387":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:474:1812":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:9443:21200":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"4:0:2975":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:39232:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"21:2662:3400":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"17:12634:5623":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:4459:6818":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"5:35:4441":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:501:4187":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:43307:8353":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:7065:8222":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"11:665:3232":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:1783:8922":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"24:1068:1895":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"2:9109:210":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"22:713:1886":{"crate_id":22,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"2:9158:3388":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:9596:5223":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:9160:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:40123:8323":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:4911:7000":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:4258:3358":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:8869:9152":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"11:1524:20175":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:8310:21170":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"11:279:8246":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:11502:5401":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"24:2956:2191":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"17:11785:5471":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"}},"external_crates":{"23":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.9/"},"20":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.28/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.59/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.18/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}