{"root":"0:0:1675","crate_version":"1.0.160","includes_private":false,"index":{"0:372-0:348:1779":{"id":"0:372-0:348:1779","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[8,0],"end":[8,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:348:1779","glob":false}},"5:5320:36246":{"id":"5:5320:36246","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11892:32434":{"id":"2:11892:32434","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11891:32422"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:42869:8176","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11866:35574":{"id":"2:11866:35574","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:8:1776":{"id":"0:8:1776","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[202,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":false}},"0:84-0:956:1872":{"id":"0:84-0:956:1872","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[22,0],"end":[22,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"internals::case::RenameRule","name":"RenameRule","id":"0:956:1872","glob":false}},"2:11922:35581":{"id":"2:11922:35581","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11565:14105","str::split":"2:11913:27694","prim@char":"1:11857:411","`DoubleEndedIterator`":"2:7174:120","str::rsplit_terminator":"2:11925:35582"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:42636:8162","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11960:35593":{"id":"2:11960:35593","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:14105"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11590:14101","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11990:35598":{"id":"2:11990:35598","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4512:35598"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:42903:8114","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11985:4405":{"id":"2:11985:4405","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11863":{"id":"2:11863","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11864:801","2:11865:1995","2:11866:35574","2:11867:35575","2:11869:35576","2:11872:2724","2:11873:35577","2:11874:311","2:11875:27663","2:11876:1888","2:11878:27660","2:11880:27661","2:11882:27662","2:11884:35578","2:11885:35579","2:11886:27686","2:11887:27687","2:11888:2314","2:11889:2308","2:11890:8074","2:11891:32422","2:11892:32434","2:11893:29806","2:11894:35580","2:11895:32427","2:11896:1925","2:11899:27704","2:11902:27705","2:11905:2533","2:11909:4086","2:11913:27694","2:11916:27696","2:11919:27698","2:11922:35581","2:11925:35582","2:11928:27700","2:11931:27702","2:11934:35583","2:11937:35584","2:11940:3066","2:11943:35585","2:11946:35586","2:11949:35587","2:11952:35588","2:11954:35589","2:11956:35590","2:11958:35591","2:11959:35592","2:11960:35593","2:11963:1907","2:11966:26463","2:11969:27706","2:11972:35594","2:11975:35595","2:11978:35596","2:11981:1868","2:11983:4403","2:11984:4404","2:11985:4405","2:11986:4406","2:11987:35597","2:11989:3371","2:11990:35598"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11956:35590":{"id":"2:11956:35590","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11966:26463":{"id":"2:11966:26463","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:14105"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1675":{"id":"0:0:1675","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[110,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2018\n# use serde_derive::{Serialize, Deserialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.160\")]","#![allow(unknown_lints, bare_trait_objects)]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: derive_partial_eq_without_eq, clippy ::\nenum_variant_names, clippy :: manual_map, clippy :: match_like_matches_macro,\nclippy :: needless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: let_underscore_untyped, clippy ::\nmanual_assert, clippy :: map_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:927:1660","0:928:1669"],"is_stripped":false}},"2:11934:35583":{"id":"2:11934:35583","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11873:35577":{"id":"2:11873:35577","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11886:27686":{"id":"2:11886:27686","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11887:27687"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11869:35576":{"id":"2:11869:35576","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11867:35575"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11986:4406":{"id":"2:11986:4406","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5335:2304":{"id":"5:5335:2304","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11986:4406"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11931:27702":{"id":"2:11931:27702","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11857:411","str::splitn":"2:11928:27700","self::pattern":"2:11565:14105"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:42708:8166","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:14103","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11972:35594":{"id":"2:11972:35594","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:14105"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:14103","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5331:36248":{"id":"5:5331:36248","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11958:35591":{"id":"2:11958:35591","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11889:2308":{"id":"2:11889:2308","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11857:411"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:42562:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:981:1875":{"id":"0:981:1875","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}},"2:11878:27660":{"id":"2:11878:27660","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:40591:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11893:29806":{"id":"2:11893:29806","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:42840:8173","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11963:1907":{"id":"2:11963:1907","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:14105"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11984:4404":{"id":"2:11984:4404","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5315":{"id":"5:5315","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5316:36245","5:5317:2025","5:5320:36246","5:5323:36247","5:5331:36248","5:5332:36249","5:5333:3266","5:5334:2305","5:5335:2304"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11887:27687":{"id":"2:11887:27687","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11886:27686"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11943:35585":{"id":"2:11943:35585","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11565:14105","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::matches":"2:11940:3066"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:42808:8172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:14103","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11888:2314":{"id":"2:11888:2314","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11857:411"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:42556:8156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11864:801":{"id":"2:11864:801","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11857:411"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5333:3266":{"id":"5:5333:3266","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11959:35592":{"id":"2:11959:35592","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:62:342":{"id":"0:62:342","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1796,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:84-0:956:1872"],"is_stripped":false}},"2:11902:27705":{"id":"2:11902:27705","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:14105"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:14103","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11946:35586":{"id":"2:11946:35586","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11565:14105","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::rmatch_indices":"2:11949:35587"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:42736:8168","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11895:32427":{"id":"2:11895:32427","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:42878:8177","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11885:35579":{"id":"2:11885:35579","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11863:1378","crate::ops::IndexMut":"2:2993:3224","str::slice_unchecked":"2:11884:35578"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11894:35580":{"id":"2:11894:35580","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:42850:8174","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11937:35584":{"id":"2:11937:35584","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:14103","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11989:3371":{"id":"2:11989:3371","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4515:3371"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:42894:3372","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11899:27704":{"id":"2:11899:27704","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:14105"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5316:36245":{"id":"5:5316:36245","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:1845","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6931:4420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:1845","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6931:4420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:928:1669":{"id":"0:928:1669","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[100,0],"end":[105,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"2:11928:27700":{"id":"2:11928:27700","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:14105","str::rsplitn":"2:11931:27702"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:42690:8165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11905:2533":{"id":"2:11905:2533","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:40591:176","prim@char":"1:11857:411","self::pattern":"2:11565:14105"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11913:27694":{"id":"2:11913:27694","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11565:14105","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::split_whitespace":"2:11891:32422","str::rsplit":"2:11919:27698"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:42586:8082","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11925:35582":{"id":"2:11925:35582","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11565:14105","str::split":"2:11913:27694","prim@char":"1:11857:411","str::split_terminator":"2:11922:35581"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:42654:8163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:14103","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11940:3066":{"id":"2:11940:3066","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11565:14105","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::matches":"2:11940:3066"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:42790:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:323-0:952:1778":{"id":"0:323-0:952:1778","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[5,0],"end":[5,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:952:1778","glob":false}},"2:11890:8074":{"id":"2:11890:8074","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:42572:2737","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5334:2305":{"id":"5:5334:2305","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11985:4405"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11882:27662":{"id":"2:11882:27662","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11969:27706":{"id":"2:11969:27706","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:14105"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:14103","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11919:27698":{"id":"2:11919:27698","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11565:14105","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::split":"2:11913:27694"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:42604:8085","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:14103","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11952:35588":{"id":"2:11952:35588","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11865:1995":{"id":"2:11865:1995","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11949:35587":{"id":"2:11949:35587","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11565:14105","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::match_indices":"2:11946:35586"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:42754:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:14103","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11987:35597":{"id":"2:11987:35597","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4514:35597"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:42885:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5317:2025":{"id":"5:5317:2025","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11981:1868":{"id":"2:11981:1868","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11527:126","`FromStr`":"2:11526:3239"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40733:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11526:3239","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11526:3239","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5323:36247":{"id":"5:5323:36247","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11876:1888":{"id":"2:11876:1888","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:40591:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11909:4086":{"id":"2:11909:4086","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:40591:176","prim@char":"1:11857:411","self::pattern":"2:11565:14105"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:14103","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11983:4403":{"id":"2:11983:4403","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11867:35575":{"id":"2:11867:35575","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:927:1660":{"id":"0:927:1660","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[92,0],"end":[97,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"2:11872:2724":{"id":"2:11872:2724","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11133:14106"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11875:27663":{"id":"2:11875:27663","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11874:1475"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11978:35596":{"id":"2:11978:35596","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:14105"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:14103","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5332:36249":{"id":"5:5332:36249","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:277:1845","`String`":"5:7180:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:1845","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6931:4420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11975:35595":{"id":"2:11975:35595","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:14105"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11916:27696":{"id":"2:11916:27696","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:14105"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11389:8084","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11874:311":{"id":"2:11874:311","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11875:27663","`u8`":"1:11874:1475"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11880:27661":{"id":"2:11880:27661","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11891:32422":{"id":"2:11891:32422","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11892:32434"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:42860:8175","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11896:1925":{"id":"2:11896:1925","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:14105"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:14102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11954:35589":{"id":"2:11954:35589","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11884:35578":{"id":"2:11884:35578","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11863:1378","str::slice_mut_unchecked":"2:11885:35579","crate::ops::Index":"2:2989:2264"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"1:7861:8637":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:11511:8246":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:4662:6834":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:10946:4891":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"24:4868:3156":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"21:2521:4531":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"17:420:5091":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"21:2019:4530":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"24:1136:7817":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"2:22189:4181":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:11761:5430":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:38958:7520":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:2745:1824":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:39551:3309":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"21:140:4542":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"12:697:8331":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"22:505:3233":{"crate_id":22,"path":["proc_macro2","LexError"],"kind":"struct"},"2:12480:4419":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:43218:8200":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"18:515:5030":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:10822:20978":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"24:5451:2207":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"2:12181:34841":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"24:1954:3215":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"17:9947:21097":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:38834:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:3668:8840":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:39481:3293":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:1580:8053":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:9874:8142":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:4681:6845":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:1617:6561":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:13393:5887":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:4862:6941":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:5460:7907":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"24:1487:3227":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"5:2904:25404":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:43341:7560":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"24:1489:1869":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"typedef"},"1:3961:8852":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:10645:8229":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:0:2965":{"crate_id":17,"path":["object"],"kind":"module"},"17:13492:5911":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"24:1448:24800":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"21:183:4153":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"2:46051:7660":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:4451:6776":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"24:4892:3161":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"17:9223:20985":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:1927:8756":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:13007:5763":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:42586:8082":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"22:899:3235":{"crate_id":22,"path":["proc_macro2","Delimiter"],"kind":"enum"},"16:7469:6000":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"24:5319:3186":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"24:921:2821":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"24:5124:3180":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"17:9118:36632":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"24:5427:3194":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"17:9422:20992":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:5805:7089":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:10863:7755":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:8776:33644":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"21:994:230":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"17:10528:20974":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"21:2229:3236":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"5:4968:4821":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:6743:7350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:7386:7389":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:4232:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"5:3138:8055":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:7970:8041":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:8752:2737":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:7044:36598":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"24:4900:3163":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"1:4630:8881":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"24:4577:2130":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"24:3126:3428":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"24:5056:3172":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"2:2847:5008":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:12638:5661":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:41348:2257":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:8911:36651":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:5472:5987":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:1988:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:31689:6330":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:39463:3284":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"9:800:6387":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"18:719:5046":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:13192:5813":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:8983:7761":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:41355:3360":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:5726:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:3977:34837":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:3076:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:42465:8090":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:2574:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:1647:1073":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:9183:20973":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:6395:4878":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:2993:3224":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:6330:6057":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:11259:5321":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:7949:8819":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:7396:20900":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:5981:7965":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"24:2164:8863":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"24:3950:3449":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"15:175:19981":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:39174:7523":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:860:3219":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:5697:34724":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"21:2711:1787":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"5:2157:35306":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:9897:21096":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:361:4189":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:21697:33629":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:41066:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:2900:3424":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:12934:5749":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:42144:8154":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"24:5442:3197":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"2:2455:14162":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:3971:8853":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:4092:8875":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:9631:21005":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:6298:7976":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:39391:4837":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:247:36637":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"24:2701:3410":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"24:4466:2123":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"24:5338:3188":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"17:13059:5779":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:5780:7937":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:5163:6040":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"14:215:8042":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:11241:8243":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:42840:8173":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"12:2198:6331":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:10350:5209":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:1436:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:6719:7342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"24:844:4996":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"2:1726:7417":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:962:8718":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:4703:6856":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:4:1000":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:11229:8386":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:10921:5250":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:31725:1951":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:39344:8127":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:9820:21092":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:42484:8091":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:638:8704":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"11:44:6334":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"17:11149:5301":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:7435:6151":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"24:5280:2154":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"5:6971:35301":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:2727:5975":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:473:1788":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:1583:6540":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:13374:5881":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:4164:8878":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:13168:5809":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:1534:6509":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:5698:7038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:11089:7765":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:5374:8931":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:4429:6763":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:12073:5491":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:10720:26482":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"18:766:24773":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:3689:6013":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:11160:8238":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"12:60:36571":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:9382:5147":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:481:6429":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:5843:7117":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"24:5329:3189":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"17:10752:5240":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:21:671":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:13279:5862":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:7075:3253":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:10270:21105":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:5839:20888":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:3921:8850":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:6094:7219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:8347:7744":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:7793:8788":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"24:4517:1812":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"6:1723:6629":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"22:834:2466":{"crate_id":22,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"18:0:2966":{"crate_id":18,"path":["memchr"],"kind":"module"},"21:404:36777":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"6:1527:6507":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:20744:7420":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:1894:4415":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"24:4213:3467":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"21:2257:1787":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"1:1571:4508":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:10186:8166":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:4751:6880":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:5664:7926":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"24:5029:2438":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"2:5450:3297":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:13141:5802":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:20426:34335":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:7475:7400":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:5990:7179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"22:14:24809":{"crate_id":22,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"17:8137:20956":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:3087:3238":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:6070:6049":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:2825:3994":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"9:977:6406":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:8880:8959":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:10047:2159":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"24:4453:3607":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"16:5614:7919":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:10058:14098":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:4981:6999":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"24:3381:3437":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"6:553:6472":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:6024:9034":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:9913:3219":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:7173:7374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"12:119:4777":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:6655:34110":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:2719:4061":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:2749:5976":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:40540:8220":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:3989:34835":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:10625:5236":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:572:6482":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"12:1029:8720":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:39450:3292":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:153:4775":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:12147:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"12:1518:19962":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:9010:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"24:4824:3146":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"6:6053:7193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:39668:3307":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:44398:7575":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"0:927:1662":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"2:2491:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:484:4859":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:6316:7984":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:10875:5246":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:5896:4867":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:39328:33625":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:11515:5391":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:4244:8879":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:12609:5650":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:4328:6714":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:12278:5528":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:4322:6712":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"24:5255:3184":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"2:11338:8167":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"22:112:36811":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"2:40986:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:9061:5151":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:7557:8029":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:44851:7596":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"24:3296:3432":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"16:3566:6010":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:7463:7398":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:7872:8034":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:6690:5993":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:40649:3215":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:12337:5213":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:13158:5806":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:1230:8624":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:9274:20988":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"24:4411:3481":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"6:4637:6823":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"24:1601:3321":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"17:12349:5538":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:44775:7593":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:43555:8379":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"21:1068:1862":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"6:4945:6977":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:1046:35312":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"12:353:4781":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:10257:21106":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:30533:4075":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:5690:7036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:39654:3306":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:10360:7879":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:5494:20884":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"24:842:8863":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"2:42808:8172":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"24:4102:3459":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"2:4358:3348":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:3504:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:39510:3296":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:43164:14118":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"12:762:4506":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:8786:7755":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:2771:5000":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:9539:21007":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:904:4508":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:3388:14124":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"21:2736:2178":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"1:10650:8231":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:10310:8934":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:5541:7914":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"24:4854:2132":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"17:9475:21010":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:41885:8147":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:1370:3214":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"5:277:1845":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:42313:34832":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:11876:1473":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:5488:7180":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:4627:8908":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"5:7277:4507":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"24:2837:2117":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"17:8666:5136":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"24:3841:3442":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"12:822:8715":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"20:272:1871":{"crate_id":20,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"24:4300:3473":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"12:646:3219":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:4635:6029":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"9:709:7549":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:13527:5924":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"22:671:3334":{"crate_id":22,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"2:45519:7625":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:39603:3303":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:2830:4991":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:3157:8823":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:7452:7394":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:20823:8863":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:11356:5350":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:4714:6864":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:10131:14095":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"18:636:5045":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:3632:6012":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"24:1736:8647":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"24:5467:3204":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"5:6373:4789":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:10310:21130":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:8113:8792":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:3376:14120":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"24:286:37039":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"24:3194:3430":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"1:10700:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"16:6472:6080":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:7194:8076":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:43175:8191":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:10020:14090":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:6146:7968":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:2297:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"5:6506:4512":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"21:2414:1863":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"17:12909:5741":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"24:1089:1871":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"17:12850:5729":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:5558:20885":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:8796:5140":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:1985:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"24:3024:3424":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"24:1761:1792":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"2:11119:8629":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:2761:3242":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:7428:7390":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:2934:2117":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:5945:7166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:4877:6950":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:7095:3281":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"12:1852:8053":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:2395:7411":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:13082:5784":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:4671:8866":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:9644:21004":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:11606:5406":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:5122:6039":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:2867:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:5786:7087":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:44629:7589":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:7939:30058":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:8164:8173":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"24:5128:3175":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"17:11034:5284":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:43313:8204":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:3927:8851":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:8758:7753":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:10497:21133":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"12:1859:8054":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:1983:8722":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:42604:8085":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:8293:14102":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:6359:7986":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:12756:5703":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:13024:5770":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"21:2716:3235":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"24:3962:3450":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"2:4387:3350":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"24:3783:3438":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"16:7909:8040":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:7497:5991":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:2855:5007":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"12:300:8048":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"24:5268:2430":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"2:9070:3368":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"24:5170:3183":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"21:2741:1861":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"1:6355:3263":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:20449:34337":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:30035:33623":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"5:3151:36402":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"7:32:19794":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:5172:14081":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:41621:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"17:9401:5149":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"20:10:3091":{"crate_id":20,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"16:4413:6023":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"24:258:8617":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"16:4144:6016":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:10490:5217":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"24:4353:3477":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"1:5995:4870":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"24:5480:3192":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"16:6123:5982":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"9:827:19905":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:10546:20975":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"24:3041:3425":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"2:41369:3370":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:1652:6590":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:641:8705":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"24:4254:3470":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"1:2572:8636":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:8802:8960":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:6676:5992":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"24:251:8616":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"2:40527:8145":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:8774:5139":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:40776:3215":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"24:4225:3468":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"6:5741:7056":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:1597:1835":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"22:0:1650":{"crate_id":22,"path":["proc_macro2"],"kind":"module"},"6:6611:7280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:2788:5012":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"24:4837:3149":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"17:11939:5470":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"24:4991:3171":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"16:2605:5970":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:9088:7766":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:6471:8952":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:45207:7619":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"5:5418:4512":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:8397:7549":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"24:5473:3190":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"17:12674:5691":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:3118:26292":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:38878:3247":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:12103:5496":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:7581:4190":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"18:582:4075":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:11879:779":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:5921:3310":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:13594:5936":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:7567:20902":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"24:1443:24799":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"17:10997:1798":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:4092:3358":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"24:2888:3418":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"2:3325:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:2680:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:21713:33609":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:1564:3215":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"24:4884:3159":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"16:4721:6032":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:8144:3306":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:5374:5983":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:21106:9000":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"24:4479:3118":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"17:11271:5322":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"24:4056:3456":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"1:11479:7777":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:9274:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"24:4888:3160":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"17:12550:5598":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"24:4574:2009":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"2:40784:3219":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:4241:3341":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"12:387:36567":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:499:6437":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"24:1491:3323":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"2:42572:2737":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:5752:7064":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:2389:5961":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:43593:8214":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:9071:36652":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:9938:8082":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:38856:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:7132:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:4164:3336":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:9746:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:10374:7883":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:5951:7169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:12739:5701":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"24:901:36819":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"6:4301:6705":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:3160:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:22090:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"5:6107:4826":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:10845:26446":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:12357:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:43337:8210":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:5751:4869":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:621:8631":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"13:110:36575":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"24:2871:3417":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"6:586:6490":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:6743:20894":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"24:4508:3119":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"18:564:5033":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"24:344:36826":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"24:4242:3469":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"17:10121:5199":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:9155:20972":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:6865:8021":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:3716:6014":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"24:4961:2203":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"2:4721:8711":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:6548:7259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:4562:7270":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:10458:4178":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:9059:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"21:2547:3383":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"24:3245:1784":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"17:1021:20998":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:9115:26471":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"16:6034:1828":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:2668:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:8272:20960":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:48874:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:44429:7576":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:7030:31574":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"18:113:24763":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:7028:3214":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:45489:7624":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"5:668:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:11174:5306":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:12160:14166":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:46532:7671":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:22321:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:5433:7903":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:4298:4815":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"12:751:4508":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:11872:734":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:11585:14103":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:6222:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:11855:368":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:4439:6770":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:5762:14483":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:4001:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"22:350:3233":{"crate_id":22,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"1:1771:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"24:5040:2822":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"14:7:8618":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"22:109:7846":{"crate_id":22,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"18:727:5049":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:41651:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:29977:33615":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:7211:6145":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:6668:6097":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"24:5436:3195":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"2:22024:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"24:3109:209":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"2:41940:8152":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"5:7205:8626":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:2820:4992":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:9066:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:3983:8856":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:5323:8928":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"12:2053:8022":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:10608:5105":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:40792:3214":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:7426:20901":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:44296:7571":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:2358:8779":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:6463:7990":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:1509:6499":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"24:4777:3135":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"1:7684:8746":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"5:1600:4789":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:679:8707":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:487:20955":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:4100:8876":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:2919:3355":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:10108:21059":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"5:5835:4815":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:46584:7675":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:9064:3370":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:4457:6779":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"24:4196:3466":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"11:0:2960":{"crate_id":11,"path":["adler"],"kind":"module"},"2:43038:8187":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"18:660:24774":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:39472:3285":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:4910:6964":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:4413:3351":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:8963:30071":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:42140:8153":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:2906:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:40866:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:10854:20979":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"7:79:19801":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:35:4421":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:11869:735":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:43360:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:11368:5353":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:12730:5697":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"18:736:24772":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:11001:7753":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:2282:5950":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:11125:5297":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"12:320:4779":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:42903:8114":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:13536:5926":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"5:7103:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"24:4984:2405":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"2:45129:7603":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:12060:5490":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:9263:20987":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:1824:8738":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:5949:7962":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:7195:7375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:21742:8100":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:8822:36634":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:8506:8225":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:11893:5446":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:2676:3353":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:12768:5708":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"24:2531:3404":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"2:39643:3289":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:6174:4867":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:6757:7359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:7980:20906":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:11873:5445":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:44659:7590":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:6623:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"24:4394:3480":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"2:1611:579":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"12:725:8051":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:29963:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:967:20996":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:10682:5238":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:13031:5771":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:8134:3292":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"9:649:19828":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"2:41910:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:4850:6932":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"18:624:36661":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:9204:34971":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"24:5323:2204":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"24:5454:3201":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"6:4416:6757":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:22255:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:10973:5270":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:11823:8346":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"5:7150:8072":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:46637:7678":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"24:4540:3133":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"6:5910:7151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:10062:21062":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:13148:5803":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:2302:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:567:6480":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:3171:14139":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:2500:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:8270:8909":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:9844:21058":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:4274:6682":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"22:869:230":{"crate_id":22,"path":["proc_macro2","TokenStream"],"kind":"struct"},"17:11841:5441":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"24:4566:2005":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"2:46409:7665":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:38651:14137":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:2683:5973":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:43317:8205":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"18:599:4993":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:46485:7667":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"24:2650:99":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"1:307:1426":{"crate_id":1,"path":["std","thread"],"kind":"module"},"16:3599:6011":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:9889:3215":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:2612:8818":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:20428:34339":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:12797:5716":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"22:723:1787":{"crate_id":22,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"24:3330:3434":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"24:1623:2037":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"1:7592:4179":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"5:6692:4833":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:9601:5159":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"24:2218:8863":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"17:11070:5289":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"24:2922:3420":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"1:7618:4178":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:12211:5521":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:7646:8708":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:10353:4888":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:10283:21104":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:11217:5316":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:2757:4065":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:534:4173":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:2971:4413":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"6:4882:6952":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"24:4484:3117":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"17:12291:5529":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:7677:8215":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:7537:4885":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:1541:6512":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:2657:5972":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:4597:6808":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:4812:988":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"22:772:24783":{"crate_id":22,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"2:43198:8199":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:3264:4506":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"6:4489:6792":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:11565:14105":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:10088:5197":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"12:1003:8719":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:38937:2543":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:8922:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:11389:8084":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:12926:5746":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:3159:8824":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:10670:7894":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:7201:7377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:10732:14092":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:9062:3369":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"24:5116:1999":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"1:7518:4883":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:12233:14167":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:9526:21008":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"12:853:8717":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:7174:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:12617:5653":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:6468:8638":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:9018:7764":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:3190:34334":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:10845:5213":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:10415:8825":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:4552:8851":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:1575:4506":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:6702:3257":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:39584:3301":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:9764:7876":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"24:5343:3187":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"16:5235:6041":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:22387:7442":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:2225:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"24:4423:3482":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"16:4888:6037":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"24:4979:2446":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"6:4795:6899":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:6572:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:43381:8211":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:771:4792":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"24:1616:3333":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"2:40455:8836":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:39879:3263":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"24:4490:1993":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"17:10774:5209":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"20:281:1871":{"crate_id":20,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"17:8991:36642":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:5800:7088":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:42373:8087":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:7117:36596":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"24:3058:3426":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"17:1903:21041":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"3:0:435":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:9250:20986":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:11878:1471":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"24:4802:3141":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"17:9738:7873":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"5:3105:3215":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:5902:7150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:4921:6038":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"24:4812:3143":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"2:9288:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:44827:7595":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:6525:4513":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:7343:5999":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"3:229:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:8596:5134":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:7661:8709":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:40504:33618":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"9:956:19808":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:46512:7669":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:43576:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:44583:7582":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:950:8716":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:9283:20999":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"24:4550:1652":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"9:920:19809":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:10420:5212":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"24:2973:2465":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"24:2514:3483":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"2:46622:7677":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:1704:6622":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:11734:5170":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:2896:7413":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:10929:4889":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:6059:36593":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"24:4773:3134":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"17:8441:20966":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"22:941:1798":{"crate_id":22,"path":["proc_macro2","Ident"],"kind":"struct"},"24:5422:3193":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"2:2507:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:39264:8121":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"21:2660:1862":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"17:11330:5345":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:13340:5869":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:3124:29510":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:46239:7662":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:7166:20897":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:4237:6654":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"12:1120:19961":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:12874:5731":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:2859:5010":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:42690:8165":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:4775:6890":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"22:806:1862":{"crate_id":22,"path":["proc_macro2","imp","Span"],"kind":"enum"},"16:2487:5965":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:9371:20971":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:29935:4251":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:6667:7302":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:12836:5725":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"24:4820:3145":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"1:8794:3215":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:8339:20962":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:5388:5986":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:12134:5501":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:8489:3215":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:7815:8219":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:956:8717":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"12:1866:8055":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:45909:7659":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"21:648:3384":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"6:4673:6841":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"18:707:7865":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"22:919:2178":{"crate_id":22,"path":["proc_macro2","Punct"],"kind":"struct"},"17:9857:21074":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:4766:6884":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:5931:7163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"12:810:8713":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"21:1810:4529":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"2:22222:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:42544:8155":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:9751:7875":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"0:0:1675":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"2:41362:3369":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"24:5043:1930":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"24:3075:3427":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"2:9051:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:40563:7537":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:9831:21093":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"22:689:7847":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"1:5682:8948":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"12:98:8044":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"20:322:2468":{"crate_id":20,"path":["quote","spanned","Spanned"],"kind":"trait"},"17:13231:5825":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"18:491:7855":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:21568:7423":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:9885:21095":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"0:928:1670":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"12:1555:19964":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:41901:8150":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:6735:20893":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"5:5168:14080":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"12:1044:19959":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"20:148:3716":{"crate_id":20,"path":["quote","__private","HasIterator"],"kind":"struct"},"6:6059:7194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:40438:7530":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:891:8052":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:11214:8241":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:4501:6801":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:7522:3274":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"22:695:230":{"crate_id":22,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"24:5470:3205":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"24:826:3320":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"1:11875:1472":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"12:1845:4506":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:9378:8788":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:4842:8907":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:2261:20001":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:5759:7068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:4994:7004":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:8212:20958":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:1847:4584":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:6000:7182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:4687:6847":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:920:8713":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:45253:7620":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:39358:8758":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"17:9031:36641":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"24:2718:115":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"12:1832:3215":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:3281:8814":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:6823:4894":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"2:2796:5003":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:41612:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:12485:5547":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:5737:7934":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:2675:3387":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"24:1133:7815":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"17:8418:20965":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:11828:5440":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:646:8706":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:3125:21063":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"24:4329:3475":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"24:1962:3217":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"5:7163:8075":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:4313:3347":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:41606:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"17:11951:5472":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:6175:4508":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:11133:14106":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:4662:6030":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:8252:7734":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:9627:21016":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:39241:14156":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"6:4248:6662":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:9362:5151":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:8225:8221":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:1747:6638":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:8975:1851":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"24:151:1851":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"2:42452:14085":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:5716:7051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:9328:8081":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:588:2270":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:44948:7599":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:7597:4180":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:0:806":{"crate_id":6,"path":["libc"],"kind":"module"},"6:5890:7143":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:44729:7592":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:13327:5863":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:42364:8086":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:7134:33625":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:6829:8017":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"24:2752:3412":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"22:703:3381":{"crate_id":22,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"9:676:19818":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"16:5703:7928":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:5728:7055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:2497:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:13459:5904":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:11594:5404":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:1216:8719":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:43309:8203":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:7580:8863":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:12748:5702":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:40707:3694":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:6186:5984":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"24:4271:3471":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"6:1604:6554":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:11856:925":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:12399:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"1:1849:8744":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"24:5265:187":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"2:22288:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"9:592:19826":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"16:7135:36621":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:13047:5773":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:7329:5998":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:41106:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"24:3211:2251":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"2:39533:3298":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"12:1534:19963":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:8236:8872":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:7434:7391":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:11054:5285":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:803:4795":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:6252:7975":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"24:925:3174":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"21:2674:3379":{"crate_id":21,"path":["proc_macro","LineColumn"],"kind":"struct"},"1:5428:8932":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:20578:9003":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:11528:5393":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:8151:2737":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:3770:8842":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"24:3938:3448":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"16:7309:5997":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:6109:6052":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:6567:8004":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"22:895:1787":{"crate_id":22,"path":["proc_macro2","Group"],"kind":"struct"},"2:39491:3294":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:41639:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:39311:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:4817:6035":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:14:2603":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:4743:6876":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:8295:20961":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:1420:8330":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:22156:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:2804:5005":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"24:4522:1854":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"24:1533:2746":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"17:8561:5133":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:44518:7580":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:5010:30086":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:2557:5968":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:10245:21129":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:39571:3287":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:4820:6911":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:4483:6790":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"5:4253:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:21111:9023":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:2503:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:11161:5304":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:39316:8126":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:42992:8178":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:4224:6645":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:1969:3334":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:10385:7887":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"24:3991:3451":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"2:21462:8093":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:4261:6672":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:7197:3278":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:5815:20887":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:8274:7259":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:46301:7663":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:1559:6523":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"9:111:8305":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"24:2211:2468":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"17:10642:20977":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:13176:5810":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:42439:3282":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:7847:6198":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:3010:20028":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:8014:2543":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:914:4506":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"21:433:4773":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"1:8940:26030":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:21263:7422":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:8218:8220":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:561:6477":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:39633:3305":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"24:3974:124":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"21:2491:3382":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"1:11405:8842":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"20:0:1090":{"crate_id":20,"path":["quote"],"kind":"module"},"17:12008:5484":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:10233:21128":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"24:5439:3196":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"1:5168:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:10820:8632":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:8608:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"21:2609:3380":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"16:6842:8020":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"24:1883:3212":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"24:4085:3458":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"16:4849:6036":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:3236:8821":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"11:36:6333":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:9383:4887":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:5491:8933":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"21:2762:2466":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"1:2212:4448":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:4725:4865":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"12:815:8714":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:413:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:4367:3349":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:8510:5131":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:11247:8244":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:3238:8822":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"24:4785:3137":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"24:4924:3169":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"1:3975:8854":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:119:14563":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"24:94:4138":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"1:3453:8809":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:5761:20886":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:7260:4506":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:10710:7730":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"24:2081:2403":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"6:4871:6947":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"24:2854:3416":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"17:13184:5812":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:29941:4252":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"24:869:36821":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"21:2605:3233":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"2:44250:7569":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:1030:36437":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:12164:5507":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:12816:5717":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:40657:3219":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:22123:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:6284:6002":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:39271:8122":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:4890:6957":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4733:6872":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:20381:4075":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:30141:33626":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"24:5060:2436":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"21:963:4548":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"2:9527:4847":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:46699:7680":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"18:531:7856":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:7511:6154":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:13572:5930":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:1962:21028":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:7218:7388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:5708:8339":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:6517:7991":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:2385:2970":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:11461:7776":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:5938:7165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:9317:20995":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"24:4172:3464":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"6:1731:6633":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:7487:7402":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:7120:8069":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:13114:5795":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:11874:1475":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"5:951:4789":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:9559:4852":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:2808:5006":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:5559:4868":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:8494:5130":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:9501:5145":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:4900:6963":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:12361:5545":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:6903:7761":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:8740:8934":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:48926:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9681:5025":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"24:4829:3147":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"17:13366:5878":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:6607:30060":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:1771:21011":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:11137:5300":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:2129:580":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:9446:21000":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"9:896:19811":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"5:1185:8022":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:939:8715":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:11199:5308":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:4571:6806":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:4921:6970":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"22:825:1798":{"crate_id":22,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"1:10690:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:11853:5442":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:11791:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:4574:6027":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:1449:2202":{"crate_id":2,"path":["core","mem"],"kind":"module"},"5:677:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"24:4956:1806":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"2:2792:3243":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"5:4099:4815":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"5:2894:36384":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:9054:111":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:7099:3280":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"24:5126:3179":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"18:609:36660":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:3146:8053":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:11639:5414":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:4496:8899":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:7853:29505":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:10182:5202":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:0:1370":{"crate_id":1,"path":["std"],"kind":"module"},"1:4402:8881":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:2930:20027":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:12964:5755":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:39158:33627":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:40575:7538":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:2579:5969":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:1592:8055":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:1899:15901":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"24:599:3214":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"6:1514:6501":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:2631:5971":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:4327:6020":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:40665:3214":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:1568:3214":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:10394:7888":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:11485:5382":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"24:1405:1867":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"16:7278:5996":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:2678:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:3165:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"24:5299:2447":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"2:41146:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"18:699:7863":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:6161:20890":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:7845:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:6911:3262":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:6524:8954":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:12176:5509":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:621:8625":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"24:3092:3347":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"1:4891:3685":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"24:2905:3419":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"1:6087:4874":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:9981:8084":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:10476:21132":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:11684:5420":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:11579:7865":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:2454:8863":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:20409:34300":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"16:7319:8028":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:2868:5981":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:45283:7621":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"15:0:2963":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:20615:9004":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"6:5722:7054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:11873:730":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:5912:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:11384:8840":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:7001:8068":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:38944:34432":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"6:7481:7401":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:11864:1457":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:5236:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:6880:8641":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:242:36633":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:4618:6811":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:48887:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:11033:7560":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"18:644:5027":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:4379:6741":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:5527:3286":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"24:2616:3409":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"17:11300:5333":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:4422:6760":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:7869:3334":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:4667:8862":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:8526:5132":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"24:4781:3136":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"14:160:8618":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"24:4841:3150":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"24:5485:2205":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"2:38752:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:11343:8841":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:1898:8633":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:5967:7173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"13:0:2955":{"crate_id":13,"path":["std_detect"],"kind":"module"},"18:690:7862":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:4656:6831":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:10506:5218":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:7659:20903":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:2825:5979":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:43185:8195":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:6654:6095":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:2865:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"6:4727:6869":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:4334:6717":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:10205:8931":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"6:505:6440":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:11617:5407":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:8970:8342":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:9577:5157":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:7237:6146":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:6496:7231":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:13214:5818":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:11013:7754":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"24:2939:3421":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"17:8393:20964":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:10796:5242":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"24:1506:3324":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"24:4789:3138":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"24:5120:3176":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"2:45049:7602":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:43512:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:12896:5735":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"24:4846:3151":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"2:39188:8112":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"14:40:1798":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:11748:5429":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"4:0:2956":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:7298:8027":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:11800:5435":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:4357:6021":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"22:816:1787":{"crate_id":22,"path":["proc_macro2","imp","Group"],"kind":"enum"},"1:8810:3214":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:11288:5330":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:44380:7574":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:1074:8720":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:1687:6615":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:2624:7414":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:4786:6034":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:3863:8847":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:12022:5486":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:22354:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:11863:1378":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"20:504:3987":{"crate_id":20,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"20:34:8863":{"crate_id":20,"path":["quote","ext","private","Sealed"],"kind":"trait"},"17:8631:5135":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:13221:5820":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"12:1840:4508":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:21749:7441":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:6528:7992":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:9350:5125":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:3644:3334":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:11247:5320":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:3112:8054":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:31738:4066":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:4303:3346":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:6816:8015":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:11087:5291":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"24:498:3225":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"2:21371:8998":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:42790:8171":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"24:4904:3164":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"2:48504:9032":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:44873:7597":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:12118:5500":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:4236:3340":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:20856:7420":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:6071:4857":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:7180:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:9323:14169":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:12307:5531":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:11787:5433":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:1788:8729":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:12208:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:4549:6804":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:2344:8776":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"12:393:36568":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"24:4864:3155":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"17:12514:5567":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:9445:4844":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"24:4365:3478":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"1:11877:1474":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:4720:6867":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:44536:7581":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:9458:21022":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"21:2570:7853":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"2:41932:8151":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"24:4816:3144":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"17:386:20954":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:11052:7766":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"16:6270:5985":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:11315:5339":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"24:3904:3446":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"2:4768:785":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:8296:7735":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:5552:4867":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:3437:27274":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"24:4908:3165":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"2:44358:7573":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"24:5155:2168":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"17:13413:5890":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:2370:8785":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:7136:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:39903:3269":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:8188:3695":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:5917:7152":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"24:5304:2166":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"2:40906:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:2341:5959":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"24:103:4132":{"crate_id":24,"path":["syn","token","CustomToken"],"kind":"trait"},"24:1035:1798":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"6:4389:6744":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:5000:7007":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"5:6946:8067":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:7059:3693":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:6017:20889":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"20:37:2823":{"crate_id":20,"path":["quote","format_ident"],"kind":"macro"},"5:1410:8713":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"24:5464:3203":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"2:40733:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:6519:2588":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:4664:658":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:12251:5524":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:9805:5224":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:540:6466":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"24:1851:3211":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"17:11559:5400":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:2842:5980":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:48939:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:671:24775":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:44274:7570":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"12:2080:8720":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"24:2228:7820":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"24:5122:3178":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"1:10222:26509":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"20:239:3993":{"crate_id":20,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"16:7372:36583":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:3199:8826":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:4519:6025":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"24:5459:3202":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"2:12368:4857":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:42530:7556":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:5056:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:6318:30060":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"6:1695:6616":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:6079:7208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:9107:8228":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"14:165:19969":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:45365:7622":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:4218:6644":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:41588:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:42402:14088":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:2782:5002":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:6345:5990":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:12630:5660":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:5411:5988":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"14:0:2962":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:1201:8720":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:43021:8186":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:525:6457":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:40421:7528":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:5878:7138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:5184:19999":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"24:3262:3431":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"2:29901:4250":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"24:4114:3460":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"2:2813:3461":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:9736:8863":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"20:77:1864":{"crate_id":20,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"17:10221:21127":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:5878:20000":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:8479:8222":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:9930:5165":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:4847:4815":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"24:2548:3405":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"16:5793:7898":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:39888:3265":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:2248:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:21636:33605":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:4611:6809":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:11500:5386":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"14:202:2301":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:42556:8156":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"5:1392:8051":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"24:3313:3433":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"2:9056:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:44481:7578":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:8055:20943":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:11536:5395":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"14:221:6280":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:6985:3214":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:38690:4414":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"5:3937:4789":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"18:652:5027":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:8368:20963":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:39872:8137":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:44184:7566":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:9722:5161":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:10626:8910":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"6:493:6435":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"12:2190:36573":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:10139:5151":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:10321:5204":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:9069:7765":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:1931:21006":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:11870:732":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:21624:8098":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"5:3713:4506":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"16:4262:6018":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:6764:7362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"24:2803:3414":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"6:4805:6905":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"24:3160:2513":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"6:1645:6586":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:11881:1110":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"5:7087:3254":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:5343:8929":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:10833:8932":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"21:2696:1863":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"2:2682:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:5596:6043":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"24:93:8863":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"6:4313:6707":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:42869:8176":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"24:4317:3474":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"24:4850:3152":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"24:3177:1813":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"2:2339:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"24:2820:3415":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"2:42654:8163":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"21:367:4533":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"16:4606:6028":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:5309:8927":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"24:673:36825":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"1:2216:8773":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:11570:14102":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:13436:5903":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"24:5075:2131":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"2:39913:3271":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:40826:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:20447:34340":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"12:1836:3214":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"12:1628:4786":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:2864:5011":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:1735:4456":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:42708:8166":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"24:4920:3168":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"5:3907:4508":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:768:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"24:4807:3142":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"24:3858:3443":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"2:45553:7626":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:13478:5909":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:39421:3282":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:4062:31573":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:7700:8632":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:3446:8791":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"24:5446:3199":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"2:2494:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:20641:9005":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"24:53:1870":{"crate_id":24,"path":["syn","token"],"kind":"module"},"21:2691:3381":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"2:12425:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:7798:8218":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:39542:3299":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:38951:3347":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:4024:4412":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:20697:8997":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:2851:5009":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:42860:8175":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:21584:8095":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:40640:1846":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:6521:7249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:25596:7444":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:40801:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:2732:3388":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:9064:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:2475:8817":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:3402:6009":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:13126:5798":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:43329:8208":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"12:985:8022":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"21:0:1061":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"2:11590:14101":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:11997:5482":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:46660:7679":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:21369:8863":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"24:2023:3219":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"1:7788:4699":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:7498:7406":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:8835:7757":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:4369:6735":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:40716:4429":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:43520:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"12:2205:3253":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:20854:9001":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:1065:8719":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:22057:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"24:550:127":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"24:4126:3461":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"17:10403:5240":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"24:126:1787":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"5:3515:3215":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:39519:8130":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"24:2599:3408":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"16:6719:36584":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:11343:5349":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:3026:5052":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:11813:5437":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:20666:8995":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:3314:3267":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:7288:8026":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"24:2684:107":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"2:7566:33645":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"24:5008:3170":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"1:8244:8839":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:13203:5817":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:3242:3356":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:4751:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:6538:4879":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:10583:20976":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:9339:20993":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:10159:5201":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"24:4861:3154":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"2:2333:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:6743:8993":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:42970:14117":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:3528:3219":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:11721:5424":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:10200:14097":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:3150:14190":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:8085:3260":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"22:925:1861":{"crate_id":22,"path":["proc_macro2","Spacing"],"kind":"enum"},"2:45026:7601":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:3177:14138":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:1704:4506":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"6:4402:6749":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:4577:14149":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:46447:7666":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:3505:4508":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:42494:14093":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"24:909:36824":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"24:4935:2264":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"1:10655:8218":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"16:6496:20892":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:2771:5977":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:1051:8022":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:9778:7877":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:39235:3372":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:39198:8113":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:3344:4815":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:6137:7967":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:2300:5952":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:487:6432":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:44499:7579":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"24:5160:3182":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"2:2800:5004":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:7271:32130":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:8110:20941":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:43321:8206":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"12:669:8330":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:2776:5001":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:2830:4864":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:8928:4172":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:6931:4420":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:7603:6162":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"24:4015:3453":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"2:6851:3260":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:6773:7365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:11880:1528":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:7446:7393":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:9371:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:2687:2392":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"24:4543:1815":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"17:8701:5137":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:2679:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:847:3215":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:594:6495":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:11857:411":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:2209:8772":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:7249:20898":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"24:3800:3439":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"24:5309:2246":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"17:11661:5415":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:3371:7732":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:4346:6726":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:2835:3474":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:3854:6015":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:39921:3273":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:3603:8837":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:4139:3215":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:42878:8177":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:2360:8780":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:6594:7278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:1786:8728":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:10093:8085":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:8170:8839":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:6649:7291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:21763:8103":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:44995:7600":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:2930:2200":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:45703:7627":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:41673:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:2841:3476":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:7521:7409":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:40725:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"24:1910:3213":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"24:2633:1845":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"1:3049:8828":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:10214:14096":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:1431:8331":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:6643:7290":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:12955:5754":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"24:3812:3440":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"2:4742:33790":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:41725:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"9:586:6335":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"1:7805:7689":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:12980:5759":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:38768:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"24:3870:3444":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"17:12695:5696":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:13518:5920":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:39278:14157":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:9058:3360":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:4628:6818":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:39894:3267":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"18:755:7872":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:2793:5978":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:21676:33613":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:10075:21061":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:3263:6008":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"22:946:2466":{"crate_id":22,"path":["proc_macro2","Literal"],"kind":"struct"},"6:1663:6598":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:4545:6026":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:5823:7101":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:9978:8738":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:10721:5239":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:3913:8849":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"20:407:3873":{"crate_id":20,"path":["quote","__private","RepInterp"],"kind":"struct"},"17:8475:20942":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:262:4789":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"5:5746:4821":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:5359:8930":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"5:6294:3214":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:39682:3308":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:11882:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:40398:152":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:12046:5489":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:4649:6830":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:40484:1862":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:12033:5487":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"24:4794:3139":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"6:5772:7077":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:6728:7345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:9873:21094":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:39865:3261":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:11862:1348":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:50235:7688":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:46363:7664":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:6608:3291":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:11106:5296":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"24:1332:3338":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"19:0:1017":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:7267:8023":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"21:244:36747":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"16:5996:8284":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:13100:5788":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:4396:6747":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:6571:7277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:6922:4881":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"24:2030:3221":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"24:4938:61":{"crate_id":24,"path":["syn","expr","parsing","raw"],"kind":"struct"},"17:10207:21118":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:8864:8957":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:8746:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:39297:7524":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"15:193:19982":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"24:4833:3148":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"5:6667:4826":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:7022:3214":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"24:4570:2007":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"9:0:2958":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:10296:21103":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:41709:14237":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"17:9108:20971":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:9691:21030":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:3656:8722":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:4297:6019":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:4113:8877":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:12265:5527":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"22:729:1798":{"crate_id":22,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"2:8999:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"16:5510:7909":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:5447:20883":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:39594:3302":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:12087:5494":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:4962:6985":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"24:4857:3153":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"1:8848:8958":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:43393:14286":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:6359:8949":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:11354:8170":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:42474:14094":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:4749:6033":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"24:893:36823":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"6:4408:6752":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"24:5013:2206":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"2:7529:3277":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:8157:8082":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"24:4872:3157":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"5:6955:4508":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:6634:7287":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:4689:6031":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"21:1393:1875":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"24:548:207":{"crate_id":24,"path":["syn","error","Result"],"kind":"typedef"},"22:797:36800":{"crate_id":22,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"22:880:1863":{"crate_id":22,"path":["proc_macro2","TokenTree"],"kind":"enum"},"6:4468:6784":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:734:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"14:187:19976":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:11070:7774":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:7525:3276":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:2411:5962":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:505:4168":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:6791:7368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:11199:7775":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:6704:6100":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:4559:6805":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"24:1068:1871":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"1:8495:7752":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"5:3117:36408":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:929:8331":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"24:2565:3406":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"2:40946:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"18:80:24761":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"9:188:8308":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:870:3214":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:11636:14111":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:11974:5481":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:2548:4848":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:4361:6732":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:1589:6542":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"24:5271:2151":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"24:4160:3463":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"24:4382:3479":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"1:10940:4890":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:11263:4894":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"24:336:3334":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"2:9000:3366":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:42413:7554":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:40589:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:9700:21029":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"24:4288:3472":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"21:2613:3214":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"2:44681:7591":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:9068:3367":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:42894:3372":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:11014:5274":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"24:3887:3445":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"16:7637:8030":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"18:681:7859":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"9:505:8322":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:41186:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"5:6940:3214":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:8186:3697":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:1520:6504":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:9658:21052":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"12:632:3215":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:2104:8059":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:48861:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9791:7878":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"5:208:4423":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:1800:3357":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:13557:5929":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:6221:4789":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:4385:6022":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"24:0:1649":{"crate_id":24,"path":["syn"],"kind":"module"},"17:12884:5732":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:21651:7428":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:13382:5882":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:43563:7563":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:5813:7094":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:6628:7285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:8162:20957":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:3457:5056":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:12148:5503":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:2993:6004":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:43325:8207":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:10680:7689":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:10668:8237":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"5:3595:4789":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:7388:20899":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:9712:5160":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"20:45:3092":{"crate_id":20,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"9:33:8304":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"17:12322:5535":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:1442:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:11547:5398":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"24:3347:3435":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"2:40674:3693":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"9:863:19810":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:44228:7568":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"24:4341:3476":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"1:7667:4574":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:42736:8168":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:4566:7274":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"24:5118:3177":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"6:4929:6972":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:20828:8996":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"24:2769:3413":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"24:2582:3407":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"16:7890:8037":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"18:481:7854":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:12237:5523":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:46558:7673":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:21775:8844":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:3869:8846":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"24:3921:3447":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"2:44897:7598":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:5545:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:2433:5963":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"12:2069:8719":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"18:574:5027":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:6052:8283":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"24:4003:3452":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"5:6993:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:2894:20026":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:5628:7920":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:8941:20968":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:9193:36636":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:6963:4800":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:7483:6001":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:3932:4815":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:6241:7974":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:546:6469":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:43150:8190":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"22:975:3214":{"crate_id":22,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"6:6512:7243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:11867:632":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"21:1025:3381":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"1:8092:7729":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:11860:1035":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:7511:7407":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:10434:7889":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:39131:3372":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"5:4331:4817":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"9:19:8302":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"12:2184:6328":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:38910:14191":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:46523:7670":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:3121:29504":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:5640:4508":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:4122:3359":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"12:1138:8624":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:6619:6091":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:11143:4892":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:39441:3283":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:42562:8157":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:933:8714":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:7942:20905":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:1401:8052":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"24:3228:231":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"17:2916:21060":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:20703:8999":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:8176:8838":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:46569:7674":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"12:0:2961":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:3640:3214":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:2367:5960":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"24:5444:3198":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"17:13580:5933":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:7828:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:355:4188":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:8241:20959":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:42850:8174":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:5203:5130":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:10894:5249":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"12:1085:19960":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:534:7897":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:8981:20969":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:3172:1835":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:62:14509":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"16:4217:6017":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:7252:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:11828:8710":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:6530:7250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"24:2667:2245":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"2:45443:7623":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"22:792:7848":{"crate_id":22,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"16:2465:5964":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:39137:8110":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"24:4044:3455":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"21:2561:3382":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"6:4757:6881":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:7944:8344":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"21:1198:193":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"2:39562:3300":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:13091:5787":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:8997:25993":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:10699:14091":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"24:3398:244":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"17:12972:5757":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:8613:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"24:2990:3422":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"2:21659:7429":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:12198:5520":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"22:783:230":{"crate_id":22,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"2:2588:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"9:622:19827":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"2:1527:4815":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:48913:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4841:6926":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:10134:8936":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:10412:8823":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:5219:5131":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:43007:8184":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:48900:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:43502:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:8420:7747":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:2893:2036":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"24:2956:2168":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"6:6541:7255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:9997:26516":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"24:4184:3465":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"17:10332:21131":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:10455:5216":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:2342:4431":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:11315:8164":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:9328:20994":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:2075:8057":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:11103:14244":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:13039:5772":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:11576:5403":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:4828:6916":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:44459:7577":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:4833:8906":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"21:2316:1798":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"2:29712:8843":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:39257:8120":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:9181:4584":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:5675:8947":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:12781:5713":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:21515:8094":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"24:609:3215":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"17:9433:20991":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:20394:34300":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"13:226:6327":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:1712:4457":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:42125:7553":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:558:4175":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:2535:5967":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"24:3143:3429":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"6:6698:7328":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:44805:7594":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:9671:21023":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:9021:20970":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"12:834:8716":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"12:274:8045":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:3899:8848":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:11526:3239":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:42636:8162":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"18:538:5031":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:7704:1951":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:3197:8825":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:3665:8841":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:11436:5357":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:20654:8863":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"16:6376:20891":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:4787:6894":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:6535:4514":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"10:0:2959":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:11909:5451":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:4307:6706":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:11868:633":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"21:2600:230":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"2:38737:8108":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:46607:7676":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:6488:7226":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:9488:21009":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:3428:3366":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:39401:8771":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"20:150:3715":{"crate_id":20,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"2:39501:3295":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"24:5346:1784":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"12:659:3214":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:9303:5145":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"24:4143:3462":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"2:43086:8188":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:12225:5522":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"24:5314:2247":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"5:5574:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:41922:7549":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:9293:20997":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:9165:36635":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"18:590:5034":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:7480:8642":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:8329:3689":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:2509:5966":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"9:382:8311":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:11278:8159":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"22:735:2466":{"crate_id":22,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"17:12948:5752":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:3188:6007":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"24:3364:3436":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"17:13134:5801":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:8101:7730":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"24:877:36820":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"2:46543:7672":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:8903:7760":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:1354:3219":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:39210:8114":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:7440:7392":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:10520:5221":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:8187:3696":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:7469:7399":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"24:4027:3454":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"2:21600:7424":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:1339:3215":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"21:107:4539":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"24:2786:1811":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"2:41026:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:1618:4247":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:3205:3354":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:42885:8120":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:5660:7011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:44328:7572":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:10445:5213":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:30516:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:4988:7002":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"24:5448:3200":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"24:4440:2459":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"16:6210:7972":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"24:3007:3423":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"2:50214:7687":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:3389:8790":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"24:4537:3132":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"21:2757:1798":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"24:555:4989":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"2:8781:8333":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:9048:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"24:4556:1803":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"24:2735:3411":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"16:6200:7971":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"24:3279:1835":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"18:521:24776":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:925:8330":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:4476:6788":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"12:777:4785":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:11504:8246":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:123:14564":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:8052:8789":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:41893:8149":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:2228:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:6781:20895":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"5:5124:4789":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:1716:6626":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:39146:8111":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:1710:6625":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:13506:5918":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"24:552:7814":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"17:13404:5888":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:42754:8169":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:4697:6853":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:2538:4861":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:38792:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:6593:8005":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:2207:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:0:2964":{"crate_id":16,"path":["gimli"],"kind":"module"},"24:4896:3162":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"16:5525:7912":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"21:53:4532":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"2:20695:8863":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:11708:5421":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"24:4880:3158":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"16:6790:6105":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:11699:4899":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:4268:4817":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:38928:7519":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:653:14920":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:4539:6803":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"5:4069:4815":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:1083:8624":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:2320:5958":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:11166:8937":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:8230:8880":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"5:1302:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"24:4798:3140":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"16:8056:6204":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:8917:8340":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:46503:7668":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:42382:14089":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:11235:5317":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"12:2178:1787":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:22786:7443":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:8437:8922":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:20847:8863":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:13354:5875":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"24:88:1851":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"24:4512:3120":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"24:885:36822":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"6:4583:6807":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"22:766:3236":{"crate_id":22,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"5:2177:8064":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"20:235:3991":{"crate_id":20,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"1:11858:1491":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:41226:8335":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:9553:5151":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"24:5476:3191":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"6:578:6485":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"24:4068:3457":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"2:2937:3389":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"24:5034:2441":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"2:7145:3279":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"24:917:3173":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"1:4564:7272":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"18:614:36663":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:7956:6003":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:12860:5730":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:10172:8165":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"21:2290:2178":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"24:1338:36832":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"1:1586:8054":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"7:0:1518":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:3249:21079":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:4669:8865":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:4952:6980":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:10949:5256":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:4520:6802":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:39619:3304":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"22:699:3233":{"crate_id":22,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"18:507:5027":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:4781:6891":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:43605:4418":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"22:713:1862":{"crate_id":22,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"2:31729:8107":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:4424:8882":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:10466:7891":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:7543:5989":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"21:216:8282":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"2:9060:2257":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:8181:8835":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:562:1875":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:10708:7895":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:7825:3118":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:10824:6403":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:43305:8202":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:878:8051":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:7469:1875":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"20:164:3088":{"crate_id":20,"path":["quote","__private","ext"],"kind":"module"},"5:3979:3219":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:9909:5163":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"24:4912:3166":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"24:4916:3167":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"14:31:8618":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:42392:8089":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:1571:6532":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"24:4928:1821":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"17:13071:5780":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:6877:20896":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:3732:4789":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:11025:26480":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:1451:8721":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:11320:4896":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:2940:3390":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:21275:34303":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:2705:5974":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:11839:26477":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:43333:8209":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:11871:733":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:4353:6730":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:2065:4168":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"8:0:2957":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"24:1140:7819":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"23:0:3087":{"crate_id":23,"path":["unicode_ident"],"kind":"module"},"17:11774:5432":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:6171:6054":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:7357:6147":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:5959:7171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:1550:6517":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"12:738:8052":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"16:7093:6127":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:4748:8861":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:9544:4848":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:4316:8873":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"12:1872:1835":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"24:3824:3441":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"16:4441:6024":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:10418:8821":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:8816:7756":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"12:1065:36572":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:43113:8189":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:11861:309":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:2989:2264":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:8871:20967":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:4084:8874":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:1066:36438":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:11186:5307":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"18:96:24762":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:7929:20904":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:38812:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:851:4797":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:44204:7567":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"22:874:1862":{"crate_id":22,"path":["proc_macro2","Span"],"kind":"struct"},"6:1677:6609":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"21:478:4774":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"15:214:8298":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:39218:14155":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:6119:8343":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"21:2366:2466":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"6:531:6460":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:8772:7754":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:2766:4999":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"24:4876:2059":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"12:861:8718":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:1609:6556":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"24:1937:3214":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"2:46161:7661":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:8951:36640":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:4979:30086":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:868:3215":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:6282:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:8881:36646":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"}},"external_crates":{"23":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.8/"},"20":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.26/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.56/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.15/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}