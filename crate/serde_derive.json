{"root":"0:0:1688","crate_version":"1.0.162","includes_private":false,"index":{"2:11910:30508":{"id":"2:11910:30508","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11888:1487"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11921:30530":{"id":"2:11921:30530","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11922:30531"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11915:30506":{"id":"2:11915:30506","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11957:35976":{"id":"2:11957:35976","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11600:14255","str::split":"2:11948:29789","prim@char":"1:11871:415","`DoubleEndedIterator`":"2:7193:119","str::rsplit_terminator":"2:11960:35977"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:43210:8317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11995:35988":{"id":"2:11995:35988","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:14255"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11625:14251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11900:2012":{"id":"2:11900:2012","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11966:30545":{"id":"2:11966:30545","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11871:415","str::splitn":"2:11963:30543","self::pattern":"2:11600:14255"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:43282:8321","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:14253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11998:1924":{"id":"2:11998:1924","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:14255"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12020:4425":{"id":"2:12020:4425","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12026:35993":{"id":"2:12026:35993","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4524:35993"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:43477:8274","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11951:30539":{"id":"2:11951:30539","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:14255"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11423:8244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:981:1892":{"id":"0:981:1892","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}},"0:928:1682":{"id":"0:928:1682","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[100,0],"end":[105,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"2:11993:35986":{"id":"2:11993:35986","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11923:2331":{"id":"2:11923:2331","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11871:415"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:43130:8311","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11940:2550":{"id":"2:11940:2550","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41197:177","prim@char":"1:11871:415","self::pattern":"2:11600:14255"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11954:30541":{"id":"2:11954:30541","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11600:14255","`DoubleEndedIterator`":"2:7193:119","prim@char":"1:11871:415","str::split":"2:11948:29789"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:43178:8245","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:14253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12021:4426":{"id":"2:12021:4426","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12018:4424":{"id":"2:12018:4424","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12022:4427":{"id":"2:12022:4427","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11898":{"id":"2:11898","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11899:807","2:11900:2012","2:11901:35969","2:11902:35970","2:11904:35971","2:11907:2741","2:11908:35972","2:11909:312","2:11910:30508","2:11911:1905","2:11913:30505","2:11915:30506","2:11917:30507","2:11919:35973","2:11920:35974","2:11921:30530","2:11922:30531","2:11923:2331","2:11924:2325","2:11925:8234","2:11926:33032","2:11927:33021","2:11928:29790","2:11929:35975","2:11930:33036","2:11931:1942","2:11934:30163","2:11937:30165","2:11940:2550","2:11944:4107","2:11948:29789","2:11951:30539","2:11954:30541","2:11957:35976","2:11960:35977","2:11963:30543","2:11966:30545","2:11969:35978","2:11972:35979","2:11975:3082","2:11978:35980","2:11981:35981","2:11984:35982","2:11987:35983","2:11989:35984","2:11991:35985","2:11993:35986","2:11994:35987","2:11995:35988","2:11998:1924","2:12001:26487","2:12004:30547","2:12007:35989","2:12010:35990","2:12013:35991","2:12016:1885","2:12018:4424","2:12019:31611","2:12020:4425","2:12021:4426","2:12022:4427","2:12023:35992","2:12025:3387","2:12026:35993"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:372-0:348:1796":{"id":"0:372-0:348:1796","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[8,0],"end":[8,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:348:1796","glob":false}},"2:11913:30505":{"id":"2:11913:30505","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41197:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11931:1942":{"id":"2:11931:1942","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:14255"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5382:36641":{"id":"5:5382:36641","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:1862","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6999:4442","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:1862","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6999:4442","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11909:312":{"id":"2:11909:312","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11910:30508","`u8`":"1:11888:1487"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5398:36645":{"id":"5:5398:36645","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:279:1862","`String`":"5:7250:222"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:1862","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6999:4442","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11911:1905":{"id":"2:11911:1905","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41197:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12023:35992":{"id":"2:12023:35992","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4526:35992"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:43459:8275","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5383:2042":{"id":"5:5383:2042","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7250:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11908:35972":{"id":"2:11908:35972","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11899:807":{"id":"2:11899:807","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11871:415"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11917:30507":{"id":"2:11917:30507","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:62:343":{"id":"0:62:343","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1796,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:84-0:956:1889"],"is_stripped":false}},"0:84-0:956:1889":{"id":"0:84-0:956:1889","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[22,0],"end":[22,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"internals::case::RenameRule","name":"RenameRule","id":"0:956:1889","glob":false}},"2:11930:33036":{"id":"2:11930:33036","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:43452:8332","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11937:30165":{"id":"2:11937:30165","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:14255"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:14253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12001:26487":{"id":"2:12001:26487","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:14255"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11987:35983":{"id":"2:11987:35983","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12004:30547":{"id":"2:12004:30547","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:14255"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:14253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5386:36642":{"id":"5:5386:36642","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7250:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11989:35984":{"id":"2:11989:35984","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12025:3387":{"id":"2:12025:3387","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4527:3387"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:43468:3388","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:8:1793":{"id":"0:8:1793","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[202,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":false}},"2:11901:35969":{"id":"2:11901:35969","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11924:2325":{"id":"2:11924:2325","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11871:415"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:43136:8312","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11978:35980":{"id":"2:11978:35980","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11600:14255","`DoubleEndedIterator`":"2:7193:119","prim@char":"1:11871:415","str::matches":"2:11975:3082"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:43382:8327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:14253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11981:35981":{"id":"2:11981:35981","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11600:14255","`DoubleEndedIterator`":"2:7193:119","prim@char":"1:11871:415","str::rmatch_indices":"2:11984:35982"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:43310:8323","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11928:29790":{"id":"2:11928:29790","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:43414:8328","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11907:2741":{"id":"2:11907:2741","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11167:14256"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11960:35977":{"id":"2:11960:35977","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11600:14255","str::split":"2:11948:29789","prim@char":"1:11871:415","str::split_terminator":"2:11957:35976"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:43228:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:14253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5389:36643":{"id":"5:5389:36643","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7250:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11904:35971":{"id":"2:11904:35971","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11902:35970"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:927:1673":{"id":"0:927:1673","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[92,0],"end":[97,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"2:11927:33021":{"id":"2:11927:33021","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11926:33032"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:43443:8331","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11944:4107":{"id":"2:11944:4107","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41197:177","prim@char":"1:11871:415","self::pattern":"2:11600:14255"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:14253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5399:3282":{"id":"5:5399:3282","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7250:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5401:2321":{"id":"5:5401:2321","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12022:4427"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5381":{"id":"5:5381","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5382:36641","5:5383:2042","5:5386:36642","5:5389:36643","5:5397:36644","5:5398:36645","5:5399:3282","5:5400:2322","5:5401:2321"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11934:30163":{"id":"2:11934:30163","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:14255"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11991:35985":{"id":"2:11991:35985","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11972:35979":{"id":"2:11972:35979","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:14253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11994:35987":{"id":"2:11994:35987","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12013:35991":{"id":"2:12013:35991","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:14255"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:14253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:323-0:952:1795":{"id":"0:323-0:952:1795","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[5,0],"end":[5,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:952:1795","glob":false}},"2:11919:35973":{"id":"2:11919:35973","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11877:1389","str::slice_mut_unchecked":"2:11920:35974","crate::ops::Index":"2:2969:2281"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5397:36644":{"id":"5:5397:36644","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7250:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12007:35989":{"id":"2:12007:35989","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:14255"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:14253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11963:30543":{"id":"2:11963:30543","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:14255","str::rsplitn":"2:11966:30545"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:43264:8320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11929:35975":{"id":"2:11929:35975","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:43424:8329","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11984:35982":{"id":"2:11984:35982","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11600:14255","`DoubleEndedIterator`":"2:7193:119","prim@char":"1:11871:415","str::match_indices":"2:11981:35981"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:43328:8324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:14253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5400:2322":{"id":"5:5400:2322","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12021:4426"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11902:35970":{"id":"2:11902:35970","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12019:31611":{"id":"2:12019:31611","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39353:3389","Self::is_ascii":"2:12018:4424"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"AsciiChar","id":"2:39353:3389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11975:3082":{"id":"2:11975:3082","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11600:14255","`DoubleEndedIterator`":"2:7193:119","prim@char":"1:11871:415","str::matches":"2:11975:3082"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:43364:8326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11926:33032":{"id":"2:11926:33032","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11927:33021"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:43434:8330","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11969:35978":{"id":"2:11969:35978","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12016:1885":{"id":"2:12016:1885","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11561:125","`FromStr`":"2:11560:3255"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:41339:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11560:3255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11560:3255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11948:29789":{"id":"2:11948:29789","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11600:14255","`DoubleEndedIterator`":"2:7193:119","prim@char":"1:11871:415","str::split_whitespace":"2:11926:33032","str::rsplit":"2:11954:30541"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:43160:8242","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1688":{"id":"0:0:1688","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[110,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2018\n# use serde_derive::{Serialize, Deserialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.162\")]","#![allow(unknown_lints, bare_trait_objects)]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: derive_partial_eq_without_eq, clippy ::\nenum_variant_names, clippy :: manual_map, clippy :: match_like_matches_macro,\nclippy :: needless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: let_underscore_untyped, clippy ::\nmanual_assert, clippy :: map_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:927:1673","0:928:1682"],"is_stripped":false}},"2:11925:8234":{"id":"2:11925:8234","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:43146:2754","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11922:30531":{"id":"2:11922:30531","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11921:30530"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12010:35990":{"id":"2:12010:35990","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:14255"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:14252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11920:35974":{"id":"2:11920:35974","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11877:1389","crate::ops::IndexMut":"2:2973:3240","str::slice_unchecked":"2:11919:35973"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"17:13667:5924":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:676:8860":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"6:1559:6554":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:5996:7203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"24:1133:7973":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"1:2206:8924":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:11446:5346":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:7634:8861":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"21:2749:1880":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"2:12404:4878":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:42204:67":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:3157:14288":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"24:5338:3204":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"6:532:6491":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:6520:6100":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:8788:5162":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:10816:6434":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"6:494:6466":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"24:925:3190":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"1:11135:4913":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"6:526:6488":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:0:2981":{"crate_id":16,"path":["gimli"],"kind":"module"},"11:1555:20064":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:12536:5566":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:1895:8786":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"24:5116:2016":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"24:2956:2185":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"2:43903:8363":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:40527:3289":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:39903:7681":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:13309:5812":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:6903:4902":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:11770:5424":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:917:8865":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:4671:6842":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:8683:5159":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:6132:8122":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:9696:5176":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:9876:5045":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:3128:36724":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:4354:6736":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:1919:21142":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:21658:7457":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:8958:7919":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"24:1616:3349":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"2:40471:3277":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:8198:8376":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"12:0:2978":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:41169:7694":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"24:4466:2140":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"2:45355:7748":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"24:4802:3157":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"2:20484:33738":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:11422:5342":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:4674:9013":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:9826:21106":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:4529:6819":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:13316:5813":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:47318:7835":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:45745:7760":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:3151:14289":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:11044:7924":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"24:126:1804":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"1:7927:8494":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:6662:8150":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:4277:6676":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"24:5075:2148":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"5:6092:9184":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:10092:21197":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:4252:3357":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:8632:21042":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:10316:5229":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"21:2794:1878":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"17:12510:5564":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:21807:7474":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:39877:8277":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:40107:3311":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:10015:21193":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:4849:9058":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:10452:4199":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:45195:7737":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:4314:3362":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:7669:6042":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:13763:5951":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:21169:9173":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:9498:5176":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:6582:215":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"24:5160:3198":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"1:11451:7935":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:9780:220":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:40177:3303":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:45377:7749":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:6544:6032":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:22346:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:39159:2560":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"22:703:3399":{"crate_id":22,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"1:901:4529":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:9947:3235":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:1617:6592":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:4702:6068":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"11:300:8208":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"11:1003:8871":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:40494:3281":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:1057:35697":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:2864:126":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:43612:8342":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:39870:8276":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"24:4824:3162":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"1:5017:31875":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"22:112:37003":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"6:5947:7184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:8269:126":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:4099:9026":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"24:5280:2171":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"17:8490:21062":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"5:5234:14230":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:5735:7070":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:10743:21074":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:13488:5859":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:12393:105":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:11215:8536":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:3610:8989":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:5386:5157":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:11885:739":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:8072:8194":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:20912:9151":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:9972:8890":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:888:8212":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:4596:6066":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:21717:7462":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:8114:3308":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:39964:8910":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"2:47219:7828":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:11410:5339":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:1080:8777":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:5794:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:38974:198":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:10649:8049":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:5655:6029":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:5316:9078":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:2404:6002":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"24:893:37203":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"16:4872:6074":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"11:669:8480":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"22:14:25062":{"crate_id":22,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"24:917:3189":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"16:5797:8079":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:8124:3322":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:10354:5231":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:4271:6675":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:7776:8940":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:1571:6563":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:123:14701":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:8726:184":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"11:861:8870":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:9321:143":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:13257:5799":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:9361:8241":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:5693:8069":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:1695:6647":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:42956:14239":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:46605:7817":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:6557:7277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:10897:5268":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:2357:6000":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:40007:8923":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"21:405:36922":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"2:4799:791":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:4637:9032":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:4624:6067":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:1747:4477":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:13865:5975":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:8651:5157":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"21:108:4560":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"2:9110:3383":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:13194:5783":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:43477:8274":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:42718:8309":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"20:77:1881":{"crate_id":20,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"24:3962:3468":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"24:4213:3485":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"2:7271:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:3446:6051":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"24:5467:3220":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"2:2505:131":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:3368:14274":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"6:5015:7016":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:6236:8439":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"9:174:8471":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"24:4785:3153":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"1:3453:8943":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:42506:8306":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:13233:5794":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:8256:21041":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:5682:9098":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:4360:6737":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"21:2666:3230":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"1:8254:7293":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:2839:5029":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"24:5265:188":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"6:5041:7033":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:11874:1043":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"24:4577:2147":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"2:45722:7759":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:3752:4527":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"24:609:3231":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"5:3621:4810":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:4731:664":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"14:31:8771":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:10165:14245":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:10527:21232":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:7606:4199":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:62:14646":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:11653:5395":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"24:2752:3430":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"6:4475:6791":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:5005:7011":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"21:2662:3398":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"1:8232:7892":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:3140:232":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:41512:80":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:5418:6084":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:7366:20998":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:926:8481":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:5034:4842":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:7635:6195":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"21:2600:3401":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"1:6365:3279":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"22:919:2195":{"crate_id":22,"path":["proc_macro2","Punct"],"kind":"struct"},"14:160:8771":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:9313:139":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"5:5484:4533":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:2204:127":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:585:2287":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:11556:5364":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:5481:3313":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:11600:14255":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:21427:9014":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"24:2081:2420":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"1:3320:3283":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:3055:8980":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:1034:21099":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:38959:8268":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"13:0:2972":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:5643:8067":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:11090:5276":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:2499:73":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"24:3938:3466":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"1:1583:8214":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:13121:5767":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:3585:6052":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"11:1845:4527":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"6:4804:6911":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:4034:4434":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"24:3381:3455":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"2:43879:8357":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:43967:14427":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:9653:21123":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:47208:7827":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:42475:8305":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:7246:7410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:5032:6079":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"9:52:8460":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:44924:7726":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:154:4795":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:1609:6587":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"24:3211:2268":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"2:44179:4440":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:13469:5854":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:9973:8035":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:12592:5573":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"20:0:1098":{"crate_id":20,"path":["quote"],"kind":"module"},"2:2951:4435":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:11902:5449":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:11459:5348":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:4982:7003":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:22082:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:5330:9079":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:9188:36833":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:13516:5867":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"24:4517:1829":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"17:10989:5239":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"11:1085:20060":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:20636:9153":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:43468:3388":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"22:505:3249":{"crate_id":22,"path":["proc_macro2","LexError"],"kind":"struct"},"16:5630:20984":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:11879:5446":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:2235:97":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:7532:7435":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:7519:8188":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:42947:8247":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:8203:3714":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:44094:193":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:3030:6046":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:4247:3356":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:7252:27785":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:11946:5457":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"11:1852:8213":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:43048:14244":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:1715:4527":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:10041:2176":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"24:4820:3161":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"16:4327:6059":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:6861:8794":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"5:1421:8865":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"24:4300:3491":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"17:13356:5822":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:6004:7205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"24:2973:2482":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"16:6890:6035":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:2569:8789":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:43738:14268":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:7029:8177":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:3157:8213":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:4752:386":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"11:1832:3231":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:5944:20987":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:10938:4912":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:10837:26480":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:45949:7778":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"24:4085:3476":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"1:8972:26471":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"5:2188:8224":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:1541:6543":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:7069:8228":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"24:5060:2453":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"2:8204:3713":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:4818:6072":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:4480:6062":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:3640:5077":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"5:5708:4529":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:1710:6656":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:4728:6069":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:10412:8973":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:44992:7729":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:6022:20989":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"24:2769:3431":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"16:7588:21000":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:12372:5536":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"11:98:8204":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:6336:8128":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"5:5830:14620":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:2907:7446":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"24:4884:3175":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"16:5305:6082":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:2969:2281":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:4492:6801":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:6943:20995":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:6390:8131":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:50931:7846":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"18:755:8030":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:6098:7227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:2616:6011":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:9106:3386":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:7145:3269":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"24:2854:3434":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"24:5299:2464":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"5:7157:3270":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"24:151:1868":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"16:2572:6009":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:6460:6027":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:242:36845":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:11362:8992":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:1985:182":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:13842:5971":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"18:609:36857":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:39056:199":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:4726:6872":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:8475:7910":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:5539:3302":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"24:3347:3453":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"17:11832:5440":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:12059:5474":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:7667:8898":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"24:3228:232":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"6:5935:7177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:11484:5350":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:4834:6922":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:8170:8201":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:4904:6075":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:7529:6040":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"15:180:20082":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"24:4781:3152":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"1:11158:9088":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:568:6511":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:9469:21089":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:6767:8164":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:1704:6653":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"24:4508:3135":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"2:25696:7477":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:953:8869":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:11894:1540":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:9591:4873":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:3923:4836":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:9986:8036":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:42259:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:2784:5024":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:9895:21130":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"21:184:4174":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"24:1506:3340":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"2:43130:8311":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:6802:7392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:46997:7821":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:420:5115":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"0:0:1688":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"16:6146:192":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:6760:4854":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:2879:6022":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:7016:8175":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:12496:5563":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"22:729:1815":{"crate_id":22,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"2:10127:8245":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"18:699:8021":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:13024:5743":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:13419:5843":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:5983:7199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:9683:21110":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:8156:8990":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:21755:33173":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:11153:8782":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:4756:6887":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:12894:5692":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:43660:8343":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:6743:7361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"24:4353:3495":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"17:10402:21219":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:7042:8180":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:4845:6073":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:7039:35691":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:46139:7781":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:45471:7751":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:2546:6008":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"24:3783:3456":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"2:2338:180":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:1677:6640":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:7023:4529":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:11869:369":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:3130:14337":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"24:4854:2149":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"11:60:36764":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"24:4440:2476":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"2:44192:8370":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"24:4411:3499":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"24:1332:3354":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"2:47356:7837":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"24:4225:3486":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"1:2545:4869":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:8459:8378":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:12269:14315":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"5:7173:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:39843:3388":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:39917:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:10798:21076":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:11299:5316":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:12331:5531":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:9175:4604":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"24:4114:3478":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"1:8720:9085":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:8950:1868":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:9088:31887":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"21:2037:4551":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"17:11193:5290":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:562:1892":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:12646:5587":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"24:1761:1809":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"24:5480:3208":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"2:42459:8302":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"24:5436:3211":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"1:6129:8493":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"24:2905:3437":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"24:2990:3440":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"20:10:3107":{"crate_id":20,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"2:39014:197":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:8224:8991":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:6376:6026":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"21:1029:3399":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"2:49635:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11600:5381":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"21:998:231":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"1:1783:8880":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:4773:34454":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:7491:7426":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:5708:8072":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"24:286:37014":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"1:5435:9083":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"24:4916:3183":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"24:4912:3182":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"17:10705:5247":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:6558:8146":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:43264:8320":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:7798:8375":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"24:3824:3459":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"2:2746:5018":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:12196:149":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:7743:6031":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:5063:189":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:40288:3324":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:4963:6995":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:10039:21159":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:5640:230":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:13411:5840":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:6474:6044":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"10:36:6377":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"15:198:20083":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"24:3245:1801":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"1:9033:7923":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:3142:21164":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:2696:2409":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"24:552:7972":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"21:141:4563":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"17:10967:5270":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"24:5473:3206":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"6:6586:7289":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:10283:5227":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"24:3800:3457":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"1:11888:1487":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:41552:87":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:21626:7456":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:3149:8215":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:43907:8364":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"18:614:36853":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:1062:8871":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:4930:6981":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:2821:3494":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:4554:6832":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:12483:5562":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:12770:5589":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:11234:5299":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"21:2764:1804":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"17:12307:5528":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"24:3143:3447":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"1:4569:7304":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"24:4242:3487":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"6:6139:7253":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:4932:6076":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"24:844:5015":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"17:11163:5286":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"22:350:3249":{"crate_id":22,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"2:45214:7738":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:2115:8219":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:7566:7442":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:4935:6983":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:42938:8246":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:595:6526":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:5175:188":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:41632:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"5:7204:33200":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:9641:21101":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:12345:5532":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:10452:21207":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"24:5304:2183":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"2:2776:5022":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:9102:2274":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:8521:21063":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:535:8057":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:3899:6057":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:1947:21107":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:41432:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:11628:5391":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:20699:9155":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:4091:9025":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:12435:203":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:42222:108":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:4828:6921":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:8025:3134":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"24:5448:3216":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"5:1227:8871":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:11025:7718":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:11388:8325":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:21833:8996":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:13659:5923":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"11:2080:8872":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:43443:8331":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"5:1403:8211":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:6818:7398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"21:368:4554":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"1:1589:8215":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:9265:21071":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:3815:6055":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:21321:7455":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:9018:165":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"22:899:3251":{"crate_id":22,"path":["proc_macro2","Delimiter"],"kind":"enum"},"16:2337:5994":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:12461:5551":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"14:221:6324":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:4366:6738":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"24:4484:3133":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"17:13219:5791":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"11:1681:142":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:10555:8037":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"24:3364:3454":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"2:47265:7832":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"24:4550:1665":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"1:635:8857":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:11800:5433":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"24:1338:37059":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"16:7767:21003":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:7543:6041":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"24:4254:3488":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"1:3163:8975":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"24:4896:3178":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"6:506:6471":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"24:550:126":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"24:4126:3479":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"1:6617:31886":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"16:5571:6028":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:6574:4533":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:9058:3382":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:2684:224":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"22:895:1804":{"crate_id":22,"path":["proc_macro2","Group"],"kind":"struct"},"24:2837:2134":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"24:5128:3191":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"6:6764:7375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:11890:1485":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:6819:6135":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:11282:1815":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:6535:4797":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"24:4196:3484":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"2:40239:3321":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:4702:6861":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:4542:6823":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:47143:7824":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"5:3183:1852":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"24:3904:3464":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"2:2793:3479":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:46747:7818":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:45279:7740":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:7118:3296":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:1241:8777":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:41672:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:12923:5703":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:2668:6013":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:6854:6139":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:7164:3295":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"24:4512:3136":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"17:12550:5569":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:6679:7320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:3546:3235":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"24:5323:2221":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"2:9576:4869":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"24:1623:2054":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"2:43887:8359":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:5000:6078":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"18:736:24975":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:911:4527":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:44946:7727":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:3396:8942":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"21:2449:1880":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"24:5464:3219":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"24:3177:1830":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"6:5817:7111":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:4046:3235":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:43118:8310":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:10626:8048":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"16:6307:6024":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:5786:7090":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:11969:5462":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:41181:7695":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:11842:8863":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:8137:8242":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:10712:26478":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"24:5343:3203":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"11:1044:20059":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:10670:5246":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:20467:33595":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:5552:204":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"24:5459:3218":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"17:10428:21229":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:4102:3374":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:8283:21056":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"19:0:1025":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:39950:8282":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:6575:7284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:21164:9150":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:2593:126":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:0:1381":{"crate_id":1,"path":["std"],"kind":"module"},"5:2905:35695":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:10840:5266":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:11671:14261":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:12915:5702":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:844:3231":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:11109:5279":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"24:2701:3428":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"17:11891:5448":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:7411:6189":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"4:0:2973":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:6575:20992":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"24:258:8770":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"20:322:2485":{"crate_id":20,"path":["quote","spanned","Spanned"],"kind":"trait"},"17:10857:21077":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:7488:8186":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:7151:132":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:3350:4836":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:10465:21206":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:10104:5193":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"24:3296:3450":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"16:2378:6001":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"5:7250:222":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:10092:14248":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:8377:7707":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:857:3235":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"24:2548:3423":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"2:40209:3319":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"21:2556:4552":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"17:9534:21094":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:49557:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:44129:8529":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"24:2164:9014":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"16:8090:8197":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:47303:7834":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:45155:7735":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"20:45:3108":{"crate_id":20,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"1:2339:4453":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:43544:14267":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"18:548:139":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:7514:7432":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:5906:4888":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:8156:6045":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:1568:4529":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:6593:7293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"24:498:3241":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"1:875:8211":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:11062:7932":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:20755:9147":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:7155:150":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:8309:14252":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:6081:4878":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"24:2803:3432":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"1:5495:7214":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:4634:9059":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:13041:5745":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:6124:7242":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:947:8868":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:12980:5738":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:13443:5848":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:6593:4534":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:6538:2605":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:21:677":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:8858:5164":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"11:2053:8182":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:6721:3273":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:31942:4087":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"24:4979:2463":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"1:1844:4604":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"24:3330:3452":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"17:8753:5161":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:9057:208":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:1621:584":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:43915:7718":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:12236:5514":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:13367:5826":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"24:5470:3221":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"17:10712:21234":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"11:659:3230":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:45501:7752":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"24:2820:3433":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"2:39997:4858":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"24:4928:1838":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"2:41061:8988":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"21:2614:3400":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"2:7114:3297":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"20:407:3892":{"crate_id":20,"path":["quote","__private","RepInterp"],"kind":"struct"},"21:2351:1815":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"17:12449:5549":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:44970:7728":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:2254:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"5:1994:8874":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"5:6999:4442":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:4:1008":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:10761:21075":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:10303:21160":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:1747:6669":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"24:4543:1832":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"6:6616:7311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:10206:8320":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:4767:6895":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:9545:5152":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"24:4935:2281":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"17:1978:21129":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:6254:6092":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"24:4807:3158":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"24:3858:3461":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"11:815:8866":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:7585:4202":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"24:548:208":{"crate_id":24,"path":["syn","error","Result"],"kind":"typedef"},"6:7508:7431":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:9512:21096":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"22:880:1880":{"crate_id":22,"path":["proc_macro2","TokenTree"],"kind":"enum"},"16:7335:36801":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"11:646:3235":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:1561:3231":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:4503:9050":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"22:723:1804":{"crate_id":22,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"24:1962:3233":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"1:10647:8374":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"16:5963:8097":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:10248:14246":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:41390:3235":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:6481:9103":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"11:1840:4529":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:10702:7888":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:6328:31886":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"13:110:36768":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:2512:235":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:47280:7833":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:10691:21233":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:11355:5331":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:42484:143":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"24:5008:3186":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"17:12607:5577":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:3266:21180":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:5920:8094":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:43013:3298":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:41004:153":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:5868:7135":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"24:4574:2026":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"17:10377:5232":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:11614:8023":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:21642:8255":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:30681:4096":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:6164:8125":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:9772:5187":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:22280:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:2341:8928":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:21520:8253":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:41090:1879":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"24:2633:1862":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"22:766:3252":{"crate_id":22,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"17:10635:5242":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:6534:9105":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:10825:9083":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"6:4894:6957":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:9377:4908":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:2502:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:11017:26469":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:10885:8054":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:4424:3367":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:20486:33742":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:1071:8872":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:4314:6703":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"22:825:1815":{"crate_id":22,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"2:38873:14287":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:8897:8490":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:5814:4842":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"24:3058:3444":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"24:3991:3469":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"6:4536:6821":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:40509:3285":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:11060:5243":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"24:2599:3426":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"2:45232:7739":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:1577:8213":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"11:1872:1852":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"24:4794:3155":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"2:2910:2217":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"22:713:1879":{"crate_id":22,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"21:1828:4550":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"2:2920:3408":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:43883:8358":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"24:336:3350":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"1:307:1437":{"crate_id":1,"path":["std","thread"],"kind":"module"},"16:7467:8183":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:1462:8873":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:4120:9028":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:12046:5472":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:13135:5771":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"21:2769:3251":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"6:554:6503":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:0:812":{"crate_id":6,"path":["libc"],"kind":"module"},"2:39034:200":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:3920:9000":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:5367:20100":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"24:2218:9014":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"17:8573:21065":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:5616:8063":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"14:202:2318":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:7218:7407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:8909:2754":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"24:0:1662":{"crate_id":24,"path":["syn"],"kind":"module"},"17:12358:5533":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:3170:34888":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:2168:35694":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:6369:9100":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:9478:21100":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:6289:4810":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:8486:8381":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:7771:4719":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:6548:4900":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:731:140":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:8718:5160":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:6292:164":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:11871:415":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:12098:5479":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:30283:33197":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:4540:6064":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:922:8480":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"24:4015:3471":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"24:3950:3467":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"1:4755:9012":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"11:777:4806":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"16:2448:6004":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:4381:6745":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:4431:9033":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:22313:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:21821:8263":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:6656:7313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:4422:6766":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:8774:3231":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"21:2713:1879":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"2:3067:3254":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:46185:7782":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:2899:3371":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"24:3126:3446":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"1:8327:7902":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"18:624:36852":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:7193:119":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:7220:8232":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"21:2810:1815":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"17:9068:36835":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"24:4570:2024":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"2:9770:9014":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:4251:9030":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:12433:5545":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:9748:5182":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:1460:2219":{"crate_id":2,"path":["core","mem"],"kind":"module"},"1:3777:8994":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:6351:20991":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:43210:8317":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:44900:7725":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"9:388:19983":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"11:853:8869":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"18:507:5047":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"24:3075:3445":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"2:43424:8329":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"24:251:8769":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"2:42976:14238":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:5071:6080":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:2862:6021":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:4037:6058":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:1982:183":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:1550:6548":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:8142:21006":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:0:2982":{"crate_id":17,"path":["object"],"kind":"module"},"2:40078:3301":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:2406:7444":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:0:284":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:10347:4909":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:3968:9003":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:6870:3276":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:5402:5158":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:1537:4836":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:474:1805":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:2579:114":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:3872:6056":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:3047:20129":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:5773:7089":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:4953:6994":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:41331:191":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"24:4329:3493":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"1:8469:3231":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:43792:8355":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"22:0:1663":{"crate_id":22,"path":["proc_macro2"],"kind":"module"},"21:434:4793":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"17:8360:21058":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"22:797:36997":{"crate_id":22,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"2:43026:14235":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:12244:190":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:8214:2560":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:47395:7838":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"24:344:37197":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"2:11826:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:7437:6190":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:4817:202":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:9453:21088":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:8598:21066":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"24:3870:3462":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"6:6809:7395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:5886:8088":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:3672:3350":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"24:5118:3193":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"11:1120:20061":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"22:941:1815":{"crate_id":22,"path":["proc_macro2","Ident"],"kind":"struct"},"16:7596:21001":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:7836:28369":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:12622:5243":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:7572:36779":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:7031:4821":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:41313:3712":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:1509:6530":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:6919:36778":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:7053:3230":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:13101:5759":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"21:2815:2483":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"17:12293:5526":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:9028:217":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"24:5439:3212":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"20:150:3733":{"crate_id":20,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"11:2069:8871":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:3063:5073":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:13344:5821":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:43160:8242":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:45076:7732":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:210:4445":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:5034:7030":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:2344:187":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"20:281:1888":{"crate_id":20,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"1:3130:28371":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:7932:8971":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:11886:740":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"18:766:24976":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:7090:3230":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:10142:21198":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"24:4522:1871":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"24:1533:2763":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"2:10054:14240":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:47239:7830":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:1572:4527":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"6:7556:7440":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"24:2030:3237":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"6:653:15057":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:9340:21073":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:45523:7753":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:6735:4847":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:5903:4836":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:10589:8046":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:11892:1483":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:6442:8135":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:4399:6757":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"24:4829:3163":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"22:783:231":{"crate_id":22,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"1:11882:639":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:40056:3308":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"24:5043:1947":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"6:1900:16039":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:9098:21068":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"22:946:2483":{"crate_id":22,"path":["proc_macro2","Literal"],"kind":"struct"},"24:826:3336":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"2:43058:8251":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:9052:7924":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:3305:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:11876:1359":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:42250:70":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:10660:5243":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:13399:5837":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:1412:8212":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:930:8866":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:7649:8862":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:0:493":{"crate_id":2,"path":["core"],"kind":"module"},"20:272:1888":{"crate_id":20,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"2:41133:8300":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:39922:8281":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:40027:3298":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"24:2023:3235":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"17:10416:21228":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:9523:21095":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:11037:21078":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:3934:9002":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"24:5446:3215":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"2:41975:3386":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:2742:6016":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"21:2727:3397":{"crate_id":21,"path":["proc_macro","LineColumn"],"kind":"struct"},"2:42514:8307":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:5559:4888":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:10216:28084":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:40485:3279":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:45691:7758":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"11:387:36763":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"5:1431:8480":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:22148:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:39851:8275":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:20914:7453":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:2470:6005":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:4469:6788":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:6232:204":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"11:2198:6375":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:12194:5493":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"24:4876:2076":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"6:7431:7422":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:2635:7447":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"24:4861:3170":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"2:44086:209":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"24:5444:3214":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"2:4011:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:13053:5750":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:8072:7887":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:2830:6020":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"24:2565:3424":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"22:735:2483":{"crate_id":22,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"2:41044:7687":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:21429:9148":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:43310:8323":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:40139:3314":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"21:649:3402":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"6:7497:7427":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:9356:14317":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:11870:932":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:21734:33188":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"24:4102:3477":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"17:13564:5904":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:9372:8940":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"24:4773:3150":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"17:10580:8045":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:3999:33689":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:5922:204":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:8815:7915":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:11383:8994":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"24:1883:3228":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"24:3887:3463":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"2:22247:4203":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"24:3092:3363":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"21:1205:194":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"1:3165:8976":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:1611:4810":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:1812:3373":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"24:842:9014":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"2:8796:8483":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:2209:4470":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:2762:5021":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:8144:8328":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:13698:5932":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:11423:8244":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:3127:28364":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"14:0:2979":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"24:103:4153":{"crate_id":24,"path":["syn","token","CustomToken"],"kind":"trait"},"24:3841:3460":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"6:4690:6854":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:35:4443":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"24:5271:2168":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"1:8790:3230":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:5054:7038":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"24:1405:1884":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"14:7:8771":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:45024:7730":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"24:2667:2262":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"5:7275:8779":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:7077:20997":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:22886:7476":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:1534:6540":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:355:4210":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:7509:6039":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:11615:5387":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:11671:4918":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"9:0:2975":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"11:393:36765":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:7683:8785":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:11520:5359":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:13426:5844":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"24:4271:3489":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"24:93:9014":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"9:445:19982":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"18:531:8014":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:9557:5182":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:6179:8440":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:5990:7200":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"24:921:2838":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"6:4848:6930":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:4559:9002":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:10545:5239":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:3990:9007":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"24:4172:3482":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"1:6097:4895":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:10993:7911":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:43895:8361":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:13625:5911":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:8902:105":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:1589:6573":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:7479:7424":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"24:5442:3213":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"24:3921:3465":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"17:9218:5182":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"18:491:8013":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"18:481:8012":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:3300:6050":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"24:4956:1823":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"11:119:4798":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:2535:4882":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:4592:6834":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:8945:8492":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:2741:3258":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:11136:5280":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:9972:8242":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:5689:9099":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:9178:21070":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:40148:3315":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:3460:8961":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:10682:128":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:10491:21204":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:487:21055":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:39756:3388":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:4243:205":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:7526:7434":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:41407:181":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:7264:8236":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"0:927:1675":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"17:13292:5805":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:41961:3376":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:1821:8890":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:12959:5733":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:12183:134":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:3435:3382":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:13169:5774":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:11391:5338":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"24:1089:1888":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"2:39884:14306":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:9380:21085":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:3287:8966":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:5962:7186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"22:806:1879":{"crate_id":22,"path":["proc_macro2","imp","Span"],"kind":"enum"},"24:3024:3442":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"1:5715:8489":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:8938:31906":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:5498:9084":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"5:7347:4528":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:9734:21108":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:11895:1118":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:30653:181":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"24:5124:3196":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"17:13612:5905":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:4969:6077":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:10128:9087":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"5:1381:3230":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:43434:8330":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:20753:9014":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"24:5170:3199":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"2:41832:8485":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"18:727:5069":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"24:901:37201":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"24:4864:3171":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"24:5314:2264":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"16:7711:6198":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:4681:6849":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:8400:7905":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:13082:5758":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:530:4194":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"24:4816:3160":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"1:959:8870":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:10642:8387":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:9670:21111":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:4664:6840":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:20439:4096":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"24:4394:3498":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"2:31873:1968":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:2772:3259":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:4369:3364":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:1520:6535":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:4320:243":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"24:4044:3473":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"17:12033:5471":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:13812:5966":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:45125:7734":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:2737:4085":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:39139:7552":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"24:5346:1801":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"21:2658:3249":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"6:7473:7423":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"24:4777:3151":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"2:39823:8273":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:40519:3287":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:5366:9081":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:39353:3389":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"24:3262:3449":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"2:2232:96":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:9100:3376":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:119:14700":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:43068:14243":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:47181:7825":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:13639:5917":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"24:4556:1820":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"17:13777:5953":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"24:4872:3173":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"16:6327:8127":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:6691:242":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"18:590:5054":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:6243:36809":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:10735:5251":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"24:3041:3443":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"2:7548:3293":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:7580:4200":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:13240:5796":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"14:40:1815":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:4335:4838":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:7450:1892":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:43459:8275":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:42699:7711":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:43136:8312":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:4406:6761":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"21:479:4794":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"2:7541:3290":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"23:0:3103":{"crate_id":23,"path":["unicode_ident"],"kind":"module"},"17:9617:21093":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:7478:6038":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:10855:7913":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:8860:9110":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"18:599:5012":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:3870:8998":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:8844:9108":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:5976:7197":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:10692:117":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:4409:9032":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:2805:4013":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"24:869:37200":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"1:4323:9024":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:3978:9004":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"24:1491:3339":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"17:13857:5972":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:39762:8270":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:42496:7707":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:7844:8790":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:9907:5190":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"24:4846:3167":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"2:43328:8324":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"24:1140:7977":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"2:40225:3320":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:9853:21153":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:3222:3372":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:9023:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:30049:4271":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:6321:8455":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:4602:6835":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:3145:133":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:41027:7685":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:46935:7820":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:3906:8999":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"22:925:1878":{"crate_id":22,"path":["proc_macro2","Spacing"],"kind":"enum"},"17:975:21097":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"9:502:6437":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:40200:3318":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"9:234:7707":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:4449:6778":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:39132:14338":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:3749:6053":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"18:521:24979":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"11:444:140":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:41752:84":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:11312:8314":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"11:320:4800":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:7803:6206":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:9721:21109":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"24:2718:114":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"21:217:8438":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"2:43891:8360":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"24:4027:3472":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"2:42987:7712":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"24:1035:1815":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"6:4750:6884":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"21:2744:3399":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"6:6694:7324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:11837:8496":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:12799:5609":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:7520:7433":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:22379:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:13803:5962":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:31837:6374":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:10681:8051":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"21:2653:231":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"2:42194:7699":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:6935:20994":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"7:79:19975":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:6533:7260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:10921:4910":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:6541:7265":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"24:4365:3496":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"5:3162:36729":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:40274:3323":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:1628:4268":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:13453:5851":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:2674:218":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"5:5238:14231":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:6868:6141":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:49622:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:1785:8881":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"18:636:5065":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:11321:8993":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:4592:14299":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:3782:6054":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:43759:8350":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"14:215:8202":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:11785:5428":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:4740:6878":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:40190:3317":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:8037:8941":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:49596:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"24:1136:7975":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"2:7216:3294":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:11821:5437":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:11532:5362":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"18:113:24966":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"11:697:8481":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:12178:5488":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:1583:6571":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:47228:7829":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:4571:7306":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:10812:8785":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:43039:8250":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:9946:8033":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:11877:1389":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:8150:8991":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:11439:7934":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"22:792:8006":{"crate_id":22,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"16:7557:6191":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:40478:8292":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"24:4798:3156":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"2:2691:226":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:7293:6171":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:2905:6023":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:9148:36847":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:4290:6685":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:13744:5946":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:554:4196":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:618:8784":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:42467:8304":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:1212:8872":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:3087:94":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:46061:7780":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"24:4068:3475":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"17:13879:5978":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:2086:8217":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:42714:8308":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:7852:3350":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:39180:7553":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:2788:5025":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:12522:5565":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:5797:7098":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:1442:8481":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:7103:7919":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:11372:8322":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:11069:21079":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:482:6460":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:4171:9029":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:814:4816":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:43178:8245":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:4840:6925":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:5888:7151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:10721:5248":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:4786:6903":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"21:245:36913":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"24:1487:3243":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"1:8065:3276":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:6773:7378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:5845:7122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:6400:8132":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:9991:28085":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:9886:21131":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:2686:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:46249:7784":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:9488:21098":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:13721:5945":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:2844:5030":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"24:5319:3202":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"2:11349:8319":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:7190:8229":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:7240:7408":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:30119:33201":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:4573:6833":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:2609:8970":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:13265:5801":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"24:3109:210":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"2:4378:3365":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"5:279:1862":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:7461:8795":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:5243:118":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:11137:14386":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"24:5451:2224":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"2:38912:4436":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"6:1716:6657":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:22412:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:3496:4529":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:11233:8400":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"24:5040:2839":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"1:4069:29771":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:41146:8376":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:43724:8345":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:8752:7912":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"18:574:5047":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"24:1443:25002":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"17:12563:5570":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:1645:6617":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:8548:21064":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:7498:8187":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:7683:6043":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:11200:8397":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:2736:4084":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"24:4317:3492":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"17:13033:5744":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"11:1836:3230":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:2720:6015":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:7585:32514":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:2459:9014":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:12461:138":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:3185:3370":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:45425:7750":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:13678:5929":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:9822:21117":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"24:555:5008":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"17:12113:5482":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"5:962:4810":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:43581:8339":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:10733:14241":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:9093:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"5:7008:3230":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:45903:7777":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:9138:21069":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"24:2582:3425":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"1:413:163":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:8738:7911":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:6005:4891":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:13211:5788":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:6566:7283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:14:2620":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:11641:5392":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"24:5120:3192":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"2:22115:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"24:4003:3470":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"2:11560:3255":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"11:822:8867":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:9108:36842":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:45325:7747":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:2751:5019":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:9839:21105":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:8417:9073":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:10068:21195":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"18:582:4096":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"11:2190:36761":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:2800:5011":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"5:1313:93":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:6981:20996":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:11896:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:39858:14305":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:10270:21162":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"21:1072:1879":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"17:10569:8041":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:9577:5178":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:11887:736":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:7781:8374":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:11620:14253":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"3:229:208":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"20:37:2840":{"crate_id":20,"path":["quote","format_ident"],"kind":"macro"},"2:42966:8249":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"24:4789:3154":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"6:5048:7036":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:20761:9149":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:4365:4836":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:41968:3385":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:8216:9023":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:4709:6862":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:480:4880":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:49609:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:6671:6123":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:9228:36831":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"13:226:6371":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:11878:1469":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:45094:7733":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:2141:585":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:4650:6839":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"24:4490:2010":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"2:41255:3231":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:12158:5487":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:39173:3363":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"24:4812:3159":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"17:13181:5777":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"24:5485:2222":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"2:45825:7761":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"9:352:19997":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:867:3230":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:2862:208":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:2973:3240":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:49570:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:7233:8235":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:4873:6942":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"22:975:3230":{"crate_id":22,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"17:12072:5475":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"14:187:20076":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:9866:21124":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"20:239:4012":{"crate_id":20,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"2:41592:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:39100:3263":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"24:4423:3500":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"24:885:37199":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"24:5056:3188":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"17:8310:21057":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:2827:5027":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:5761:7085":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"24:5309:2263":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"24:4892:3177":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"1:11891:1486":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:46857:7819":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:7263:7421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"24:4833:3164":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"6:4865:996":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:11471:5349":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"8:0:2974":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:22181:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:247:36823":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:8828:9109":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:9923:3231":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:8667:5158":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:13145:5772":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:11544:5363":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:8971:127":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"16:7065:8181":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:43146:2754":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"21:2623:8011":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"2:9096:110":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:43228:8318":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"24:1736:8800":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"1:3203:8977":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:4510:6810":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:8109:8200":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"22:671:3350":{"crate_id":22,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"17:13066:5755":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:1604:6585":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"11:2178:1804":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"24:5122:3194":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"2:6627:3307":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:43934:120":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:6431:8134":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"24:4900:3179":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"16:7837:8190":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:21682:8258":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"24:94:4155":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"22:874:1879":{"crate_id":22,"path":["proc_macro2","Span"],"kind":"struct"},"24:2514:3501":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"11:834:8868":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:779:95":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:9409:21086":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:7757:8189":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:547:6500":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"11:1138:8777":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"5:7061:196":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:10618:9061":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"24:5422:3209":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"16:2786:6018":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:7562:4212":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:13015:5739":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"20:34:9014":{"crate_id":20,"path":["quote","ext","private","Sealed"],"kind":"trait"},"6:5858:7128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:11185:7933":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"24:1448:25003":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"16:6061:20101":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:4414:6763":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:9566:21071":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:632:8778":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:40116:3312":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:10478:21205":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:2382:2987":{"crate_id":1,"path":["std","io"],"kind":"module"},"10:0:2976":{"crate_id":10,"path":["adler"],"kind":"module"},"2:39813:8272":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:11993:5463":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:386:21054":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:9071:8384":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:5850:7123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:7626:21002":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:44137:7721":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"24:1910:3229":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"11:2184:6372":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:30105:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:8628:85":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"5:7330:4527":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:10026:21194":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:782:4813":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:361:4211":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:5976:8058":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:13324:5814":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"24:5255:3200":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"6:4387:6748":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:7687:1968":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"16:4568:6065":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:11298:4915":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:39934:33200":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:6362:3230":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"5:4398:4838":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:10015:8244":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:7655:4594":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"18:690:8020":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:9312:21072":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"24:599:3230":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"24:877:37202":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"17:13821:5968":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:9275:36837":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:40168:3316":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"24:3194:3448":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"2:39783:33183":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:2835:5026":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:8823:5163":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"24:4924:3185":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"5:2904:2053":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:11167:14256":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:12138:5484":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:4789:6071":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:13159:5773":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:20881:9014":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:6478:8791":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:12006:5466":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:8782:9111":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:20507:33740":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:2734:1841":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:11605:14252":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:1924:8908":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:1687:6646":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:4915:6972":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:6673:7318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"18:707:8023":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:5804:7102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:6930:3278":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:39166:32677":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"20:148:3734":{"crate_id":20,"path":["quote","__private","HasIterator"],"kind":"struct"},"24:5029:2455":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"1:3242:8973":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:11339:5327":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"21:967:4569":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"17:10598:5270":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:9959:8034":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"11:1518:20062":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:9246:33712":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:41954:2274":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:3356:14270":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:8993:7922":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:4998:7008":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:7561:9014":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:10615:8047":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:10923:8055":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"24:5013:2223":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"2:8202:3715":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"24:4938:61":{"crate_id":24,"path":["syn","expr","parsing","raw"],"kind":"struct"},"11:738:8212":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:41398:3230":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:4924:6978":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:47333:7836":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"24:4920:3184":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"5:2915:25611":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:2367:8937":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:1433:142":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:500:6468":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:8093:8944":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"11:274:8205":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:1077:35751":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:43414:8328":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:8791:32516":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:4442:6775":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:40097:3310":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"24:2211:2485":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"24:2786:1828":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"21:2325:2195":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"5:6175:4847":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:9933:8031":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:1594:1852":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:10220:8321":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"24:4857:3169":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"17:13689:5930":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:7485:7425":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:5104:6081":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:4624:6837":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:20712:9014":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"6:4482:6794":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:3533:3231":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:8883:7918":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:4734:6876":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:7449:20999":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:11258:5313":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:12318:5529":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"11:2205:3269":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:41712:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:13376:5829":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:488:6463":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:40249:3305":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:20905:9014":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"24:4453:3625":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"24:5126:3195":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"2:41792:91":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:8309:3707":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:11893:785":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:9028:21067":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:9559:4868":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:45979:7779":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:22214:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:5566:4889":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:12403:5542":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:38990:196":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"24:1954:3231":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"17:13477:5855":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:8953:5167":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:30083:4272":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:2213:8925":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:4943:6988":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:13433:5845":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:2810:5010":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:10000:5254":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:43687:8344":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:43955:8366":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:8131:2754":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:2681:3405":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"24:4160:3481":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"21:54:4553":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"24:4382:3497":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"6:5767:7088":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:43104:7714":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:39835:8274":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"24:4288:3490":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"18:652:5047":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:43566:8333":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:20505:33743":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:8623:78":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:42277:126":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:643:8859":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"9:421:19984":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:6753:9143":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:10304:9085":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:9038:36834":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:2298:20102":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:5779:6086":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:10932:4911":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:3244:8974":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:13506:5862":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"24:1601:3337":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"6:1514:6532":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:44150:159":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:1652:6621":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:43382:8327":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:41263:3235":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:9104:3385":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:1724:4478":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:41322:4451":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:11881:638":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"18:80:24964":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:39078:201":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:11011:5272":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:41280:3711":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:6361:6097":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:3675:8992":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:4840:9057":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"24:2939:3439":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"24:88:1868":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"2:2302:186":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:5923:7172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:6184:4888":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"22:695:231":{"crate_id":22,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"2:3630:3230":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:3520:161":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:10125:5195":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:3876:8997":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:8047:6242":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:11889:1484":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:2917:3407":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:11227:8399":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"24:4341:3494":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"6:4974:7001":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:4903:6963":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:49583:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:40047:3299":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:2319:5992":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:7518:4906":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:20673:9154":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:45054:7731":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:12516:4441":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:3225:6049":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"16:6904:6144":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"21:2401:2483":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"2:47059:7822":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:10052:21175":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:41195:179":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:41339:208":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"18:96:24965":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:1350:3231":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"24:2735:3429":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"6:573:6513":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"11:762:4527":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:42887:33709":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:9917:5191":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"18:0:2983":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:3774:4810":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:39799:7680":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:20452:33595":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"6:4715:6865":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:1738:7450":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"5:4166:4836":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:10409:8977":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:4573:7308":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:10234:14247":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"5:7098:3230":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:6218:1845":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:42299:72":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"22:834:2483":{"crate_id":22,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"2:1906:4437":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:4676:9016":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:40087:3309":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:8931:5166":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:2682:3369":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:21694:33202":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:2594:6010":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:8256:6248":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:3378:7890":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:9424:5174":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:7543:7439":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:1041:35753":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:7697:6033":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:11853:26485":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:12126:5483":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:21800:8260":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:7660:8371":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"11:1628:4807":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:2768:5031":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:9868:8297":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"11:1065:36762":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:13461:5852":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:2355:8931":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:12634:5580":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:8766:7913":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:7811:128":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"11:1859:8214":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:4881:6947":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:12835:5640":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:11585:5375":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:4636:6838":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:21333:33599":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:10936:5269":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:4445:6061":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:11875:310":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"24:3398:245":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"16:6201:20990":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:3928:9001":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:3275:4527":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:44167:8369":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:3987:33701":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:4175:3352":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:5346:6083":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:4678:9017":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:6788:7383":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:2642:6012":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:40125:8285":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"24:4904:3180":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"2:44880:7724":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:43911:8365":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:11924:5456":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:45547:7754":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:6441:4810":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:4796:6907":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:12282:5524":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"18:564:5053":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:41472:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:6293:6095":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:11820:8537":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"7:0:1530":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:44076:203":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:9068:130":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:7499:4904":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:7259:3711":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:12085:5477":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"18:538:5051":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:2967:20128":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:11483:8402":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:6639:7312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"5:6603:4535":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"16:5847:8086":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:6876:6034":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"21:0:1069":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"24:4908:3181":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"2:40069:3300":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"22:109:8004":{"crate_id":22,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"1:3444:32189":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:8443:21061":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"15:219:8456":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:11813:5435":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:12019:5200":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:3124:26870":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:47254:7831":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:10637:8385":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"5:1365:3235":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:2780:5023":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"3:0:439":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:43772:8354":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:1658:1081":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"9:325:6414":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:3982:9005":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"24:4880:3174":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"5:862:4818":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:1768:606":{"crate_id":1,"path":["std","env"],"kind":"module"},"24:5329:3205":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"6:4819:6915":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:4732:4886":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:5743:7072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:31877:8267":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"6:562:6508":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:8180:21007":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"11:751:4529":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:9628:21092":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:6712:7335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:40260:3322":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:2496:74":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"24:4961:2220":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"24:4991:3187":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"6:6836:7401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:11861:5445":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:2756:5020":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:11434:5343":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"24:4184:3483":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"7:32:19968":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"20:504:4006":{"crate_id":20,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"6:4858:6936":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:4521:6815":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:4324:3363":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"24:2684:106":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"5:3123:8214":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:679:229":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:12259:5523":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:11872:1503":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:8389:21059":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"11:725:8211":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:6728:8152":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:45569:7755":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:43595:8341":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:2502:6006":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"5:2076:4189":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:47105:7823":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"22:869:231":{"crate_id":22,"path":["proc_macro2","TokenStream"],"kind":"struct"},"1:638:8858":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:5831:7121":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:3672:8993":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:5724:8074":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:2357:8932":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"10:44:6378":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:9596:5180":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:9350:36843":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:4612:6836":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:5741:20986":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:8081:7888":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"5:6243:4529":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"24:2650:98":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"1:4898:3703":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:8979:36836":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"24:3279:1852":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"16:5594:6030":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:7014:8227":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:1453:196":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:1048:8182":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:9365:127":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"24:2616:3427":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"17:13385:5830":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:1565:3230":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:2731:3406":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:2827:4885":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"11:985:8182":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:7011:29765":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"24:2922:3438":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"5:1980:3350":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:43899:8362":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:5557:6025":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"24:2888:3436":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"2:2460:14311":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"24:4143:3480":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"24:4841:3166":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"17:10257:21163":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:4757:6070":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:6696:20993":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:8796:7914":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:9108:192":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:4810:6912":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:4461:6783":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:10672:7847":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"24:4056:3474":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"21:1403:1892":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"1:4107:9027":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:8908:4193":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:879:3231":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"24:53:1887":{"crate_id":24,"path":["syn","token"],"kind":"module"},"16:2694:6014":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:4206:3231":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"24:4888:3176":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"9:481:19981":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:1663:6629":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:41382:3231":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"11:632:3231":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:4780:6900":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"24:5155:2185":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"2:41246:1863":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"21:2526:3400":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"24:673:37193":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"2:9477:4865":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:30177:33174":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:9098:118":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:10199:9082":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:41271:3230":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:3205:8978":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:10440:21230":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:8420:21060":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:5955:7185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:1787:21112":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:4398:3366":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:10823:5129":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:9443:21087":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:29860:8995":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"22:699:3249":{"crate_id":22,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"2:5940:3326":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:11721:5399":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:7244:36791":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:5811:8080":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"24:5268:2447":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"6:4432:6772":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:8161:8987":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"24:4984:2422":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"6:4773:6898":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"24:2871:3435":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"1:5350:9080":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:13332:5815":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:49200:9182":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:43364:8326":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:12388:5538":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:688:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:20886:9146":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"6:5060:7041":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:20724:9145":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"5:264:4810":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:8250:9060":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:11884:738":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:5677:20985":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:9322:36846":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:2508:236":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:4400:6060":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:47199:7826":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:55:6233":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"6:5705:7045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:6035:7213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:2685:223":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:6488:8136":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:2886:115":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:6688:7323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:11625:14251":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:5190:4810":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:5760:4890":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:10516:5234":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:13791:5960":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:4455:6780":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:10080:21196":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"22:689:8005":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"6:4301:6693":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"24:3007:3441":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"24:4566:2022":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"2:2728:4081":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:12224:5512":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"24:4537:3148":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"24:1937:3230":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"2:7544:3292":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:45177:7736":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"24:3160:2530":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"14:165:20069":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:7922:31892":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:12576:5571":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:11476:8402":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:12419:5543":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:46399:7785":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:43749:8346":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"11:1029:8872":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"24:4868:3172":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"16:2808:6019":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:12217:34782":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:6012:7207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:39771:8271":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:2472:8969":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:6104:7228":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"15:0:2980":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:11152:8394":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:4327:6713":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:40500:3283":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:2815:3492":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:11844:5442":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:10406:8975":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:936:8867":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:46215:7783":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"24:1851:3227":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"21:2789:2195":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"6:4504:6807":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"21:2292:1804":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"2:4133:3375":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:11005:7912":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"22:816:1804":{"crate_id":22,"path":["proc_macro2","imp","Group"],"kind":"enum"},"17:10505:21231":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:2931:20127":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"24:2228:7978":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"17:13651:5920":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:2524:6007":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:21573:8254":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:4913:4836":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"0:928:1683":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"16:7317:36792":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:6717:8151":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"22:772:24986":{"crate_id":22,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"17:11502:5358":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"24:909:37198":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"17:9796:5189":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"11:1534:20063":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"5:4004:4810":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:10334:5182":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:11883:741":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:8129:21005":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"24:5476:3207":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"6:1731:6664":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:1846:8896":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:10660:8393":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"5:4136:4836":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:4510:6063":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"24:2531:3422":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"18:681:8017":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"20:235:4010":{"crate_id":20,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"16:6990:6149":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:45593:7756":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:587:6521":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"24:1068:1888":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"6:1723:6660":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"11:810:8865":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"18:671:24978":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"24:3974:123":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"11:1866:8215":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:11372:5333":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:9112:3384":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:10766:14242":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"5:2911:3442":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:11081:7923":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"24:1489:1886":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"typedef"},"2:45644:7757":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:6506:8144":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:13499:5860":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:10747:126":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:6674:34300":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:4375:6743":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:6405:4899":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:2933:21161":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:8915:26474":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:21771:33191":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"24:5454:3217":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"6:1527:6538":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:2426:6003":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"24:3812:3458":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"2:42234:6220":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:8276:7893":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:9110:27994":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"24:5034:2458":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"24:4540:3149":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"24:5427:3210":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"17:11573:5372":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:41110:33187":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"18:515:5050":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:6045:7216":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:21709:7461":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"5:1196:8182":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"24:4837:3165":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"5:3974:4529":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:3687:8874":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:22445:7475":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:50910:7845":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:2831:5028":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:3116:3231":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:8210:9031":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"11:0:2977":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"18:660:24977":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:8205:8377":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"11:353:4802":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:2764:6017":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"21:2264:3252":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"17:8195:21043":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"24:3313:3451":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"2:40157:3325":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:13249:5797":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:7652:196":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:12902:5695":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:5998:20988":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:7828:117":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:43452:8332":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:579:6516":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:2307:123":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:5381:9082":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"24:4850:3168":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"2:43282:8321":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:4986:31875":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:501:4189":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"18:719:5066":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:11220:5298":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"16:7859:21004":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:30089:4273":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:20802:7453":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:2914:2134":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:7788:7847":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"24:4479:3134":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"6:541:6497":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:11319:5326":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"18:644:5047":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:6793:8165":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"}},"external_crates":{"23":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.8/"},"20":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.26/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.56/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.15/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}