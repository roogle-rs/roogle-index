{"root":"0:0:1698","crate_version":"1.0.164","includes_private":false,"index":{"2:12103:35923":{"id":"2:12103:35923","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8:1805":{"id":"0:8:1805","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[215,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:12014":{"id":"2:12014","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12015:811","2:12016:2026","2:12017:35909","2:12018:35910","2:12020:35911","2:12023:2767","2:12024:35912","2:12025:314","2:12026:28963","2:12027:1920","2:12029:28960","2:12031:28961","2:12033:28962","2:12035:35913","2:12036:35914","2:12037:2664","2:12038:28986","2:12039:2350","2:12040:2344","2:12041:8297","2:12042:33263","2:12043:33267","2:12044:27944","2:12045:35915","2:12046:33360","2:12047:1957","2:12050:29002","2:12053:29003","2:12056:2569","2:12060:4125","2:12064:27943","2:12067:28994","2:12070:28996","2:12073:35916","2:12076:35917","2:12079:28998","2:12082:29000","2:12085:35918","2:12088:35919","2:12091:3104","2:12094:35920","2:12097:35921","2:12100:35922","2:12103:35923","2:12105:35924","2:12107:35925","2:12109:35926","2:12110:35927","2:12111:35928","2:12114:1939","2:12117:27029","2:12120:29004","2:12123:35929","2:12126:35930","2:12129:35931","2:12132:1901","2:12134:4441","2:12135:30133","2:12136:4442","2:12137:4443","2:12138:4444","2:12139:35932","2:12141:3409","2:12142:35933"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12036:35914":{"id":"2:12036:35914","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11900:1397","crate::ops::IndexMut":"2:2985:3262","str::slice_unchecked":"2:12035:35913"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12076:35917":{"id":"2:12076:35917","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11716:14372","str::split":"2:12064:27943","prim@char":"1:11894:419","str::split_terminator":"2:12073:35916"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43434:8381","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:14370","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:345":{"id":"0:63:345","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1805,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:85-0:958:1905"],"is_stripped":false}}},"2:12015:811":{"id":"2:12015:811","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11894:419"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12139:35932":{"id":"2:12139:35932","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4539:35932"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43665:8338","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12141:3409":{"id":"2:12141:3409","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4540:3409"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43674:3410","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12025:314":{"id":"2:12025:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12026:28963","`u8`":"1:11911:1499"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12114:1939":{"id":"2:12114:1939","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:14372"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5387:36582":{"id":"5:5387:36582","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5382":{"id":"5:5382","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5383:36581","5:5384:2056","5:5387:36582","5:5390:36583","5:5398:36584","5:5399:36585","5:5400:3304","5:5401:2341","5:5402:2340"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12117:27029":{"id":"2:12117:27029","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:14372"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41403:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12016:2026":{"id":"2:12016:2026","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5401:2341":{"id":"5:5401:2341","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12137:4443"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12017:35909":{"id":"2:12017:35909","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12105:35924":{"id":"2:12105:35924","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12064:27943":{"id":"2:12064:27943","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11716:14372","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11894:419","str::split_whitespace":"2:12042:33263","str::rsplit":"2:12070:28996"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43366:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12142:35933":{"id":"2:12142:35933","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4537:35933"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43683:8337","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12027:1920":{"id":"2:12027:1920","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41405:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41403:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12038:28986":{"id":"2:12038:28986","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12037:2664"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12137:4443":{"id":"2:12137:4443","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12073:35916":{"id":"2:12073:35916","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11716:14372","str::split":"2:12064:27943","prim@char":"1:11894:419","`DoubleEndedIterator`":"2:7244:121","str::rsplit_terminator":"2:12076:35917"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43416:8380","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12132:1901":{"id":"2:12132:1901","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11677:127","`FromStr`":"2:11676:3277"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41547:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11676:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11676:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12070:28996":{"id":"2:12070:28996","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11716:14372","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11894:419","str::split":"2:12064:27943"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43384:8308","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:14370","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12123:35929":{"id":"2:12123:35929","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:14372"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:14370","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5390:36583":{"id":"5:5390:36583","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12024:35912":{"id":"2:12024:35912","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12085:35918":{"id":"2:12085:35918","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41403:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12041:8297":{"id":"2:12041:8297","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43352:2780","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12031:28961":{"id":"2:12031:28961","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12056:2569":{"id":"2:12056:2569","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41405:179","prim@char":"1:11894:419","self::pattern":"2:11716:14372"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41403:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12045:35915":{"id":"2:12045:35915","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43630:8392","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12029:28960":{"id":"2:12029:28960","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41405:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41403:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12050:29002":{"id":"2:12050:29002","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:14372"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12120:29004":{"id":"2:12120:29004","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:14372"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41403:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:14370","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12067:28994":{"id":"2:12067:28994","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:14372"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11539:8307","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:983:1908":{"id":"0:983:1908","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"2:12097:35921":{"id":"2:12097:35921","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11716:14372","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11894:419","str::rmatch_indices":"2:12100:35922"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43516:8386","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12129:35931":{"id":"2:12129:35931","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:14372"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:14370","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5399:36585":{"id":"5:5399:36585","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:280:1874","`String`":"5:7241:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:280:1874","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:6990:4459","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5400:3304":{"id":"5:5400:3304","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85-0:958:1905":{"id":"0:85-0:958:1905","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[22,0],"end":[22,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"internals::case::RenameRule","name":"RenameRule","id":"0:958:1905","glob":false}}},"2:12035:35913":{"id":"2:12035:35913","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11900:1397","str::slice_mut_unchecked":"2:12036:35914","crate::ops::Index":"2:2981:2300"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12043:33267":{"id":"2:12043:33267","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12042:33263"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43649:8394","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12111:35928":{"id":"2:12111:35928","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:14372"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11741:14368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12136:4442":{"id":"2:12136:4442","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12082:29000":{"id":"2:12082:29000","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11894:419","str::splitn":"2:12079:28998","self::pattern":"2:11716:14372"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43488:8384","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:14370","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5398:36584":{"id":"5:5398:36584","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5402:2340":{"id":"5:5402:2340","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12138:4444"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12018:35910":{"id":"2:12018:35910","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12134:4441":{"id":"2:12134:4441","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:930:1686":{"id":"0:930:1686","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[92,0],"end":[97,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:12079:28998":{"id":"2:12079:28998","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:14372","str::rsplitn":"2:12082:29000"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43470:8383","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:375-0:351:1808":{"id":"0:375-0:351:1808","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[8,0],"end":[8,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:351:1808","glob":false}}},"2:12026:28963":{"id":"2:12026:28963","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11911:1499"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12042:33263":{"id":"2:12042:33263","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12043:33267"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43640:8393","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12088:35919":{"id":"2:12088:35919","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41403:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:14370","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:326-0:954:1807":{"id":"0:326-0:954:1807","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[5,0],"end":[5,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:954:1807","glob":false}}},"2:12094:35920":{"id":"2:12094:35920","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11716:14372","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11894:419","str::matches":"2:12091:3104"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43588:8390","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:14370","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12023:2767":{"id":"2:12023:2767","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11283:14373"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12126:35930":{"id":"2:12126:35930","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:14372"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12109:35926":{"id":"2:12109:35926","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12135:30133":{"id":"2:12135:30133","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39561:3411","Self::is_ascii":"2:12134:4441"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41403:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39561:3411","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12053:29003":{"id":"2:12053:29003","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:14372"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:14370","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5384:2056":{"id":"5:5384:2056","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12107:35925":{"id":"2:12107:35925","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1698":{"id":"0:0:1698","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[105,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2018\n# use serde_derive::{Serialize, Deserialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.164\")]","#![allow(unknown_lints, bare_trait_objects)]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: derive_partial_eq_without_eq, clippy ::\nenum_variant_names, clippy :: manual_map, clippy :: match_like_matches_macro,\nclippy :: needless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: let_underscore_untyped, clippy ::\nmanual_assert, clippy :: map_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:930:1686","0:931:1695"],"is_stripped":false}}},"2:12020:35911":{"id":"2:12020:35911","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12018:35910"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12037:2664":{"id":"2:12037:2664","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12038:28986"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12044:27944":{"id":"2:12044:27944","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43620:8391","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12091:3104":{"id":"2:12091:3104","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11716:14372","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11894:419","str::matches":"2:12091:3104"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43570:8389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12110:35927":{"id":"2:12110:35927","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12100:35922":{"id":"2:12100:35922","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11716:14372","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11894:419","str::match_indices":"2:12097:35921"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43534:8387","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:14370","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12033:28962":{"id":"2:12033:28962","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12138:4444":{"id":"2:12138:4444","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12047:1957":{"id":"2:12047:1957","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:14372"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12039:2350":{"id":"2:12039:2350","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11894:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43336:8374","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12040:2344":{"id":"2:12040:2344","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11894:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43342:8375","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5383:36581":{"id":"5:5383:36581","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:280:1874","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:6990:4459","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:280:1874","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:6990:4459","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:931:1695":{"id":"0:931:1695","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[100,0],"end":[105,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:12060:4125":{"id":"2:12060:4125","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41405:179","prim@char":"1:11894:419","self::pattern":"2:11716:14372"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41403:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:14369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:14370","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12046:33360":{"id":"2:12046:33360","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43658:8395","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"18:707:8086":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:7322:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:5370:9144":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:4684:6902":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:5835:7163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:7522:7487":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:13803:6023":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:21799:8318":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:9670:21261":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:47756:7898":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"11:119:4858":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:11721:14369":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"24:3800:3478":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"24:4789:3176":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"24:4892:3199":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"2:40727:3309":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:7081:3252":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:242:37121":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"24:4833:3186":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"17:13506:5923":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"24:1962:3255":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"21:2449:1896":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"24:4802:3179":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"6:4388:6803":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:41760:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"5:1454:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:45947:7816":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:9188:37119":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:12770:5650":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:1594:1864":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:9596:5241":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:11821:5498":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:1080:8840":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:6575:21142":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:2574:8852":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"21:967:4584":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"24:103:4170":{"crate_id":24,"path":["syn","token","CustomToken"],"kind":"trait"},"2:7636:35178":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:41341:8363":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:12293:5587":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"21:2264:3274":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"16:8090:8260":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:11069:21229":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:9034:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:13744:6007":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:7148:3292":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:4948:7043":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:32032:6435":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:47081:7882":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"24:343:37353":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"2:20754:9218":{"crate_id":2,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"2:2589:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:7574:7500":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:9807:9009":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:7683:6104":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:2348:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"16:8156:6106":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"24:4896:3200":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"2:39087:14404":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:2540:4942":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:7020:32493":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:43649:8394":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:5073:7099":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"3:229:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:6043:7268":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:2912:3463":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:10283:5288":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:7699:8848":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:10248:8383":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:6373:9163":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:6007:7258":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:4586:6893":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:265:4870":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:4818:6133":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:3995:9072":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"24:4242:3508":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"1:11694:4979":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:975:21247":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:41471:3257":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"24:5061:1962":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"17:10857:21227":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:40142:32729":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4799:6963":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"22:816:1816":{"crate_id":22,"path":["proc_macro2","imp","Group"],"kind":"enum"},"6:5774:7133":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:6022:21139":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:11060:5304":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:8954:28635":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:20881:9215":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:9121:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"0:931:1696":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"2:2981:2300":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:10363:4970":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:41598:3257":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:12033:5532":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:6943:21145":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"24:5488:3243":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"5:3534:3253":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:9265:21221":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:6999:3252":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:11741:14368":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:10735:5312":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:42169:3398":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"24:4271:3510":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"2:45831:7813":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:6520:6161":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"24:5317:2483":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"1:307:1449":{"crate_id":1,"path":["std","thread"],"kind":"module"},"2:41252:7752":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:46301:7826":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:10708:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:43182:14355":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:10425:9042":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:22503:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:7595:3314":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:11721:5460":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:12046:5533":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:2817:4034":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"24:0:1675":{"crate_id":24,"path":["syn"],"kind":"module"},"17:10516:5295":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"24:673:37352":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"1:11897:1049":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:2926:2148":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:44161:8429":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:8088:7950":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"24:2973:2501":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"17:1978:21279":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"11:1688:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:6254:6153":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:9641:21251":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:5963:8160":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"5:3184:1864":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:11504:8388":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:47730:7896":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:2774:5082":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:7202:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:9146:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"24:598:3252":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"2:1667:1087":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:42485:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"11:305:8271":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:12318:5590":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:10936:5330":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:11676:3277":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"21:1828:4565":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"5:6739:4907":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:6097:9300":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:1982:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:10215:9145":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:44292:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:1556:6624":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:3117:3253":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:13265:5862":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:4290:6736":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:8053:9005":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:43219:3320":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"18:531:8077":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:7317:37096":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"24:554:5069":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"22:671:3372":{"crate_id":22,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"5:815:4876":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:6717:8214":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:11544:5424":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:41212:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"5:5642:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:1787:21262":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:480:4940":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:62:14763":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:12980:5799":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:6243:37088":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"24:1883:3250":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"21:2662:3420":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"24:4850:3190":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"2:21349:9223":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"16:6201:21140":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"18:521:25129":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:11893:936":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"24:1736:8863":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"17:13651:5981":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:3911:9064":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:1846:8960":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:20994:9009":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:7792:9004":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:4663:6899":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:4435:6826":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"24:4785:3175":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"11:757:4544":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:2448:6065":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:5021:28634":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"24:5052:2477":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"22:713:1895":{"crate_id":22,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"6:532:6552":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:6351:21141":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"20:272:1904":{"crate_id":20,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"1:4414:9096":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:959:8934":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"24:885:37476":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"5:3163:35694":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:9165:3406":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:9380:21235":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:6647:7372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:12085:5538":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:4847:6982":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:8325:3728":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:247:37117":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"11:1144:8840":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:40468:3344":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:4455:6835":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:40356:3337":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:6446:4870":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"18:671:25128":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:4649:6898":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:5926:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:43658:8395":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:21851:32716":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:2862:6082":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:7169:3318":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:5032:6140":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:5798:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:11090:5337":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:5736:7106":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"18:113:25116":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:45552:7797":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:10670:5307":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:7514:4965":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:39204:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:10698:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:9628:4933":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:12236:5575":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:11455:7997":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"24:2030:3259":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"2:43818:8405":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:44398:8433":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:43144:8309":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"7:79:20124":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:7294:7482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:7164:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:11372:5394":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:8753:5222":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:7601:4219":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:5067:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:9469:21239":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:45530:7796":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:10207:14362":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:12138:5545":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"24:4085:3497":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"22:880:1896":{"crate_id":22,"path":["proc_macro2","TokenTree"],"kind":"enum"},"1:3973:9068":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:568:6572":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:39964:3410":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"24:3347:3474":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"17:11355:5392":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:11163:5347":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:11314:4976":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:41720:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:11465:8382":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"24:53:1903":{"crate_id":24,"path":["syn","token"],"kind":"module"},"2:43245:8313":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"24:4861:3192":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"2:3935:4896":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:2741:3428":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:10527:21382":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:7510:7485":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:45601:7799":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:40021:8335":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:4367:6796":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:4763:6944":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:2357:6061":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"24:2582:3446":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"17:11446:5407":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:4789:6132":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:39314:3285":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:12461:5612":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"24:5078:2472":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"2:43516:8386":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"24:2023:3257":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"2:41488:3732":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:41354:8439":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:4523:6870":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:562:6569":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"5:5908:4896":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:7572:37097":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"9:52:8523":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"24:5457:3234":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"5:4818:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:5179:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:13612:5966":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"14:160:8834":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:11843:8600":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:44282:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:9424:5235":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"24:4341:3515":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"24:5093:2162":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"17:11234:5360":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"24:335:3372":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"6:4809:6967":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:9108:37105":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:1602:6653":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:21990:9061":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:11434:5404":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:9340:21223":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:20589:34991":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:47715:7895":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:11905:643":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:4419:6821":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:10658:8450":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"24:4577:2161":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"2:21978:8326":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"24:2854:3455":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"24:5485:3242":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"2:40051:3410":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:9111:3404":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"21:2727:3419":{"crate_id":21,"path":["proc_macro","LineColumn"],"kind":"struct"},"2:47581:7888":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"18:599:5073":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:3142:21314":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:4753:6938":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:12126:5544":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:9886:21281":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:4832:6975":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:44101:8424":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:10761:21225":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:8109:8263":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:12331:5592":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:6919:37086":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:1981:3372":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:9148:37127":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:5104:6142":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"14:187:20226":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"22:874:1895":{"crate_id":22,"path":["proc_macro2","Span"],"kind":"struct"},"17:9696:5237":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:4793:6960":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:7557:6252":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:3142:14454":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:45446:7793":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:40333:8348":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"24:4353:3516":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"1:1589:8278":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:4255:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"24:3109:212":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"16:2742:6077":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:20782:4479":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"5:7044:3252":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:5693:9162":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:8974:7982":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"22:695:233":{"crate_id":22,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"16:2470:6066":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:4104:9090":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:7827:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:7608:7507":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:7596:4217":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:5000:6139":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"24:925:3212":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"2:42442:6281":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:10615:8110":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"5:783:4873":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:40158:8345":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:9826:21256":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:4427:6823":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:10663:8437":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"24:4781:3174":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"16:6728:8215":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:6367:3252":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:9617:21243":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:7652:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"24:4114:3499":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"2:21344:9213":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:2933:21311":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:12902:5756":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:8147:2780":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"22:941:1827":{"crate_id":22,"path":["proc_macro2","Ident"],"kind":"struct"},"6:5966:7238":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"22:825:1827":{"crate_id":22,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"17:13443:5909":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:6296:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:8742:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:11919:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"20:150:3754":{"crate_id":20,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"24:1506:3362":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"1:3782:9059":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:9488:21248":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:8072:8257":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:5779:6147":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:13516:5928":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:7249:7468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"24:5361:3225":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"1:10853:27214":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:13292:5866":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"11:2212:6436":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"24:5031:2242":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"14:215:8265":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"24:3211:2287":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"1:8844:9172":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:936:8931":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:3753:4542":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"6:4943:7041":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"24:5445:3232":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"24:3143:3468":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"2:47794:7900":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"24:4816:3182":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"16:6361:6158":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:12345:5593":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:4567:6892":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:22305:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:3458:9007":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:4962:7049":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"24:4956:62":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"16:7519:8251":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:9228:37110":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"13:226:6432":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:12522:5626":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"11:1071:37049":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:12576:5632":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"21:1029:3421":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"2:8255:3734":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:4517:6867":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"18:96:25115":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:4737:4946":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:10728:27210":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:6248:4544":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:5811:8143":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:43434:8381":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:4928:7032":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:947:8932":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:39561:3411":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"24:1332:3376":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"7:32:20117":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:46379:7842":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:47675:7891":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:875:8274":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:4907:7017":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:2616:6072":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:4937:7038":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:4096:9089":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:4474:6843":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:1895:8849":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"5:4137:4896":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"9:0:2997":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:6482:8854":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:2922:2236":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:8109:9008":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"24:5322:2197":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"5:7030:35702":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:9068:37107":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:13211:5849":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:11913:1497":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:6678:3329":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:8256:6309":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:4555:6883":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"21:2658:3271":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"2:2805:3500":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:43588:8390":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:40376:3338":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"24:4143:3501":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"24:3194:3469":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"24:5356:3226":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"6:4769:6947":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:731:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:4677:6900":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:4482:6848":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"21:184:4191":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"11:1879:1864":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"24:4888:3198":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"6:4817:6971":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:6981:21146":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"21:2037:4566":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"1:3208:9042":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:13667:5985":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:6101:4955":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:9817:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"24:2735:3450":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"5:1995:8938":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:2856:5091":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:4314:6753":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:1701:6718":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:11993:5524":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:42507:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:41298:1895":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:867:3252":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"24:4846:3189":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"17:8256:21191":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:11422:5403":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:1413:8275":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:41389:7760":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:41521:3733":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:618:8847":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:680:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"24:1533:2789":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"24:5074:3210":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"2:39353:7617":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"24:4916:3205":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"2:43534:8387":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:13332:5876":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"24:4912:3204":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"22:869:233":{"crate_id":22,"path":["proc_macro2","TokenStream"],"kind":"struct"},"2:46661:7847":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:12592:5634":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:420:5176":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:4637:6897":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:43630:8392":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:2843:5089":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:8674:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:45653:7801":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:8573:21215":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:2758:5079":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:11378:9057":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:41880:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:500:6529":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:11909:744":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"24:3904:3485":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"24:4574:2040":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"24:4453:3646":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"2:7206:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:3182:35320":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"24:5347:3227":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"17:9138:21219":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:12915:5763":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:1708:6721":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:2808:6080":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"24:3381:3476":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"24:5477:3240":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"14:40:1827":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"22:946:2502":{"crate_id":22,"path":["proc_macro2","Literal"],"kind":"struct"},"1:8248:7955":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"24:4974:1835":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"2:42402:7764":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:13041:5806":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:44097:8423":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:2546:6069":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"24:5440:3231":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"24:4854:2163":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"6:573:6574":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"18:699:8084":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:7321:4542":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:43674:3410":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"22:14:25167":{"crate_id":22,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"2:39991:32730":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:42692:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:2550:4929":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:1574:6634":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:10545:5300":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:7711:6259":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:13842:6032":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:4916:7023":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:9613:4929":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:2696:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:8490:21212":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:40735:3311":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:47411:7885":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"11:1091:20210":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:6506:8207":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:41615:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:13024:5804":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:6076:7277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:21957:8323":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:2847:5087":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:6854:6200":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:554:4213":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:1747:7515":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:11506:8465":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"24:4807:3180":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"17:10598:5331":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"23:0:3125":{"crate_id":23,"path":["unicode_ident"],"kind":"module"},"21:2810:1827":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"1:6409:4959":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:10691:21383":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:7014:4544":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:11916:789":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:42714:8369":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:2509:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:474:1817":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:11399:9059":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:2796:5085":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"18:481:8075":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"21:2789:2209":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"2:46425:7843":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:8876:9173":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"11:326:4860":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:4005:4870":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:8129:21155":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:7478:6099":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:8931:27030":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:46691:7848":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:9409:14433":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:2768:5081":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:7743:6092":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"24:258:8833":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"2:32159:4105":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"24:869:37481":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"2:45400:7791":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:11907:742":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:5741:21136":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:3210:9043":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"22:975:3252":{"crate_id":22,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"2:43965:8413":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:8360:21208":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:46120:7822":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:44085:8420":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:4574:7365":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:8177:9052":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:12312:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:44105:8425":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"21:2600:3423":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"2:20921:9222":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"24:2701:3449":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"17:13777:6014":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:9989:3257":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:45356:7789":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"24:5503:2241":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"1:7650:8925":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:1572:4542":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:11253:14504":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:2211:4487":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:1931:653":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:2749:4104":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"11:991:8245":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"22:735:2502":{"crate_id":22,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"17:13763:6012":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:6774:7422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"24:1405:1900":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"16:6793:8228":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:2614:9035":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:11428:8377":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:9163:3405":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:901:4544":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:1314:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:2788:5083":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:5320:9141":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:47223:7883":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:888:8275":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:7803:6267":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:3933:9066":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"24:1035:1827":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"2:3163:14406":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:10681:8114":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:4972:7055":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:1568:4544":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"11:821:8930":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:7465:1908":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"24:4490:2024":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"2:47779:7899":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:7577:4229":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:6719:7384":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:6767:8227":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:43978:8417":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:2963:4452":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:5886:8151":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:1382:3252":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"24:4837:3187":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"1:2869:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"24:2803:3453":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"2:10775:14358":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:41590:3253":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:1535:6609":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:2387:3009":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:4:1014":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"24:4900:3201":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"6:4605:6894":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:3648:3252":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:3680:9057":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:5991:3348":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:20772:9214":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"2:2784:3281":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:13469:5915":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:5571:6089":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:8788:5223":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"24:5002:2441":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"6:7528:7488":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:10580:8108":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"24:4928:1850":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"2:2812:5072":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:6662:8213":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:6704:7379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:5472:4896":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:6819:6196":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:2522:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:844:3253":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:7787:4728":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"5:2908:7511":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:12433:5606":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:6868:6202":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"24:2650:99":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"1:8097:7951":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:1680:6708":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:2169:36661":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:8180:21157":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:6870:8857":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:5570:4949":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:154:4855":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:12609:4458":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"9:445:20131":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"20:148:3755":{"crate_id":20,"path":["quote","__private","HasIterator"],"kind":"struct"},"1:8214:8439":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:13453:5912":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:7551:7494":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"18:614:37132":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:8918:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:4534:6875":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"7:0:1543":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:11891:5509":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:6307:6085":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:8679:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:45977:7817":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:21928:32719":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:8389:21209":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"24:5289:2182":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"2:42907:7776":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:11410:5400":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:13461:5913":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:13344:5882":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:39228:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"24:1910:3251":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"16:7837:8253":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"24:4423:3521":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"16:5677:21135":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:4023:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:4886:7002":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:7244:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:4047:3257":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:2932:3430":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:13865:6036":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:5643:8130":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:2636:7512":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"24:4570:2038":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"17:9498:5237":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"21:108:4575":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"2:9155:2293":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:46045:7820":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"11:1524:20212":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:4983:7061":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:4436:9097":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"24:2599:3447":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"17:12419:5604":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"24:2684:108":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"6:5766:7131":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:12835:5701":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:44356:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:4510:6124":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:41539:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:11902:5510":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"5:6990:4459":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:2378:6062":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"9:234:7772":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:4728:6925":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"24:5472:3239":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"2:4264:3379":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:6035:7266":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:386:21204":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:40059:8338":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"19:0:1031":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:9392:4969":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:3079:3276":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:8823:5224":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"22:925:1894":{"crate_id":22,"path":["proc_macro2","Spacing"],"kind":"enum"},"17:11800:5494":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"21:649:3424":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"2:3157:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:40078:8339":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:9149:112":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"24:4979:2239":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"5:7089:3252":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"11:1035:8936":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:11860:8559":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"24:2990:3461":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"2:21866:7526":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"18:727:5130":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:8736:9148":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"24:4880:3196":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"3:0:443":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"11:703:8544":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:1544:4896":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:9028:21217":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:5239:14348":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:45631:7800":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:12517:4938":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:13857:6033":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"24:4794:3177":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"2:2898:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:7060:8291":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:7599:3315":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:10039:21309":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:5944:21137":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:12282:5585":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:47473:7886":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:12361:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:10080:21346":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:1565:3252":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:21095:9009":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:6066:7274":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:4399:4898":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:5057:7096":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"21:2769:3273":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"20:0:1106":{"crate_id":20,"path":["quote"],"kind":"module"},"6:4871:6996":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:40447:3343":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"24:4824:3184":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"17:11861:5506":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:9039:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"24:4329:3514":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"24:5460:3235":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"6:6027:7264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:5439:9146":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:1947:21257":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:3152:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:4112:9091":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:14:2639":{"crate_id":2,"path":["core","write"],"kind":"macro"},"24:5173:2199":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"5:7241:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:39173:8331":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:2515:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:5881:7184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"24:2871:3456":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"24:3870:3483":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"24:4566:2036":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"5:3622:4870":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:8798:9174":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:1648:6690":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:7136:3291":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:40315:3333":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:11573:5433":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:11911:1499":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"21:2351:1827":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"16:7767:21153":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"22:895:1816":{"crate_id":22,"path":["proc_macro2","Group"],"kind":"struct"},"1:11918:1126":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:5007:7068":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:8166:9056":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:5919:7212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:9299:33359":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:21912:32754":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:4445:6122":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"18:0:3005":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:2215:8989":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:5346:6144":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:7476:8858":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:6671:6184":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:13721:6006":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:11900:1397":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:2372:9001":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:8961:8555":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:47741:7897":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:6014:7260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"18:636:5126":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:8548:21214":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:42430:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:30284:4290":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:6624:7354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"22:699:3271":{"crate_id":22,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"2:21455:34585":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:5876:7183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:12563:5631":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:4046:4451":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"11:1847:4544":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"24:2633:1874":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"2:4812:795":{"crate_id":2,"path":["core","iter"],"kind":"module"},"24:4935:2300":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"17:9866:21274":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:1716:6725":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:6842:4962":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:39979:8334":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"11:2076:8935":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:587:6582":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:11785:5489":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:5067:7097":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"11:744:8275":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:11556:5425":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:10468:4216":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:7844:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:11168:8457":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"24:3991:3490":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"11:1843:3252":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:6710:7381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:43998:8418":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:6085:4938":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:10169:8308":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:1422:8929":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:4366:4896":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:7860:8853":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:43416:8380":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:1042:36714":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:6552:4960":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:40066:14422":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:579:6577":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:9883:8360":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:13564:5965":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:9796:5250":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"24:2081:2439":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"2:42722:8370":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:0:816":{"crate_id":6,"path":["libc"],"kind":"module"},"17:13082:5819":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:13101:5820":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"24:1338:37340":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"2:21783:7521":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"24:549:128":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"1:9087:8447":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"8:0:2996":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:7224:8298":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:8485:3253":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:7539:7492":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:20816:9220":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"24:2718:116":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"1:7852:27807":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:953:8933":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:10440:21380":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:3325:3305":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"9:325:6475":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:39188:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"18:755:8093":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"24:4411:3520":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"9:174:8534":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:1568:6632":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"24:5482:3241":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"1:6621:28615":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:21:681":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:43570:8389":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"18:681:8080":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:3355:4896":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:7757:8252":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:1821:3395":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:1433:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:20950:9208":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"24:3245:1813":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"2:41606:3252":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"24:917:3211":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"17:12622:5304":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:880:3253":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:4074:31256":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"11:1852:4542":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:12299:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:21730:8317":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:9853:21303":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:40324:3334":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"11:731:8274":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:22569:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:1662:6701":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"11:665:3252":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"18:719:5127":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:10290:14363":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"18:736:25125":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"21:2794:1894":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"21:2764:1816":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"24:3841:3481":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"24:5273:3222":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"24:5364:1813":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"2:43801:8404":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:4390:3387":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:43944:14385":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:7165:3319":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:2753:3280":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:3939:9067":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"11:1561:20214":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:4872:6135":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"24:3812:3479":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"24:4517:1841":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"17:10967:5331":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:3775:4870":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:6981:3300":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"14:7:8834":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:10743:21224":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:5976:8121":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:8214:2579":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:3197:3392":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:20561:34581":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"16:6696:21143":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"24:1954:3253":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"2:42704:7772":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"6:6725:7385":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:547:6561":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:3168:9040":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:7868:3372":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:4679:9078":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:21100:9209":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:6369:3301":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:11283:14373":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:2967:20278":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:6132:8185":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"21:2815:2502":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"2:45901:7815":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"11:1009:8935":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"11:2192:1816":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:10000:5315":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:13499:5921":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:4624:6128":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"24:4003:3491":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"17:13135:5832":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:10589:8109":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:7509:6100":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:3749:6114":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"18:507:5108":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:7804:7910":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:2985:3262":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:40482:3345":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:42467:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"11:652:3257":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:0:3004":{"crate_id":17,"path":["object"],"kind":"module"},"16:3446:6112":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:541:6558":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:7449:21149":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:7016:8238":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:2312:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"24:4938:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"6:1689:6714":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:13316:5874":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"18:80:25114":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:6572:7326":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:11914:1498":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:562:1908":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:4861:6990":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:4728:6130":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"15:180:20232":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:487:21205":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"24:608:3253":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"24:1601:3359":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"2:30314:32744":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"22:505:3271":{"crate_id":22,"path":["proc_macro2","LexError"],"kind":"struct"},"14:0:3001":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:9959:8097":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:2827:3513":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"24:126:1816":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"2:40457:3327":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:2077:4206":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:8924:4210":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"11:859:8933":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:10068:21345":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:39970:8333":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"24:1089:1904":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"2:30372:32743":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:11539:8307":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"21:1205:196":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"1:3135:27801":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:46069:7821":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"11:840:8932":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:7042:8243":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:9104:28637":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"1:6009:4951":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:13145:5833":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:6840:7456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:5954:7233":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:41530:4468":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"9:502:6498":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"11:359:4862":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:5043:7090":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"18:660:25127":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:6133:8556":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:1630:6678":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:7635:6256":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:39270:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:22404:4220":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"5:4167:4896":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:8420:21210":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"11:97:8267":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:7005:8290":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"24:4015:3492":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"16:8142:21156":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:9443:21237":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:2691:3427":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:6431:8197":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:8988:26532":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:10569:8104":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:11917:1553":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:9973:8098":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:44113:8427":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:2746:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:2512:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"24:2514:3522":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"5:3547:3257":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"21:141:4578":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"2:42162:2293":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:44373:8432":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:5079:7102":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:3999:33358":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"22:797:37278":{"crate_id":22,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"24:5327:2282":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"6:1544:6615":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:44121:7783":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"5:863:4878":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:3585:6113":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:4412:6817":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"24:3041:3464":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"2:43470:8383":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:9683:21260":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:11832:5501":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:4954:7044":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:413:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:46455:7844":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:7814:8438":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:5862:7182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:7859:21154":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:1844:4619":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:2830:6081":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:5708:8135":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:42926:8372":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:22272:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:5817:7151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:10006:26892":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"5:3975:4544":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:1034:21249":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"5:1078:36712":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:6558:8209":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:20780:33623":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:13639:5978":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:3170:9041":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:40205:4918":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:11969:5523":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:44109:8426":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:4145:3397":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:5724:8137":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"11:1859:8276":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:7462:7483":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"18:574:5108":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:40295:3331":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:41454:1875":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:4303:6745":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:2407:7509":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:4841:6981":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:9159:3408":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:4379:6798":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:39374:33356":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"5:5818:4902":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:45468:7794":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:11258:5374":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"20:235:4031":{"crate_id":20,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"11:1839:3253":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:7671:4609":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"24:2616:3448":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"1:2362:8996":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"24:1443:25151":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"11:2219:3291":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:8718:5221":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:1924:8972":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:3030:6107":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:11892:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:43162:14356":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:9044:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:41269:9053":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:5686:9161":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:13219:5852":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"24:826:3358":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"20:45:3130":{"crate_id":20,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"2:20608:34990":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"24:901:37479":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"21:2401:2502":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"1:5499:7275":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:3132:27805":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"24:88:1880":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"1:11901:1481":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"6:4703:6914":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"24:4537:3170":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"5:6607:4550":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:13257:5860":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"5:5834:14737":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:530:4211":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:13659:5984":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:41318:32717":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"15:198:20233":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:1630:588":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:21573:9211":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:2163:4480":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"6:5848:7172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:9312:21222":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:10718:7951":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"24:3228:234":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"6:488:6524":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:11193:5351":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:9748:5243":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:7022:4881":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:8651:5218":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:2738:4101":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"11:638:3253":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:6488:8199":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:4207:3253":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:2518:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:32072:8330":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:12403:5603":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"0:0:1698":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"2:2161:4479":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"16:3640:5138":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:2594:6071":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"9:481:20130":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:10056:2190":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:2242:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"16:7596:21151":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:43193:7777":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:4176:9093":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:5764:4950":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:7697:6094":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:10653:8448":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"5:1242:8840":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:43172:8312":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:8153:8305":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:5024:7076":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:7622:4216":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:8172:9055":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:11653:5456":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:11009:7974":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:2695:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:5828:7159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:5305:6143":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:43093:33333":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:8971:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:22536:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:12607:5638":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"24:2667:2281":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"17:11339:5388":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:10402:21369":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:2694:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:22239:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"22:766:3274":{"crate_id":22,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"6:6021:7261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:7181:8292":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:2642:6073":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"24:4027:3493":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"17:3266:21330":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"11:768:4542":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"6:4549:6881":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:506:6532":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:6804:7439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:11895:1515":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:10885:8117":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:46221:7825":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:1733:4495":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:3247:9038":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:7529:6101":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:44089:8421":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:40125:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"24:4841:3188":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"2:46167:7823":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"24:2837:2148":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"1:11865:8927":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"20:10:3129":{"crate_id":20,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"1:8782:7976":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"5:6597:4549":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:11585:5436":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:4639:9123":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:11216:8460":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:2344:4470":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:911:4542":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"24:1133:8036":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"1:6332:28615":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"14:165:20219":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:8360:14369":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"24:93:9009":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"1:5334:9142":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:8140:3344":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"11:0:2999":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"5:7052:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:6597:7344":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:8433:9136":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:6188:4948":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:6876:6095":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:7557:7495":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:21002:9212":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:6772:3295":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"24:3364:3475":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"17:11502:5419":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"24:5498:3230":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"6:494:6527":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:43893:8407":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"21:2744:3421":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"17:9721:21259":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"21:2749:1896":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"6:526:6549":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:7516:7486":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:10104:5254":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:6129:7288":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:7626:21152":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:10316:5290":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"18:491:8076":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:4445:6832":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"21:998:233":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"5:1463:8937":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"20:77:1897":{"crate_id":20,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"17:8953:5228":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:45422:7792":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:2822:5071":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:40693:3301":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:3374:14387":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"6:6606:7345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:44343:7786":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:689:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"24:5026:3208":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"17:10923:8118":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:10014:8305":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:7683:8962":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:43352:2780":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:1404:8274":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:40385:3325":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:45801:7812":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:46725:7849":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"24:1140:8040":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"2:43310:7779":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"24:5134:2030":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"16:6400:8195":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:9190:4619":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"24:3887:3484":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"1:4681:9080":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:1432:8543":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:43620:8391":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:0:1389":{"crate_id":1,"path":["std"],"kind":"module"},"17:10897:5329":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:40702:3303":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:1228:8935":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"21:405:37197":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"17:10705:5308":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:8025:3156":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:5986:7246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:11910:740":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:9068:7987":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:5532:3335":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:43264:8314":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:8221:8440":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:12098:5540":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:39346:14455":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"24:4382:3518":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"24:4556:1832":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"5:3150:8278":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"13:110:37051":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:1499:6593":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:4702:6129":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:43366:8305":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:1048:8245":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"24:3279:1864":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"5:1612:4870":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:12386:14431":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"5:3521:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:4495:6854":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:2851:5090":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:6564:7321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:1351:3253":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"24:4868:3194":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"18:766:25126":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"21:2653:233":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"5:2189:8287":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:20606:34988":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"24:842:9009":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"11:816:8929":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:4011:33355":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:12554:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:43772:8396":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:8842:35177":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:11337:9058":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:5557:6086":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:11942:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:5386:5218":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:40496:3346":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"24:4440:2495":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"24:5491:3228":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"21:2623:8074":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"2:6921:3298":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:11249:8463":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"21:2666:3252":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"1:2206:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:13488:5920":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"24:1937:3252":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"24:4798:3178":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"2:43232:14352":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:6155:7303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:1443:8544":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:2469:9009":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:8292:7956":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:9917:5252":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:11908:743":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:40255:3321":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"11:2060:8245":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:47832:7902":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:9653:21273":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:2839:5088":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:7271:7469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"11:783:4866":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:3169:14405":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"24:3858:3482":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"2:21677:8316":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:6179:8503":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:9049:7986":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:7411:6250":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:13181:5838":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:4568:6126":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"22:899:3273":{"crate_id":22,"path":["proc_macro2","Delimiter"],"kind":"enum"},"24:1851:3249":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"11:675:8543":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:13240:5857":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:41463:3253":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:4757:6131":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"24:1448:25152":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"6:6849:7459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:40408:3340":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"24:551:8035":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"17:12496:5624":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:11716:14372":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:43324:8373":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"24:1487:3265":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"5:6764:4914":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:13625:5972":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"24:5466:3238":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"17:8858:5225":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:11520:5420":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"24:909:37480":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"17:10270:21312":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:6061:20251":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:9876:5106":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:13066:5816":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:5889:7189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:1561:3253":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:4642:9096":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:10626:8111":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:12259:5584":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:1494:6591":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:11844:5503":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:10688:7910":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:6819:7444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:7211:8295":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"9:421:20133":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:4625:6896":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:6589:2624":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:10798:21226":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:5920:8157":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:1467:2238":{"crate_id":2,"path":["core","mem"],"kind":"module"},"17:12449:5610":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"11:1866:8277":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:3815:6116":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:9218:5243":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:12483:5623":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:4114:3396":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:40043:8337":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:1916:4454":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:10660:5304":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:4400:6121":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"10:44:6439":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"12:0:3000":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:7533:4967":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"22:723:1816":{"crate_id":22,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"1:4683:9081":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:501:4206":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:13169:5835":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:5590:3324":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:9545:5213":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:8768:7975":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:40111:7746":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:8310:21207":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:20891:4479":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:9157:3407":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:43930:8408":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:41800:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:5910:4948":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:8860:9171":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"24:4126:3500":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"1:6538:9168":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"11:1873:8278":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:8283:21206":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:13426:5905":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:46875:7850":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:9839:21255":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"11:1050:20209":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:45570:7798":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"9:388:20132":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:7665:8926":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:7467:8246":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"20:407:3913":{"crate_id":20,"path":["quote","__private","RepInterp"],"kind":"struct"},"16:2905:6084":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:6294:4870":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:8632:21192":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:1672:6707":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:39292:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:43750:14384":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:5035:4902":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:5616:8126":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:3677:9058":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:4739:6932":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"18:690:8083":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:9628:21242":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:10712:21384":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"24:5494:3229":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"24:3974:125":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"5:3276:4542":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"6:6867:7462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:43640:8393":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:8899:7981":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:3465:9026":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"24:3177:1842":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"2:41960:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:595:6587":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:9478:21250":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:2905:2067":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:7103:7982":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:2744:1853":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:4394:6805":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:11532:5423":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:11201:7996":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:13477:5916":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"24:4479:3156":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"17:9523:21245":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"21:2614:3422":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"6:6833:7453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:3383:7953":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:10354:5292":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"24:5462:3236":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"2:8847:8546":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:3925:9065":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:7545:7493":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"24:5286:2466":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"2:39248:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:10134:14365":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"21:0:1075":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"1:4845:9121":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"24:2905:3458":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"2:3318:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:13309:5873":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:1062:8935":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:2706:2428":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:2867:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:21119:9009":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:11282:1827":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:12158:5548":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:40235:3320":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"24:3075:3466":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"17:11011:5333":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:3615:9054":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:6578:4548":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:10092:21347":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:5563:4948":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:9965:3253":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:2360:8995":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"24:4394:3519":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"2:40215:8987":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:10808:14359":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"5:3124:8277":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:12894:5753":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:2764:6078":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:6135:7289":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:4823:6972":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:45853:7814":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:13015:5800":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:46615:7846":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"24:3126:3467":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"1:5719:8552":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:40398:3339":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:13879:6039":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"24:5178:3220":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"17:11615:5448":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"24:5047:2474":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"2:20591:34993":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:11078:7995":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"6:4780:6955":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:8270:7354":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:13419:5904":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:5247:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:2911:3393":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:4615:6895":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:10948:4972":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:2720:6076":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"24:4225:3507":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"2:47535:7887":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:8047:6303":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:1213:8936":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:4505:6861":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:40277:3322":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:1732:6730":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:4480:6123":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:7504:7484":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:55:6294":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"2:40130:8344":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"13:0:2994":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:40708:3305":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"24:4056:3495":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"2:46023:7819":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:7266:8842":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:11243:8462":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:44173:14544":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:11876:27216":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:6904:6205":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:6336:8191":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:20548:4114":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:1594:6648":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:10125:5256":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:4381:3386":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:5655:6090":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:10491:21354":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:9534:21244":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:11220:5359":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"10:36:6438":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"5:780:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"20:37:2872":{"crate_id":20,"path":["quote","format_ident"],"kind":"macro"},"17:10465:21356":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:8979:37106":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:2506:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:7498:8250":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:8909:2780":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:4854:9122":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:45500:7795":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:5354:9143":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"22:689:8068":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"18:609:37139":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:4256:9094":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"0:930:1688":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"1:7703:1983":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"24:3007:3462":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"17:13689:5991":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:676:8924":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"16:2931:20277":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"14:202:2337":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:13121:5828":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:41640:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:535:8120":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:3292:9031":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:3249:9039":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"24:5283:190":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"17:10142:21348":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:4760:9077":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:12388:5599":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"24:2164:9009":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"1:926:8544":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:9009:7985":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"24:4543:1844":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"1:10841:9146":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"6:6617:7350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:12634:5641":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:10416:21378":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:30848:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:42675:8367":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:4786:34376":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:42458:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:8240:9056":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:2800:5086":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"5:4914:4896":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:10052:21325":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:11231:8599":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:2906:35536":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"22:792:8069":{"crate_id":22,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"1:5502:9147":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:8831:7978":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:13249:5858":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:42922:8371":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:30300:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"5:1197:8245":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:13399:5898":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:6293:6156":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:7195:32729":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"20:239:4033":{"crate_id":20,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"1:11915:1495":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:6725:33361":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:4336:4898":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:2319:6053":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:2264:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:12799:5670":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:11499:8465":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"22:806:1895":{"crate_id":22,"path":["proc_macro2","imp","Span"],"kind":"enum"},"6:6670:7373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:4845:6134":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:12072:5536":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:4853:6985":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:1768:610":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:6544:6093":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:2692:3391":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:10015:21343":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:43274:14360":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:2477:9034":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:7215:3317":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:11924:5517":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:5993:7247":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"22:772:25136":{"crate_id":22,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"2:43488:8384":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"21:1072:1895":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"24:4924:3207":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"16:8269:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"11:2087:8936":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:10832:6495":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:12224:5573":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"24:5142:3218":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"17:11946:5518":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:12510:5625":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:11641:5453":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:1589:6646":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"24:4160:3502":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"24:893:37477":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"16:7669:6103":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:21443:7520":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:8195:21193":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"18:590:5115":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:2346:8992":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:12536:5627":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:11174:9151":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:21571:9009":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:2786:6079":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:7488:8249":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:1366:3257":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:11474:7998":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:8266:9124":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:3440:3404":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"24:1068:1904":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"1:8790:3253":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:12372:5597":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:11600:5442":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:45690:7803":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:12006:5527":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"20:281:1904":{"crate_id":20,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"24:286:37346":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"1:4564:9067":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:3983:9069":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"20:504:4027":{"crate_id":20,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"16:6390:8194":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"24:3921:3486":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"1:10871:7976":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:12959:5794":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:10232:26888":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"24:4920:3206":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"2:41547:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:2404:6063":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:2317:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:46537:7845":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:4747:6936":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:10422:9040":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:8806:3252":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:47657:7890":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:13356:5883":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:10634:9125":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:2780:5092":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"24:4812:3181":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"16:5071:6141":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"24:3296:3471":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"16:4037:6119":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:8130:3330":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:4596:6127":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:8170:8264":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"24:2565:3445":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"1:7576:9009":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:22338:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:11736:14370":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"18:564:5114":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"24:2769:3452":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"2:11787:14378":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:9387:9004":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:41920:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"22:834:2502":{"crate_id":22,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"21:434:4853":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"1:4125:9092":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:5402:5219":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:43384:8308":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:40433:3342":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:3872:6117":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"24:2218:9009":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"17:9275:37116":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"18:538:5112":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:5235:14347":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:653:15173":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:1526:6604":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"24:5058:2866":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"2:47695:7893":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:6743:7396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:7335:37068":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:4321:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:10478:21355":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:5797:8142":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:42040:8548":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"24:2228:8041":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"2:47704:7894":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:2151:589":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:47871:7903":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:5014:7071":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:10057:8307":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:13678:5990":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:11151:4974":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"11:279:8268":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:9566:21221":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:43665:8338":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:9557:5243":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"24:2820:3454":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"16:3899:6118":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:40717:3307":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:4259:3378":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:21839:8321":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:8160:8391":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:10428:9038":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"22:783:233":{"crate_id":22,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"16:5693:8132":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:9933:8094":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:40172:8974":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"2:3234:3394":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:10144:9150":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:21964:7539":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:9409:21236":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:585:2306":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"24:3092:3385":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"16:7244:37070":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:1505:6596":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:7938:28636":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:8226:9095":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:6164:8188":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"24:4820:3183":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"17:9946:8096":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"24:5009:3209":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"16:3225:6110":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:43866:8406":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:9772:5248":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:11097:7986":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:40085:8340":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"24:5146:3213":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"24:547:210":{"crate_id":24,"path":["syn","error","Result"],"kind":"typedef"},"2:21128:7518":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:30053:9060":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:12358:5594":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:4894:7007":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:12019:5261":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:2572:6070":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:9151:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:11906:745":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:40679:3299":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:1519:6601":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:43254:14361":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"24:4044:3494":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"6:119:14817":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:45671:7802":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"24:4773:3172":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"16:3063:5134":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:11021:7975":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:13159:5834":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:6236:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"24:4317:3513":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"6:5798:7149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:11299:5377":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"11:2198:6433":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:11879:5507":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:12334:33715":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"22:729:1827":{"crate_id":22,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"2:44385:4457":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"5:5485:4548":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:8393:7772":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:3449:26492":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:6236:8502":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:1756:4494":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:13233:5855":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:10828:8848":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:8254:3735":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:1695:6717":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"24:4172:3503":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"2:44117:8428":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:4326:3384":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:10428:21379":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"24:4884:3197":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"17:12646:5648":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"5:3158:8276":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:4508:9114":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:47333:7884":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:4878:1001":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:11060:7987":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"24:3024:3463":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"2:43153:8310":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:4468:6840":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"21:245:37196":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"2:30478:32757":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:12307:5589":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:5384:4896":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"16:5418:6145":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:10989:5300":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:11894:419":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:40417:3341":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:1785:8945":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"24:4876:2090":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"24:2211:2504":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"17:8521:21213":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"15:0:3002":{"crate_id":15,"path":["addr2line"],"kind":"module"},"24:877:37478":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"24:3950:3488":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"18:624:37130":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:41377:7759":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:5385:9145":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:9414:8304":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:13194:5844":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:10937:4971":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:43955:8409":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"21:1403:1908":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"17:9822:21267":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:30876:4114":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:6935:21144":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"5:35:4460":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:1985:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"24:1491:3361":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"24:4184:3504":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"5:5191:4870":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:42683:8368":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:8667:5219":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"24:5188:3221":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"17:13433:5906":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"24:3058:3465":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"24:3783:3477":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"21:368:4569":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"2:41403:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:2426:6064":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:9126:28547":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:9322:37126":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:41235:7750":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:361:4228":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"5:4732:668":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"4:0:2995":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"11:2204:37043":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:7585:7501":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:12059:5535":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:2087:8280":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:40264:3330":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"24:4864:3193":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"2:42667:8365":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:9380:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:2298:20252":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"18:515:5111":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:47619:7889":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:13324:5875":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"24:4508:3157":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"17:9038:37118":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:3881:9062":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:4462:6838":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:6890:6096":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"11:399:37046":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:4991:7063":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:11037:21228":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"22:350:3271":{"crate_id":22,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"2:2833:3515":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"24:1761:1821":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"2:2354:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:4400:6808":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"9:352:20146":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:643:8923":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:10635:5303":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:4410:3388":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"24:4904:3202":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"14:31:8834":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:5998:21138":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:2337:6055":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"24:3398:247":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"17:13033:5805":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:5978:7245":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:22470:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:8754:7974":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:1637:6682":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"24:4857:3191":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"17:11628:5452":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:40347:3336":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:6321:8518":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:2929:3429":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:6535:4857":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:8416:7968":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:46198:7824":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"24:4872:3195":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"11:1126:20211":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:3060:9045":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"16:7029:8240":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:9895:21280":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:6460:6088":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"5:280:1874":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"24:4908:3203":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"2:32068:1983":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"11:60:37045":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"24:2939:3460":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"17:10505:21381":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:21891:32755":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:10334:5243":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:6218:1857":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:45376:7790":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:10555:8100":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:9161:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:7563:7496":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:8475:8441":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:930:8930":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:7267:3316":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:9907:5251":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:123:14818":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"24:151:1880":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"24:844:5076":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"24:4777:3173":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"24:2922:3459":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"6:4327:6763":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:44300:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:4990:28634":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"24:2888:3457":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"1:11899:1367":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:4373:6797":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:482:6521":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"24:5138:3214":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"16:3300:6111":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"21:54:4568":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"1:8812:7977":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:6146:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:1583:8277":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:8443:21211":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:10747:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:3088:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:25859:7542":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:6442:8198":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:11459:5409":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:47684:7892":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"24:3962:3489":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"24:4213:3506":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"17:12550:5630":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"24:1623:2068":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"24:4068:3496":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"17:9350:37115":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:2879:6083":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:3386:14391":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:917:8929":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:1716:4542":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:11041:7783":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"16:4904:6136":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:23049:7541":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:4328:9088":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:5899:7196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:2792:5084":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:4187:3374":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:40031:8336":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:45999:7818":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:4340:6773":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:6586:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:7259:3732":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"18:652:5108":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"11:828:8931":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:4722:6922":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"18:644:5108":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:4336:3385":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"5:1058:35530":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:3987:9070":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:1512:6599":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:9987:8954":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"5:7338:4543":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:4606:14416":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:7077:21147":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:3047:20279":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:9986:8099":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"24:5140:3216":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"21:2526:3422":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"5:6695:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:47809:7901":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:43683:8337":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"24:5337:3224":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"1:6757:9206":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:8232:9087":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:2470:14428":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:44335:8592":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:30278:4289":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:4765:389":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:4969:6138":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"24:4540:3171":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"1:10954:4973":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:10303:21310":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:21126:9216":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"20:322:2504":{"crate_id":20,"path":["quote","spanned","Spanned"],"kind":"trait"},"24:4365:3517":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"2:49677:9226":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:3514:4544":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:13411:5901":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:11912:1496":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"22:0:1676":{"crate_id":22,"path":["proc_macro2"],"kind":"module"},"1:355:4227":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"24:3160:2549":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"16:0:3003":{"crate_id":16,"path":["gimli"],"kind":"module"},"24:4102:3498":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"6:6588:7338":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:20853:9221":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"24:2752:3451":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"6:1910:16163":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"24:3938:3487":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"2:40365:3347":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:3875:9063":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:9110:210":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"17:11109:5340":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:20576:34581":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"24:5454:3233":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"2:20996:9210":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"24:4254:3509":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"2:9596:4928":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"11:452:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:6376:6087":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:9512:21246":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:2208:8988":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:43342:8375":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:4488:6851":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"24:2786:1840":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"21:2325:2209":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"2:40686:8355":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:13812:6027":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:9178:21220":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:2502:6067":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:39388:7618":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:41840:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"24:5469:2243":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"24:3262:3470":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"17:13698:5993":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:4540:6125":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:5804:7150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:6170:7314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"24:3824:3480":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"2:40007:7745":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:638:8922":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:22371:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"21:479:4854":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"24:4196:3505":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"24:2548:3444":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"16:6327:8190":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:10823:5190":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"24:4484:3155":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"24:1489:1902":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"typedef"},"16:5594:6091":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"24:5341:2240":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"2:9374:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:11033:27224":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"24:3313:3472":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"1:1577:8276":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:5792:7146":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:4903:3724":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:30244:4288":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:6912:4963":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"24:4829:3185":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"2:40286:3323":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:13376:5890":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:5367:20250":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:10452:21357":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"11:393:37044":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:42176:3407":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:22602:7540":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:6687:7374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:44140:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:45755:7805":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"24:4522:1887":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"1:922:8543":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:40305:3332":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:39126:4453":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:7948:9036":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:7277:7471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"24:2531:3443":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"16:6990:6210":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"24:4300:3512":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"17:10377:5293":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:5050:7093":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:21874:7527":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:4542:6879":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:7262:26607":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:43787:8402":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:0:497":{"crate_id":2,"path":["core"],"kind":"module"},"16:2694:6075":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"10:0:2998":{"crate_id":10,"path":["adler"],"kind":"module"},"1:3129:26484":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:2245:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:4715:6921":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:6474:6105":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:10721:5309":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:11770:5485":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:39367:2579":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"24:4288:3511":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"2:4437:3389":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:8081:3298":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"24:4512:3158":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"1:7943:8557":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:7588:21150":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:13367:5887":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:633:8841":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:12194:5554":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"5:3129:35701":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"22:112:37293":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"2:41479:3252":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:1071:8936":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"24:1616:3371":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"1:1821:8954":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:8502:8444":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:6180:4907":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:6485:9166":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"24:5332:2283":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"6:554:6564":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"11:867:8934":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"24:497:3263":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"17:10257:21313":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:7437:6251":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:10262:8384":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:2684:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:20934:9009":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"11:1540:20213":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:39381:3385":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"16:4327:6120":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:11484:5411":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:22437:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:11319:5387":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"21:217:8501":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"15:219:8519":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"18:582:4114":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:4932:6137":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:45708:7804":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:10649:8112":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"24:2956:2199":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"2:8253:3736":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"24:4997:2482":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"11:1634:4867":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:8931:5227":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:2832:4945":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"21:2713:1895":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"6:4786:6958":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:40092:14423":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:12923:5764":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:12178:5549":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:1783:8944":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:3401:9006":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"24:3330:3473":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"5:963:4870":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"14:221:6385":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"24:4466:2154":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"1:857:3257":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"24:5464:3237":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"2:42183:3408":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:13821:6029":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:10840:5327":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:12506:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:7366:21148":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:44093:8422":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:1919:21292":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:10276:14364":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:10676:8456":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:2701:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"5:5712:4544":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:9577:5239":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:11898:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:2603:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:5556:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:5847:8149":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:2668:6074":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"24:1136:8038":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"16:3782:6115":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"24:921:2865":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"17:8683:5220":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:11391:5399":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:7797:8437":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:10320:9148":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:41680:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:7543:6102":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:7592:3312":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"24:5136:3215":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"5:7255:8299":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:11269:8845":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:9366:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:7065:8244":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:11904:642":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"5:3688:8938":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"24:94:4172":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"2:42000:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"21:2292:1816":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"2:11488:8385":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:8966:1880":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:11730:8086":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:9453:21238":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:8598:21216":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:6795:7436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:42412:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"20:34:9009":{"crate_id":20,"path":["quote","ext","private","Sealed"],"kind":"trait"},"17:12113:5543":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:1637:4285":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:4578:7369":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"22:919:2209":{"crate_id":22,"path":["proc_macro2","Punct"],"kind":"struct"},"5:2116:8282":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:2524:6068":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:7293:6232":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:10096:14357":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:9153:3398":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:9530:4925":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:635:8921":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"24:251:8832":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"17:9734:21258":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:13791:6021":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:2763:5080":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"24:4550:1678":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"5:2916:25760":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:43336:8374":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:21016:7518":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:7598:7505":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"24:5298:2185":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"1:11467:28643":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:9098:21218":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:7676:8434":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:8491:7973":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:5630:21134":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:3673:3372":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"22:703:3421":{"crate_id":22,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"1:4576:7367":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:4694:6909":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"24:5144:3217":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"17:11471:5410":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:21815:7522":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:8343:7965":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:10026:21344":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:211:4462":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:8913:8553":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:20741:9217":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:13053:5811":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"22:109:8067":{"crate_id":22,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"17:13385:5891":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:11136:5341":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:11813:5496":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"21:2556:4567":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"}},"external_crates":{"23":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.9/"},"20":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.28/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.60/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.18/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}