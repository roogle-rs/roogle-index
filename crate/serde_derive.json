{"root":"0:0:1666","crate_version":"1.0.183","includes_private":false,"index":{"2:12267:23437":{"id":"2:12267:23437","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12033:421","self::pattern":"2:11936:2430"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12340:23440":{"id":"2:12340:23440","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12033:421","self::pattern":"2:11936:2430"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11956:2425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12273:23439":{"id":"2:12273:23439","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12033:421","self::pattern":"2:11936:2430"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11956:2425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12261:2078":{"id":"2:12261:2078","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43702:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12320:28956":{"id":"2:12320:28956","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11936:2430","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12033:421","str::match_indices":"2:12317:28955"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43884:2447","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11956:2425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12317:28955":{"id":"2:12317:28955","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11936:2430","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12033:421","str::rmatch_indices":"2:12320:28956"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43866:2446","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12327:28959":{"id":"2:12327:28959","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12354:2053":{"id":"2:12354:2053","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:2313":{"id":"5:5527:2313","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12280:2472":{"id":"2:12280:2472","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41757:179","prim@char":"1:12033:421","self::pattern":"2:11936:2430"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11956:2425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:29627":{"id":"5:5517:29627","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12330:28961":{"id":"2:12330:28961","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12346:28965":{"id":"2:12346:28965","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12033:421","self::pattern":"2:11936:2430"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12287:23429":{"id":"2:12287:23429","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12033:421","self::pattern":"2:11936:2430"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11752:2433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12258:23420":{"id":"2:12258:23420","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12257:2087"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525:29628":{"id":"5:5525:29628","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1666":{"id":"0:0:1666","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[22,31]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2021\n# use serde_derive::{Deserialize, Serialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.183\")]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:67:1983","0:68:1987"],"is_stripped":false}}},"2:12270:23438":{"id":"2:12270:23438","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12033:421","self::pattern":"2:11936:2430"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12296:28951":{"id":"2:12296:28951","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11936:2430","str::split":"2:12284:23427","prim@char":"1:12033:421","str::split_terminator":"2:12293:28950"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43784:2453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11956:2425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12308:28953":{"id":"2:12308:28953","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11956:2425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12246:315":{"id":"2:12246:315","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12050:1526"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12240:28945":{"id":"2:12240:28945","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12238:28944"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12305:28952":{"id":"2:12305:28952","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12314:28954":{"id":"2:12314:28954","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11936:2430","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12033:421","str::matches":"2:12311:1897"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43938:2449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11956:2425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12349:28966":{"id":"2:12349:28966","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12033:421","self::pattern":"2:11936:2430"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11956:2425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12276:2511":{"id":"2:12276:2511","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41757:179","prim@char":"1:12033:421","self::pattern":"2:11936:2430"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12352:28967":{"id":"2:12352:28967","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11897:127","`FromStr`":"2:11896:1982"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41899:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11896:1982","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11896:1982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12234":{"id":"2:12234","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12235:825","2:12236:2020","2:12237:28943","2:12238:28944","2:12240:28945","2:12243:2082","2:12244:28946","2:12245:316","2:12246:315","2:12247:23395","2:12249:23396","2:12251:23397","2:12253:23398","2:12255:28947","2:12256:28948","2:12257:2087","2:12258:23420","2:12259:26693","2:12260:27041","2:12261:2078","2:12262:26702","2:12263:26689","2:12264:26246","2:12265:28949","2:12266:26694","2:12267:23437","2:12270:23438","2:12273:23439","2:12276:2511","2:12280:2472","2:12284:23427","2:12287:23429","2:12290:23431","2:12293:28950","2:12296:28951","2:12299:23433","2:12302:23435","2:12305:28952","2:12308:28953","2:12311:1897","2:12314:28954","2:12317:28955","2:12320:28956","2:12323:28957","2:12325:28958","2:12327:28959","2:12329:28960","2:12330:28961","2:12331:28962","2:12334:28963","2:12337:2071","2:12340:23440","2:12343:28964","2:12346:28965","2:12349:28966","2:12352:28967","2:12354:2053","2:12355:24569","2:12356:21203","2:12357:21204","2:12358:21205","2:12359:28968","2:12361:3501","2:12362:28969"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:68:1987":{"id":"0:68:1987","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib_precompiled.rs","begin":[21,0],"end":[23,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:12237:28943":{"id":"2:12237:28943","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12255:28947":{"id":"2:12255:28947","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12039:1423","str::slice_mut_unchecked":"2:12256:28948","crate::ops::Index":"2:3052:3550"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12253:23398":{"id":"2:12253:23398","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10030:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10030:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12284:23427":{"id":"2:12284:23427","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11936:2430","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12033:421","str::split_whitespace":"2:12262:26702","str::rsplit":"2:12290:23431"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43716:2291","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12243:2082":{"id":"2:12243:2082","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11496:2089"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12302:23435":{"id":"2:12302:23435","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12033:421","str::splitn":"2:12299:23433","self::pattern":"2:11936:2430"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43838:2451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11956:2425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12249:23396":{"id":"2:12249:23396","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41757:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10030:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10030:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12264:26246":{"id":"2:12264:26246","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43970:2287","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12323:28957":{"id":"2:12323:28957","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12331:28962":{"id":"2:12331:28962","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12033:421","self::pattern":"2:11936:2430"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11961:2423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12311:1897":{"id":"2:12311:1897","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11936:2430","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12033:421","str::rmatches":"2:12314:28954"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43920:2448","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12343:28964":{"id":"2:12343:28964","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12033:421","self::pattern":"2:11936:2430"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11956:2425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5509":{"id":"5:5509","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5510:29625","5:5511:9293","5:5514:29626","5:5517:29627","5:5525:29628","5:5526:29629","5:5527:2313","5:5528:21201","5:5529:21202"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12247:23395":{"id":"2:12247:23395","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41757:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10030:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10030:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12299:23433":{"id":"2:12299:23433","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12033:421","self::pattern":"2:11936:2430","str::rsplitn":"2:12302:23435"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43820:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12265:28949":{"id":"2:12265:28949","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43980:2445","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12358:21205":{"id":"2:12358:21205","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12329:28960":{"id":"2:12329:28960","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12257:2087":{"id":"2:12257:2087","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12258:23420"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12334:28963":{"id":"2:12334:28963","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12033:421","self::pattern":"2:11936:2430"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12337:2071":{"id":"2:12337:2071","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12033:421","self::pattern":"2:11936:2430"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12251:23397":{"id":"2:12251:23397","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10030:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10030:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12259:26693":{"id":"2:12259:26693","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12033:421"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43686:2437","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12356:21203":{"id":"2:12356:21203","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12260:27041":{"id":"2:12260:27041","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12033:421"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43692:2436","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12325:28958":{"id":"2:12325:28958","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12357:21204":{"id":"2:12357:21204","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12290:23431":{"id":"2:12290:23431","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11936:2430","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12033:421","str::split":"2:12284:23427"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43734:2450","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11956:2425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5510:29625":{"id":"5:5510:29625","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2164","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2164","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12236:2020":{"id":"2:12236:2020","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12244:28946":{"id":"2:12244:28946","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:1983":{"id":"0:67:1983","crate_id":0,"name":"Serialize","span":{"filename":"src/lib_precompiled.rs","begin":[16,0],"end":[18,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"5:5514:29626":{"id":"5:5514:29626","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12262:26702":{"id":"2:12262:26702","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12263:26689"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43990:2434","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12256:28948":{"id":"2:12256:28948","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12039:1423","crate::ops::IndexMut":"2:3056:3551","str::slice_unchecked":"2:12255:28947"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5529:21202":{"id":"5:5529:21202","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12358:21205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12235:825":{"id":"2:12235:825","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12033:421"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12263:26689":{"id":"2:12263:26689","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12262:26702"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43999:2432","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12361:3501":{"id":"2:12361:3501","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4524:3501"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44024:2442","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12359:28968":{"id":"2:12359:28968","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4523:28968"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44015:2441","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12362:28969":{"id":"2:12362:28969","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4521:28969"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44033:2443","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:29629":{"id":"5:5526:29629","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2164","`String`":"5:7449:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2164","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511:9293":{"id":"5:5511:9293","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:21201":{"id":"5:5528:21201","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12357:21204"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12293:28950":{"id":"2:12293:28950","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11936:2430","str::split":"2:12284:23427","prim@char":"1:12033:421","`DoubleEndedIterator`":"2:7388:121","str::rsplit_terminator":"2:12296:28951"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43766:2454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11941:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12355:24569":{"id":"2:12355:24569","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39786:24705","Self::is_ascii":"2:12354:2053"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39786:24705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12238:28944":{"id":"2:12238:28944","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12266:26694":{"id":"2:12266:26694","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44008:2431","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12245:316":{"id":"2:12245:316","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12246:315","`u8`":"1:12050:1526"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:46548:27309":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:9828:2944":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:21132:3799":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:6074:2967":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:6688:11074":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:44168:9056":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:8216:2290":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:4748:13543":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:10178:2391":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:7558:13747":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:8281:16464":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:11742:16551":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:4685:13536":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:14536:20744":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"11:836:3526":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"20:988:233":{"crate_id":20,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"1:3262:2310":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:5798:3146":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:14355:20732":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:32304:28219":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"16:4949:16141":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:6983:26561":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:45706:3844":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"9:357:15282":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:12970:19945":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:4498:3698":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:5403:3046":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:14401:20734":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:500:10054":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:11845:16777":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:11144:1980":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:10447:16632":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:4:1028":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:12237:19426":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:4854:13557":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:41840:2136":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:5080:13581":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:10475:2451":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:11281:3079":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:7802:2337":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"20:367:2700":{"crate_id":20,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"17:14068:20710":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:1102:28723":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:12765:19933":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:3228:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:9780:16539":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"18:538:3035":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:12007:3091":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:41023:2326":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:4320:9110":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:12039:1423":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:356:3497":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:9113:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"11:1538:15387":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:14499:20741":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:45981:3817":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:12162:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:13851:20691":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:6671:11076":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"5:1464:3234":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"5:7191:2476":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:8309:3646":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:9852:16559":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:12830:19937":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:9172:3066":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:21218:3790":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"16:8097:16456":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:1839:3571":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"5:2170:3238":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:1426:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:3113:2318":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:42746:27872":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:8485:2388":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:10949:16674":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:3065:15495":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:2526:15474":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:3995:3662":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:1920:3586":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:629:28726":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:40195:9102":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:4570:3715":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:41741:3643":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"20:1195:196":{"crate_id":20,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"2:41958:2476":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:9277:3069":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:2809:9281":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"11:2049:3529":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:11307:3302":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"18:736:20770":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:43512:9033":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:8659:16506":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:5975:2964":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:1630:594":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:10726:16716":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:11507:16545":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:3178:3533":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:6485:2872":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:6648:11091":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:3049:15494":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:44463:9437":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:4129:3250":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"13:226:3202":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:4368:13504":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:46395:3885":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:6545:16418":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:4590:9121":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:2353:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:40572:2360":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"20:404:32250":{"crate_id":20,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"5:1482:3522":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"20:2775:1971":{"crate_id":20,"path":["proc_macro","Literal"],"kind":"struct"},"16:2406:15469":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:12911:19941":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:11941:2424":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:7517:13741":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:4986:16154":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:7642:3499":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:43734:2450":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:6361:16409":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:4098:3249":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:4363:2900":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:40558:26863":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:8926:16529":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:4908:13562":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:44748:28240":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:4917:13563":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:11381:16770":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"14:7:15393":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:30597:27308":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"20:957:2715":{"crate_id":20,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"2:44471:3262":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:47683:3854":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:1891:3585":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:43970:2287":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:9752:16538":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:9745:2940":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:8412:2386":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:7736:16448":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:8339:3727":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:47041:3831":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:41806:2475":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:5121:16193":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:46571:27152":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:13611:20678":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"11:311:31089":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:10097:16566":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:11327:16766":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:7722:3193":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:8008:3305":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:4862:16126":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:2520:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"16:6261:3136":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:6929:3182":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:41604:3639":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:43494:9030":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:13973:20701":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:2530:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"5:7290:2476":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:44632:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:13816:20688":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:11453:2992":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:10342:21583":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:6625:3727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:2867:9307":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:13685:20682":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:8898:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:4421:3253":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"11:805:3524":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:11351:16768":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:8544:2390":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:8072:16455":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:8134:16458":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:44137:9054":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:7621:16445":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:45902:3857":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:7365:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"5:7221:2883":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:6647:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:7231:28740":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:4992:13572":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:48025:8955":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:21617:3805":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"5:3581:2391":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:7529:2911":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:40502:2346":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:10685:16673":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:2907:15490":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:11124:16731":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:12437:19914":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:12513:19917":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:13949:20699":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:20825:27383":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:14126:20717":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:10929:16678":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:43522:9031":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:43674:2440":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"20:2302:1972":{"crate_id":20,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"2:21202:3629":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:3632:2476":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:7741:3294":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"5:3204:3534":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:8993:3487":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:2339:3110":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:46887:3813":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"18:681:20774":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:4754:13544":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:48091:8961":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:7564:13748":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:2305:15465":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"5:4348:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:39592:9323":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:12829:3537":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:12698:19928":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:850:3233":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:5634:2965":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:1595:10958":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:12621:19923":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:7862:16452":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:4770:13546":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:7568:3186":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:362:3498":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:4053:15677":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:44443:9441":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:7463:9064":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:7462:16436":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:30525:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:8283:3641":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:2767:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"20:2749:1972":{"crate_id":20,"path":["proc_macro","Punct"],"kind":"struct"},"6:5920:14229":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:11490:16544":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:536:3122":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"20:2643:2476":{"crate_id":20,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"2:40549:2358":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:4469:13516":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:39419:9321":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:6154:2350":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:21396:3263":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:7511:13740":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:9328:2290":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:3830:15526":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:6583:16419":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:6044:30762":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:5068:13579":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:9521:16534":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:1576:3533":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:4774:16110":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:5432:2402":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:32293:23012":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:6253:2964":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:12074:19414":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:7388:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:40581:2361":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:40276:2442":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:13085:19953":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:10538:2306":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:12007:9046":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"20:53:2699":{"crate_id":20,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"17:11951:19411":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:40397:3595":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"1:11606:23186":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:11086:16759":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:7857:3628":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:22185:27140":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"5:6798:2922":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"16:7503:16439":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:23322:3272":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:6818:16425":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:5793:14219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:6589:9936":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:2812:2157":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:7782:16449":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:653:10113":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:2223:29865":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:11158:2407":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:1649:10962":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"9:0:1782":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:13422:20671":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:7613:16444":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:40623:2363":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:4810:13551":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:4543:13525":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:10410:16624":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:2763:8985":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:3303:2307":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:2012:16611":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:1554:2391":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:46651:3847":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:40642:2365":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:6742:15411":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:2209:16630":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:9762:31823":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"15:288:15417":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:2477:3629":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:5074:13580":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:149:2857":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"20:2635:2255":{"crate_id":20,"path":["proc_macro","LexError"],"kind":"struct"},"5:1138:28720":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:9137:3631":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:12051:1523":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"5:7449:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"11:657:2476":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:7892:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:10202:3233":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:42384:3278":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:9607:16536":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"20:433:2854":{"crate_id":20,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"1:7133:22979":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:9205:25751":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:6916:2324":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:5309:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:2834:9304":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"20:2639:2256":{"crate_id":20,"path":["proc_macro","ExpandError"],"kind":"struct"},"17:14083:20712":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:5447:1979":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:1673:10964":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"18:582:3275":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:400:16520":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:9490:2985":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:8222:2291":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:8241:3645":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:6015:14236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:10578:2635":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:46058:3884":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:40367:27238":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:1927:663":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"16:2596:15477":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:12038:1393":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:1696:10967":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:8239:16463":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:30539:27192":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:40480:2345":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:8462:2387":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:7879:3627":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"14:0:1786":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:7211:2893":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:6696:15412":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:6599:3747":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:7666:3494":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:44315:9062":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:5017:16161":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:40430:2933":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:2883:9310":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:4001:3663":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:10085:3565":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:9945:3071":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:9350:3070":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:6189:31506":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:12598:19922":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:2649:3588":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:41899:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:10036:16574":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:6841:14660":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"20:2724:1969":{"crate_id":20,"path":["proc_macro","Group"],"kind":"struct"},"2:12519:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:1545:10953":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:2871:9309":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:11000:16682":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"18:727:3042":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:30509:9296":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:6960:16428":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:14316:20728":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:2969:15492":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:1064:3530":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:12465:16721":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:256:31937":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:10698:16694":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:4741:3674":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:5025:13575":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:8982:3297":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:1426:3233":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:4806:16118":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:13826:20689":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:4887:13560":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"20:2503:2258":{"crate_id":20,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"2:30469:3274":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:5955:14230":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:41823:3233":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"5:3735:3541":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:12044:652":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:3742:3647":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:3034:8988":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:9030:3300":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:10478:3074":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:11620:15425":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:22139:27871":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:9896:16562":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:10616:16665":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"16:6083:15438":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:6901:3180":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:13113:19955":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:9285:3319":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"9:486:15265":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:8978:16531":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:43027:3282":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:6600:16420":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:1561:2893":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:44523:9456":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:6376:16410":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"18:609:32219":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:47011:3825":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:44328:2455":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"20:2378:1971":{"crate_id":20,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"2:2156:595":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:3000:2160":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:13710:20683":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:1442:2476":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:1544:2271":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:2817:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:4496:13520":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:11062:16757":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"20:216:3033":{"crate_id":20,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"1:12032:950":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:904:2911":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:837:2391":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:2215:2579":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:10292:3051":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:45818:3816":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:42851:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"16:8167:16460":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:12473:16719":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:12172:19421":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:11910:19410":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:5435:31458":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:46003:3823":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"18:96:20758":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:6165:2699":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"5:3720:2304":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"5:0:287":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:7350:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:40658:2366":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:12724:19930":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:7360:31505":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:40633:2364":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:13838:20690":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:3222:2308":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:14221:20723":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:43702:2290":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:2359:15467":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:7391:16435":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:3463:2280":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:3315:15497":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:6558:2476":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:4318:3693":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:14420:20735":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:7318:16434":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:11710:3080":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:8560:2392":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:3213:9322":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"20:2690:1974":{"crate_id":20,"path":["proc_macro","Span"],"kind":"struct"},"2:6160:28228":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:40317:9131":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:43019:3281":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:41882:2680":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:7661:3492":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"5:5366:2429":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:22072:3244":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:43614:9038":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:5836:14224":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:4007:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:20961:3629":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:44100:9052":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:7597:31330":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:2815:8984":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:43624:9039":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:14134:20718":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"11:723:3234":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:44024:2442":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:6711:14651":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:8317:3696":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:39333:9098":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:1257:3528":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:12056:1580":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:9998:16568":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:12711:19929":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:910:3522":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:4535:13524":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:2910:9316":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:3305:8987":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:47431:3848":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:11234:3756":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:7272:15031":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:6150:2953":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:11816:2996":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:2755:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"16:7513:16440":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:4234:2391":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:7736:3295":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:4664:13535":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:13148:19957":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:6775:14655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:2832:15487":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:6467:16415":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:41079:2336":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:4527:16031":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:47885:3881":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"9:450:15266":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:31101:3275":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:1565:2911":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:2824:3782":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:12790:19935":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:46349:3830":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:46105:3789":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:43838:2451":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:43569:2344":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:7438:2907":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:12645:19924":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:44685:3925":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:43766:2454":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:39474:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:2766:15484":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:40189:2442":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:1558:2476":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:7349:3521":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"11:1611:2866":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:2927:9320":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:11934:1970":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:1702:3683":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:6352:3174":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:4489:13519":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:10535:2310":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:9921:16585":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:573:10063":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:6687:16421":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:39538:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:43066:3284":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:123:9736":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:4585:16041":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:5750:3738":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:13876:20693":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:9564:16535":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"11:749:2893":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:9078:3309":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:9629:3261":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:8115:16457":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:40826:2368":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:6067:14240":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:20808:27381":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:11191:16548":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:4842:13555":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"20:2241:2696":{"crate_id":20,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"5:7337:2394":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:21262:3629":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:4818:13552":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:9912:16563":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:6565:10101":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:11613:15425":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:7586:13750":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:11971:19412":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"18:507:32207":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:44706:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:2898:9314":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"11:1826:2893":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"5:3594:3233":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:4835:16123":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:46729:3853":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:7884:16453":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:4787:13548":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:32311:9110":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:22512:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:11047:2988":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:8805:2406":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"5:1011:2872":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:1918:8990":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"5:3800:2911":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:6893:3137":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:41670:27198":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"20:478:2855":{"crate_id":20,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"1:414:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:12810:19936":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"18:636:32206":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:3389:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:46965:3819":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:3844:3649":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:7359:2163":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:47931:3832":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:11074:16758":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:42226:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:6705:14650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:22743:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:11872:16778":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:3232:16676":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:4030:8983":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:5743:16396":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"20:2770:1970":{"crate_id":20,"path":["proc_macro","Ident"],"kind":"struct"},"18:564:3037":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:11162:16726":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:3212:3532":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:43866:2446":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:10420:16657":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:9886:16561":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:8335:3725":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:3527:2283":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"18:0:1790":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:46419:3886":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:1513:10949":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:2904:9315":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:13010:19948":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:7102:16432":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:43990:2434":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:12033:421":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:1569:10955":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:8294:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:8473:2138":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:7523:13742":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"20:2269:1969":{"crate_id":20,"path":["proc_macro","bridge","Group"],"kind":"struct"},"17:9455:31963":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:5784:3296":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:8794:16525":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:5877:14225":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:21099:3804":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:43266:26960":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:6732:2343":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:2269:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:6028:14238":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:14056:20709":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:5994:14234":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:4796:807":{"crate_id":2,"path":["core","iter"],"kind":"module"},"20:2533:2697":{"crate_id":20,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"16:6456:16414":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:44650:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:10347:9044":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:41942:2391":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:40511:2347":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"14:215:15402":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:3223:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:5648:16392":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:48065:8959":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:47823:3860":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"7:79:15244":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:11991:3087":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:10828:2285":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:45920:3863":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:11358:16769":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:21284:3263":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:3669:2872":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:2317:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:11752:2433":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:1587:3535":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:4764:13545":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:3445:1977":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"5:5420:1423":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"1:586:3500":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"20:140:2709":{"crate_id":20,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"6:541:10058":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:7006:16430":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:48054:8958":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:21146:9334":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"16:5982:16402":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:562:10061":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:30503:9082":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:4374:9111":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"18:80:20757":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:2212:3609":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:2390:3623":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:5849:14183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:3253:27127":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:48034:8956":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:12252:19427":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"14:221:15403":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"18:531:20781":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:4963:13569":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:10461:2452":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"8:0:1781":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:5419:3047":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:4613:16045":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:42187:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:2504:15473":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:5712:3141":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:44435:9436":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"6:4606:13530":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:4476:3697":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:9382:8999":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:2322:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:11053:2989":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"11:1027:15382":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:8895:16528":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:4743:3677":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:2829:3784":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:4174:3690":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:10763:25610":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:9103:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:9086:3047":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:1776:2911":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:13897:20695":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:22147:27302":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:7346:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:2859:3785":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:43595:9037":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:43532:9032":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"14:187:15401":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:1631:10960":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:10165:16596":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:12543:19919":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:41950:3233":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:43543:9022":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:11896:1982":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:42513:8993":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:20827:27385":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:7540:13744":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:5396:2400":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:11261:16755":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:11137:16730":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:10744:3726":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:2405:1797":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:7250:10012":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:2851:9305":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:5760:16397":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:2920:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:8155:2317":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:3032:15493":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:10265:16607":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:2035:2304":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:12737:19931":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:7579:2981":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:4626:13532":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:47573:3820":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:5900:14228":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:13890:20694":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:9589:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:12196:19423":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:10768:25760":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:39516:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:6930:2923":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:9478:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:4640:25628":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"11:1048:31103":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:3183:21533":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:43058:3283":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:14013:20705":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:1041:3528":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:41564:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:43036:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:9102:3063":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:7065:2315":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"15:306:15418":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:14:1900":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:2168:9335":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:39494:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:6613:2976":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:7933:2304":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:5563:2403":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:5384:16388":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:13174:19959":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:5979:14232":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:919:3237":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:22545:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:12049:751":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:1911:11133":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:9372:8993":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:12048:755":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:10603:16664":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:9207:3067":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:2876:9313":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:6513:16416":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:21011:26920":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:11382:22978":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:14090:20713":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:11393:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:1582:3534":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:6792:16424":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:12036:1063":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:8295:3695":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"11:2194:31101":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:10588:16663":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"16:2618:15478":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:46373:3879":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:9867:16560":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:4365:2932":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:22875:3430":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"18:719:20769":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:7828:16451":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:1821:3544":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:11407:16541":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:22164:27146":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:8502:2389":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:42774:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:44280:9059":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:3520:2281":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:11547:16546":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:14378:20733":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:4921:16137":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:5967:14231":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:9000:21319":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"20:1062:1974":{"crate_id":20,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"17:13024:19949":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:11641:9448":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:41650:1974":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:9933:16579":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:44490:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:40246:9134":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:3498:2893":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:12934:19942":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"11:1831:2911":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:30278:3651":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:5890:14227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:40672:2367":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:4729:13541":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:39434:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:12037:313":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:11788:16775":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:8686:16522":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:4049:3666":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:3301:2306":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:41061:2332":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:44348:2456":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:11355:21320":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:4524:13523":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:1690:10966":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:635:3505":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:4238:3692":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:2634:2303":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:41873:2137":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:7909:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:11466:9401":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:6814:3787":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:14076:20711":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:2744:15483":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:7805:2339":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:6968:16429":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"18:113:20759":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:12606:9145":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:45951:3811":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:12123:19418":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"5:6769:2909":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:6130:14268":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:7313:2341":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:8471:2140":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:2777:2717":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"5:7182:2726":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:5882:14226":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:9156:3781":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:4587:13529":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:12581:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"5:1288:3529":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:9531:32154":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:7441:2162":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:9051:16507":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:11701:9447":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:5767:14217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:5574:3140":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:488:10052":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:6899:2978":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:547:10059":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:12184:19422":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:44511:3786":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:5696:16395":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:10637:16667":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:43820:2452":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:11617:16547":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:12047:754":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"5:1523:3540":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:14469:20739":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:2558:2301":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:12846:19938":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:11098:16733":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:6171:14270":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:46203:3864":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:595:10066":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:12052:1524":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:6171:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:44008:2431":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"5:5318:2872":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:42802:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:5829:2966":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:7694:3190":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:22842:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:12225:19425":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:4794:13549":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:21612:3797":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:44151:9055":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:21387:3629":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:2150:16645":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:20780:26998":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:43660:2444":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:11482:9403":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:12040:1507":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:1637:9273":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:2839:9303":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:868:3234":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:4328:13502":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:3983:27480":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:10270:2433":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:2321:15466":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:32297:16463":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:20999:3798":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"2:44243:9058":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:8554:2391":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:41729:3642":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:4401:13508":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:41052:2316":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:3417:2271":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:5517:2359":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:6546:3745":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:12111:19417":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:7425:3591":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"11:1818:2391":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:8811:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:43443:27897":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:6915:3181":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"20:2729:1968":{"crate_id":20,"path":["proc_macro","Delimiter"],"kind":"enum"},"2:45880:3851":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:13071:19952":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:1055:3529":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:4341:13503":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:1709:10968":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:10383:16603":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"9:426:15268":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"0:0:1666":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"17:10316:16612":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"18:707:2426":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"18:515:20780":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:1982:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:4846:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:10430:2406":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:6470:2975":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"11:1121:3531":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:1638:10961":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:7505:13739":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:11021:9036":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:4483:13518":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:4436:13512":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:9035:3307":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"16:6332:3170":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:4745:3678":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:21270:3794":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:10788:16718":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:6439:2893":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:9340:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:12726:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:4556:13527":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:10808:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:4394:3252":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:7041:31459":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:44459:9443":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:10750:3076":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:4374:13505":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"18:491:32222":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"11:793:3522":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:7492:16438":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:7846:27388":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:13758:3101":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:6944:31328":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:4166:3689":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"18:652:32207":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:10164:23192":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"5:1672:2872":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:12685:19927":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:9380:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:11173:16761":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:42520:9001":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:6204:3152":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:2970:28711":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:12045:756":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:482:10051":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:2888:9311":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:6022:14237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:5818:14222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:2863:9308":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:3919:2271":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"11:2201:2394":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:2762:2156":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:2250:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:1681:10965":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:10946:3574":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"16:6041:16404":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:43048:2387":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"11:1103:15384":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:2594:2293":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"19:0:1045":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:4002:2893":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:4187:3691":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:7015:16431":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:7545:2915":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"20:2426:1975":{"crate_id":20,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"16:6879:16427":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:10661:16713":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:2526:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:8166:2285":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:47969:3866":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:5634:16391":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:1184:16580":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:2284:15439":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"11:1822:2476":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:9195:25759":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"11:2033:3528":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:1500:10947":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:1590:10957":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:11982:21327":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:11388:21189":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:8945:3754":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:10473:2986":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"18:481:20778":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:44735:8976":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:13906:20696":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:13451:20672":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:13966:20700":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:14163:20721":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:6156:14269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:9376:9001":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:7544:16443":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:4862:13558":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:5863:14184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:11586:3086":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:676:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:6434:3741":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:7768:23012":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:0:501":{"crate_id":2,"path":["core"],"kind":"module"},"1:11370:21317":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:22644:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:21368:3791":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:47225:3814":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"14:165:15394":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:11448:16542":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:5816:3151":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:45772:3850":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:5987:14233":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:5008:13573":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:22112:3652":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:10786:21301":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:10561:16629":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:6136:13416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:1075:16573":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:40682:2352":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:2922:9319":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:46805:3865":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:39599:9087":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:2364:3613":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"20:2704:2257":{"crate_id":20,"path":["proc_macro","SourceFile"],"kind":"struct"},"2:43011:3279":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:5991:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:4310:2931":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:12658:19925":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"12:0:1785":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:9023:23149":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:4641:16049":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:10916:16677":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:21394:3800":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:4944:13566":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:12043:650":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:638:3506":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:12750:19932":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:12024:3093":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:12496:19916":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:7253:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:44451:9444":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:2517:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"16:7768:3194":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:20767:3275":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:46517:27252":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:6531:16417":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:7534:16442":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:10950:23140":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:13286:19966":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"7:0:1570":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:8361:3676":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:21833:3793":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"18:644:32207":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:43716:2291":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:3150:2261":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:41071:2334":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:11048:16746":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:8867:3755":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:13244:19964":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:9660:31751":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:1837:3319":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:12778:19934":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"20:2709:1975":{"crate_id":20,"path":["proc_macro","TokenTree"],"kind":"enum"},"16:6386:16411":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:12043:3100":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:12888:19940":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:41706:3641":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:9624:9147":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:4389:13507":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:3346:2297":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:4390:3687":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"15:327:3198":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"5:2243:3241":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:5975:9655":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"11:365:2864":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:4740:13542":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:40590:2370":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:2966:28712":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:44122:9053":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:7641:3629":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"11:2168:1969":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:6401:3175":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:41831:2476":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:43884:2447":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:8472:2139":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:4291:13499":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:10628:16666":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:45796:3810":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:6560:2859":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"16:6243:16407":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:4428:13511":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"20:1019:2257":{"crate_id":20,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"2:9378:9002":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:10494:3060":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:8205:16462":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:11244:16547":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:6306:3928":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"11:119:2860":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"13:110:31149":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:4695:13537":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:7598:2983":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:8050:16454":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:22776:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"20:107:2706":{"crate_id":20,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"2:48080:8960":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:42527:9002":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:8900:3750":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:8953:16530":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:4035:3664":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:5051:13577":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:8823:1980":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"18:690:20775":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:7463:15192":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:42811:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:46251:3812":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:11761:16552":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:12959:19944":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"11:2060:3530":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"11:2186:31100":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:43784:2453":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:506:10055":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:4057:3668":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:40520:2355":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:7309:2342":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:4171:3251":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"11:817:3525":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:434:15441":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:8229:2287":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:40383:3593":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"15:0:1787":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:6753:16423":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:42756:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:12997:19947":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:10112:16593":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:261:2872":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:2574:15476":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:4716:13539":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:48144:8964":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:2864:15488":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:40489:2288":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:568:10062":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:44693:3926":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:14024:20706":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:5673:16394":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:4955:13568":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:22088:3267":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:3217:28739":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:7025:2979":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:13739:20685":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:10773:3626":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:11476:3648":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:8290:3694":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:7436:3133":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:3224:2309":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:10214:16609":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:7377:25506":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:10278:16606":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:9445:16533":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:12267:19428":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:5727:3144":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"5:5923:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:9242:3068":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:119:9735":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:2247:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:2893:9312":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:2219:2279":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:5612:16390":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:6318:16408":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:3232:15496":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:915:3236":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:12054:1522":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:5501:1981":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"20:183:32312":{"crate_id":20,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"2:41891:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:43692:2436":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"5:2049:3541":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:4636:25624":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:860:2476":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:4616:13531":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:10534:16634":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"11:1852:3534":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:9061:27387":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:7382:3592":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:9390:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:10325:1979":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:22809:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:11111:16732":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"11:1517:15386":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:14156:20720":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"18:624:32211":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:8199:2288":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:10030:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:11272:16764":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:10646:16712":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:12046:753":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:13914:20697":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:13040:19950":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:41621:3640":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:13215:19962":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:12055:801":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"5:1118:28715":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:32318:9368":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:14448:20737":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:6156:16405":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:881:3235":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:10503:9042":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"14:40:1970":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:0:1788":{"crate_id":16,"path":["gimli"],"kind":"module"},"20:0:1089":{"crate_id":20,"path":["proc_macro"],"kind":"module"},"1:10959:1981":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"6:1603:10959":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:43251:9429":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:21721:27001":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:724:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:9985:16569":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:1514:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"11:760:2911":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:9066:3256":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:502:2890":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:11170:25344":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:10440:16659":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:22710:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"5:5612:2909":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:14001:20704":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:11367:16734":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:1667:1101":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:42031:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:41815:2391":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:13202:19961":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:4475:13517":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:12004:3512":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:11226:16762":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:8594:16508":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:2380:15468":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"11:695:3237":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:8825:16526":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:2362:3612":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:13667:20680":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:3943:3658":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:4248:9105":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:13567:20676":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:3739:3648":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:1575:10956":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:13802:20687":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:5954:2906":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:10366:16617":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:6850:14661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:5627:2964":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:7925:2302":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"11:630:2391":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:11639:16548":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"20:2591:2258":{"crate_id":20,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"6:6805:14657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:6844:16426":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:474:2027":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:8913:3753":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:895:2391":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:4938:13565":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:12422:19913":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:6499:3177":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:46327:3824":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:13188:19960":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:6573:10906":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:6744:14654":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:6955:2927":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:8571:2393":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:11215:16729":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:6077:14241":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:20795:26998":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:40530:2356":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:6598:14647":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:6346:3172":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:5083:23146":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:8968:3740":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"11:844:3527":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:9981:21154":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:22263:3655":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:5241:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:4550:13526":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:12136:19419":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"3:234:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:9365:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:4973:13570":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"5:7261:3243":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:14460:20738":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"11:285:31086":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:9070:3046":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:7295:15033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:10186:16597":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:1979:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"3:0:446":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:8765:16524":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:10227:16608":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:10971:21293":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:7809:2340":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"11:644:3233":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"18:766:20771":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:2885:2961":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:13162:19958":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:10382:2450":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:2166:9334":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:14100:20714":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:40232:9132":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:10468:3073":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"20:2600:32273":{"crate_id":20,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"1:940:3525":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:4749:391":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"11:1845:3533":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:40812:2289":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:10672:16714":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:6166:2971":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:4889:16129":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:1520:10950":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:2210:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:11956:2425":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:41967:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:41037:2328":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:9374:8992":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:8178:2286":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:11316:16756":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:14346:20731":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:10989:2408":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:2478:9142":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:2881:15489":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:2765:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:7245:2476":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:946:3526":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:12532:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:7869:3306":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:10420:9041":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:4770:26880":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:10197:16623":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:9972:16570":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"11:1068:15383":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:7128:16433":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"11:403:31093":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:2608:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:10020:3629":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:5839:2893":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"11:968:3528":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:1747:27869":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:41030:27893":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:6036:14239":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"10:0:1783":{"crate_id":10,"path":["adler"],"kind":"module"},"2:43999:2432":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:48045:8957":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:12554:27587":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:22237:3654":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:22611:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:40256:9135":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"10:44:3204":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:4745:16105":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:5769:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:8195:16461":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:12057:1146":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:952:3527":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:4380:13506":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:2993:2158":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:12484:16720":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:48182:8966":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:0:1789":{"crate_id":17,"path":["object"],"kind":"module"},"1:4136:22975":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:62:9681":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"16:7660:16447":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:5976:2371":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:12305:19431":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:5620:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:4164:2271":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:6415:16412":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:12154:19420":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:9370:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:44305:9061":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:3987:3661":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:2855:3783":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:12053:1525":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"5:1473:3235":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:44467:9438":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:10903:16679":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:39613:9096":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"15:394:15428":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"5:822:2878":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"5:4194:2271":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:43604:9040":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:7582:3187":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:42306:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:21950:26782":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:7715:3510":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"11:97:31098":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:526:10056":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:12034:1542":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:8848:16527":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:12737:2953":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"16:5049:16169":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"9:177:3222":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:3764:15508":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"5:4985:2271":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:46021:3829":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"11:2174:28492":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:44294:9060":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:2982:2292":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:7730:3511":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:2178:16605":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"18:521:20777":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:42109:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:9384:9000":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:5866:16399":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:22124:27240":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"13:0:1779":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:4417:15993":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:2670:15480":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:8003:23152":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:5799:14220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:8713:16523":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:14514:20742":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:531:2956":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"11:1838:3532":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:2428:15470":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:13055:19951":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:6821:2354":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:3052:3550":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:11290:2990":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:3995:27417":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:4895:13561":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:13778:16575":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:9574:31964":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:10023:16537":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:7539:23125":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:4393:2271":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:11717:9449":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:10104:21585":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:43920:2448":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:7852:3421":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:6485:3176":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:11389:16540":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:3565:16699":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:494:10053":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:1778:3556":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:5363:16387":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"9:393:15267":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:12031:374":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:14269:20724":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:4781:13547":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:4506:13521":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:7529:13743":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:7282:2476":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:9137:3065":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:32257:2409":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:10489:9043":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:9959:16571":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:41693:3650":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:21:691":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:11337:16767":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:11936:2430":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:6868:14662":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"10:36:31085":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:2997:2159":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:1073:3531":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:3234:9100":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:3183:28735":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:7862:3626":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:4456:13514":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:532:10057":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:4833:13554":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:5015:13574":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:2696:15481":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"7:32:15237":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:20810:27386":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:5128:2906":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:40336:9127":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:8154:16459":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:9485:3628":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:582:2718":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:43270:9023":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:10227:2291":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"5:2959:2534":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:8987:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:11473:16543":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:4304:13500":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:6637:2872":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:13101:19954":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:13135:19956":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:14335:20730":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:11535:3083":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:261:31973":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:21363:3629":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:12945:19943":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:10714:16715":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:7552:13746":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:6726:14653":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:40350:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:8851:2408":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:41046:2330":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:5805:14221":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:10240:3071":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:7199:3536":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:14478:20740":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"5:1302:3531":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:7554:3185":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:11886:19409":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:923:3523":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:6226:16406":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:39372:8989":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:44723:8978":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:4638:13533":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:40204:9133":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:7792:16450":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:3511:25438":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:7523:16441":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:5457:2271":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:9043:16433":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:3677:3644":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"11:1012:3530":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:12876:19939":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:7528:2718":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:5088:16184":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:42070:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:12280:19429":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:11594:3312":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:5757:3739":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:8013:1976":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:10520:16660":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:10309:9034":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"18:699:3040":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:5416:2401":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:40460:2344":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:9173:23142":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"16:7067:31321":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:13228:19963":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:47761:3826":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:6017:16403":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:8859:2391":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:14033:20707":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:10430:16658":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:5737:14155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:46775:3859":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:9617:31815":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:6079:2271":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:3600:15499":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:207:2871":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:10547:16661":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"11:0:1784":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:11062:9028":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:1527:10951":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:42265:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:7677:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"20:244:32276":{"crate_id":20,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"2:41755:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:7497:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:2962:28703":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:9650:3051":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:7546:13745":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:1492:3236":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:41992:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"5:4426:2900":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:10988:9035":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:4243:9104":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"5:878:2880":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:12452:19915":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:2918:9318":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:13487:20673":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:554:10060":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:1273:3530":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:8146:2315":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:4907:3722":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:3189:26042":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"9:330:15321":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:6834:14659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:2933:15491":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:7708:3192":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:4650:13534":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:8893:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:1557:10954":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:7396:27238":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:44642:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:619:3503":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:8881:3752":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:6279:3167":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:3056:3551":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:21013:9334":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"17:11719:16550":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"11:2180:31091":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:5939:3118":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:44439:9439":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"20:1818:2694":{"crate_id":20,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"17:9003:16532":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:10837:25346":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"11:986:3529":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"11:1858:3535":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:8181:3196":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:1717:10969":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:14110:20715":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:4413:13509":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:10126:16594":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:14173:20722":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:40355:3594":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:8118:2319":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:2922:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"5:5362:2428":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:9057:21282":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:4984:13571":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:43938:2449":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"0:67:1985":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"16:5830:16398":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:4678:3657":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:46181:3858":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:13554:20675":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:8875:2476":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:9711:31803":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:6569:3178":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"20:2328:1970":{"crate_id":20,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"5:2131:2890":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:3797:15517":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:10456:16631":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:21831:3629":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:4916:3723":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:22201:27249":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:2810:15486":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:1570:3532":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:31073:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:12098:19416":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:13676:20681":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:11815:16776":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:14118:20716":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:12293:19430":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"0:68:1988":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"17:10771:16693":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:1503:3237":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:7284:2136":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:4719:16103":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:10846:25338":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:44455:9442":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:2461:28700":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:12554:19920":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:0:830":{"crate_id":6,"path":["libc"],"kind":"module"},"11:332:2862":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:2914:9317":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:12671:19926":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:2523:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"5:276:2164":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:9488:32184":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:1761:617":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:12774:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:3240:9099":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:5995:3125":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:2722:15482":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:39450:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:12531:19918":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:3937:3659":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"20:648:2260":{"crate_id":20,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"2:9811:2943":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:44015:2441":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:4239:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:42786:27879":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:13259:19965":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:6721:16422":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:40540:2357":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:8394:2132":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:11151:16760":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:48007:3887":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:579:10064":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:5044:13576":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:32405:3276":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:6361:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:1506:10948":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:21709:3265":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:39560:2698":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:2969:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:12983:19946":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:42148:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:12208:19424":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:13693:20670":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:22251:3653":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:2766:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:30703:27301":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:5129:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:46297:3818":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:43503:9029":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:6720:14652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:11573:3084":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:7917:23147":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:4704:3697":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:48129:8963":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:2450:15471":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"14:160:15393":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:1411:2391":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:40268:2443":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:10397:16656":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:9108:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:7342:31534":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:5058:13578":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:40216:27201":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:7764:3574":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:894:2893":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:4032:2872":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"11:667:3236":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:10818:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"16:4462:16014":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:3238:3535":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:5963:16401":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:11295:16765":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"18:671:20773":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:13546:20674":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:42506:8992":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:3915:15563":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:9118:3756":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:10798:3306":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:6796:14656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:43980:2445":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:2820:9284":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:11538:3649":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:2378:3617":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:40303:9129":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:11197:3631":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"6:4446:13513":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:1814:3565":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"5:7412:3590":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:7054:31478":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:50027:3807":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"14:31:15393":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"5:4074:3233":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:8837:2407":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:2495:2300":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:2572:2944":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"11:798:3523":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:7575:13749":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:10059:16572":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:42829:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:6869:26997":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:11517:3647":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:4638:25626":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:1733:10970":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:5661:16393":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:22578:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:10139:16595":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:3264:2311":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:4518:13522":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:6425:16413":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:14308:20727":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"20:2754:1973":{"crate_id":20,"path":["proc_macro","Spacing"],"kind":"enum"},"16:7269:31474":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:2772:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:5052:23146":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:40610:2349":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"18:599:32214":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:6820:14658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:1663:10963":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:35:2869":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:11678:9450":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:9330:1978":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"5:2690:29728":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:14296:20726":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:4045:3665":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:39786:24705":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:4800:13550":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:46040:3878":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"18:755:20776":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:11999:3313":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:3461:15498":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:8929:3751":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:7278:15032":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:11313:2413":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"11:1501:15385":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:6543:3744":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:4799:2962":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:40440:3608":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:47075:3880":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:8578:2424":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:7125:2327":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:5369:2271":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:8235:3646":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:6886:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:21055:3803":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:8246:3637":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:5382:2399":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"5:782:2875":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:10532:2308":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"5:3171:2391":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:1536:10952":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:11023:16680":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:4344:15944":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"20:2630:233":{"crate_id":20,"path":["proc_macro","TokenStream"],"kind":"struct"},"16:3888:15560":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:10340:16610":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:4557:16037":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"18:660:20772":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:43582:9021":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:41587:3638":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:11687:16549":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:2960:28705":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:4420:13510":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:6618:14649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:4701:3724":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:4626:3663":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:4879:1015":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:10738:16717":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:4872:13559":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:11235:16763":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:40284:2441":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:46151:3852":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:2845:9306":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:1733:9346":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:13575:20677":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:10962:16675":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"11:399:31092":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:5829:14223":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:12050:1526":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:4822:3673":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:1776:3555":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:3973:3660":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:2472:15472":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:26132:3273":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:587:10065":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:7609:15221":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:13723:20684":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:12062:19413":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:14324:20729":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"18:590:28241":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"18:574:32207":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:9581:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:7599:15220":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:11036:2987":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:3502:1978":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:7687:2635":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:11215:21336":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:22056:3266":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:4848:13556":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"14:202:9063":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:7474:16437":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:7748:3573":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:14042:20708":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:13792:20686":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:12086:19415":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:9790:31985":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:12058:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:4568:13528":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:46470:27136":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:4463:13515":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:8209:2289":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:11961:2423":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:9372:3048":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:14434:20736":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:2141:28747":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:14282:20725":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:504:16521":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:45726:3809":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:7090:31452":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:12015:21278":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"4:0:1780":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:12576:19921":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:2644:15479":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"9:507:15269":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:4158:3688":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:22677:3437":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"20:2577:2259":{"crate_id":20,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"17:9823:16558":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"9:237:2387":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:6268:31477":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:2359:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:40601:2362":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:13298:19967":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:1756:9345":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:643:3507":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:4949:13567":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:5566:2405":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:42345:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:3003:2161":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:48106:8962":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:11178:3262":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:45850:3846":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:5575:2348":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:2548:15475":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:8301:3686":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:11661:16509":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:5588:16389":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:2380:3618":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:10106:23183":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"2:44447:9440":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:2597:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:14145:20719":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:3655:15500":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:10370:16604":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:48159:8965":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:9843:2948":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:10012:3051":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:11496:2089":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"5:6788:2920":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:22230:28233":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:10507:16633":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:10254:2411":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:9701:16537":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:22003:26780":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:44033:2443":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:6607:14648":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:10980:3051":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:3389:2316":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:11340:21272":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:13632:20679":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:48221:8967":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:21185:3795":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:4965:2128":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:14522:20743":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:4723:13540":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:20963:3796":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:40840:2369":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:5322:16370":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:929:3524":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:44216:9057":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:13981:20702":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:2788:15485":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:13868:20692":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:6008:14235":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:6301:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:43686:2437":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:4497:16025":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:10575:16662":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:13922:20698":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:45750:3845":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:12373:19912":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"9:52:3206":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:21264:3792":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:11306:3080":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"20:1393:2718":{"crate_id":20,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"6:1495:10946":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"11:736:3235":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:11201:16727":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:4704:13538":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:7651:16446":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:4824:13553":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:4395:13351":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:0:1415":{"crate_id":1,"path":["std"],"kind":"module"},"2:2514:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:555:3489":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:5775:14218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:7474:9065":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:13989:20703":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"20:2014:2695":{"crate_id":20,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"2:40291:9128":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:6430:2328":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"5:3330:2911":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:10084:16567":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:11950:2426":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"18:614:32218":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:13274:3080":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:481:2955":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:40310:9130":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:3186:26031":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:4315:13501":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:4929:13564":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:3441:16681":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:6198:3301":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:5905:16400":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:3268:8986":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"}},"external_crates":{"20":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}