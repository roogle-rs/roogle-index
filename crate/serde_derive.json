{"root":"0:0:2379","crate_version":"1.0.203","includes_private":false,"index":{"2:13308:35946":{"id":"2:13308:35946","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44313:9528","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13403:29559":{"id":"2:13403:29559","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:40798"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13283:2615":{"id":"2:13283:2615","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42170:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11048:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11048:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13370:35954":{"id":"2:13370:35954","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13395:2595":{"id":"2:13395:2595","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12921:136","`FromStr`":"2:12920:3977"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42301:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12920:3977","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12920:3977","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13281:336":{"id":"2:13281:336","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13282:28332","`u8`":"1:12384:1856"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13294:28355":{"id":"2:13294:28355","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:13293:3373","str::split_at_mut_checked":"2:13296:28359"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13300:9432":{"id":"2:13300:9432","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44035:3495","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13357:35949":{"id":"2:13357:35949","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12960:4366","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12365:471","str::matches":"2:13354:2720"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44271:9526","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:16515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13306:30813":{"id":"2:13306:30813","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44303:9527","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13397:29551":{"id":"2:13397:29551","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5689:36655":{"id":"5:5689:36655","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13279:3485":{"id":"2:13279:3485","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12507:16517"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13327:28360":{"id":"2:13327:28360","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12960:4366","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12365:471","str::split_whitespace":"2:13301:34041","str::rsplit":"2:13333:28364"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44049:9443","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13339:35948":{"id":"2:13339:35948","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12960:4366","str::split":"2:13327:28360","prim@char":"1:12365:471","str::split_terminator":"2:13336:35947"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44117:9517","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:16515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492-0:1019:2506":{"id":"0:492-0:1019:2506","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1019:2506","glob":false}}},"2:13303:34040":{"id":"2:13303:34040","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13301:34041"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44332:9530","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13272:2724":{"id":"2:13272:2724","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13274:35941":{"id":"2:13274:35941","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13280:35943":{"id":"2:13280:35943","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:8:2499":{"id":"0:8:2499","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[216,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:13285:28329":{"id":"2:13285:28329","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42170:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11048:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11048:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13383:28374":{"id":"2:13383:28374","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:4366"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:16515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13319:3275":{"id":"2:13319:3275","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42170:191","prim@char":"1:12365:471","self::pattern":"2:12960:4366"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13316:28373":{"id":"2:13316:28373","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:4366"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:16515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13271:1000":{"id":"2:13271:1000","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12365:471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13301:34041":{"id":"2:13301:34041","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13303:34040"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44323:9529","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13310:2826":{"id":"2:13310:2826","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:4366"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13373:35956":{"id":"2:13373:35956","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13402:29558":{"id":"2:13402:29558","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:40798"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13409:35962":{"id":"2:13409:35962","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5020:35962"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44366:9475","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13282:28332":{"id":"2:13282:28332","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12384:1856"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13276:35942":{"id":"2:13276:35942","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:13274:35941"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5701:36658":{"id":"5:5701:36658","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:306:2570","`String`":"5:7744:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:2570","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13298:2967":{"id":"2:13298:2967","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12365:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44019:9510","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13273:35940":{"id":"2:13273:35940","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13392:35960":{"id":"2:13392:35960","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:4366"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:16515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13405:35961":{"id":"2:13405:35961","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5022:35961"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44348:9476","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13292:35945":{"id":"2:13292:35945","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12371:1726","crate::ops::IndexMut":"2:3492:3965","str::slice_unchecked":"2:13291:35944"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13323:5130":{"id":"2:13323:5130","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42170:191","prim@char":"1:12365:471","self::pattern":"2:12960:4366"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:16515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13336:35947":{"id":"2:13336:35947","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12960:4366","str::split":"2:13327:28360","prim@char":"1:12365:471","`DoubleEndedIterator`":"2:8333:129","str::rsplit_terminator":"2:13339:35948"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44099:9516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13287:28330":{"id":"2:13287:28330","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11048:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11048:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13389:35959":{"id":"2:13389:35959","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:4366"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13299:2961":{"id":"2:13299:2961","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12365:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44025:9511","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13368:35953":{"id":"2:13368:35953","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13293:3373":{"id":"2:13293:3373","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:13295:28358","str::split_at_mut":"2:13294:28355"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13345:28368":{"id":"2:13345:28368","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12365:471","str::splitn":"2:13342:28366","self::pattern":"2:12960:4366"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44171:9520","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:16515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13333:28364":{"id":"2:13333:28364","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12960:4366","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12365:471","str::split":"2:13327:28360"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44067:9446","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:16515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13348:28370":{"id":"2:13348:28370","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13354:2720":{"id":"2:13354:2720","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12960:4366","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12365:471","str::rmatches":"2:13357:35949"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44253:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5700:36657":{"id":"5:5700:36657","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13313:28372":{"id":"2:13313:28372","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:4366"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13372:35955":{"id":"2:13372:35955","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13291:35944":{"id":"2:13291:35944","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12371:1726","str::slice_mut_unchecked":"2:13292:35945","crate::ops::Index":"2:39714:3130"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13330:28362":{"id":"2:13330:28362","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:4366"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12775:9445","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13363:35951":{"id":"2:13363:35951","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12960:4366","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12365:471","str::match_indices":"2:13360:35950"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44217:9523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:16515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13377:2633":{"id":"2:13377:2633","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:4366"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13400:29555":{"id":"2:13400:29555","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13398:29552":{"id":"2:13398:29552","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40069:5121","Self::is_ascii":"2:13397:29551"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40069:5121","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13342:28366":{"id":"2:13342:28366","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:4366","str::rsplitn":"2:13345:28368"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44153:9519","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:493-0:404:2507":{"id":"0:493-0:404:2507","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[14,0],"end":[14,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:404:2507","glob":false}}},"2:13386:35958":{"id":"2:13386:35958","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:4366"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:16515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13309:34464":{"id":"2:13309:34464","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44341:9531","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2379":{"id":"0:0:2379","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[102,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2021\n# use serde_derive::{Deserialize, Serialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.203\")]","#![allow(unexpected_cfgs)]","#![allow(clippy::branches_sharing_code, clippy::cognitive_complexity,\nclippy::collapsible_match, clippy::derive_partial_eq_without_eq,\nclippy::enum_variant_names, clippy::manual_map,\nclippy::match_like_matches_macro, clippy::needless_pass_by_value,\nclippy::too_many_arguments, clippy::trivially_copy_pass_by_ref,\nclippy::used_underscore_binding, clippy::wildcard_in_or_patterns,\nclippy::unnested_or_patterns,)]","#![allow(clippy::cast_possible_truncation, clippy::checked_conversions,\nclippy::doc_markdown, clippy::enum_glob_use, clippy::indexing_slicing,\nclippy::items_after_statements, clippy::let_underscore_untyped,\nclippy::manual_assert, clippy::map_err_ignore, clippy::match_same_arms,\nclippy::match_wildcard_for_single_variants, clippy::module_name_repetitions,\nclippy::must_use_candidate, clippy::similar_names, clippy::single_match_else,\nclippy::struct_excessive_bools, clippy::too_many_lines,\nclippy::unseparated_literal_suffix, clippy::unused_self, clippy::use_self,\nclippy::wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:964:2368","0:965:2376"],"is_stripped":false}}},"5:5686:2754":{"id":"5:5686:2754","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13296:28359":{"id":"2:13296:28359","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13295:28358"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:391":{"id":"0:63:391","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1881,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:86-0:994:2600"],"is_stripped":false}}},"2:13351:28371":{"id":"2:13351:28371","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:16515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13270":{"id":"2:13270","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13271:1000","2:13272:2724","2:13273:35940","2:13274:35941","2:13276:35942","2:13279:3485","2:13280:35943","2:13281:336","2:13282:28332","2:13283:2615","2:13285:28329","2:13287:28330","2:13289:28331","2:13291:35944","2:13292:35945","2:13293:3373","2:13294:28355","2:13295:28358","2:13296:28359","2:13298:2967","2:13299:2961","2:13300:9432","2:13301:34041","2:13303:34040","2:13306:30813","2:13308:35946","2:13309:34464","2:13310:2826","2:13313:28372","2:13316:28373","2:13319:3275","2:13323:5130","2:13327:28360","2:13330:28362","2:13333:28364","2:13336:35947","2:13339:35948","2:13342:28366","2:13345:28368","2:13348:28370","2:13351:28371","2:13354:2720","2:13357:35949","2:13360:35950","2:13363:35951","2:13366:35952","2:13368:35953","2:13370:35954","2:13372:35955","2:13373:35956","2:13374:35957","2:13377:2633","2:13380:28274","2:13383:28374","2:13386:35958","2:13389:35959","2:13392:35960","2:13395:2595","2:13397:29551","2:13398:29552","2:13399:29554","2:13400:29555","2:13401:29556","2:13402:29558","2:13403:29559","2:13404:29560","2:13405:35961","2:13408:11052","2:13409:35962"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5685:36654":{"id":"5:5685:36654","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:2570","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:306:2570","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13380:28274":{"id":"2:13380:28274","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:4366"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5703:2958":{"id":"5:5703:2958","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13400:29555"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86-0:994:2600":{"id":"0:86-0:994:2600","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[21,0],"end":[21,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::internals::case::RenameRule","name":"RenameRule","id":"0:994:2600","glob":false}}},"0:1023:2603":{"id":"0:1023:2603","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"2:13289:28331":{"id":"2:13289:28331","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11048:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11048:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5702:4022":{"id":"5:5702:4022","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13401:29556":{"id":"2:13401:29556","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13295:28358":{"id":"2:13295:28358","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13296:28359"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13366:35952":{"id":"2:13366:35952","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:965:2376":{"id":"0:965:2376","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[97,0],"end":[102,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"5:5692:36656":{"id":"5:5692:36656","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13404:29560":{"id":"2:13404:29560","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:40798"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13374:35957":{"id":"2:13374:35957","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:4366"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12986:16513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5684":{"id":"5:5684","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5685:36654","5:5686:2754","5:5689:36655","5:5692:36656","5:5700:36657","5:5701:36658","5:5702:4022","5:5703:2958","5:5704:2957"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13399:29554":{"id":"2:13399:29554","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:964:2368":{"id":"0:964:2368","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[89,0],"end":[94,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:13360:35950":{"id":"2:13360:35950","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12960:4366","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12365:471","str::rmatch_indices":"2:13363:35951"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44199:9522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:16514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5704:2957":{"id":"5:5704:2957","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13401:29556"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13408:11052":{"id":"2:13408:11052","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5023:11052"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44357:9470","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:4902:7802":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:2148:8571":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:2838:7110":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:13855:6447":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:523:7546":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:5088:7886":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:14284:6529":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:44965:9560":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:10399:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:4718:7156":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:21819:11147":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:7397:5872":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:7397:37464":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:14788:6638":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"11:798:5554":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"11:873:11068":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:32384:4120":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:13641:4054":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"5:6506:11444":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"21:2725:2522":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"2:46821:8964":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:2224:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:13473:6357":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:9192:9078":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:21821:11351":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:32370:3284":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:44117:9517":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:40921:4054":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:40593:9476":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"9:53:10672":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:10399:3495":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:6749:9345":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:12371:1726":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:5375:7981":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:12076:24070":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"24:1061:37777":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"1:11811:11202":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:7168:9082":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:14560:6575":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:5319:7964":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:3656:254":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"24:5661:3917":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"6:6381:8128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:8063:4018":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:12151:5888":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:12494:6239":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:11928:9101":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:5357:7971":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"2:38311:6003":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:13601:35060":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"18:598:5984":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"24:5665:3916":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"17:16198:7063":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"20:744:3206":{"crate_id":20,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"2:42293:5343":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"5:894:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:3451:3070":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"24:1800:2596":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"type_alias"},"2:43159:7310":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:9731:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"1:6199:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"11:854:11067":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:46449:8921":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"7:79:22854":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"24:5368:3899":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"1:9102:11300":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:46305:8899":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"24:5894:2505":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"6:6521:8205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"21:365:5578":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"1:6572:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:4694:11255":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"24:5413:3903":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"24:5328:3875":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"21:2661:4139":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"24:3290:2535":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"24:5044:3870":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"5:1794:5770":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:15281:6807":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:30802:4097":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:7857:7296":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:6940:7232":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"24:5596:3176":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"21:1785:5574":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"24:5293:3872":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"2:9852:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:14189:6512":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:9396:5794":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"16:7306:37457":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"20:732:2510":{"crate_id":20,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"1:3677:11166":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"11:2121:9377":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:5670:8119":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:14516:6568":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"24:128:2510":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"6:1489:7584":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"18:765:28213":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:3701:4127":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:3661:146":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"24:5659:2728":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"17:11367:6166":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:7769:7288":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:12721:9521":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:1500:7589":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:9886:23955":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"11:1085:37415":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"11:842:11066":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"24:4792:4267":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"2:3265:5994":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:12949:6231":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:12328:9231":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:8003:5340":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:5471:8038":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:8173:11142":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:5385:6147":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:1395:11071":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:11773:6249":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:44949:180":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:46898:8965":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:6823:8336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"24:5706:3922":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"23:35:11147":{"crate_id":23,"path":["quote","ext","private","Sealed"],"kind":"trait"},"5:7564:9426":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:7767:10574":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:10645:11151":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:14131:6486":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"23:239:5039":{"crate_id":23,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"24:2116:37684":{"crate_id":24,"path":["syn","precedence","Precedence"],"kind":"enum"},"5:1496:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:1481:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:7528:9378":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:6799:11317":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:10317:6153":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:3214:247":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:15102:6766":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:11688:9223":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:5551:8065":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"11:2228:9411":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"24:6033:3075":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"2:4450:34197":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:32324:7428":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:14079:6481":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"24:2656:11147":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"17:11595:6182":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:11898:6187":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"24:6002:3940":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"24:3630:4223":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"5:221:5467":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:256:37471":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:2175:24050":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:5289:31818":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:5462:8032":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:47117:8972":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:47189:8978":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:894:3952":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:7098:9372":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:6682:11314":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"20:843:3206":{"crate_id":20,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"17:10155:6147":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:7879:10591":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:11574:9411":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:6638:8270":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"18:515:6027":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:43213:137":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:39731:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:8441:178":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:10339:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"1:11189:9074":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:6433:9322":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:5769:9260":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:10592:11300":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"24:1802:4078":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"2:11048:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:4560:7152":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:7332:8397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:2394:7090":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"24:3052:4200":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"1:4772:11272":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:22552:11439":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:1089:11070":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:13766:6433":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:7006:23886":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:3256:5103":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:22921:8576":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"23:150:4730":{"crate_id":23,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"1:8531:9443":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"24:4345:4237":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"17:11715:9225":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:12107:6174":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:11634:9219":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:10935:9011":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"5:7057:5559":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:6507:8204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:5482:8043":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"9:355:22876":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:46478:8922":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:14212:6521":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:7831:4013":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:22602:34062":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"24:1752:28238":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"16:7321:4709":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:10982:28287":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"24:5565:3178":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"1:1616:5554":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:12507:16517":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"11:1674:5767":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:1675:7701":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:12707:23968":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:10622:37477":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:23059:33911":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:1922:11095":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:2734:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"24:607:3962":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"2:41390:4021":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:12491:10578":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:15313:6815":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:8227:5633":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"17:10137:23934":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:7826:5552":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"24:3239:4206":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"17:14933:6736":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"24:4833:4270":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"24:3698:4225":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"2:4504:16543":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"5:7681:9427":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"21:214:10650":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"2:46138:8890":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:46241:8895":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:473:7515":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:32402:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:22735:11432":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"11:1140:22941":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:7639:4009":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:13089:6278":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"24:5497:3073":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"6:4869:7789":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"24:5429:3906":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"17:13308:6329":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"24:4717:4262":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"24:3035:4199":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"1:953:10693":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:2962:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:8615:11200":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:4923:11235":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:46258:8896":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:43634:8843":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:12388:9241":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:43934:16496":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"24:5570:3181":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"1:8589:9568":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"24:4676:4259":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"17:14545:6571":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:3778:7141":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"21:2686:3973":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"24:2279:3949":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"6:5586:8078":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"11:351:37403":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:11605:6183":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:40528:33914":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:6599:8256":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"23:513:1400":{"crate_id":23,"path":["quote","quote"],"kind":"macro"},"24:5819:2883":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"17:14298:6530":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:45946:8867":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:10759:6174":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:517:7543":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:6770:8319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:42263:4092":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"24:5601:2522":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"2:3457:140":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:2712:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"5:3339:9410":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"24:4869:4273":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"2:3054:137":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:6419:8155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:16187:7062":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"21:2666:2590":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"6:5325:7965":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:8644:8413":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:13886:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:5205:7907":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:13211:6311":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:6634:7121":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"24:3341:140":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"1:9383:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:40069:5121":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:2902:23015":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:43449:9507":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:12724:23969":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:7983:5351":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:1539:7608":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:2939:16563":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:22257:34958":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"18:643:6024":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"24:4700:4261":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"2:40517:9472":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:44452:9532":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:7842:5553":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:6526:8206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:12384:1856":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:13774:6435":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:5622:8099":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:1613:3952":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"24:4466:4245":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"1:8185:9011":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"24:363:37765":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"2:44635:9545":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:11096:5882":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:22730:11434":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"6:4896:7799":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:40992:4059":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:41367:9492":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:15701:6939":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:23748:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:8249:8540":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:11293:24010":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"5:1645:11072":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:11324:24032":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:2780:11179":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:46080:8879":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:4139:11221":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:44645:9549":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:2728:7105":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:9108:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"24:1022:5979":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"2:22376:11147":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:3703:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:3067:137":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"11:2559:7429":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:23093:8594":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:22245:8575":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:1920:5621":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:3287:5454":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:46095:8880":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:32460:5104":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:14868:6700":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:8155:9395":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"24:5306:3873":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"6:6716:8304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"17:13412:6346":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:11313:9215":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"11:123:5761":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:7475:5464":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:5093:16552":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:6385:7185":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:5179:7893":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:7665:5342":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:5477:8041":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"5:1595:9407":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"18:651:6024":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:2572:7098":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:12775:9445":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:44724:9557":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:4641:7155":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:21766:11147":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:11128:6138":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:46220:8894":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:8386:4034":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:42130:8822":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:8544:11200":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:12264:24113":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"24:3307:4209":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"17:11764:9230":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:15569:6898":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"24:5549:3076":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"16:2438:7092":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:7033:5558":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:22936:9455":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:5844:5859":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:7341:8403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"24:4775:4266":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"2:3935:5554":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:14341:6536":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:9916:23956":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:6977:5577":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:5381:7982":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:12370:1692":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:6620:7191":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"24:5816:3170":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"17:13116:6284":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:819:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"5:3095:37163":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"24:4316:4235":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"2:32459:4145":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:1637:9410":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"18:589:6031":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:15206:6790":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"11:1893:5552":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:2157:5504":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:6927:7230":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:2938:11147":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"11:430:37410":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:32377:34178":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"6:485:7521":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:32491:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"16:2355:7083":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"11:2380:3953":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:23138:11147":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:16235:7072":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"6:1643:7683":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:8479:9052":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:586:7580":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"5:7067:5560":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:13972:6192":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"24:5333:3893":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"2:4438:34215":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:23044:33922":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:1584:7639":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:1696:7711":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:10706:11184":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"24:4442:4243":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"17:1098:23990":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:570:7571":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:5570:8073":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:3300:33606":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"24:5701:2905":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"24:4572:4252":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"6:4842:7766":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:44348:9476":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:13292:6325":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:4816:7746":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"18:718:6043":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:3352:37179":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:7910:23896":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"24:5891:3927":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"17:12454:9245":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"24:5372:3878":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"16:5307:7170":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:4970:7833":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:538:7555":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:4211:11226":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:8261:8542":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:8319:8556":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:3345:4256":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:3614:7140":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:12368:1317":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"16:5846:9267":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:4990:7844":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:6813:8333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:47253:8988":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"24:3511:4218":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"17:13797:6440":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:14025:6473":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:7570:7128":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:12362:9240":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:8118:9389":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:10395:4108":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"24:5970:3932":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"1:379:5350":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"5:6090:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"20:806:37518":{"crate_id":20,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"24:5716:3923":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"2:11399:9446":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:22815:9453":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:10828:37488":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:10945:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:12363:417":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:13015:6234":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:11557:24062":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:14271:6527":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:3275:6007":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"24:3800:4227":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"17:13581:6389":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:5507:8052":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"5:938:5776":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:22702:11433":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:12661:9513":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:14260:6526":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:8202:7134":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"21:2265:2914":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"6:5051:7874":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:45914:8865":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"24:1093:37779":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"9:328:7469":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:41022:4061":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:14489:6564":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"18:507:6024":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:6543:9330":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:5541:8059":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:4771:7158":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:11851:11201":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"24:1077:37778":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"17:15356:6830":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:31187:5117":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"5:6874:5770":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:7361:8409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:11341:24020":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:47096:8971":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:21736:34966":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:10982:23979":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:9273:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:5366:980":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:6564:8234":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:12385:1838":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:41405:4025":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:46372:8902":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"24:3613:228":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"17:14235:6522":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:44199:9522":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:13730:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:11647:9220":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:12929:6267":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"23:0:1400":{"crate_id":23,"path":["quote"],"kind":"module"},"24:5324:3892":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"24:4804:4268":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"2:46034:8876":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"24:5886:3928":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"6:5562:8071":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:7686:23894":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:915:9407":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:8470:9051":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:4485:5453":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"11:830:11064":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:1530:7602":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"11:1914:9410":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:3306:3953":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:6917:8373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"24:3732:254":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"2:4651:4091":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:40717:16640":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:44008:9509":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:6534:8211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:43394:9502":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"18:689:9201":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:40543:8808":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:22604:5490":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"2:46499:8923":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"24:5813:203":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"24:4560:4251":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"6:7463:8443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:40939:4065":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:3729:3957":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:13594:6390":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:1107:10572":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"24:4915:4276":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"1:11202:9075":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:6456:23883":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:21768:11355":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:15655:6925":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:0:1005":{"crate_id":6,"path":["libc"],"kind":"module"},"1:527:5326":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"24:6021:67":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"17:15778:6961":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"24:5350:3896":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"2:2069:1361":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:10284:6152":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"20:715:252":{"crate_id":20,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"24:661:9151":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"1:11213:28275":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"24:274:10564":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"6:545:7558":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:23186:8596":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"2:42341:3953":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:8538:9527":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:12371:6267":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:568:5332":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:3646:16603":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:12337:11061":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"11:698:3952":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"23:272:2599":{"crate_id":23,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"17:14912:6731":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:8296:8550":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:12127:6223":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:4341:11249":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:14372:6541":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:2508:7095":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:1861:11080":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:42284:5477":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:15596:6910":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:8461:4016":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:7577:8512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:12391:1422":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"24:5365:3877":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"16:7695:7285":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"18:659:28214":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"23:78:2591":{"crate_id":23,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"23:148:4731":{"crate_id":23,"path":["quote","__private","HasIterator"],"kind":"struct"},"17:11674:9222":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:6317:2552":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:47330:9006":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:44303:9527":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:43895:8844":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:10926:9585":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:21947:8574":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:38366:6004":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:42624:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:10827:5832":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:11692:9589":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:15836:6971":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"24:4507:4247":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"2:41946:8815":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:7869:2603":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:14021:5463":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"5:3318:37170":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"24:5026:2581":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"1:2315:11126":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:7509:23891":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"11:2349:11071":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"16:5863:23877":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:1829:5308":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"16:6079:9251":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"11:299:9400":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"24:3817:4228":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"16:4913:7163":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:42262:4093":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:12383:887":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"12:0:3710":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:1625:9408":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:13999:6470":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:46176:8892":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"24:5828:2886":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"1:3340:11184":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:40706:9480":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:5593:8080":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"21:2557:9189":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"19:0:1294":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:7648:23892":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"14:165:22951":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"11:2539:7425":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:10905:9577":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"5:6658:5554":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:10393:3123":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:4153:11222":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:43995:8846":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"18:698:9202":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:8488:11146":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:6509:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:12238:24115":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:12695:24150":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:12079:5502":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:12390:1916":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"24:5877:3929":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"17:13497:6361":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:5395:7990":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:5241:7925":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:5494:8046":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"24:4287:4233":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"2:4882:4123":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:491:7523":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"11:2533:2510":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:41032:4046":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:23263:8603":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"2:42880:3123":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"15:0:3712":{"crate_id":15,"path":["addr2line"],"kind":"module"},"21:53:5577":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"5:3313:9409":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"24:3205:4205":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"1:7717:33882":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:2971:258":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:14855:6693":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:10524:23961":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"24:3562:4221":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"24:6007:3941":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"16:7618:7281":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:11227:23985":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:10500:31792":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"6:4881:7792":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:7733:5801":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"24:5081:2860":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"20:687:3975":{"crate_id":20,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"24:3783:2559":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"16:7539:7127":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:13146:6288":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"3:0:505":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:1632:7675":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:13173:6296":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:10635:5879":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:12621:6245":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:1625:7671":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:14386:6543":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"24:5289:3887":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"23:46:3983":{"crate_id":23,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"6:4947:7825":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:5831:9265":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:44217:9523":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:4614:7154":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:2719:5833":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:5196:7902":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:9405:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:4743:7157":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:4217:3957":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"15:327:10668":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:11090:5881":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:11437:16507":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:4997:7847":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:7548:3952":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"11:2545:7426":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"23:504:5033":{"crate_id":23,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"2:42663:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:5635:8105":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:42357:3952":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:928:5554":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:12975:9204":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:5648:8111":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:22643:11441":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:6895:7226":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:867:37471":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:10092:23960":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:15616:6916":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:7144:23889":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:4672:11254":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:8168:5630":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:42096:9500":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"24:4886:4274":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"11:809:5552":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:4817:8424":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:8787:9068":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:6976:7235":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:7534:37180":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:4531:7151":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:22223:11357":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"6:5186:7895":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:42887:4100":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:4468:7149":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:5708:11298":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:8073:3855":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:2483:11133":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:15463:6855":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:6723:8305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:871:3953":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:12376:740":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"11:835:11065":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:5112:11275":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"11:1725:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:15023:6749":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:2612:5490":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"14:187:22958":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"21:929:4139":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"1:5098:11274":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"6:5057:7876":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"20:927:2914":{"crate_id":20,"path":["proc_macro2","Punct"],"kind":"struct"},"6:5295:7953":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"24:4425:4242":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"2:21839:8574":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"0:965:2377":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"1:8340:11180":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"20:709:9191":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"16:2548:7097":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"21:2232:2510":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"24:5857:2903":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"1:2705:5847":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:45967:8872":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:3658:33685":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"11:1023:11070":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:4354:11250":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"24:1105:3579":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"2:22:819":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"24:3409:4214":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"15:306:22971":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:559:7566":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"24:5992:3937":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"2:44939:11442":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"17:15646:6923":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"21:181:5195":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"1:3303:33609":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:44573:9543":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:12683:24151":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:14587:6578":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:291:5770":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:14876:6701":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:5089:11273":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:11326:16504":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"24:5673:3915":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"24:5285:3886":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"17:15273:6806":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:12969:6269":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:6263:9320":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"24:4374:4239":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"2:12038:16501":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"16:8136:9392":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:43234:4099":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:1631:9409":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"23:235:5037":{"crate_id":23,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"16:6120:23880":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:4142:5554":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"24:1361:9152":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"16:860:37441":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"6:5334:7968":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"20:0:2356":{"crate_id":20,"path":["proc_macro2"],"kind":"module"},"17:14723:6587":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:42187:173":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:12422:9243":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:40838:4049":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:3101:4219":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:40951:4056":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"21:1351:2603":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"2:10403:4107":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:10650:9441":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:32366:2677":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:15822:6968":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:11915:24108":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:10769:37492":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"9:480:22860":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:14414:6549":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"24:267:10563":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"2:44067:9446":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:7715:4047":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"24:1368:9155":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"2:40732:9481":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:44915:8854":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:532:7552":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:5897:7175":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:2073:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:9234:11323":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"21:2730:3206":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"17:14449:6561":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:11547:6019":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:11063:23994":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:5914:9272":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:43120:8828":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:11078:5880":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:9737:23935":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:12485:24143":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"5:1564:3952":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:15473:6860":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:12089:6221":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:2467:5479":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:373:5349":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:4103:11220":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:42212:3952":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"5:1604:11064":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:11419:6174":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:22952:8577":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"21:2534:4140":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"2:44049:9443":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:46649:8929":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"2:22657:5490":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"2:44271:9526":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:43196:4097":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"24:4606:4254":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"24:6012:3942":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"24:5852:2900":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"18:531:9195":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:15266:6805":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:1727:7723":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:1898:5552":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:44907:10296":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:3465:5552":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:11269:24009":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:43855:9448":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:13922:6460":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:41167:4063":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"24:5341:3895":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"18:80:28202":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:8021:5337":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"20:982:3952":{"crate_id":20,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"6:6680:8288":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:5488:8044":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:1521:7597":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:14147:6491":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:8640:11277":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"24:5456:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"18:726:6046":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:4352:7147":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:6924:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:5282:7948":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:4821:8428":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"16:2323:23014":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:21719:34968":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:5311:7960":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"11:785:9407":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"5:3277:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:16093:7038":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"11:1907:9409":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:34040:5983":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:6437:8168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:3347:9408":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:41181:4064":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:15138:6771":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:15324:6819":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:10844:5833":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:10915:9565":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"2:40639:9477":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"24:4664:4258":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"2:3219:3050":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:8508:4049":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"11:1049:11071":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:15058:6753":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:3094:2763":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:11153:23965":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:5686:7114":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:10993:10581":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"5:6785:3952":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:3260:3997":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:2322:11127":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"24:1941:2359":{"crate_id":24,"path":["syn","parse_macro_input"],"kind":"macro"},"17:12251:24114":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:47238:8987":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:15799:6964":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:11016:23980":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"21:141:5585":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"24:3851:4230":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"24:1943:2597":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"24:5345:3876":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"17:11242:24008":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"24:657:226":{"crate_id":24,"path":["syn","error","Result"],"kind":"type_alias"},"24:5984:3934":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"17:13526:6370":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:3404:5457":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:2037:24021":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:5412:1246":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:34386:5982":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:4851:4121":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:11510:24014":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:8259:3284":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:1223:37205":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:30526:11204":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"24:3868:4231":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"24:3528:4219":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"6:5420:8002":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:6480:8185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:2965:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:2232:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"1:5622:11296":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"5:306:2570":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:23208:8598":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"6:5450:8023":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:8802:11289":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"24:1916:4075":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"24:3477:3205":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"2:44546:9542":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:12201:24138":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:14475:6563":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"10:0:3708":{"crate_id":10,"path":["adler"],"kind":"module"},"1:3393:11186":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"14:7:10566":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"24:5576:3580":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"2:41908:170":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:13064:6277":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"24:3681:2537":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"20:815:2589":{"crate_id":20,"path":["proc_macro2","imp","Span"],"kind":"enum"},"20:738:2522":{"crate_id":20,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"17:13235:2522":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:6047:23878":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:1625:10693":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:12381:900":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"24:4531:4249":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"2:11287:9445":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:12387:1850":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:10954:23978":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"11:2551:37407":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:14402:6547":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:7454:8440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:5837:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:3014:23017":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:11666:9586":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:43147:8837":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:9807:23941":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"24:3494:4217":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"1:4201:11225":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:5335:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:41415:4027":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:21827:11354":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"11:1158:10572":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:43642:9508":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:623:11051":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:4883:11276":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:8063:11060":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:2768:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:9781:23953":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:6606:9339":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:11304:9093":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:6406:10701":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"24:4970:2853":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"24:3018:4278":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"17:12225:24116":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"24:4898:4275":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"1:11706:10306":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:6782:23885":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:6902:8362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:12408:6233":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"0:0:2379":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"17:10350:6154":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:10397:4109":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:2010:787":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:46389:8903":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:7487:8455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:6678:4019":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:13606:6393":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"14:160:10566":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"24:5384:2788":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"17:14246:6524":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:12920:3977":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:6777:4066":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:10044:10695":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:13877:6454":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:2748:7106":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"24:4857:4272":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"1:9360:9085":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:8014:8527":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:7580:9383":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:8195:9566":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"24:1626:37766":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"6:6652:8281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:1844:696":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:4802:7159":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:4161:11223":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:15126:6768":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:10218:6150":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:9340:28290":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:8699:4704":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"24:3834:4229":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"17:13272:6324":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"11:740:10693":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:1667:7700":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:2592:7099":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:15608:6913":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:11102:23988":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:8284:8548":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"24:708:3952":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"2:42148:8823":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:14503:6567":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:597:2603":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:13187:6297":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:4572:4130":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:9314:10700":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:9255:9081":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:3436:11182":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:1259:37206":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:21690:34964":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:10340:4105":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"18:613:37516":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:6704:5770":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:22470:11437":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"5:2594:8565":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:497:7526":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:3095:11110":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"17:16032:6314":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"5:4536:5794":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:7428:23890":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"11:2400:3957":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:3559:5794":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:6473:8181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"24:2458:3959":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"2:43441:9506":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:6972:9439":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:11799:24104":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:13986:6469":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:3592:9054":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:16050:6324":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"2:3583:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:15151:6777":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:3207:4126":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:2936:23016":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:15078:6761":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"21:2460:126":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"6:5019:7860":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:4307:5794":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:2959:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:40889:4051":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:33895:6001":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:5127:7889":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:12433:6234":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:938:5552":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:11661:9221":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:23296:8606":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"2:41930:8813":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:16069:7033":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"5:1424:10572":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:553:7563":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:15383:6837":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:5224:7915":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:4303:33177":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:898:5773":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:40772:5823":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:2612:7100":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:46744:8932":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:39718:9468":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:12175:24128":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"24:5361:3898":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"17:10251:6151":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:12043:24072":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:5817:9262":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:44700:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:44025:9511":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"24:3664:3254":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"17:12851:9247":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:23219:8599":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"17:15635:6922":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:11497:24015":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:13455:6356":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:10184:4098":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:656:10580":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:47017:8968":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"14:40:2522":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:11567:24063":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"11:1105:22940":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"24:5425:3882":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"2:6154:4053":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:9219:11321":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:12189:24137":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:12792:6112":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"5:4172:5770":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:7650:4010":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:5069:7885":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:44976:5462":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:10401:4106":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:23241:8601":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"2:12005:16500":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"6:5271:7940":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"10:44:7432":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:2303:22989":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:4819:8426":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"6:8330:8557":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"24:2451:3957":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"1:12386:1844":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:3925:7145":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"24:5298:3888":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"20:693:4089":{"crate_id":20,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"2:43864:16503":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:8797:34373":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"11:2148:11071":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:13899:6455":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:3463:142":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:1956:5794":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"24:4408:4241":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"1:12375:737":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"17:12478:6238":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:43795:35363":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:10610:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"24:1798:3964":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"5:7158:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"24:5320:3891":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"2:44431:16528":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:12966:16514":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:5638:11297":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:9175:9077":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"24:5671:3920":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"2:5981:5794":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:11947:9594":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:7799:7120":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"18:608:37517":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:5117:7888":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:41423:4029":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:7556:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:7548:8498":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:34213:5040":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:5036:7868":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:8084:10581":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:8031:8538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:39883:8680":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"18:0:3715":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:6461:5859":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:23252:8602":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:10877:23966":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:7888:9385":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:11089:23989":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:1609:3953":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:13959:6464":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:2458:7093":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:2182:11074":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"11:1880:3953":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"21:895:5591":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"1:4406:11251":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:43874:9449":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:11033:9076":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"11:1884:3952":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:6560:7116":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:3610:11144":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"24:1620:4095":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"2:32391:9467":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:6867:5867":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"1:4008:11203":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:4377:3953":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"24:3222:123":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"1:9268:10698":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:2768:7107":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:6005:5554":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:47154:8975":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"24:5975:3933":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"6:4875:7790":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:5217:7914":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:9544:5621":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:46611:8927":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:4886:11254":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:42252:4710":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"24:4927:4277":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"16:6802:9346":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:12392:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:8069:11097":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:44866:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:10602:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:2636:7101":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"21:2647:2589":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"2:41008:4060":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:10887:37484":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:13344:6336":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:8232:9567":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:38476:6005":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:43130:4097":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:15456:6853":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:6708:8300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"2:46988:8967":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:6665:23884":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:6504:9327":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:10185:6149":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:816:11205":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:11467:6181":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:6268:4042":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:10391:4100":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:11788:24103":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"20:358:3971":{"crate_id":20,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"6:6411:8153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:3440:3999":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"17:12399:9242":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:6740:8309":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:39876:16604":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:4167:11224":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:11256:9212":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"24:5380:3879":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"2:13929:5844":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"6:5629:8102":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"6:4964:7831":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:7604:7130":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:986:11069":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:14994:6743":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:8284:145":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:5700:7117":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:7813:9384":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:12671:24180":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"11:1005:9377":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:5603:8085":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"18:96:28203":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:2528:7096":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:44323:9529":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:22218:11147":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:12213:24139":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:11755:9229":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"24:5354:3897":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"6:564:7568":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:40809:4038":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:10973:28269":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"21:2600:3952":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"1:2495:11139":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:15092:6765":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:8555:11196":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"5:994:5778":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:40688:8809":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:11492:9520":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"24:5579:2656":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"13:229:7424":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:12316:10307":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:11493:24026":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:8247:4037":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:6758:8317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:47046:8969":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:5349:7970":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:44366:9475":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:2614:5491":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"1:9319:2516":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"5:2357:37240":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:5538:16492":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:12768:23938":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:8240:31848":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"21:421:5758":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"17:15249:6798":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:10818:23965":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:0:3713":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:6966:4044":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"24:1109:3913":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"1:9388:5863":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"6:5007:7854":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:11825:24085":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:12377:756":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:10419:6156":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:15624:6917":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:4905:804":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"6:8290:8549":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:13966:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:7111:9375":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"24:2094:10997":{"crate_id":24,"path":["syn","path","printing","span","QSelfDelimiters"],"kind":"struct"},"1:6183:5859":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:4981:5851":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:13034:16522":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"5:1132:5770":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:3264:24071":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"24:95:11147":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"2:11364:16510":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:13738:6426":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:15410:6844":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:8175:23897":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"24:1364:9153":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"16:6231:9317":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:8301:7338":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:43419:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:3105:28256":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:7716:4048":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"20:719:3971":{"crate_id":20,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"11:434:37411":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:1075:9377":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:7727:7131":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"20:834:2522":{"crate_id":20,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"2:44735:16708":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:7473:7279":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:7497:7280":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:46322:8900":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:21717:34971":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:14012:6472":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:1636:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:42074:33917":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:15582:6904":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:1548:3957":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:11042:23982":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:12342:9235":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:4984:7841":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"5:3097:8567":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:6659:8282":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:12289:6226":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:2635:11178":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:45882:8861":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:44856:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"24:5544:3909":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"17:15769:6959":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"24:5847:3187":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"24:2338:3951":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"2:2039:5407":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:33761:5999":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:15931:6297":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"6:6882:8348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:12475:16656":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:2804:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:14111:6485":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"24:4618:4255":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"5:7484:3952":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:4929:7817":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:758:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:12353:9239":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:6160:22988":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:11537:24033":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:2032:671":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:7938:5876":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:4829:7756":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:11723:9592":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:3906:11201":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:5107:7169":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"24:5405:3881":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"17:13024:23972":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:4937:7819":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:30781:5411":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:6948:7123":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:14066:6480":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:5995:9281":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"24:5867:3926":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"2:43402:9504":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"24:5070:2737":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"2:41157:4062":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"24:3069:4201":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"24:4454:4244":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"17:0:3714":{"crate_id":17,"path":["object"],"kind":"module"},"16:2478:7094":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:47200:8979":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:39634:16539":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:42894:4108":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"24:5492:2530":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"21:1090:208":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"17:11354:24019":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:14575:6234":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:10661:23963":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"21:1978:5575":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"2:40701:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"24:4729:4263":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"2:44481:9540":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:2485:11134":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"24:718:3953":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"2:40879:133":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:40577:9475":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:41374:4017":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:6077:5794":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:8267:8543":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:7518:8481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"24:3171:2902":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"6:7986:8524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:11239:9086":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"2:47174:8977":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"18:754:9211":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:5722:7119":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"24:6024:3930":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"24:5996:3939":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"17:14051:6477":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:9169:3952":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:8255:8541":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:3249:5101":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:11405:24017":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:5802:23876":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:46066:8878":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:6066:9290":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:5258:31818":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"11:488:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:44253:9525":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:11865:24107":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:10905:23967":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:31160:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"11:2466:5552":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"24:3103:4203":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"5:1239:37159":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:6248:5794":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:7061:7240":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"24:3137:2570":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"24:96:5177":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"17:15400:6841":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"20:948:2522":{"crate_id":20,"path":["proc_macro2","Ident"],"kind":"struct"},"11:2420:3952":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:15:3348":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:8221:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"14:31:10566":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:12388:1832":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:11115:23987":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"24:2311:3950":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"17:403:23951":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:26148:267":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:6480:7115":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:10915:37487":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:40802:11143":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:10384:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:8333:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:44498:9541":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:3810:7142":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"23:322:3209":{"crate_id":23,"path":["quote","spanned","Spanned"],"kind":"trait"},"16:7823:23895":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:4986:24157":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:13437:6348":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"18:635:6042":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:10752:5337":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:10997:6164":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:47134:8973":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"24:5054:2360":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"2:40556:9473":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:2878:7112":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:11392:24018":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:8248:10587":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:10170:6148":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"4:0:3705":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:14311:6531":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:4502:7150":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:13844:6446":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:1551:7617":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"24:4746:4264":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"24:2602:11147":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"16:6872:9360":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:15445:6852":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:45852:8857":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:542:9250":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:44313:9528":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:4940:7164":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:42108:9568":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:578:7576":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:4890:7797":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:12863:6265":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:4976:7836":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:2338:7081":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:7633:37429":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:12372:1816":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"24:5612:2599":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"1:500:5845":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:8607:11244":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:8335:10706":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:42507:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:12647:24147":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"2:9420:4711":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:6026:9287":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:9984:23958":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:22868:9454":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:4821:24152":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:3043:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:45999:8874":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:2136:5506":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"5:3373:2559":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:3435:4128":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:5958:11312":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"20:113:9190":{"crate_id":20,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"5:3940:5552":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"21:2592:3971":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"24:664:5978":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"17:15116:6767":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:3875:11073":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:1657:7694":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:9423:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:40744:3495":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:11853:24106":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:13387:6341":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:2171:11073":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:13252:6314":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:6398:7113":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:12382:906":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:45867:8860":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"24:1053:37780":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"24:5994:3938":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"16:6342:37449":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:10709:11186":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"6:4957:7828":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"24:3188:116":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"17:11051:24000":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:40680:9479":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"6:479:7518":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:47215:8980":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:3342:11185":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:6525:11445":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"20:775:3974":{"crate_id":20,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"6:5107:7887":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"5:1410:11070":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:1703:7714":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:11672:11303":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:11478:9519":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:39896:8681":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:1563:7625":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"21:109:5584":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"24:5047:2539":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"1:11221:8850":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"24:5999:3077":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"2:2773:134":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:40673:9478":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:4807:11224":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:735:10573":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"11:671:3953":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:39714:3130":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:7308:8380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:1684:7707":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:10044:23959":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:6623:8268":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:3395:11187":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"24:5441:2545":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"24:5871:3074":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"1:9327:9082":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:6748:8310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:11001:11298":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"17:12993:23971":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:9702:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:15039:6752":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"24:5801:3924":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"2:44357:9470":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:11189:6170":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"24:4519:4248":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"17:11443:6179":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"20:801:9192":{"crate_id":20,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"11:396:5765":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:40898:4052":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"14:220:7416":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:15734:6946":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"20:792:252":{"crate_id":20,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"2:2345:5459":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"20:889:2590":{"crate_id":20,"path":["proc_macro2","TokenTree"],"kind":"enum"},"18:521:28216":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"20:953:3206":{"crate_id":20,"path":["proc_macro2","Literal"],"kind":"struct"},"1:1098:11071":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:12508:6242":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:5006:7166":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:23175:8595":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"17:12659:24146":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:38421:6002":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:44467:9538":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:12389:969":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:16259:6341":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"6:6765:8318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:32400:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:12584:23965":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"6:7604:8518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"11:102:9399":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:14968:6737":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:6494:9326":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:9441:9086":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:6449:8172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:15521:6897":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:8525:3495":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:34559:4269":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:6672:8286":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:7757:9434":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:41381:4019":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:2203:24016":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:9709:11142":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"24:53:2598":{"crate_id":24,"path":["syn","token"],"kind":"module"},"24:5401:3902":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"2:41396:4023":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:7431:8433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:6718:5866":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:5366:7975":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:5168:4700":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:3290:5455":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:9307:31825":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"24:4548:4250":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"2:23230:8600":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"24:5417:3904":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"2:23117:11218":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:11872:11203":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"24:3749:2505":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"6:6777:8320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"16:7014:23887":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"18:680:9198":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:4561:11245":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:3438:11183":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:8251:4036":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:13946:6461":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"24:5527:3910":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"6:5255:7931":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:10712:11182":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:0:563":{"crate_id":2,"path":["core"],"kind":"module"},"1:2318:5496":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"24:4391:4240":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"24:5012:3856":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"24:1757:28239":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"1:10910:9579":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"6:5658:8112":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"5:3860:4089":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:44658:9553":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:43976:16505":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"21:912:252":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"10:36:7431":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:2598:672":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:7492:9424":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:40566:9474":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:2975:257":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:5654:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"24:4478:134":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"2:44852:164":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:5367:23874":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:5441:8017":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"5:1533:3953":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"21:2596:4138":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"16:5927:9273":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:2541:3720":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:13618:16568":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"5:7524:9425":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"24:3443:4216":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"2:10859:5837":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:22576:11147":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:15333:6822":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"21:2705:2914":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"17:13785:6438":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:1859:11079":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"5:789:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:8869:9573":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:11075:6166":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:1514:7594":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:7919:5874":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:2374:7089":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:44171:9520":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:22986:33932":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:46723:8931":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"2:4:1259":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:12300:24141":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:8304:4035":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:8295:165":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:10761:5830":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:5324:11189":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:11788:5885":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:8308:8552":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:43846:9447":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:12530:24149":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:12464:24142":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"24:2667:5990":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"2:2968:144":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:513:23952":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"24:3392:4213":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"6:7414:8432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:592:5334":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:12348:28267":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:432:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:7354:10590":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:6648:9341":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:40851:4040":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:39826:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:40487:9471":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"15:394:22980":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:43921:4038":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"24:5474:63":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"1:1897:11089":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:42901:4109":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:9415:5870":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"16:6574:7133":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"5:2304:9415":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:40983:4058":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:5676:8121":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:4925:11237":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:47291:8990":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:46694:8930":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"16:6300:23881":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"20:116:37523":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"11:2440:5554":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"24:3426:4215":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"1:2469:11130":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:33828:6000":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"24:3545:4220":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"1:8858:9073":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:3899:7144":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:672:11054":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:2418:7091":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:2076:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:23197:8597":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"2:8750:149":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"24:3596:4120":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"24:355:4089":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"1:4333:11248":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:1690:7710":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"11:1580:22943":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:3738:4129":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"24:5520:3145":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"6:6493:8194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:7744:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:8353:8563":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:11506:16509":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:6335:10651":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:40754:11111":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:8842:9570":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"5:7694:16640":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"18:113:28204":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"24:5592:3911":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"2:11244:9443":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:12808:6263":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:40600:16558":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"24:1101:3912":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"2:4603:4131":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"20:908:3973":{"crate_id":20,"path":["proc_macro2","Delimiter"],"kind":"enum"},"18:670:28215":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"18:563:6030":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"14:0:3711":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:7350:8404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:15678:6938":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:12364:1177":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:5533:8054":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"5:1614:10692":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:16138:7047":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"16:2854:7111":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:12572:6174":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:12516:24156":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"16:2808:7109":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:5301:7956":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:7755:7122":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:12278:24140":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"9:176:10683":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:11214:23986":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"11:1564:22942":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:36435:4271":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:4570:5796":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:5044:7872":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:16212:7067":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:44153:9519":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:13553:6379":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:5151:7891":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:11195:3953":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:9204:11322":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"24:4495:4246":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"2:46159:8891":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:6442:9323":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:44874:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:3297:31214":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:46628:8928":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:1507:7592":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:5405:7996":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:9938:23957":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:43966:9451":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:4223:11229":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:5075:7168":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:11501:5883":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"1:320:1778":{"crate_id":1,"path":["std","thread"],"kind":"module"},"21:2204:3974":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"1:6037:5853":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"24:659:137":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"2:42782:10697":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:15760:6955":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:42468:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:3529:4023":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:15944:6311":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:10886:11278":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:3649:4105":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:47075:8970":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"14:214:9397":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"24:4688:4260":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"2:43188:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:12369:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:974:11067":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"23:38:3584":{"crate_id":23,"path":["quote","format_ident"],"kind":"macro"},"17:15222:6794":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:11524:24061":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:6588:9331":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:9286:28292":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:7559:9382":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:6443:8171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:23024:33925":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:9714:5878":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"17:16249:7073":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:680:11056":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:44332:9530":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"24:5421:3905":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"17:11812:24069":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:7368:8413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:8273:8544":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:14463:6562":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:13399:6344":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"9:236:8839":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"24:98:4418":{"crate_id":24,"path":["syn","token","private","CustomToken"],"kind":"trait"},"17:12318:6231":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:980:11068":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"23:281:2599":{"crate_id":23,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"1:3486:11173":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:21935:11147":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"24:3579:4222":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"21:2710:2588":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"2:7610:3333":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:437:6098":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:7206:5816":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:12332:10708":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:4830:7160":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:40930:4055":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:14977:6741":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:10215:9497":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"14:202:2954":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"24:5669:3921":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"1:4325:11247":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:4805:7738":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:12365:471":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:8666:9057":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"24:1020:11147":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"22:0:3838":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"1:6358:5842":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"24:3647:4224":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"1:12378:735":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"2:23086:9460":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"24:5302:3889":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"17:2234:24038":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:21680:5117":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:465:2511":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:42204:3957":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"5:7709:9430":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"24:1702:2594":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"2:22590:11440":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"11:1064:22939":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:6813:9347":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"23:514:3207":{"crate_id":23,"path":["quote","quote_spanned"],"kind":"macro"},"1:10322:11089":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:8256:4089":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:3597:24090":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:5992:4705":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:5249:7929":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:15814:6965":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:16269:6346":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"16:5037:7167":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"24:1004:4076":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"1:11256:9092":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"24:5016:3857":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"6:6876:8347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"24:5281:3885":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"2:39670:5458":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"24:2649:3209":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"17:16105:7040":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:11955:9594":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:23008:8582":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:42221:4709":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:9400:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"20:933:2588":{"crate_id":20,"path":["proc_macro2","Spacing"],"kind":"enum"},"17:15342:6823":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:46404:8904":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"24:0:2357":{"crate_id":24,"path":["syn"],"kind":"module"},"2:10387:119":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"7:32:22847":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:10573:37503":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:14599:6585":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"24:3154:104":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"20:825:2510":{"crate_id":20,"path":["proc_macro2","imp","Group"],"kind":"enum"},"2:3828:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:6098:23879":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:7355:7262":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"24:3324:4210":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"17:13674:6397":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"24:5277:3884":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"2:4794:4119":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"5:2275:9413":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:7052:23888":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"15:288:22970":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"20:723:2589":{"crate_id":20,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"21:2490:5576":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"2:4721:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:13424:6347":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:42390:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"9:0:3707":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:13755:16566":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"5:4491:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:5965:11313":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:10964:9052":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"24:3358:4211":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"24:3885:4232":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"2:40481:9470":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:46191:8893":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:40907:9485":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:3473:24074":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:11940:31813":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:1855:3072":{"crate_id":2,"path":["core","mem"],"kind":"module"},"11:772:9406":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:3295:5456":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"16:4424:7148":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:15289:6808":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:3667:11145":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:944:11064":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:1642:2559":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"21:0:1348":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"5:6122:5800":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:43175:34457":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"16:6466:7189":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:9161:11324":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:9857:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"24:3273:4208":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"6:5341:7969":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"24:3902:268":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"2:47268:8989":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:7586:8515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"24:5078:2781":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"16:6278:10652":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:44610:9544":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:2810:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:9459:9576":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"18:573:6024":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:8550:11199":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:4730:4112":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"24:3460:2905":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"5:4995:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:11621:9217":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"24:4994:2721":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"11:2366:22945":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:15390:6838":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"24:6018:3944":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"1:12366:1878":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:9755:23933":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:6412:23882":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"24:5862:2904":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"17:16151:7053":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:42168:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"21:127:5757":{"crate_id":21,"path":["proc_macro","bridge","client","state","set","RestoreOnDrop"],"kind":"struct"},"1:884:3957":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:44928:35359":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"11:2137:11070":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:1569:7627":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:2788:7108":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"24:2365:3952":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"24:5437:3908":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"20:883:2589":{"crate_id":20,"path":["proc_macro2","Span"],"kind":"struct"},"24:89:2516":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"1:2313:138":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:4725:4111":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"24:1931:4088":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"1:3032:5850":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:6758:7214":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:11274:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:3209:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:7472:33178":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:11016:28294":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:6427:10667":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:4914:7811":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:13485:6360":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:6796:10588":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"24:1085:37776":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"18:481:9193":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:15957:6989":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"16:5400:6148":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:7780:34437":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:12737:9524":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:2265:5326":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"24:5663:3918":{"crate_id":24,"path":["syn","lit","LitCStr"],"kind":"struct"},"2:42196:3953":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"24:1294:2599":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"5:5935:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"24:5316:3890":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"1:4109:11219":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:39846:4003":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:33355:5997":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:39768:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"11:685:3957":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:10039:34374":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:42349:3957":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:5428:8007":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:4927:11238":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"21:2681:2510":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"9:445:22861":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:6631:8269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:13753:6431":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:5515:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:3903:11202":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"24:5392:3880":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"24:2188:2515":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"2:40782:11124":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:2998:7135":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:13909:5842":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:9279:5331":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"11:881:11069":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:44341:9531":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"23:11:3982":{"crate_id":23,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"17:13538:6373":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:40585:9470":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:12986:16513":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:3329:7138":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:45899:8864":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"24:5667:3919":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"2:33627:3998":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:4860:4122":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:14356:6540":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:2660:7102":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:42546:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"24:5060:2527":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"5:1011:3953":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:2684:7103":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:12056:6219":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:6962:7124":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:10343:31850":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:11717:9591":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"24:6028:3931":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"16:5960:9279":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:14091:6482":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"24:4845:4271":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"24:2382:3953":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"2:40973:4057":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"24:5074:3871":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"17:11142:6174":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:15418:6845":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"7:0:1906":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:15426:6847":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:8852:3953":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:11678:9100":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:15992:7019":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:10389:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"24:4944:3199":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"13:110:37417":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:7549:9381":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:11411:7489":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"16:7656:23893":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"11:328:9403":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:1494:7586":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:3669:6055":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:15720:6944":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:10409:11302":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"21:952:2589":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"21:2548:126":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"6:5387:7985":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:7584:3952":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:5534:16491":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:5265:7937":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"21:591:4141":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"2:9531:16514":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"24:4983:3855":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"1:7325:5871":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"16:7132:9376":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:44849:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:0:1718":{"crate_id":1,"path":["std"],"kind":"module"},"1:10483:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"16:5415:7172":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:150:5759":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:5286:35324":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:23285:8605":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"5:7721:9433":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:3492:3965":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:8093:7332":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:14038:6475":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:46516:8924":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:42585:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"9:390:22862":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:12543:24148":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"16:8188:23898":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"20:781:28223":{"crate_id":20,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"16:4882:7162":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:9671:23936":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:8313:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"24:153:2516":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"1:12379:912":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:43884:16502":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:5781:7118":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:1620:5552":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:40829:4039":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:5776:8334":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"24:1821:4079":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"5:3716:3953":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"24:2390:3955":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"24:3766:4226":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"1:12380:894":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:47163:8976":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:3673:16540":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:11583:24039":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:5004:11234":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:13375:6340":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"11:1601:22944":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"24:5451:3883":{"crate_id":24,"path":["syn","expr","FieldValue"],"kind":"struct"},"1:7998:5338":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"5:2825:8568":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"24:306:37723":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"2:44682:8850":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:14529:6569":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:5779:11299":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"18:735:28212":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:11348:2891":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"24:5448:3130":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"1:9132:9075":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:8753:4032":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:44844:8853":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"1:3841:11198":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:44019:9510":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:13814:6443":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"24:4328:4236":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"1:5447:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:6666:8283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:7379:37465":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:3196:7080":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:7563:8503":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:10671:37500":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:44988:9561":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:22514:11438":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"6:7391:8431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:6374:5858":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:4215:11227":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:5602:11295":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"5:3809:5770":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"18:491:9194":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:46273:8897":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"23:407:4924":{"crate_id":23,"path":["quote","__private","RepInterp"],"kind":"struct"},"1:8207:139":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:4792:7729":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:13196:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:14847:6690":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:23000:8581":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"20:878:252":{"crate_id":20,"path":["proc_macro2","TokenStream"],"kind":"struct"},"24:2163:10998":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"17:15434:6848":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:16223:7069":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:22688:11147":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"16:5756:23875":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"24:5041:3869":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"1:10341:31793":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:41990:2589":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:15010:6744":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:12960:4366":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:6462:8173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:13509:6362":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:6849:9359":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:45931:8866":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:12981:16515":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:5288:7951":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"18:706:9204":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:39786:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:23106:9463":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:8601:11253":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:12030:24073":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:40:5465":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:6700:8296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"6:5165:7892":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:41962:11197":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:15190:6788":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:8343:8561":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:30813:33927":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"24:5433:3907":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"24:4304:4234":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"17:10068:23940":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:10720:37493":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:6353:7182":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"20:518:3971":{"crate_id":20,"path":["proc_macro2","LexError"],"kind":"struct"},"21:2291:2522":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"24:5397:3901":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"24:4957:4599":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"6:8008:8525":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:5490:5770":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:43947:9450":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"21:2383:2590":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"2:4913:4124":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"18:581:5117":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:15748:6953":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:4068:3952":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:12900:6266":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"24:1069:37781":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"24:1848:3531":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"17:16079:7034":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"5:1379:9377":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:1207:23995":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:10952:9089":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"17:12597:6244":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:11702:9224":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:4062:7146":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:3842:7143":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"24:5515:3186":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"2:11520:16508":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:44624:16529":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:6611:8261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:5025:7863":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"24:2509:3143":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"2:33694:5998":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:42743:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:11743:9227":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:12887:9248":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:46590:8926":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:44035:3495":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:40869:4050":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:2134:5505":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:42704:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:12443:6237":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:4487:11252":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"24:3715:253":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"16:4856:7161":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"24:5337:3894":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"5:798:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:15168:6782":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:9153:3953":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:8003:4016":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"24:4362:4238":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"17:10612:23962":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"18:623:37515":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:7982:11147":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:40860:4041":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:11219:3957":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:6282:5854":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:32931:5995":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:8330:31808":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"0:964:2370":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"1:1974:10582":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"24:5613:2861":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"2:39806:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:5139:5794":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:4337:5794":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:8596:9569":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:43410:9505":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:46051:8877":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:11038:11147":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"24:4821:4269":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"11:1900:9408":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:23274:8604":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"11:364:5763":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:957:11065":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:15301:6814":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:3667:16541":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:7231:5819":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:5682:8124":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"24:3086:4202":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"1:5851:9562":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:2157:4089":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:6790:8327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:3475:7139":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:5641:8108":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:12150:6224":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:4462:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:22975:9458":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:32401:4144":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:14325:6534":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"24:5987:3935":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"2:10358:143":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"11:1920:2559":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:4362:5794":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:8178:9565":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:16176:7061":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:12824:23970":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"13:0:3704":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:12698:9518":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:4587:7153":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:3686:34584":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:7085:9370":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:11655:8839":{"crate_id":1,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"1:3065:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:21748:34960":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"6:8199:8539":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:14436:6560":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:21945:11352":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:9119:9074":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:5230:7918":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:13363:6337":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:8518:4062":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"9:500:7492":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:42429:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"5:5798:5558":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:1586:9406":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:11877:6185":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"18:538:6028":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:11730:9226":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:6731:8306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"24:4630:4256":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"6:5520:8053":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:42301:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"5:5298:5800":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"5:7514:5781":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:261:37453":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:12557:6166":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:44099:9516":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:15176:6785":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:14177:6510":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:5347:7171":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:8216:9396":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:949:10692":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:675:11055":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:4921:7815":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:6853:10702":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"16:5742:9256":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:15368:6833":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:7469:8444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"21:2587:252":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"17:10534:37491":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"24:3256:4207":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"21:242:37627":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"2:5265:435":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:32489:2548":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"5:2377:9420":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:1711:7718":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:5588:11294":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:14752:6607":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:30787:5412":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:963:11066":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:11026:23981":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:8302:8551":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:5139:7890":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:872:37453":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"16:2708:7104":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:46290:8898":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:9145:9076":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:47143:8974":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"21:2338:3206":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"16:3029:6050":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"9:422:22863":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:902:9406":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"24:5990:3936":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"2:44676:9555":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"11:2301:9377":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"16:6532:9329":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"24:6015:3943":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"1:8764:8839":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"11:2566:4009":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"24:4758:4265":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"11:2323:11070":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:4804:4120":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:13325:6331":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:7448:8438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:3460:141":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:11166:6168":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:7316:8385":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:6991:37431":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:1589:7641":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"11:1888:5554":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:10710:23964":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:7741:7132":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:7504:5554":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"24:5311:3874":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"2:42366:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:15197:6789":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:16121:7045":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:4976:7165":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:7152:11349":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:15376:6836":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:2003:11107":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"24:3375:4212":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"2:46109:8881":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"20:904:2510":{"crate_id":20,"path":["proc_macro2","Group"],"kind":"struct"},"2:21702:34964":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:13723:6422":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:43956:16506":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"11:708:10692":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:15214:6792":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:14986:6742":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:8226:23899":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:7539:8495":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"24:5388:3900":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"24:4988:3854":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"2:39746:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"5:4506:5796":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"24:3120:4204":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"2:8759:4033":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:6691:8290":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"5:7592:3952":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:7590:7129":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:13568:6385":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:13703:35064":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:22378:11353":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:21734:34972":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:39055:6006":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:2715:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:8621:9056":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"17:10439:6157":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:46943:8966":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:9410:5869":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"17:16165:7056":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"24:5358:2862":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"5:6143:16898":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"8:0:3706":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:13046:6274":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:33143:5996":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"24:4647:4257":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"6:6544:8218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"11:0:3709":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:2741:10586":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:46561:8925":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:46351:8901":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:9858:23954":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"24:4589:4253":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"6:1597:7646":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:43431:8839":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:45984:8873":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:11841:24105":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"24:5021:2536":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"2:40960:4043":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:30749:5410":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:13832:6444":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:3422:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:46013:8875":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:10018:23937":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:8049:11059":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:8716:5987":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"}},"external_crates":{"23":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.36/"},"20":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.84/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.12/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.66/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}