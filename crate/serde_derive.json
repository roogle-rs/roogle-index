{"root":"0:0:2012","crate_version":"1.0.197","includes_private":false,"index":{"0:964:2001":{"id":"0:964:2001","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[88,0],"end":[93,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:13175:28281":{"id":"2:13175:28281","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12813:3988","`DoubleEndedIterator`":"2:8197:129","prim@char":"1:12295:458","str::split_whitespace":"2:13153:33487","str::rsplit":"2:13181:28904"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43366:8889","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13155:28282":{"id":"2:13155:28282","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43620:8976","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13231:28914":{"id":"2:13231:28914","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:3988"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:15963","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13245:28688":{"id":"2:13245:28688","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13252:30081":{"id":"2:13252:30081","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:979:40865"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13251:30080":{"id":"2:13251:30080","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:979:40865"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13147:28899":{"id":"2:13147:28899","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13148:28900"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13144:35376":{"id":"2:13144:35376","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12301:1673","crate::ops::IndexMut":"2:3374:3590","str::slice_unchecked":"2:13143:35375"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13208:35381":{"id":"2:13208:35381","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12813:3988","`DoubleEndedIterator`":"2:8197:129","prim@char":"1:12295:458","str::rmatch_indices":"2:13211:35382"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43516:8971","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13211:35382":{"id":"2:13211:35382","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12813:3988","`DoubleEndedIterator`":"2:8197:129","prim@char":"1:12295:458","str::match_indices":"2:13208:35381"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43534:8972","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:15963","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13161:28912":{"id":"2:13161:28912","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:3988"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13133:334":{"id":"2:13133:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13134:28873","`u8`":"1:12312:1800"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13178:28902":{"id":"2:13178:28902","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:3988"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12629:8891","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13187:35379":{"id":"2:13187:35379","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12813:3988","str::split":"2:13175:28281","prim@char":"1:12295:458","str::split_terminator":"2:13184:35378"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43434:8966","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:15963","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13237:35390":{"id":"2:13237:35390","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:3988"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5599:36086":{"id":"5:5599:36086","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:296:2198","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:296:2198","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13132:35374":{"id":"2:13132:35374","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13220:35386":{"id":"2:13220:35386","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13250:30079":{"id":"2:13250:30079","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:979:40865"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:493-0:404:2135":{"id":"0:493-0:404:2135","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[14,0],"end":[14,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:404:2135","glob":false}}},"0:0:2012":{"id":"0:0:2012","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[101,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2021\n# use serde_derive::{Deserialize, Serialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.197\")]","#![allow(clippy::branches_sharing_code, clippy::cognitive_complexity,\nclippy::collapsible_match, clippy::derive_partial_eq_without_eq,\nclippy::enum_variant_names, clippy::manual_map,\nclippy::match_like_matches_macro, clippy::needless_pass_by_value,\nclippy::too_many_arguments, clippy::trivially_copy_pass_by_ref,\nclippy::used_underscore_binding, clippy::wildcard_in_or_patterns,\nclippy::unnested_or_patterns,)]","#![allow(clippy::cast_possible_truncation, clippy::checked_conversions,\nclippy::doc_markdown, clippy::enum_glob_use, clippy::indexing_slicing,\nclippy::items_after_statements, clippy::let_underscore_untyped,\nclippy::manual_assert, clippy::map_err_ignore, clippy::match_same_arms,\nclippy::match_wildcard_for_single_variants, clippy::module_name_repetitions,\nclippy::must_use_candidate, clippy::similar_names, clippy::single_match_else,\nclippy::struct_excessive_bools, clippy::too_many_lines,\nclippy::unseparated_literal_suffix, clippy::unused_self, clippy::use_self,\nclippy::wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:964:2001","0:965:2009"],"is_stripped":false}}},"5:5617:2588":{"id":"5:5617:2588","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13248:28687"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13148:28900":{"id":"2:13148:28900","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13147:28899"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13125:35371":{"id":"2:13125:35371","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13164:28913":{"id":"2:13164:28913","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:3988"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:15963","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5606:36088":{"id":"5:5606:36088","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7617:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13249:28686":{"id":"2:13249:28686","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13156:35377":{"id":"2:13156:35377","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43630:8977","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13243:2223":{"id":"2:13243:2223","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12774:135","`FromStr`":"2:12773:3602"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41617:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12773:3602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12773:3602","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13150:2597":{"id":"2:13150:2597","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12295:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43336:8959","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13145:3004":{"id":"2:13145:3004","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13147:28899","str::split_at_mut":"2:13146:28896"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13131:3116":{"id":"2:13131:3116","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12361:15965"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13199:28911":{"id":"2:13199:28911","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:15963","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5603:36087":{"id":"5:5603:36087","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7617:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13234:35389":{"id":"2:13234:35389","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:3988"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:15963","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13247:28689":{"id":"2:13247:28689","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13255:10502":{"id":"2:13255:10502","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4897:10502"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43674:8916","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13152:8878":{"id":"2:13152:8878","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43352:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492-0:1019:2134":{"id":"0:492-0:1019:2134","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1019:2134","glob":false}}},"2:13157:33485":{"id":"2:13157:33485","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43658:8980","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13124:2354":{"id":"2:13124:2354","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1023:2231":{"id":"0:1023:2231","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"2:13181:28904":{"id":"2:13181:28904","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12813:3988","`DoubleEndedIterator`":"2:8197:129","prim@char":"1:12295:458","str::split":"2:13175:28281"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43384:8892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:15963","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13218:35385":{"id":"2:13218:35385","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13171:4536":{"id":"2:13171:4536","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41506:190","prim@char":"1:12295:458","self::pattern":"2:12813:3988"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:15963","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8:2127":{"id":"0:8:2127","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[216,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:13137:28870":{"id":"2:13137:28870","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41506:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10901:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10901:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13141:28872":{"id":"2:13141:28872","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10901:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10901:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13151:2591":{"id":"2:13151:2591","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12295:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43342:8960","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13253:35392":{"id":"2:13253:35392","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4896:35392"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43665:8922","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13240:35391":{"id":"2:13240:35391","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:3988"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:15963","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13146:28896":{"id":"2:13146:28896","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13145:3004","str::split_at_mut_checked":"2:13148:28900"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13154:33488":{"id":"2:13154:33488","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13153:33487"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43649:8979","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5614:36089":{"id":"5:5614:36089","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7617:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13143:35375":{"id":"2:13143:35375","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12301:1673","str::slice_mut_unchecked":"2:13144:35376","crate::ops::Index":"2:39113:2761"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13134:28873":{"id":"2:13134:28873","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12312:1800"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13128:35373":{"id":"2:13128:35373","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13126:35372"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:965:2009":{"id":"0:965:2009","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[96,0],"end":[101,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:13123:975":{"id":"2:13123:975","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12295:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13205:35380":{"id":"2:13205:35380","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12813:3988","`DoubleEndedIterator`":"2:8197:129","prim@char":"1:12295:458","str::matches":"2:13202:2350"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43588:8975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:15963","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5618:2587":{"id":"5:5618:2587","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13249:28686"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:379":{"id":"0:63:379","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1881,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:86-0:994:2228"],"is_stripped":false}}},"2:13167:2906":{"id":"2:13167:2906","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41506:190","prim@char":"1:12295:458","self::pattern":"2:12813:3988"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13158:2456":{"id":"2:13158:2456","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:3988"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13214:35383":{"id":"2:13214:35383","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13216:35384":{"id":"2:13216:35384","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13246:30076":{"id":"2:13246:30076","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39468:4527","Self::is_ascii":"2:13245:28688"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39468:4527","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13225:2262":{"id":"2:13225:2262","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:3988"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5615:36090":{"id":"5:5615:36090","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:296:2198","`String`":"5:7617:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:296:2198","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13256:35393":{"id":"2:13256:35393","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4894:35393"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43683:8921","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5600:2384":{"id":"5:5600:2384","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7617:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13202:2350":{"id":"2:13202:2350","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12813:3988","`DoubleEndedIterator`":"2:8197:129","prim@char":"1:12295:458","str::rmatches":"2:13205:35380"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43570:8974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5616:3646":{"id":"5:5616:3646","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7617:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13135:2243":{"id":"2:13135:2243","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41506:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10901:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10901:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13221:35387":{"id":"2:13221:35387","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13222:35388":{"id":"2:13222:35388","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:3988"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12839:15961","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13228:28090":{"id":"2:13228:28090","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:3988"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13190:28906":{"id":"2:13190:28906","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:3988","str::rsplitn":"2:13193:28908"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43470:8968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5598":{"id":"5:5598","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5599:36086","5:5600:2384","5:5603:36087","5:5606:36088","5:5614:36089","5:5615:36090","5:5616:3646","5:5617:2588","5:5618:2587"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13126:35372":{"id":"2:13126:35372","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13248:28687":{"id":"2:13248:28687","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13196:28910":{"id":"2:13196:28910","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13193:28908":{"id":"2:13193:28908","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12295:458","str::splitn":"2:13190:28906","self::pattern":"2:12813:3988"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43488:8969","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:15963","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13184:35378":{"id":"2:13184:35378","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12813:3988","str::split":"2:13175:28281","prim@char":"1:12295:458","`DoubleEndedIterator`":"2:8197:129","str::rsplit_terminator":"2:13187:35379"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43416:8965","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:15962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13153:33487":{"id":"2:13153:33487","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13154:33488"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43640:8978","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13139:28871":{"id":"2:13139:28871","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10901:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10901:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13122":{"id":"2:13122","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13123:975","2:13124:2354","2:13125:35371","2:13126:35372","2:13128:35373","2:13131:3116","2:13132:35374","2:13133:334","2:13134:28873","2:13135:2243","2:13137:28870","2:13139:28871","2:13141:28872","2:13143:35375","2:13144:35376","2:13145:3004","2:13146:28896","2:13147:28899","2:13148:28900","2:13150:2597","2:13151:2591","2:13152:8878","2:13153:33487","2:13154:33488","2:13155:28282","2:13156:35377","2:13157:33485","2:13158:2456","2:13161:28912","2:13164:28913","2:13167:2906","2:13171:4536","2:13175:28281","2:13178:28902","2:13181:28904","2:13184:35378","2:13187:35379","2:13190:28906","2:13193:28908","2:13196:28910","2:13199:28911","2:13202:2350","2:13205:35380","2:13208:35381","2:13211:35382","2:13214:35383","2:13216:35384","2:13218:35385","2:13220:35386","2:13221:35387","2:13222:35388","2:13225:2262","2:13228:28090","2:13231:28914","2:13234:35389","2:13237:35390","2:13240:35391","2:13243:2223","2:13245:28688","2:13246:30076","2:13247:28689","2:13248:28687","2:13249:28686","2:13250:30079","2:13251:30080","2:13252:30081","2:13253:35392","2:13255:10502","2:13256:35393"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:86-0:994:2228":{"id":"0:86-0:994:2228","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[21,0],"end":[21,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::internals::case::RenameRule","name":"RenameRule","id":"0:994:2228","glob":false}}}},"paths":{"2:21562:10799":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:13723:5832":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:11621:8663":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:43336:8959":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:15151:6187":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:43863:8991":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:43570:8974":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:10251:5561":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"24:4290:3860":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"21:1386:2231":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"1:8505:8889":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"24:5936:3569":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"1:2739:10627":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"5:7421:3577":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:4372:4859":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:3278:8854":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:3558:15988":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:12621:5655":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"24:4843:3898":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"2:39998:8924":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:6651:5279":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"11:434:36736":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"24:3014:3824":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"24:4916:3480":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"17:11063:23427":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:11242:23441":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:7968:4746":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:11051:23433":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:2827:16012":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:1886:5033":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:14599:5995":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:5052:7326":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:7934:3642":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:14986:6152":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:553:7013":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"24:4872:2830":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"2:39964:8916":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:6782:23317":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:13308:5739":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:8462:10596":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:3925:6556":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"14:0:3342":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:1525:8853":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:4641:6566":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:6758:6625":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:7618:6692":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:13116:5694":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:46027:8375":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:14560:5985":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:6427:10117":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"20:116:36857":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"16:6412:23314":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"2:40037:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:46417:8417":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:11138:8891":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:13645:5255":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"5:1575:10522":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:5136:423":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:46338:8414":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"8:0:3337":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:5588:7530":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:7516:7931":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:5565:7523":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:5581:7528":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:9665:10592":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"5:3283:36634":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:10262:3728":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:940:10517":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:8118:3661":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:6505:7654":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:733:10653":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"18:531:8641":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:22769:33432":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:10577:5292":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2:42491:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:4614:6565":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:2458:6504":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:43674:8916":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:8271:7994":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:2902:22447":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"11:2562:6879":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:12201:23571":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"24:4256:3858":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"16:6895:6637":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:721:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"21:244:36877":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"6:8306:8002":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"18:698:8648":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:11595:5592":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:5557:7521":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:44092:9009":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:2998:6546":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:8818:9028":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"5:2101:10523":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:16093:6449":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"24:4885:4049":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"16:6456:23315":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"24:5308:3505":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"17:15010:6154":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:16165:6467":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:12314:1788":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:7428:23322":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:13173:5706":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"20:113:8636":{"crate_id":20,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"2:46589:8435":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:12076:23503":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:2438:6503":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:45865:8369":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"24:649:5391":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"6:4787:7179":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:33958:3891":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:6621:7718":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:10642:10630":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:4162:10677":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:12318:1860":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:12530:23582":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:43941:15977":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"24:1070:37205":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"16:4531:6562":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:10948:28079":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:3264:23504":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"24:3252:3832":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"6:4979:7291":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"11:2469:4958":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"16:7321:4159":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:22863:10597":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"24:5286:2492":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"11:1903:8854":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:44169:16140":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"24:3167:3828":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"1:12310:882":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:6843:8885":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"16:2528:6507":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:12494:5649":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:1055:10520":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:13292:5735":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:44335:9755":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:13412:5756":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"20:350:3596":{"crate_id":20,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"20:696:8637":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"1:6723:10047":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:7910:23328":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:7799:6531":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:2515:4895":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"16:5415:6583":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:44084:9007":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:22369:10889":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:6026:8733":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:2932:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:22428:10881":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"6:564:7018":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:10439:5567":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:45788:8350":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:3378:10630":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"24:4435:3869":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"16:8216:8842":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:9095:8521":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:7437:32024":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:14402:5957":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"3:234:225":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:2572:6509":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:45738:8348":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:4739:3744":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"24:2946:3900":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"24:642:225":{"crate_id":24,"path":["syn","error","Result"],"kind":"type_alias"},"6:1663:7150":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:21443:34379":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:11315:2521":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:2458:10589":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:5927:8719":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"11:2443:4960":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"23:38:3215":{"crate_id":23,"path":["quote","format_ident"],"kind":"macro"},"2:22818:8044":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:3179:4861":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:10911:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:8828:3578":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"9:53:10122":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"24:1029:10597":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"1:8201:9025":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:12317:944":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"5:2195:4733":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:7549:8827":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"11:2326:10520":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:9151:8524":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:538:7005":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:10461:152":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:31974:8913":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"5:7582:8876":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:5483:7494":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:5598:7535":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"24:3133:3827":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"24:4459:3871":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"2:12515:8962":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"24:4319:3862":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"17:13473:5767":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:6025:3678":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:15102:6176":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:8304:10628":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:43769:8981":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"11:1107:22371":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:7857:6707":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:5641:10746":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:39956:8921":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"24:3286:3833":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"2:32460:5405":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"24:4732:3890":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"6:5477:7493":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:13594:5800":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:15368:6244":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:6763:7768":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"1:10157:8945":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:7288:10049":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:5769:8706":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:43488:8969":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:46574:8434":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"24:153:2144":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"17:12127:5633":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:12289:5636":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:3335:2701":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:22109:10597":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:4819:10724":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"11:1923:2187":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:16249:6484":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:9391:5283":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"2:2848:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:44088:9008":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:22593:8900":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:39245:3627":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:1827:10530":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:3427:10623":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:2864:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"5:2287:36673":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"24:5209:3511":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"16:2323:22446":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:14189:5922":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:5415:7452":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:1490:7036":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"5:6157:5207":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:11056:5294":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:6342:36801":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:6353:6593":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:11799:23537":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:45554:8338":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:40205:3674":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:43163:8893":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:7874:3640":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:44392:4868":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:4352:6558":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:5831:8711":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:37820:5412":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"24:1062:37208":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"24:5376:2761":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"24:4534:3876":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"6:7446:7888":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:13272:5734":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:42446:3719":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:22955:8050":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"16:3475:6550":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:1603:8856":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:42706:8952":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:6780:10152":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"24:363:37209":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"5:5448:15939":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:12824:23403":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:16223:6480":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:13766:5843":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"24:4604:3881":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"17:11764:8676":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"24:98:4040":{"crate_id":24,"path":["syn","token","private","CustomToken"],"kind":"trait"},"16:8301:6749":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:7633:36755":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"24:4336:3863":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"1:1976:764":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:15760:6366":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"24:5333:3507":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"17:11567:23496":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:7480:2964":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:4238:5207":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:5686:6525":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:14575:5644":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"15:394:22411":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:12597:5654":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:44343:8302":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"24:1682:2222":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"24:2594:5400":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"2:41940:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"24:2963:3821":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"2:22831:8909":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"5:7397:8871":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"24:5248:3517":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"2:21509:10803":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"5:824:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:43251:15944":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:497:6976":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:46396:8416":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:15324:6230":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:41282:8265":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"23:504:4437":{"crate_id":23,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"17:14449:5971":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:42723:156":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"24:5293:3503":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"1:10283:30586":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:12312:1800":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"18:765:27647":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:42059:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:6435:7618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:3103:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"24:5296:3525":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"17:15342:6234":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"24:5529:2150":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"24:5353:3508":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"24:3609:2165":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"5:7437:8872":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"24:5520:3537":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"6:8288:7999":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:32646:5406":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:13844:5856":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"24:644:136":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"18:643:5434":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"5:7715:4959":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:8778:10737":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:15596:6321":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:42436:8278":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"24:2090:10448":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"17:13972:5602":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"24:2997:3823":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"2:2599:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"5:4148:3582":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:910:10514":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:3304:2187":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:1485:7034":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:12969:5679":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:5515:7503":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"17:11702:8670":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"24:4476:3872":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"17:15126:6178":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:6409:7603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:2287:10577":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"5:1325:10521":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:7945:4757":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:363:4756":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:5037:6578":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:9180:10770":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:7366:7863":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"11:2542:6875":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"21:2324:2150":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"2:33066:3623":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:43384:8892":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:3531:16050":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:11646:9049":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"24:3422:3839":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"5:7465:3577":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:43516:8971":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"24:1094:37206":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"1:10877:9023":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"16:4743:6568":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:40726:3645":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:10285:32670":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:15039:6162":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:12307:888":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:45415:8322":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"21:2265:2138":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"2:41410:33502":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:40275:3690":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:1064:10521":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:14311:5941":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:15445:6263":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:3345:141":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:22456:10882":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:30416:4816":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"24:3694:3848":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"16:150:5172":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"11:837:10515":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:6937:4965":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:16050:5734":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:3242:28676":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:5382:7435":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:5436:7467":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:14855:6103":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"24:5265:3520":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"2:40187:3664":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:11869:32654":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:5048:10723":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"24:1606:37006":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"1:5891:10760":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:7900:5289":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:6976:6646":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"21:2714:2138":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"24:5349:3531":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"2:21999:34385":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:37875:5415":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:41444:9026":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"24:2529:10597":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"17:11557:23495":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:1680:7157":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:8140:10592":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"21:140:4994":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"24:5914:3564":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"17:15376:6247":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:4532:3716":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:3245:32585":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:534:4738":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:12993:23404":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:6471:7631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:9781:23386":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:7052:23320":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:43975:9002":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:16259:5751":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:15249:6209":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"24:4546:3877":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"16:6480:6526":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:7590:6540":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"11:0:3340":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:7528:8824":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:8624:3657":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:42098:10147":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:43784:8987":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:10399:3126":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:21477:34388":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:10818:23398":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:5665:7569":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"21:2763:2837":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"2:11250:8892":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:4502:6561":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:10509:8887":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:21460:34383":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:12508:5652":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:9168:8525":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:7561:7953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:8265:7993":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:1628:7125":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:6231:8763":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"21:1126:207":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"17:13325:5741":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"11:1891:4960":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:11329:8968":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:46559:8433":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:11537:23466":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:12485:23576":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"5:1354:10031":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:12264:23546":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:32041:4510":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:5102:7337":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"24:5226:3514":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"24:4969:3495":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"17:14876:6111":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:11493:23459":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:8051:10040":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"24:3116:116":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"2:22111:10801":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:2448:10584":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:2058:8021":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:4154:10675":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:45915:8371":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:46065:8377":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:12659:23579":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"11:687:3582":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:11189:5580":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:11371:15956":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:8341:8011":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:39275:16051":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"24:355:3714":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"1:6394:5272":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:33612:4444":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:5031:7318":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:3014:22449":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"18:521:27650":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:22999:8054":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:7988:4743":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:23473:235":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:6991:36756":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:44100:9011":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"21:932:5000":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"2:44365:179":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:7461:7893":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:2430:4884":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:9129:3578":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"24:5925:3566":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"2:22988:8053":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"17:13024:23405":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:5062:5207":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:6794:5280":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"24:2385:3584":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"16:5897:6586":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"24:5365:3534":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"16:6317:2180":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:46612:8436":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:45932:8372":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"24:1600:3718":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"17:11788:23536":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:44381:9018":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:12773:3602":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"24:5951:2706":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"24:1118:3539":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"16:3329:6549":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"24:3490:3843":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"20:870:2217":{"crate_id":20,"path":["proc_macro2","Span"],"kind":"struct"},"2:44277:149":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:8145:9023":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:11541:32674":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"24:5239:3500":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"24:3405:2836":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"16:8136:8838":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:3552:15989":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:45805:8351":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:12328:8677":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"24:4954:2209":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"24:5910:3562":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"17:12671:23613":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:42938:8292":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"24:5244:3516":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"2:2660:133":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:39907:33428":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:10258:3731":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:41540:3582":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:9231:8528":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:11075:5576":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:40717:3643":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:22461:10880":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"6:5244:7379":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:16138:6458":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"24:2378:3582":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"24:5809:3552":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"6:6746:7760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:22328:33861":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"6:5536:7509":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"24:3575:3846":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"5:6753:5183":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:4759:3745":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:46651:8452":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:10137:23367":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:4422:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:40493:3687":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:40732:3647":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:12329:16097":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:16212:6478":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:41523:172":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:32070:2176":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:929:10516":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:12251:23547":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:15836:6382":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:15356:6241":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:12454:8691":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:10068:23373":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:21475:34375":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:12342:8681":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"24:4273:3859":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"5:1534:10514":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"24:1031:5398":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"1:4755:7876":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2:46438:8418":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:8306:177":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:43212:8293":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:1621:7121":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:1585:7091":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"24:5448:2776":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"2:39896:8918":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:0:1665":{"crate_id":1,"path":["std"],"kind":"module"},"17:14091:5892":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"24:4814:3896":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"14:165:22382":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"11:351:36729":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:45383:8320":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:5306:7410":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"20:762:3599":{"crate_id":20,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"17:11419:5584":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"11:844:10516":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:3208:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:7881:5287":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:39991:8923":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:6726:10765":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"24:5902:3559":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"11:811:4958":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:40080:3126":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:15521:6308":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"23:148:4184":{"crate_id":23,"path":["quote","__private","HasIterator"],"kind":"struct"},"17:11865:23540":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"24:5345:3530":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"17:13538:5783":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:11674:8668":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:4837:7216":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:8188:23330":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"18:598:5395":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:7537:7945":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"5:1516:8852":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:12278:23573":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:4821:23585":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:4325:33849":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"14:31:10025":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"24:5369:2173":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"6:1510:7044":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:41599:4162":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:13509:5772":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:1503:7042":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:14529:5979":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"11:1582:22374":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:3820:4960":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:3899:6555":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:5157:33385":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:919:10143":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:11045:5293":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:11661:8667":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"24:3439:3840":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"24:3184:3829":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"6:5502:7502":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"16:4718:6567":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:41823:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:8218:10046":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:13146:5698":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"24:5234:3499":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"11:2124:8823":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"24:95:10597":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"17:12949:5641":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:9755:23366":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:4802:6570":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:4241:32034":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:5407:1219":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:12900:5676":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:4349:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:41598:4163":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:41784:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"24:5780:2534":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"1:1447:155":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:9210:10771":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"20:969:3577":{"crate_id":20,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"24:5920:3565":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"9:178:10133":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:4924:7267":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:12301:1673":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"24:3303:3834":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"11:742:10143":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:15176:6195":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:589:10501":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:7755:6533":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:14847:6100":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"14:214:8843":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:872:36761":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:6615:10762":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:8597:8502":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:3845:10649":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:1608:2187":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:1859:5207":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"5:1189:36266":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"23:46:3608":{"crate_id":23,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"6:1565:7077":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:4942:7275":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:11825:23518":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:13399:5754":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:8174:138":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:6504:8773":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:43890:8992":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:6574:6544":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:11740:10650":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:7831:2231":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:14912:6141":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"24:5420:2158":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"17:15992:6430":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"23:235:4441":{"crate_id":23,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"1:3287:10633":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:4822:10702":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:10954:23411":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:7888:8831":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:10905:23400":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:4940:10682":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:1945:4813":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:5191:7352":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:44096:9010":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:21507:10597":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:3531:8500":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:14933:6146":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"24:1363:8598":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"1:12302:1761":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:6466:6600":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:44280:163":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:2655:200":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:10997:5574":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:41432:8948":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:7357:3577":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:5452:15940":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"18:623:36838":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:5336:7419":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"1:4048:10667":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:40257:3679":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:1309:8823":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:2596:10626":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"18:735:27646":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:6588:8777":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:12315:1794":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:7379:36785":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:3597:23523":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:46464:8420":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:45347:8314":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:42698:8950":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:10264:10539":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"16:7727:6542":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"18:589:5441":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:946:10518":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"11:2151:10521":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:15608:6324":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:638:10504":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:4344:10699":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:11877:5595":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:1969:10557":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:10250:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"9:357:22307":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:16105:6451":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"16:5385:5557":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:2854:6522":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"21:2523:4983":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"2:46309:8413":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:6562:7684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:5970:5266":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:5925:4155":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:8642:8503":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:5777:5272":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:2039:197":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:2517:4896":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:15769:6370":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:22196:10885":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:21987:8025":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:45674:8344":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:11853:23539":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"11:1007:8823":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:13899:5865":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:10284:5562":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:9916:23389":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:7457:3577":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:5266:7390":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:6650:7731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"21:2590:8635":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"16:6098:23311":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"5:4308:3578":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:13478:204":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:8029:7988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:7512:3633":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:7944:10597":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"24:4394:3867":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"6:6664:7733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:669:10032":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:10684:4743":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"3:0:487":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"24:4423:3868":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"6:1692:7161":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:5846:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"23:344:1352":{"crate_id":23,"path":["quote","quote"],"kind":"macro"},"5:7109:5232":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:9249:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:14325:5944":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:10713:5250":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:5160:7342":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:12388:8687":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"24:5357:3532":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"19:0:1249":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:8620:7863":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:1169:36165":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:8135:5042":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:14968:6147":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:3500:5207":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:40165:3663":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:13503:16015":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:15734:6357":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"24:5719:3549":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"24:1794:3704":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"5:6544:4960":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"24:4616:3882":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"16:4940:6575":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:43630:8977":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"24:5425:2704":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"5:1828:4958":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"5:5404:5183":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:9886:23388":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:12305:718":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:5466:7488":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:11730:8672":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:12298:1270":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"24:5455:3536":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"15:327:10118":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"5:219:4873":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:4830:6571":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:39282:8130":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:15206:6201":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:11293:23443":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:2943:136":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:22414:10597":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:11155:8521":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:46536:8426":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:5361:7425":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:6634:6532":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"24:5493:2809":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"24:306:37013":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"2:40225:3676":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:15390:6249":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:7695:6696":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:12311:863":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:15426:6258":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:45706:8346":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"24:5230:3515":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"6:5283:7401":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:39167:211":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:8492:3687":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:39225:215":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:7006:23318":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"20:706:3596":{"crate_id":20,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"1:12316:1776":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:8253:7991":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"24:5498:2812":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"18:659:27648":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:7306:36787":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:12724:23402":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"7:78:22285":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"24:4406:133":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"17:13946:5871":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:8763:8515":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"11:1910:8855":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:6738:7759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:40309:3682":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:9283:32656":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"21:949:251":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"24:3592:2885":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"1:881:8853":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"24:3524:3742":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"17:9737:23368":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:40358:3686":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:5064:7335":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"9:482:22291":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"24:1889:3700":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"1:11801:10651":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"24:2292:3577":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"2:43181:15951":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:13999:5880":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:2728:6516":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:5237:955":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:16198:6474":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:10218:5560":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:11153:23398":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:9417:8533":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"21:2719:3598":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"11:787:8853":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"9:330:6919":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:12516:23589":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:6215:5267":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:4811:7196":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"14:7:10025":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:40174:3673":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:3647:3578":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:22725:8031":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:22677:8027":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:46142:8410":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"24:5785:3551":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"24:2583:10597":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"6:5146:7341":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:5756:23307":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:2602:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:46264:8412":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"24:5888:3557":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"17:12464:23575":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:22330:4895":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"2:22240:10886":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:2860:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:7429:209":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"24:5594:3541":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"16:6560:6527":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:12543:23581":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"6:1671:7151":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:2133:188":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"21:2298:2544":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"2:44112:9014":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:42753:8955":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"24:3473:3842":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"6:8012:7977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:11580:10751":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:11095:8889":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:504:4733":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"24:1102:37207":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"11:710:10142":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"23:407:4322":{"crate_id":23,"path":["quote","__private","RepInterp"],"kind":"struct"},"2:21489:34381":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"24:5893:3558":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"2:3164:5417":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:5572:10745":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:5046:7324":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"24:5765:2818":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"17:15463:6266":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"24:4447:3870":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"21:1818:4981":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"6:7452:7890":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:11876:9052":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:11269:23442":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"5:1426:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:5630:7555":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"5:2525:8015":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"11:123:5174":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:13047:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:8282:7998":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:5107:6580":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:10867:9035":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:8675:4154":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:4292:10698":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:15655:6336":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"11:2383:3578":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:13785:5848":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:46484:8422":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:15473:6271":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:5376:7432":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"18:754:8657":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"11:875:10518":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:482:5258":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:8482:3673":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:14994:6153":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:42196:2754":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:10622:36815":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:7604:6541":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:7397:36794":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"11:2140:10520":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"13:109:36743":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:10769:36831":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:39945:8920":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"21:2629:3760":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"2:40243:8933":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"24:5524:2807":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"1:12081:5301":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:13581:5799":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:7473:6690":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"5:6053:16332":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:45283:8308":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"20:779:251":{"crate_id":20,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"16:6543:8776":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:6962:6535":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:45400:8321":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:14723:5997":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:40503:3688":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:6880:7798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:1559:7075":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:5236:7375":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:33785:5393":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:3470:3647":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:9658:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"24:5634:3548":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"11:1160:10031":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"24:3235:3831":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"2:41673:3577":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:2432:10580":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:2788:6519":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:21963:10805":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:12362:8686":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"24:5930:3567":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"2:22:796":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:33439:5394":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:1653:7144":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:15582:6315":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"11:832:10514":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:6756:7767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"6:8259:7992":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:4757:7878":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"17:14341:5946":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:40196:3665":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"14:40:2150":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"11:2423:3577":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"24:2206:3574":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"5:7538:4747":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:10901:238":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:5006:6577":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:11313:8661":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:11354:23452":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:14788:6048":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:10612:23395":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"24:2265:3576":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"24:5213:3512":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"21:216:10100":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"5:1494:3577":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:850:3582":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:1098:23423":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:4042:10668":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"24:5908:3561":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"2:39972:8922":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"24:1775:3589":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"17:13375:5750":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:4630:10703":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:570:7021":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:8512:8976":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"24:5586:3542":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"2:39145:209":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:11510:23447":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:868:8852":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"24:592:3587":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"16:6813:8793":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:11755:8675":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:15222:6205":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:40759:3653":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:43201:15950":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:1699:7164":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:8202:6545":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:32040:3767":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:736:189":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"17:10710:23397":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:6940:6643":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:40296:3667":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:5039:7322":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:9938:23390":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:10887:36819":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:4859:10683":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:8317:8006":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:10661:23396":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:11497:23448":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:15313:6226":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:12575:8970":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"24:5540:2227":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"16:2660:6513":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"18:613:36840":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:9084:198":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:6519:7655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:1724:5183":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:7259:5284":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"16:7656:23325":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:5296:7406":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"20:768:27657":{"crate_id":20,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"17:11042:23415":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:3145:4509":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:7467:7894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:8122:3660":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"21:2567:3762":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"2:43952:8994":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:2838:6521":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:14475:5973":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:14489:5974":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:14025:5883":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:9316:28086":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"5:40:4871":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:6339:10151":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:22733:8032":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"13:226:6874":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:3149:3622":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:15058:6163":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:5260:7387":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:10698:5246":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"24:5775:2533":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"6:5653:7562":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:12443:5647":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:4891:7249":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"24:5624:3547":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"17:12030:23506":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"9:392:22293":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:6379:7578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"18:573:5434":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:10457:137":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"6:1526:7052":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"24:5472:3535":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"2:45894:8370":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:43434:8966":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:8615:148":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:2691:194":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"11:1025:10520":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:8294:8000":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:6714:7754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"2:31984:3766":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:9336:8532":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:14246:5934":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"5:5712:4964":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:622:10039":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:45429:8323":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"24:4353:3864":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"2:12345:10037":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:5400:5558":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:40368:3670":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:8450:8498":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:6678:7738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:4882:6573":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:11621:9047":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:3606:10595":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:6442:8769":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"11:700:3577":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:1940:10041":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:39069:4864":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"16:3669:5465":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:13665:5257":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"2:45592:8340":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"24:5588:3544":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"1:9121:8523":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:15646:6334":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:8152:8457":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"0:0:2012":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"18:0:3346":{"crate_id":18,"path":["memchr"],"kind":"module"},"24:3337:3836":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"6:6821:7786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:41266:8263":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:22383:4895":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"24:3218:2163":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"2:11288:15955":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:40145:3662":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:13738:5836":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:4499:10693":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:5742:8702":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:3249:36630":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:3098:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"24:4517:3875":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"2:22900:8045":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"24:5329:3528":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"17:11102:23421":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"21:2493:126":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"16:4771:6569":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:5995:8727":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"21:2625:3596":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"17:10170:5558":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:41532:3578":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:43798:8989":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:13064:5687":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:45467:8325":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:6441:7621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:13387:5751":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:22700:8904":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:31985:243":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:10959:10040":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"1:4140:10673":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:6032:5213":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:32832:5407":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:43325:8958":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"24:274:10023":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"24:4898:2483":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"24:5942:3555":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"24:5939:67":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"1:2283:4901":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:44080:9006":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"6:491:6973":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"24:703:3578":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"16:2303:22421":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:22646:8026":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:22661:8901":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:10967:10746":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"17:10877:23399":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"14:160:10025":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"11:328:8849":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:13363:5747":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:39205:213":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:45820:8352":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"20:731:2837":{"crate_id":20,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"24:646:8597":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"24:5361:3533":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"24:3320:3835":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"16:6120:23312":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:4913:6574":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:5223:32669":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:12319:1372":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:21676:10597":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:43588:8975":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:10317:5563":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:7650:33700":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:6291:5255":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"20:674:3600":{"crate_id":20,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"24:5379:3509":{"crate_id":24,"path":["syn","expr","FieldValue"],"kind":"struct"},"6:5083:7336":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"20:914:2544":{"crate_id":20,"path":["proc_macro2","Punct"],"kind":"struct"},"2:45298:8309":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:9295:2144":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"16:7648:23324":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"24:1366:8599":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"2:40053:16081":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:828:5186":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:4959:7281":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:9376:233":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:0:545":{"crate_id":2,"path":["core"],"kind":"module"},"1:357:4755":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"24:4370:3865":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"16:5367:23306":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:485:6971":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"24:3677:2133":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"5:7348:4870":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"18:706:8650":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:40005:16007":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"23:272:2227":{"crate_id":23,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"2:41548:3577":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:14503:5977":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:6802:8792":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:44104:9012":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:3028:8017":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:43748:15976":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:12278:28084":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"24:5734:2801":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"16:5802:23308":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:41901:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:13674:5807":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:22811:8906":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"11:299:8846":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:4897:7252":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:10018:23370":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:43172:8894":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:11187:8299":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"20:891:2138":{"crate_id":20,"path":["proc_macro2","Group"],"kind":"struct"},"1:11780:10649":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:11563:33004":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"2:4786:3746":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"24:3201:3830":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"1:12308:870":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:7412:7882":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:12851:8693":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:15931:5707":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:403:23384":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:5381:202":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"11:1066:22370":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:7823:23327":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:6872:8806":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:5344:7420":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:11062:5295":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"18:670:27649":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"24:1299:2227":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"2:46219:8411":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:46006:8374":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"5:7606:5214":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:4608:10702":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:8175:23329":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:39880:8916":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:11357:15957":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:4458:3752":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"24:5402:63":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"2:43470:8968":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:30469:3719":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:7330:7847":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:43665:8922":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"11:490:153":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:15383:6248":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:16269:5756":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:12647:23580":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:11443:5589":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:5390:7440":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"24:3388:2535":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"1:724:153":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"24:5507:2285":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"17:11743:8673":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"5:281:5183":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"24:5217:3513":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"2:39922:8258":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:10890:9043":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:5192:32669":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"24:5205:3510":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"1:8210:32597":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:13797:5850":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:11715:8671":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:4337:33838":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:43191:8895":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:5250:7381":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:22711:33499":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"20:710:2217":{"crate_id":20,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"1:11884:9052":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"5:7640:10033":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"24:4975:2167":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"17:11341:23453":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:11841:23538":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:5489:7496":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"16:8259:2915":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:8226:23331":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"24:5731:202":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"5:3740:5183":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:11205:8533":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"16:6749:8791":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:1547:7067":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:14868:6110":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:7144:23321":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"11:1676:5180":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"14:220:6827":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:8118:8835":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:14587:5988":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"21:413:5170":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"2:10256:3730":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:6160:22420":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:9145:3577":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:7485:7905":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:7585:3671":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"18:726:5456":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:6542:7668":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:523:6996":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:9244:10148":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:3546:145":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:2697:201":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:4985:7294":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:4730:3743":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"18:491:8640":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"20:812:2138":{"crate_id":20,"path":["proc_macro2","imp","Group"],"kind":"enum"},"1:1591:8854":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"24:4302:3861":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"6:4800:7188":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:10639:10634":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"24:2576:2840":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"16:4587:6564":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:2205:8859":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:45689:8345":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:4753:7874":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:9108:8522":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:11889:15949":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"6:7602:7968":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:4932:7269":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:41244:169":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:5034:10722":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"17:13855:5857":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:1888:10545":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:43264:8896":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:11016:23413":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:41609:4748":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"20:719:2138":{"crate_id":20,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"17:12808:5673":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:5320:7415":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:7084:5229":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:3154:5404":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:39935:8919":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:43366:8889":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:43283:8897":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:12361:15965":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"5:6000:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:44284:218":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"24:5584:3543":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"23:150:4183":{"crate_id":23,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"2:9399:15962":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:3184:4862":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"5:4501:5209":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:3176:4860":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:6139:3666":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:2374:6500":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"24:4657:3885":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"21:2633:3577":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"23:35:10597":{"crate_id":23,"path":["quote","ext","private","Sealed"],"kind":"trait"},"2:22966:8051":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"17:16151:6464":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:11467:5591":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:2612:6511":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:465:2139":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"11:1603:22375":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:15400:6252":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:12225:23549":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"24:4949:2164":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"2:4685:3742":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:10351:10750":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:4271:10696":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"24:5795:3554":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"5:1478:3582":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:1707:7168":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:41298:10645":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:43962:8998":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:3473:23507":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:13046:5684":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"24:3660:253":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"16:5722:6530":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:8036:10547":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:8226:3714":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:43927:8993":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"24:3371:3838":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"17:11524:23494":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:3871:4958":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"21:2694:3761":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"6:6768:7769":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:45496:8327":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:5002:7304":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:12299:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"24:5917:2708":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"2:44404:9019":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:15799:6375":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:3032:3841":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:5898:10761":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:8618:3656":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:39886:8917":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:6648:3691":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:16079:6445":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:15778:6372":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:9908:10145":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:15701:6350":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:40751:3651":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:4976:6576":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:31911:6878":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:5528:7504":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"24:1916:2225":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"2:43534:8972":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"24:3796:3853":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"16:2936:22448":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:22911:8046":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"24:3813:3854":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"17:15944:5721":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:21560:10597":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:40108:5236":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:5770:219":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:41484:8273":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"5:7617:242":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:46044:8376":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:44158:9015":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:13922:5870":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:1810:676":{"crate_id":1,"path":["std","env"],"kind":"module"},"24:3626:3847":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"2:40234:3677":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:3324:3750":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:33184:5409":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:15266:6216":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"23:345:2838":{"crate_id":23,"path":["quote","quote_spanned"],"kind":"macro"},"2:2501:653":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"23:0:1352":{"crate_id":23,"path":["quote"],"kind":"module"},"6:5314:7414":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"24:4628:3883":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"1:10425:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:12929:5677":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"18:718:5453":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:9195:10769":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:43342:8960":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"24:2115:2143":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"11:364:5176":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"24:0:1990":{"crate_id":24,"path":["syn"],"kind":"module"},"2:10252:3722":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:4916:7265":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:2044:4910":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:44108:9013":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:41557:4159":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"11:1887:3577":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"24:5252:3518":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"2:46455:8419":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:11367:5576":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:5112:7338":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:0:980":{"crate_id":6,"path":["libc"],"kind":"module"},"1:7682:30690":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:41326:2217":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:14271:5937":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:2768:6518":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:5671:7571":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:14284:5939":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:10248:119":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:22784:33431":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:42210:3730":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:6620:6602":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:40068:8929":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"15:306:22402":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:5219:7365":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:8662:33671":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:15410:6255":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:10930:8498":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:13606:5803":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:42475:6721":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:12175:23561":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:3806:10523":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"24:1370:8601":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"17:10155:5557":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"21:2758:2150":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"1:6307:5271":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:923:10515":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"5:7567:16081":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:8299:10156":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"5:2307:8866":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:10939:28091":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:12262:10158":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"24:5316:3526":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"17:14131:5896":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:23021:8056":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"6:5212:7364":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:6721:7755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"17:12695:23583":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:40741:3649":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:12813:3988":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"24:5282:3523":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"23:239:4443":{"crate_id":23,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"16:6300:23313":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:11214:23419":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:3196:6491":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"16:5307:6581":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:3029:5460":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:2234:23471":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:11898:5597":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:7769:6699":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:7365:8870":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"24:5273:3502":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"11:1917:8856":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"24:5256:3501":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"17:13814:5853":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:10419:5566":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:868:5189":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"24:5933:3568":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"6:6915:7823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"0:964:2003":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"6:5020:7313":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"18:96:27636":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:1153:36265":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:6442:219":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:4248:5207":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:532:7002":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:42735:8288":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:9289:4161":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:2254:4865":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:10524:23394":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:2197:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"21:2743:2216":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"2:42020:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:12572:5584":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:9078:10748":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"9:502:6942":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"21:183:4601":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"2:44302:206":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:8159:164":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"13:0:3335":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:11115:23420":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:15078:6171":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:6047:23310":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:14212:5931":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:9262:28085":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:14111:5895":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"5:5212:5213":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"24:4500:3874":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"21:2620:251":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"1:12320:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:39185:214":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:11343:8969":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:30197:10652":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"18:651:5434":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:4952:7278":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"24:2238:3575":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"24:3643:252":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"2:41706:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:4992:7297":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"24:5789:2705":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"2:44294:226":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:2854:162":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"16:2748:6517":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:41600:4882":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:10982:23412":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"24:5006:2411":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"2:3293:4863":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"21:2581:126":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"0:965:2010":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"5:4923:216":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:12267:10511":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:11574:9044":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:2280:10576":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"4:0:3336":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"11:1087:36728":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:2504:3351":{"crate_id":1,"path":["std","io"],"kind":"module"},"16:4062:6557":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:6597:7706":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"24:4558:3878":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"17:12683:23584":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"6:8300:8001":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:6433:8768":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"24:5737:2513":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"2:45607:8341":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"18:538:5438":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"24:1914:1992":{"crate_id":24,"path":["syn","parse_macro_input"],"kind":"macro"},"1:8591:10648":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:4870:7240":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:12887:15970":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"5:2756:8018":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:4856:6572":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"20:940:2837":{"crate_id":20,"path":["proc_macro2","Literal"],"kind":"struct"},"17:13986:5879":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:30823:195":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:10573:36824":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:5636:7558":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:4909:7261":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:6671:3577":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:8565:9026":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:10245:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:8155:8841":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:9670:5291":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"20:680:3714":{"crate_id":20,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"1:4078:10669":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:42714:8953":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"14:187:22389":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:9359:186":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:7580:8829":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"24:4575:3879":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"17:15116:6177":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:11392:23451":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:6590:5183":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:5846:8713":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:10901:8457":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:12707:23401":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"11:1051:10521":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:6848:4984":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:8197:7989":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:415:184":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:12819:15962":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:1062:5183":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:13877:5864":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:14051:5887":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:21580:8024":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"24:3099:2532":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"6:5677:7574":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"5:3660:3582":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:4150:10674":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:10671:36832":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:2826:10597":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"24:4749:3891":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"6:7359:7859":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:10720:36816":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:7389:7881":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:43620:8976":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"20:0:1989":{"crate_id":20,"path":["proc_macro2"],"kind":"module"},"2:41745:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:21958:10597":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:22933:8048":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"2:40344:3685":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:43640:8978":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:6524:7656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:12863:5675":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:860:3577":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:40328:3684":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:11933:4907":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:8155:144":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"23:78:2219":{"crate_id":23,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"6:5225:7368":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:2478:6505":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:4917:5264":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:542:8696":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:3337:10635":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:10999:8523":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"17:16187:6473":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:15214:6203":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"24:3507:3844":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"2:45636:8342":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:8499:3126":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:9807:23374":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:0:3344":{"crate_id":16,"path":["gimli"],"kind":"module"},"11:2548:6876":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:12768:23371":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:12300:1639":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:30850:4523":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:8313:136":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:14147:5901":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:3954:3577":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:39117:8914":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"5:6392:10892":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:6246:205":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"24:4215:3855":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"17:10828:36814":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:14545:5981":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:13568:5795":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:30480:33435":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"23:281:2227":{"crate_id":23,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"21:2680:2217":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"2:11177:15952":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"24:4826:3897":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"1:11179:28095":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:8162:9024":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:6606:8785":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:915:10142":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"24:5905:3560":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"2:39979:16006":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:14298:5940":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:6947:4966":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"6:6689:7740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"5:4467:5207":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:7331:5285":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:40703:8940":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:30454:4818":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"24:1737:27673":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"6:5014:7310":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:7509:23323":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:3096:3748":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"21:2738:2544":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"1:308:1724":{"crate_id":1,"path":["std","thread"],"kind":"module"},"17:12478:5648":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:3234:3878":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"24:5443:2817":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"2:33302:5411":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"18:635:5452":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:39033:15987":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:11857:8547":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"21:2237:3599":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"2:10048:3720":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:3339:139":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"24:5804:3553":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"9:447:22292":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:13774:5845":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"24:1078:37204":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"2:4675:3741":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:11915:23541":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:261:36761":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:21687:8024":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:9137:10772":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:5269:203":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"5:3791:3714":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:45977:8373":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"24:3558:3845":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"17:13455:5766":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:13211:5721":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:6385:6596":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:5122:7339":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:4489:3753":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:12792:5522":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"5:3025:2393":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:2338:6492":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"20:802:2217":{"crate_id":20,"path":["proc_macro2","imp","Span"],"kind":"enum"},"17:12056:5629":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:42957:8957":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:22316:10888":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:2175:23483":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:3778:6552":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:9290:10150":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"24:693:3577":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"2:43683:8921":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:31967:3742":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:13424:5757":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:2067:4909":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:2234:8861":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:45450:8324":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:15624:6328":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:15678:6349":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"24:3728:3849":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"2:1761:2703":{"crate_id":2,"path":["core","mem"],"kind":"module"},"1:12296:1821":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"11:430:36735":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"15:288:22401":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"24:5770:2530":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"5:7038:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:15289:6219":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:15434:6259":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:42217:3731":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"20:788:8638":{"crate_id":20,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"24:267:10022":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"2:42517:136":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:10982:28094":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"11:396:5178":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"20:507:3596":{"crate_id":20,"path":["proc_macro2","LexError"],"kind":"struct"},"18:481:8639":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"11:2369:22376":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:2664:5260":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:45362:8315":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:10615:5243":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"11:2536:2138":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:3468:210":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"5:1566:209":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:646:10506":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:16121:6456":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:1863:10539":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"5:941:3578":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"18:548:152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:8016:10509":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:6874:7797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:5400:7446":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"24:5384:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"16:2636:6512":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:7711:209":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:3020:225":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"16:4424:6559":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"18:515:5437":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"5:924:5191":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:3026:36164":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:42463:33421":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:46367:8415":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"12:0:3341":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:14414:5959":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:4100:10671":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:45315:8312":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"24:5341:3529":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"16:2708:6515":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:43649:8979":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:2355:6494":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:7741:6543":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:9381:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"20:865:251":{"crate_id":20,"path":["proc_macro2","TokenStream"],"kind":"struct"},"1:9497:5033":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"6:4971:7286":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:1340:10520":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:837:3578":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:14066:5890":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:15023:6159":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:12591:8973":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:7314:7835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:43293:15953":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:7306:7830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:5624:7552":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"6:6636:7720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"24:89:2144":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"6:8247:7990":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"11:883:10519":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:9903:33667":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:3270:8856":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:13702:151":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:15333:6233":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:3380:10631":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"24:4645:3884":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"6:6609:7711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:7586:3672":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:8845:9031":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:1463:3578":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:9435:9034":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:44134:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:13344:5746":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:5423:7457":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:41657:3578":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:38454:5416":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:6478:7635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:4824:7206":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:2203:23449":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:12309:876":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:6629:7719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:11070:3582":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:3571:33797":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:6665:23316":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:6611:3643":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:5781:6529":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:16235:6483":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:5852:5207":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"6:6460:7623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"5:2112:10524":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:10534:36820":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"24:4592:3880":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"17:10915:36823":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:7377:4960":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:2087:3714":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:2548:6508":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:7630:8880":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:5914:8718":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"9:238:8288":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:4965:7283":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:6698:7746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"17:4986:23590":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"6:7339:7853":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:5134:7340":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:15138:6181":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:22749:33414":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"10:0:3339":{"crate_id":10,"path":["adler"],"kind":"module"},"16:6927:6641":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:7497:6691":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:11046:3578":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:40710:3641":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"24:3830:267":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"11:2352:10521":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"24:5009:2490":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"6:8328:8007":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:5712:10747":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:11222:8538":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"20:725:2150":{"crate_id":20,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"17:14235:5932":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:13015:5644":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:13553:5789":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:5700:6528":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"24:5312:2418":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"2:43658:8980":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:46510:8424":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:2418:6502":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:7559:8828":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:15168:6192":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:4106:10672":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"18:680:8644":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:3036:27690":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:15569:6309":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:14372:5951":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"24:1086:37203":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"24:4686:3887":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"1:641:10505":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:4279:10697":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:9399:161":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:13235:2150":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"24:3031:3825":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"17:11405:23450":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:2851:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:5784:9020":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"11:1728:155":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:8190:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:13437:5758":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:21431:34379":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"24:53:2226":{"crate_id":24,"path":["syn","token"],"kind":"module"},"6:4885:7247":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:558:4740":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:8616:10725":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:6948:6534":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:11377:6939":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:3586:3749":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"18:507:5434":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:545:7008":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:3244:8855":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:12371:5677":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"9:424:22294":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"21:367:4985":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"24:5619:2535":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"2:33243:5410":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"24:5002:3497":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"2:11215:15958":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"21:628:3763":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"1:6132:219":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:40319:3683":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:1975:1313":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:45767:8349":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:21568:10802":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:15748:6364":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:14977:6151":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:15635:6333":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:4708:10720":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:1597:8855":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:4876:7242":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"24:4988:2155":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"24:5504:3211":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"2:9721:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:517:6993":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:12408:5643":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:4425:10700":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:31960:34062":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"6:5546:7515":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:6116:5272":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:513:23385":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:7407:36635":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:1535:7058":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:40517:3689":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:42203:3722":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:42500:3719":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:11168:8522":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:42953:8956":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:4611:3734":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:12552:8967":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:5863:23309":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:7077:10797":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:5556:10744":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:2508:6506":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:40118:10574":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:5370:7431":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:473:6965":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:10534:10748":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:10681:5245":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"24:4720:3889":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"1:4092:10670":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:9364:5276":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"2:39468:4527":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"22:0:3467":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"2:45657:8343":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:7546:7948":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"15:0:3343":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:10920:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:21421:4523":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"24:3082:104":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"1:3335:10634":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:2394:6501":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:11607:8546":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:39295:8131":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:13627:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"24:3745:3850":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"16:7061:6651":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:13089:5688":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:296:2198":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"23:322:2840":{"crate_id":23,"path":["quote","spanned","Spanned"],"kind":"trait"},"7:31:22278":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:41466:8272":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:46521:8425":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:41979:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:5449:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"5:7699:4958":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"24:2309:3578":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"1:8572:9027":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"24:3065:2198":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"24:5278:3522":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"24:4940:3482":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"2:45721:8347":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:6079:8697":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:10254:2754":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"24:5541:2491":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"24:2980:3822":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"6:6447:7622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:7594:8879":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:3810:6553":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"24:5221:3498":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"17:11634:8665":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"24:3150:123":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"1:3549:10594":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:8250:3658":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:37710:5413":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:45330:8313":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:6494:8772":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:5181:7345":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:1517:7047":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:867:36776":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"1:10872:9037":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"2:41617:225":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"5:1544:10142":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:8692:8512":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"5:4437:5209":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:6657:7732":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:15720:6355":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:6066:8736":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:8577:10701":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:6849:232":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"24:3779:3852":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"16:5075:6579":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"21:2699:2218":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"1:11467:5296":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"5:3396:4958":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:1073:10031":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:1586:4958":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:12353:8685":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:16176:6472":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:15197:6200":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"24:4773:3893":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"6:6706:7750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"9:0:3338":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:14386:5953":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:8294:32678":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"24:5261:3519":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"6:6491:7644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"18:608:36837":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:7539:6538":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:3022:136":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:22540:8899":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:479:6968":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"24:4244:3857":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"17:13959:5874":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"24:2069:10447":{"crate_id":24,"path":["syn","path","printing","span","QSelfDelimiters"],"kind":"struct"},"2:10200:225":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"16:4560:6563":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"10:44:6882":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:3342:140":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:6398:6524":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:31949:2306":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:40090:10561":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:5104:4150":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:6417:7605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"11:673:3578":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:6505:185":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:5347:6582":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:5916:4960":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:12313:1782":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:41682:195":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:9671:23369":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:9372:5207":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"6:5290:7403":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:11026:23414":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:13252:5724":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"11:1566:22373":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"24:3456:3841":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"1:8429:3640":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:578:7026":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:13753:5841":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"24:3762:3851":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"20:830:2837":{"crate_id":20,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"24:4982:1993":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"17:1207:23428":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:11240:161":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:11166:5578":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:7429:7883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"24:4922:2351":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"21:53:4984":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"17:12399:8688":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"5:7523:3634":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:256:36776":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"24:1013:3701":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"2:3138:4507":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:6837:3668":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"16:3842:6554":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:40266:3680":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:3623:3751":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:44356:10890":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"17:12107:5584":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"20:876:2218":{"crate_id":20,"path":["proc_macro2","TokenTree"],"kind":"enum"},"16:7085:8816":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:5960:8725":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:12295:458":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:41665:3582":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"16:2878:6523":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:6849:8805":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"24:5289:3524":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"2:44116:8299":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:10469:156":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:12422:8689":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:11142:5584":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"23:11:3607":{"crate_id":23,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"2:4606:3733":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:9255:4737":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"21:989:2217":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"11:2554:36734":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:12089:5631":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:22977:8052":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"6:5329:7418":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"2:30448:4817":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:1575:3578":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"11:2304:8823":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:14177:5920":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:40138:10593":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:15616:6327":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:5587:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:12213:23572":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"24:3711:2187":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"17:11089:23422":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:43112:33688":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:13485:5770":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:1825:10529":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:12043:23505":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:8168:3659":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"24:1777:2224":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"type_alias"},"6:1723:7173":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:40024:8259":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:7686:23326":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:7111:8821":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:5472:7491":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:11635:9765":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:23010:8055":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"2:12834:15963":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:42538:3721":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:8006:7975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"21:0:1300":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"1:8518:10648":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:559:7016":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:6335:10101":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:7702:3637":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:10185:5559":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:8073:3481":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:12711:136":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:904:4958":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:45511:8328":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:3248:32587":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"24:5946:3556":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"18:113:27637":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:7168:8529":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"24:1110:3538":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"6:7984:7974":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:35834:3893":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:5522:10742":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:15957:6400":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:15456:6264":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:12557:5576":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:2678:5246":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"24:5912:3563":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"2:5195:10637":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"20:895:3598":{"crate_id":20,"path":["proc_macro2","Delimiter"],"kind":"enum"},"17:14356:5950":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:5025:10721":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"16:6648:8787":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"20:935:2150":{"crate_id":20,"path":["proc_macro2","Ident"],"kind":"struct"},"16:6263:8766":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"24:4382:3866":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"2:10201:3727":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:5277:7398":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:13187:5707":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"24:1821:3162":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"6:586:7030":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:1041:8823":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"21:966:3761":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"18:563:5440":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"24:4911:3481":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"2:15:2979":{"crate_id":2,"path":["core","write"],"kind":"macro"},"24:771:37198":{"crate_id":24,"path":["syn","expr","precedence","Precedence"],"kind":"enum"},"6:8351:8013":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:14260:5936":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"24:4674:3886":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"17:13497:5771":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:4391:15991":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:13832:5854":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:1496:7039":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"24:5300:3504":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"6:6811:7783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:37765:5414":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:10260:205":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:4263:10695":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:12584:23398":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:31983:236":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"5:7554:8873":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:11256:8658":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:8093:6743":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:14038:5885":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:4963:16000":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:12828:8650":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:41588:4160":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:7014:23319":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:43273:15954":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:8438:8497":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:43238:3662":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:3614:6551":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:15281:6218":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:12300:23574":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:3588:3727":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:43352:3126":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:2808:6520":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"24:4797:3895":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"2:4602:220":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:6670:7736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:40042:8928":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:11856:15948":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"5:3634:181":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"24:4488:3873":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"14:202:2584":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"18:689:8647":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:6914:4964":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:46495:8423":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"24:5812:2133":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"24:4232:3856":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"2:39113:2761":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"24:5592:3545":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"6:5643:7561":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"11:2403:3582":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"5:4834:781":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"24:4944:3483":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"21:2416:2218":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"24:4998:2367":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"17:11128:5548":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:22842:10666":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"24:4761:3892":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"17:11773:5659":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:33125:5408":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"24:5746:2516":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"17:15190:6198":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:1593:7096":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:12306:734":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:9716:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"21:458:5171":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"16:7570:6539":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:8197:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"20:702:251":{"crate_id":20,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"24:4972:3496":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"2:41504:193":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:2042:196":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:8834:8520":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:3285:10632":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:8524:10647":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"24:2436:2774":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"17:10092:23393":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:860:36772":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"17:11547:5429":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"24:3048:3826":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"24:3541:227":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"18:80:27635":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:11583:23472":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:15092:6175":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:12189:23570":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:43993:9004":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"20:821:2150":{"crate_id":20,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"2:40215:3675":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:40287:3681":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:45575:8339":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:7841:10050":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"24:4855:3899":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"1:2446:10583":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:11227:23418":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:14079:5891":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:13451:34111":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:1639:7133":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:3597:33050":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"24:1779:3703":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"1:12246:9766":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:13757:4869":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:22944:8049":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"24:5269:3521":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"2:21685:10800":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:0:3345":{"crate_id":17,"path":["object"],"kind":"module"},"24:1904:3713":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"20:793:36873":{"crate_id":20,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"21:2011:4982":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"1:5536:10743":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"11:856:10517":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:2621:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"24:5477:2707":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"2:10264:3729":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:9984:23391":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:13526:5780":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:12318:5641":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:2684:6514":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"11:774:8852":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:10044:23392":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"24:5590:3546":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"2:31953:2915":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:894:4960":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:4743:10672":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:11717:5298":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:11812:23502":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"7:0:1850":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:5200:7357":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:8529:10644":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:11324:23465":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:10891:10597":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:11605:5593":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:4468:6560":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:7584:7965":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:3842:10650":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"24:4703:3888":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"2:3108:2681":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:32072:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:11688:8669":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:2700:10045":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:2592:6510":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:8740:8288":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:6788:7777":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:5948:5207":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:6729:7756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:2857:143":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:1686:7160":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"11:2231:8857":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:5445:7473":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:11652:9050":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:12887:8694":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:43312:8295":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:15301:6225":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:8196:5045":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"5:4073:4960":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:14463:5972":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:12293:405":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:1582:4960":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:3947:10651":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"24:3269:139":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"11:800:4960":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:8583:10692":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:10219:142":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"11:1142:22372":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"24:2317:3580":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"1:10636:10632":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"24:5320:3506":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"1:11270:8539":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:11574:8857":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"24:96:4583":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"17:14516:5978":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:6900:7812":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:16032:5724":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"16:6532:8775":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:7098:8818":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:10848:10726":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:10759:5584":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:4268:5207":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:12294:1150":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:8030:10510":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:14012:5882":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:22302:10597":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"18:581:4523":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:2278:137":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:1938:652":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:1579:3577":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:43815:8990":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:12629:8891":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:15814:6376":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:7813:8830":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:5457:7482":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:7575:7962":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:22278:10887":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"6:1580:7089":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:15418:6256":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"24:3354:3837":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"17:597:2231":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:11647:8666":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:5709:7784":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:9858:23387":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:3541:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:5617:7549":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"11:102:8845":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"11:2569:3633":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:5817:8708":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:730:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:9386:5282":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2:10504:10601":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:3780:10646":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:22922:8047":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"2:3374:3590":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:7132:8822":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:4864:7239":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:4103:5183":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:6775:7770":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1:4863:10686":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"21:2371:2837":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"1:7963:4744":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:952:10519":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:5352:7421":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"5:6411:10893":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"2:39130:212":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:12238:23548":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"11:1883:3578":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:14436:5970":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"24:1114:3210":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"5:1555:10143":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:5174:7343":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:7348:7854":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:2987:5263":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"24:1732:27672":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"1:4861:10685":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:3616:10615":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:7387:5194":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:16069:6444":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:9303:8529":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:6532:7661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"24:128:2138":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"17:2037:23454":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:4:1232":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:12839:15961":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:7355:6673":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"20:920:2216":{"crate_id":20,"path":["proc_macro2","Spacing"],"kind":"enum"},"2:2984:10560":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"17:10350:5564":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:42745:8954":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:12150:5634":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"24:5325:3527":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"1:10442:30584":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:45482:8326":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:14752:6017":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:45525:8329":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:41862:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"21:108:4991":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"5:3237:3578":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"10:36:6881":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"24:5582:2358":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"2:3711:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:25873:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:6278:10102":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:15273:6217":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:15822:6379":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:12433:5644":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:437:5508":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:43416:8965":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"24:4785:3894":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"2:3311:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:45268:8305":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:46475:8421":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"11:1896:4958":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:21458:34389":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"}},"external_crates":{"23":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.35/"},"20":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.79/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.12/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.53/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}