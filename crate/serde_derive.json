{"root":"0:0:1753","crate_version":"1.0.188","includes_private":false,"index":{"2:12379:31898":{"id":"2:12379:31898","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12378:31907"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43681:8573","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12473:26153":{"id":"2:12473:26153","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12373:2748":{"id":"2:12373:2748","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12374:26264"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:493-0:404:1877":{"id":"0:493-0:404:1877","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[14,0],"end":[14,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:404:1877","glob":false}}},"2:12372:33316":{"id":"2:12372:33316","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12055:1448","crate::ops::IndexMut":"2:3073:3330","str::slice_unchecked":"2:12371:33315"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12383:2199":{"id":"2:12383:2199","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:3725"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12389:26282":{"id":"2:12389:26282","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:3725"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:14543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12403:26273":{"id":"2:12403:26273","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:3725"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11868:8484","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12421:33320":{"id":"2:12421:33320","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12430:33322":{"id":"2:12430:33322","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12052:3725","`DoubleEndedIterator`":"2:7473:121","prim@char":"1:12049:428","str::matches":"2:12427:2093"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43620:8569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:14543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12445:33328":{"id":"2:12445:33328","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12478:33335":{"id":"2:12478:33335","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4554:33335"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43715:8515","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12377:8472":{"id":"2:12377:8472","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43384:2870","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12382:31901":{"id":"2:12382:31901","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43690:8574","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12453:26283":{"id":"2:12453:26283","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:3725"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12351:836":{"id":"2:12351:836","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12049:428"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12365:26239":{"id":"2:12365:26239","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41438:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10146:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10146:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12356:33313":{"id":"2:12356:33313","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12354:33312"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86-0:993:1971":{"id":"0:86-0:993:1971","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[21,0],"end":[21,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::internals::case::RenameRule","name":"RenameRule","id":"0:993:1971","glob":false}}},"2:12376:2331":{"id":"2:12376:2331","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12049:428"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43374:8554","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12450:2005":{"id":"2:12450:2005","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:3725"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12468:1966":{"id":"2:12468:1966","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12013:127","`FromStr`":"2:12012:3345"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41581:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12012:3345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12012:3345","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12392:2649":{"id":"2:12392:2649","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41438:181","prim@char":"1:12049:428","self::pattern":"2:12052:3725"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12353:33311":{"id":"2:12353:33311","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12362:319":{"id":"2:12362:319","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12066:1551"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12415:26277":{"id":"2:12415:26277","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:3725","str::rsplitn":"2:12418:26279"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43502:8562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12443:33327":{"id":"2:12443:33327","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12456:26284":{"id":"2:12456:26284","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:3725"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:14543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12433:33323":{"id":"2:12433:33323","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12052:3725","`DoubleEndedIterator`":"2:7473:121","prim@char":"1:12049:428","str::rmatch_indices":"2:12436:33324"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43548:8565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12418:26279":{"id":"2:12418:26279","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12049:428","str::splitn":"2:12415:26277","self::pattern":"2:12052:3725"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43520:8563","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:14543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5516":{"id":"5:5516","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5517:33989","5:5518:2127","5:5521:33990","5:5524:33991","5:5532:33992","5:5533:33993","5:5534:3389","5:5535:2328","5:5536:2327"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5532:33992":{"id":"5:5532:33992","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7475:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12439:33325":{"id":"2:12439:33325","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5524:33991":{"id":"5:5524:33991","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7475:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492-0:1018:1876":{"id":"0:492-0:1018:1876","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1018:1876","glob":false}}},"2:12367:26240":{"id":"2:12367:26240","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10146:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10146:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12354:33312":{"id":"2:12354:33312","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12363:1986":{"id":"2:12363:1986","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41438:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10146:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10146:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12427:2093":{"id":"2:12427:2093","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12052:3725","`DoubleEndedIterator`":"2:7473:121","prim@char":"1:12049:428","str::rmatches":"2:12430:33322"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43602:8568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12361:320":{"id":"2:12361:320","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12362:319","`u8`":"1:12066:1551"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12446:33329":{"id":"2:12446:33329","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12472:26152":{"id":"2:12472:26152","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12475:33334":{"id":"2:12475:33334","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4556:33334"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43697:8516","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:2327":{"id":"5:5536:2327","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12474:26154"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12378:31907":{"id":"2:12378:31907","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12379:31898"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43672:8572","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12477:9098":{"id":"2:12477:9098","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4557:9098"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43706:8510","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12352:2097":{"id":"2:12352:2097","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12459:33331":{"id":"2:12459:33331","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:3725"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:14543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:33989":{"id":"5:5517:33989","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:1940","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7208:4599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:1940","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7208:4599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12409:33318":{"id":"2:12409:33318","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12052:3725","str::split":"2:12400:26271","prim@char":"1:12049:428","`DoubleEndedIterator`":"2:7473:121","str::rsplit_terminator":"2:12412:33319"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43448:8559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12374:26264":{"id":"2:12374:26264","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12373:2748"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12380:31412":{"id":"2:12380:31412","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43652:8570","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12470:26149":{"id":"2:12470:26149","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12406:26275":{"id":"2:12406:26275","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12052:3725","`DoubleEndedIterator`":"2:7473:121","prim@char":"1:12049:428","str::split":"2:12400:26271"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43416:8485","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:14543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:963:1742":{"id":"0:963:1742","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[89,0],"end":[94,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:12360:33314":{"id":"2:12360:33314","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12369:26241":{"id":"2:12369:26241","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10146:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10146:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12447:33330":{"id":"2:12447:33330","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:3725"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12077:14541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5521:33990":{"id":"5:5521:33990","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7475:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12350":{"id":"2:12350","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12351:836","2:12352:2097","2:12353:33311","2:12354:33312","2:12356:33313","2:12359:2860","2:12360:33314","2:12361:320","2:12362:319","2:12363:1986","2:12365:26239","2:12367:26240","2:12369:26241","2:12371:33315","2:12372:33316","2:12373:2748","2:12374:26264","2:12375:2337","2:12376:2331","2:12377:8472","2:12378:31907","2:12379:31898","2:12380:31412","2:12381:33317","2:12382:31901","2:12383:2199","2:12386:26281","2:12389:26282","2:12392:2649","2:12396:4268","2:12400:26271","2:12403:26273","2:12406:26275","2:12409:33318","2:12412:33319","2:12415:26277","2:12418:26279","2:12421:33320","2:12424:33321","2:12427:2093","2:12430:33322","2:12433:33323","2:12436:33324","2:12439:33325","2:12441:33326","2:12443:33327","2:12445:33328","2:12446:33329","2:12447:33330","2:12450:2005","2:12453:26283","2:12456:26284","2:12459:33331","2:12462:33332","2:12465:33333","2:12468:1966","2:12470:26149","2:12471:26150","2:12472:26152","2:12473:26153","2:12474:26154","2:12475:33334","2:12477:9098","2:12478:33335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:964:1750":{"id":"0:964:1750","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[97,0],"end":[102,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"0:1022:1974":{"id":"0:1022:1974","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"0:0:1753":{"id":"0:0:1753","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[102,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2021\n# use serde_derive::{Deserialize, Serialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.188\")]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: derive_partial_eq_without_eq, clippy ::\nenum_variant_names, clippy :: manual_map, clippy :: match_like_matches_macro,\nclippy :: needless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: let_underscore_untyped, clippy ::\nmanual_assert, clippy :: map_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:963:1742","0:964:1750"],"is_stripped":false}}},"2:12441:33326":{"id":"2:12441:33326","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:353":{"id":"0:63:353","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1878,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:86-0:993:1971"],"is_stripped":false}}},"2:12400:26271":{"id":"2:12400:26271","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12052:3725","`DoubleEndedIterator`":"2:7473:121","prim@char":"1:12049:428","str::split_whitespace":"2:12378:31907","str::rsplit":"2:12406:26275"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43398:8482","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12412:33319":{"id":"2:12412:33319","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12052:3725","str::split":"2:12400:26271","prim@char":"1:12049:428","str::split_terminator":"2:12409:33318"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43466:8560","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:14543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12462:33332":{"id":"2:12462:33332","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:3725"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12471:26150":{"id":"2:12471:26150","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39470:26160","Self::is_ascii":"2:12470:26149"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39470:26160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12375:2337":{"id":"2:12375:2337","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12049:428"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43368:8553","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5534:3389":{"id":"5:5534:3389","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7475:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12386:26281":{"id":"2:12386:26281","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:3725"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12424:33321":{"id":"2:12424:33321","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:14543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5533:33993":{"id":"5:5533:33993","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:1940","`String`":"5:7475:227"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:1940","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7208:4599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12396:4268":{"id":"2:12396:4268","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41438:181","prim@char":"1:12049:428","self::pattern":"2:12052:3725"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:14543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:2328":{"id":"5:5535:2328","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12473:26153"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5518:2127":{"id":"5:5518:2127","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7475:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8:1869":{"id":"0:8:1869","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[216,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:12371:33315":{"id":"2:12371:33315","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12055:1448","str::slice_mut_unchecked":"2:12372:33316","crate::ops::Index":"2:3069:2504"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12381:33317":{"id":"2:12381:33317","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43662:8571","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12436:33324":{"id":"2:12436:33324","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12052:3725","`DoubleEndedIterator`":"2:7473:121","prim@char":"1:12049:428","str::match_indices":"2:12433:33323"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43566:8566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:14543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12474:26154":{"id":"2:12474:26154","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12465:33333":{"id":"2:12465:33333","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:3725"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:14542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:14543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12359:2860":{"id":"2:12359:2860","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11612:14545"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:12098:5558":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:44145:8606":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:10591:8563":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"11:1103:20391":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"24:4349:3640":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"21:2755:1959":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"2:40711:8534":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:9705:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"5:7363:3376":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:9060:28152":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:9521:21408":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"21:2578:3507":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"20:777:25442":{"crate_id":20,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"2:47689:8037":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:12062:764":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:3649:3320":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:40518:3432":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:2696:6223":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:12069:1550":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:11214:8133":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:13554:5907":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"24:2522:3647":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"6:6582:7476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"18:538:5252":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:10534:8263":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:364:4488":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:43898:8585":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:6843:7603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:2531:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:3266:9225":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:4269:3475":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:8097:8431":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:9372:5375":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:4032:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:11470:5114":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:1638:6833":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"9:177:9006":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:2625:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:14448:6168":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:500:6680":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:1634:604":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:10698:21533":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:8948:9355":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"13:226:6581":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:7513:8423":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"24:1503:3448":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"16:7677:200":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:8916:9354":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:9617:34987":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"22:0:3209":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"2:3270:31815":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:12997:5744":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:4527:6271":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"24:5034:3276":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"17:10265:21465":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:7768:6240":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:40231:3420":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"24:3820:3604":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"17:13676:5955":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:12070:1547":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"14:221:6534":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:8563:8120":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:7210:3385":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:12810:5699":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:9564:21409":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:11582:14674":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:10603:8268":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:2864:6230":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:4344:6267":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"21:2379:2580":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"24:4884:2161":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"17:11151:21588":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:11598:8925":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:7526:7636":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"11:657:3320":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:4835:7126":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:4957:7195":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:14269:6113":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"23:78:1962":{"crate_id":23,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"2:43125:31911":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:12983:5743":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:6318:6305":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"24:2539:3568":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"2:44125:8601":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:47903:8050":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"21:2015:4707":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"24:3202:3594":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"5:4348:248":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:9933:21441":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:12012:3345":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:13723:5963":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:3191:31363":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:43225:7924":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"21:2730:3341":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"2:43296:8491":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:3183:34852":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:45703:7949":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:2251:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:3305:9221":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:2969:20465":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"18:531:8237":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:2888:5226":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:926:9110":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:2779:3511":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:4731:7076":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:6944:34918":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:8149:3383":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:1545:6766":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:13135:5774":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"24:2229:9191":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"5:6812:4691":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:11226:8281":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:5858:7323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"20:121:35018":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"24:4122:3624":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"1:2382:9177":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:261:34976":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:554:6715":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:863:3320":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:14346:6138":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:41573:195":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:4830:9259":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:6753:8389":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:4680:7051":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:41640:3320":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:44332:197":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:7473:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:1911:16334":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:8397:3891":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:8225:8482":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:4648:7519":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:10088:9133":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:3997:9248":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:11053:5109":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:6616:7495":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"11:2060:9116":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:534:4471":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:13024:5748":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:11272:8284":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:41302:9235":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:562:6720":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:12778:5695":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:4881:1027":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:47443:8032":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:5322:6290":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:5846:4685":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"18:681:8240":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:10637:8272":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"9:507:6649":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:2907:6232":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:8364:8103":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:11473:5333":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"5:7422:31823":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"11:805:9111":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:4889:6282":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:7928:8933":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:7862:8427":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"20:718:1960":{"crate_id":20,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"1:9116:221":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:4751:9262":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:2363:191":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:6456:8371":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:6499:5009":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:40354:3429":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:5814:7301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:2243:8461":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:2876:5223":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:5784:7284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"24:4845:3255":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"2:21469:7668":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:14118:6060":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:2223:9171":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:9455:34975":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:3330:4683":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:12062:5551":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"11:403:34900":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:6657:7522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:6332:6233":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"24:2726:116":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"24:1335:35150":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"16:7828:6414":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:2284:20438":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:9456:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:10456:21486":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:10588:8267":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"18:599:5211":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:9762:34977":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:2766:6226":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:4784:397":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:8465:7919":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:5455:9327":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"11:1852:8452":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:2472:6214":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"24:2930:3584":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"17:12737:5689":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"20:879:1960":{"crate_id":20,"path":["proc_macro2","Span"],"kind":"struct"},"16:5661:8302":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:7568:6250":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:3217:34856":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:12252:5593":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:10112:21455":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:11074:21586":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:21782:7670":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"11:667:9015":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:44367:8678":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"24:5190:3288":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"24:2811:3578":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"1:2409:3094":{"crate_id":1,"path":["std","io"],"kind":"module"},"24:4872:3261":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"2:43997:8592":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"21:2270:1880":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"2:39966:8516":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"18:644:5248":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:4402:3486":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:6200:4709":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"24:878:35160":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"17:12237:5587":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:2783:228":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:2495:14592":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:8212:3430":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"23:504:4171":{"crate_id":23,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"17:14156:6068":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:6386:6307":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:7462:6398":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:42202:3472":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:9486:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:25797:250":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:4844:7132":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"9:237:7919":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"20:821:1880":{"crate_id":20,"path":["proc_macro2","imp","Group"],"kind":"enum"},"1:11611:8147":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:6011:3434":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:8990:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"21:2710:1961":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"2:2893:3625":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:4924:9304":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"5:5619:4689":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:6031:7411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:10758:9307":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"24:4474:2227":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"1:10486:5108":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:6195:8478":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"20:839:2580":{"crate_id":20,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"1:12052:1078":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:9086:5366":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:7475:227":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:12621:5674":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"24:2777:3577":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"2:7894:3400":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"24:5376:1875":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"11:1826:4685":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:30223:31837":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:6415:8368":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"11:2194:6586":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:5976:7389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:1631:6829":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:6453:4685":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"18:582:4257":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:3010:2441":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:6960:21334":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:7102:21337":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:6156:8359":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:11064:5110":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"18:590:5255":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"24:5039:2447":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"17:14033:6037":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"24:4946:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"2:46907:7997":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"24:5152:3286":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"24:5373:3293":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"5:7451:8473":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:1527:6755":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:641:9101":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:40292:3410":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:12072:14543":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"21:2644:3320":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"6:1673:6858":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:14478:6176":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"14:40:1892":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:22717:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:31995:3484":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:40162:3406":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:6473:5097":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:5135:5039":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"20:704:3339":{"crate_id":20,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"16:2359:6209":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:4051:9252":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:400:21394":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:3232:6200":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"11:119:5000":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"18:624:34995":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:2856:5221":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:2794:2421":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:22023:8493":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:40222:3419":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"24:4924:3273":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"2:44117:8599":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"24:5500:3311":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"1:10167:2265":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:10628:8271":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:4320:9276":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:43962:8587":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:21172:9397":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"24:609:3321":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"5:822:5015":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:10343:8482":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"21:404:35066":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"1:5978:5093":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:8878:3320":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:39297:7765":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:4020:31900":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:5646:8613":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:4949:6284":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:1523:9117":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:13989:6023":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:2960:34822":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:7912:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:10292:5392":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:638:9100":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:4618:7046":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:2170:4620":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"6:6877:7612":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:3017:3513":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:10548:9224":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:1842:9139":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:5832:5087":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"24:555:5207":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"24:1440:25457":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"11:1845:8451":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:8895:21402":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:4430:6975":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:40305:3425":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:41581:212":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:21436:9191":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"20:924:2284":{"crate_id":20,"path":["proc_macro2","Punct"],"kind":"struct"},"1:2499:9216":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:21337:9385":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:782:5012":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:39017:14568":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:8134:8437":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:358:4487":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"11:2174:6582":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:41908:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:7600:5105":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"11:736:8449":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:8825:21400":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:4783:7106":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:13546:5904":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:41947:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"24:4964:62":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"17:12576:5668":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:4756:7089":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:488:6675":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:40018:7893":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:10334:9327":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"24:2573:3570":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"2:40760:3396":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:13148:5775":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:22618:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"5:2959:2136":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"23:322:2583":{"crate_id":23,"path":["quote","spanned","Spanned"],"kind":"trait"},"24:1488:3447":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"11:968:8419":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"23:46:3351":{"crate_id":23,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:14514:6180":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"24:4578:3239":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"24:1613:3457":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"6:4545:7030":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:6086:7427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"15:0:3086":{"crate_id":15,"path":["addr2line"],"kind":"module"},"20:728:1880":{"crate_id":20,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"1:10842:8098":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:46693:7994":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:45408:7937":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:9176:31088":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"6:6024:7410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:6017:21328":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:9488:9186":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:20898:33148":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:43548:8565":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:2772:223":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"24:1948:3320":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"1:10443:9330":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:4176:9273":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"24:4548:3238":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"17:10023:21411":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:1931:674":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:8903:8125":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:4835:6280":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"24:4793:3243":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"17:14335:6137":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:4826:7123":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"21:53:4709":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"2:21205:9392":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:41268:7897":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:6735:7535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:12024:5545":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:8338:9306":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"20:811:1960":{"crate_id":20,"path":["proc_macro2","imp","Span"],"kind":"enum"},"17:12750:5691":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:4168:9272":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:7287:8466":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:878:5017":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:261:5009":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:8154:21345":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"23:239:4177":{"crate_id":23,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"17:11535:8289":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:12648:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:7736:6406":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"20:734:1892":{"crate_id":20,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"2:44205:14714":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"21:1196:198":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"2:12057:14542":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:12053:317":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"11:1818:3321":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:11886:5511":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:2905:4178":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:589:9097":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:22076:8494":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:12635:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"24:1139:8201":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"24:2692:108":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"6:5929:7363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:5830:8315":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:30193:4550":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:12711:5686":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"24:4151:3626":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"16:8195:8438":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:11623:31068":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:4745:6277":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:1737:4636":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:13632:5950":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"24:4520:3225":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"17:12496:5654":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"4:0:3079":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:11161:8121":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"15:306:20419":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:12074:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:10536:14535":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:1751:7665":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:13973:6021":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:2141:8454":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:4742:7083":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:2526:6216":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"24:4035:3618":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"24:1965:3321":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"16:5588:6237":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:2933:20464":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:4376:6948":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:4975:7206":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:7597:34917":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:5639:5093":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:12465:5647":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:11281:5451":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:547:6712":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:4363:5035":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:4497:6270":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:2834:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:43277:8490":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"24:4516:3224":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"6:1696:6868":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:1564:4685":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:4985:5033":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:31988:31873":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"24:5185:2274":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"21:0:1104":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"6:526:6700":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:12598:5669":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"11:1538:20394":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:4640:7048":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:9574:34981":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:12184:5574":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:6053:7418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:568:6723":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:11062:21585":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:7621:21341":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:5419:5366":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:7541:8937":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:3232:21519":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:10139:21456":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"11:311:8445":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:2935:5227":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:41869:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:2923:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:4047:9251":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:1681:6859":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:39276:14620":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:5082:7253":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:21343:9387":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:4403:6960":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:14145:6067":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"20:510:3339":{"crate_id":20,"path":["proc_macro2","LexError"],"kind":"struct"},"17:11661:5483":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:1702:6869":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:1671:1116":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:4508:7012":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:46077:7967":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:5961:5039":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"24:3791:3602":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"24:5329:2561":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"7:0:1597":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:11788:5492":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:1672:5009":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:21794:32976":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:11586:5480":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:4155:3497":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"21:2427:1961":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"6:5017:7222":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:6915:6244":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"24:5010:2519":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"2:41554:3896":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:12048:961":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:46152:7969":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:14296:6125":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"23:11:3350":{"crate_id":23,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"24:2828:3579":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"1:10964:6646":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:42533:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"24:4402:3644":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"5:3581:3321":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:474:1881":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"24:843:9191":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"24:4558:1734":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"18:719:5267":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:7534:6248":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:9350:5374":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"24:4815:3248":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"17:10447:21487":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"24:4892:3265":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"2:44324:213":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:932:9111":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:1506:6747":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:7259:7618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"24:550:128":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"2:22948:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:9026:31045":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:2273:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"24:4498:2094":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"1:1429:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:13981:6022":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"24:4982:1900":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"1:4240:9275":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:13422:5801":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"23:344:1143":{"crate_id":23,"path":["quote","quote"],"kind":"macro"},"6:5899:7340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:10294:3321":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"24:2964:2274":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"2:9437:212":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"5:1426:3325":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:4265:209":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:10561:8265":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"24:344:35146":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"2:43925:8586":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:10672:21552":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:11137:21561":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:1986:186":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"24:4900:3267":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"1:7664:4477":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"6:62:14933":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:4485:6999":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"24:5353:2445":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"17:10370:21462":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:2178:21463":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:3655:5279":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:4862:6281":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"21:648:3508":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"6:541:6709":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:7767:8928":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:3975:9246":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"18:755:8253":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"24:1598:3445":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"16:2380:6210":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:2999:3493":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:2888:5084":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:5575:7425":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:46647:7993":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:12876:5724":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:7217:3320":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:21128:9396":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:1895:8929":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:1709:6872":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:10916:21520":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:2881:6231":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"24:3032:3588":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"1:9106:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:5076:7250":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"24:926:3280":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"6:4697:7060":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:11794:8561":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:11215:8277":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:12305:5607":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:39928:8513":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:30387:31848":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"20:885:1961":{"crate_id":20,"path":["proc_macro2","TokenTree"],"kind":"enum"},"17:8848:21401":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:2966:3588":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"13:110:34907":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:3251:14570":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:31981:2659":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"5:1411:3321":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:7573:7646":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:12020:9107":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"24:5150:3284":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"24:5298:2544":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"17:9701:21411":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:40727:3388":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"24:552:8197":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"1:1983:187":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:4644:7515":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:44149:8607":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"24:89:1886":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"1:12073:1163":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"20:951:2580":{"crate_id":20,"path":["proc_macro2","Literal"],"kind":"struct"},"17:12698:5684":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:7489:8474":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"24:3372:3600":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"6:6180:7464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"24:3185:1907":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"1:5404:9324":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:5509:9328":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:10420:5243":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:13802:5980":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:6902:5100":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:11006:8123":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:11448:21416":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:9927:5067":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:907:4683":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:7581:5103":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:12111:5560":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"23:235:4175":{"crate_id":23,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"16:7660:6403":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:14499:6179":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:8320:8102":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:47567:8034":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:8293:8620":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:39244:3370":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:14163:6070":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"14:165:20399":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"24:4888:3264":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"2:39283:7764":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"23:281:1970":{"crate_id":23,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"5:6783:4689":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:11261:8283":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:44129:8602":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"21:183:4334":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"6:4415:6969":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:22129:7671":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:4806:6279":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"21:244:35082":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"16:6204:8975":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:2223:34351":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"11:1501:20392":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:6560:4999":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:43251:3405":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:13816:5981":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:21036:9389":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:11742:5488":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:46487:7991":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"24:4492:3222":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"16:7269:34939":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:12888:5726":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:5384:21323":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:2216:9170":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:46009:7964":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:4623:14580":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:10410:21480":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:14324:6132":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:11367:5457":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:10960:8928":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:5492:5033":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:9959:21436":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:6376:21331":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:3226:9223":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:8294:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:13085:5757":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:44314:207":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"16:7613:21340":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:4666:7050":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:4037:9250":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:39950:8515":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:44137:8604":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:1464:8448":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:43286:14534":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:6139:7438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"11:1121:8919":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:42933:7923":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:6256:5093":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:44172:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:4537:7026":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:12050:1567":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:11757:8556":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:13286:5792":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:8169:8098":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:0:841":{"crate_id":6,"path":["libc"],"kind":"module"},"2:2846:5219":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"21:2504:3506":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"24:894:35157":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"24:1068:1970":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"6:506:6683":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:308:1500":{"crate_id":1,"path":["std","thread"],"kind":"module"},"1:3188:31364":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:7733:9106":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:8304:9269":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:12074:5554":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:22651:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:47788:8045":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:14134:6063":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:13868:5996":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:10903:21521":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:41512:3320":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:41791:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:884:8449":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:12154:5570":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"24:4806:3246":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"1:9493:5107":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:13949:6013":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:7381:30757":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:8006:31069":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:2504:6215":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"24:5339:2487":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"24:4920:3272":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"0:964:1751":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"1:11399:8642":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:42195:3463":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:22220:7677":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:3529:9208":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:45454:7939":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:1473:8449":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"24:4110:3623":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"2:39103:8508":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"24:5310:2260":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"2:45979:7963":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:40184:3407":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:3830:6263":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:6929:6353":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:39914:7892":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:10440:21511":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:6169:5092":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:10812:8057":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:2986:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:9697:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:5404:5033":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:10397:21509":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:2394:9183":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:13611:5945":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:5091:31079":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:8574:8624":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:3303:9220":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:45432:7938":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:11934:1892":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"21:2776:2580":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"16:2596:6219":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:40742:3392":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"9:393:20312":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:6753:7546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:10383:21461":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:6499:6253":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:8932:9353":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:1779:9123":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:43690:8574":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:45787:7952":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:22310:7689":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"14:160:8913":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"11:1068:20390":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"21:2636:3339":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"6:6627:7500":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"20:874:236":{"crate_id":20,"path":["proc_macro2","TokenStream"],"kind":"struct"},"17:13215:5782":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:12007:5543":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:1118:34820":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:7718:9105":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"11:1858:1929":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:7936:3458":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:4348:3484":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:4856:7136":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:5070:7248":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:2131:4466":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:3406:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"21:2691:1960":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"2:22750:180":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:7503:6247":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:12136:5562":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:1492:9015":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:2540:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:646:9102":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:1922:4594":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:4802:7114":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:40240:8527":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:7284:3895":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:41674:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:6077:5088":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:2614:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:13298:5799":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"11:836:9113":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:15:2723":{"crate_id":2,"path":["core","write"],"kind":"macro"},"21:1394:1974":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"5:6900:247":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:12543:5660":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:13202:5781":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:43706:8510":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"0:0:1753":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"24:5489:3308":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"2:39958:8510":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:4921:6283":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:22684:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:7029:5101":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:11337:21590":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:11316:5455":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:5121:6289":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:35:4600":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:6583:8383":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"24:3066:3590":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"6:1649:6841":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:5060:31079":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:4931:7183":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:1733:6881":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:9998:5356":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:43368:8553":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"11:1048:34898":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:40494:3430":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:23395:222":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:7895:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:29961:9242":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:14469:6174":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:7257:34349":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:8996:4470":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:2944:5231":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:47773:8044":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:40340:3428":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:4471:6991":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:10478:5401":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:3744:9239":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:5369:14520":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:12422:5636":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"21:2329:1892":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"2:47762:8043":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"24:4582:2154":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"1:3465:9188":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"24:5295:192":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"16:8239:2659":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:1044:8419":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"5:2690:7662":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:12970:5741":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:39134:200":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:4053:6266":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:12645:5675":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:4812:7118":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:7887:3397":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"18:521:25435":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:918:9015":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"9:450:20311":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:11357:8146":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"18:491:8236":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:10738:21555":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:4613:6274":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:895:3321":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:3600:6260":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:1590:6797":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"20:694:8233":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"2:43850:8584":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:4417:6268":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"14:187:20406":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"5:7208:4599":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"24:3338:3598":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"1:10800:8636":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"9:330:6626":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:494:6678":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:40254:3422":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:6720:7531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"24:3958:3613":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"16:536:8292":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:20883:33150":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:4719:6276":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:2868:5232":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"24:2590:3571":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"16:8050:3223":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:44375:7933":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:7523:8424":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"24:3219:2492":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"17:10616:8269":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:7860:9186":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:6531:8381":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:11393:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:12060:663":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:6879:6348":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"24:5005:2560":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"18:671:25434":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:949:9113":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:13685:5956":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"24:2760:3576":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"17:10084:21433":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:14042:6038":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:6304:208":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:9159:8627":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"18:699:8244":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:12658:5678":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:8158:8097":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:579:6728":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:12685:5683":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:9003:28158":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:7582:6399":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"24:3083:3591":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"18:652:5248":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:12531:5658":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"18:113:25422":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:4330:6914":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:9985:21434":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:12473:5649":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"24:4487:3223":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"11:695:9016":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:12061:767":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:6680:7523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:1500:6744":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:4772:7098":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:4500:9279":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:6607:7494":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:40733:3390":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:12830:5700":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:6987:8936":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:10386:8484":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:7549:7642":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:653:15343":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"24:1132:8198":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"14:215:8439":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:13906:6005":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:12077:14541":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:47864:8049":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:47255:8030":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"24:1530:2906":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"16:5798:6295":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:5886:7334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:8594:21383":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:2494:9191":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:416:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:11710:5452":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:11507:21417":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:41422:7907":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:8202:3416":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:12293:5604":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:3741:9240":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"7:32:20297":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"24:4308:3637":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"1:2921:212":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"17:11358:21591":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:622:8927":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"11:630:3321":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:3348:9213":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:4608:7045":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"11:1027:20389":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"11:2049:9115":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:12015:9028":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:40364:3413":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:7584:7650":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:4718:7072":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"24:5481:2448":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"17:10278:21464":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"5:3171:3321":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:43566:8566":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:9046:8129":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:9972:21435":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:8557:3321":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:12278:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:6153:5077":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:4759:689":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:12052:3725":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:40718:3386":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:5673:6238":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:9172:5369":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:8659:21381":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:4864:7141":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:41564:4609":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"24:2175:9191":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"2:45663:7947":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:10240:5384":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"24:4011:3616":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"16:5995:8293":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:46411:7989":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"24:4204:3630":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"24:4820:3249":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"2:2666:9154":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:2780:3491":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:5027:7227":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:1288:9115":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:1482:9109":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:11547:5479":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:40065:8523":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:10136:9191":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"24:5148:3282":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"6:5802:7297":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:8985:9022":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:6968:21335":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"24:1484:3333":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"24:599:3320":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"2:42438:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:1568:4683":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:44133:8603":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:10227:21466":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:2884:5225":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:6361:8365":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"5:1102:34445":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:8488:8115":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:4965:7200":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:30785:4257":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:39056:4593":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:2921:3640":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:13071:5755":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:943:9112":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:39898:31825":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:3230:14619":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:4338:3483":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:7526:3401":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:39222:205":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:6697:7524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:47811:8046":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:10771:5405":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:40171:3416":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:7514:7634":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:4422:3487":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:8121:9187":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:45933:7962":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:8862:3321":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:12670:33292":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"24:5334:2272":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"16:7342:34935":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:11872:5510":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"24:918:3279":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"16:2618:6220":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"11:2033:8419":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:9867:5382":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:2543:241":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:20881:33146":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:11000:5441":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:43342:7926":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:10822:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:4973:3887":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:7645:4489":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"24:1921:3319":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"16:6696:6332":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:45562:7943":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:2254:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"24:4943:2504":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"17:14282:6119":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:4008:31917":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:11617:5481":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:10059:5388":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"24:2794:1905":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"6:4477:6994":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:40752:3394":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:14056:6045":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:13914:6007":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:9494:3473":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:12484:5652":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:6279:6302":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:12724:5687":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:3065:5274":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"11:2201:3376":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:8953:21404":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:14090:6053":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:1817:9133":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:47707:8038":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:11534:9239":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:2832:6229":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:2326:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:42718:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:4160:9271":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:2321:6201":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"20:676:3458":{"crate_id":20,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"17:14316:6131":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:7316:3320":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:6572:3320":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"24:5060:2555":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"17:13739:5966":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:7304:7632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:6401:6235":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:21357:7668":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:4392:9270":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:7690:4476":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:1575:6785":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:9111:220":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"24:4785:3241":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"17:12790:5696":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:119:14987":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:4558:7034":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"24:5497:3310":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"1:5137:193":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:4874:7147":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:6261:8974":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:45885:7961":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:7436:6397":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:41331:1960":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:45388:7936":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"24:4862:2236":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"2:21086:4620":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"21:1020:3505":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"10:0:3082":{"crate_id":10,"path":["adler"],"kind":"module"},"16:5612:6239":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:1058:9115":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:22336:9243":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"11:986:9115":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:4293:6887":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:3797:6262":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:7865:8617":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:6929:31671":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:7855:4870":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:10126:8254":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:41351:31852":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:43204:8489":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"21:2750:2284":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"24:5484:3307":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"2:40324:3427":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:11111:21563":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:14434:6161":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:13162:5776":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:39886:8512":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:8011:9026":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:1495:6742":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:12172:5571":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"24:4262:3634":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"1:12068:1549":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:1184:21442":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:8342:7504":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:14355:6140":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:4059:9254":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:2841:3365":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"24:5103:2235":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"5:3178:8451":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:5249:192":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:39871:8510":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"24:252:8911":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"17:11351:5456":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:14100:6056":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:1557:3321":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:12697:194":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"20:904:3341":{"crate_id":20,"path":["proc_macro2","Delimiter"],"kind":"enum"},"1:12047:379":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:7595:7651":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"20:900:1880":{"crate_id":20,"path":["proc_macro2","Group"],"kind":"struct"},"17:9711:34966":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:9081:8132":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:12890:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"13:0:3078":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:6201:9025":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:11833:5117":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:7281:7619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:4397:6957":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:6546:8934":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"21:433:4995":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"6:6076:7424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"24:2981:2579":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"6:4897:7158":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:0:3088":{"crate_id":17,"path":["object"],"kind":"module"},"6:4796:7111":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:4552:7032":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"5:676:234":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"5:6802:4690":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:2406:6211":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:587:6733":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:3185:29328":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:0:508":{"crate_id":2,"path":["core"],"kind":"module"},"24:5066:2955":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"2:2900:5210":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:4585:6273":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"24:3946:3612":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"6:7472:7633":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"24:548:212":{"crate_id":24,"path":["syn","error","Result"],"kind":"type_alias"},"6:6634:7504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:6792:2708":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:2049:9118":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"5:1776:4683":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:14013:6030":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:7554:6249":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:41713:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"21:1063:1960":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"2:10146:225":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:5982:14907":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:8238:9238":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:9780:21413":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:10351:30957":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"24:4134:3625":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"17:14001:6029":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:9242:5371":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:10949:21518":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:1825:3495":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:11687:21418":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"24:498:3331":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"17:12452:5645":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:22274:31835":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:0:1440":{"crate_id":1,"path":["std"],"kind":"module"},"17:13792:5979":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:727:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"24:2709:3574":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"16:5696:21325":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:8312:9238":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:505:4466":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"24:2743:3575":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"1:8826:8121":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"11:1611:5006":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:10929:5437":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:46253:7972":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:13244:5785":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:4986:7212":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:8558:3898":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:3513:28085":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:4910:7168":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:43987:8588":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"5:0:291":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:871:8448":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:8281:6456":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"24:95:4316":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"1:5632:208":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"11:798:9110":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:3419:5033":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:21275:9191":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:46055:7966":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"24:4932:3275":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"2:5552:3421":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:46101:7968":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"11:1517:20393":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:2927:5228":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:40283:3424":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:3565:21538":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:4749:9260":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:42730:7919":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:8167:21346":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:2851:5220":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:483:5079":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:41504:3325":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:1760:4635":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:4393:3485":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:2160:605":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"11:285:8442":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:1548:5033":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"20:946:1892":{"crate_id":20,"path":["proc_macro2","Ident"],"kind":"struct"},"1:1781:9124":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:46333:7973":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:10973:9328":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:14024:6034":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:11178:4633":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:12945:4598":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:1717:6876":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:11232:8145":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:9168:31817":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:12959:5740":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:8978:21405":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:7015:6358":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"24:4928:3274":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"24:902:35158":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"1:7644:9191":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"24:3134:3592":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"17:10962:5439":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"11:844:9114":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:1663:6852":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:3945:9244":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:21690:9398":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:10714:21553":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:11998:8689":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:7669:4479":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:43466:8560":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:7708:6252":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"24:4781:3240":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"17:14308:6128":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:4946:7192":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"24:2607:3572":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"2:47716:8039":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"5:6651:5009":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:39938:8514":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:21291:9383":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"24:2879:3581":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"17:13876:5999":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:9102:5367":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:7882:8618":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:41285:7899":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:6814:7589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:3504:3469":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:9038:1886":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:12846:5705":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:10750:5403":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"24:4233:3632":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"6:573:6725":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:10186:8257":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:1573:8450":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:46723:7995":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:39877:8511":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"24:2641:1940":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"23:345:2581":{"crate_id":23,"path":["quote","quote_spanned"],"kind":"macro"},"2:47727:8040":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:4706:7065":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:40037:8522":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"24:4789:3242":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"2:42948:8550":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:40079:9156":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:10860:28160":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:11187:28147":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:8219:2870":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:9790:34970":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"11:399:34905":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:4557:6272":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:7920:31086":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:2862:5222":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"5:7408:8467":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"24:4361:3641":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"6:4526:7021":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:5760:21326":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:12066:1551":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:5712:8304":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:10214:21467":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:2670:6222":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:2939:5230":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"24:1973:3323":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"24:4802:3245":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"2:9481:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:2576:5068":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"24:152:1886":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"16:6083:20437":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:1536:6760":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:10661:21551":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"15:394:20428":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:22212:7676":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"5:3669:5009":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:4820:7122":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:43697:8516":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:42952:8551":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:22197:31845":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:9823:21425":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:13113:5763":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"24:5055:2552":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"16:3461:6259":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"23:150:3917":{"crate_id":23,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"24:922:2954":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"24:2222:2583":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"16:2428:6212":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:4317:6904":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:4570:7043":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:11951:5528":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:11817:8564":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:5816:8314":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:4850:7133":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:43264:14525":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:7474:21339":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:1011:5009":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"24:5082:3278":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"2:42468:6428":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"24:4797:3244":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"6:5776:7282":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:6850:7606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:3391:3390":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:3441:21522":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:3051:4592":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:9288:4761":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"24:3866:3607":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"6:6037:7414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:12066:8246":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"18:80:25420":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"11:1012:9116":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"24:3151:3593":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"24:259:8912":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"2:43662:8571":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"21:989:236":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"1:8232:8570":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"24:5478:3306":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"21:2725:1880":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"5:4393:5033":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:3240:237":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"24:5452:3299":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"17:11201:8273":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:3224:9222":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"24:2624:3573":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"1:5753:9343":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:7279:200":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:9207:5370":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"11:332:5002":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:9492:3472":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"24:4828:3251":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"5:4164:5033":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:6980:3380":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"16:6792:8401":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:7567:7645":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:21258:9388":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:22:702":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:8249:9234":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:123:14988":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:2384:9178":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:40122:9169":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:2832:1918":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:22237:31841":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:6969:5053":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:47651:8036":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:7792:21343":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:47736:8041":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:43374:8554":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:39985:8517":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:11330:9333":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:4915:9303":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:5060:7247":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:11191:5449":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:41521:3895":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"24:1618:1733":{"crate_id":24,"path":["syn","parse_macro_input"],"kind":"macro"},"5:3735:9118":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:9650:5392":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:41496:3321":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:2574:6218":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:1442:3320":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:8814:188":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:7608:7655":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:22161:7672":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:22849:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:9607:21410":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:1076:8919":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:2598:8932":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:7555:4683":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"5:2461:7659":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:4234:3321":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:42484:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:30209:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:43819:8581":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"24:3355:3599":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"24:4180:3628":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"1:8840:8122":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:1561:3320":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:7308:3320":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:4641:6275":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:44030:8597":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:39118:202":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"18:481:8235":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:9390:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"18:660:25433":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:2305:20463":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"16:6189:8362":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:9121:4485":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"21:2592:3506":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"1:1840:4761":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:12063:765":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:41649:185":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:4274:3476":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"24:4525:1906":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"6:4766:7095":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:6017:7409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:2931:5229":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:6687:8387":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:595:6738":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"24:4916:3271":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"17:11162:5444":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:7618:7657":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"24:4912:3270":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"2:9959:5072":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:8884:8124":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:6598:7488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"11:365:5004":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:6901:6243":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:7391:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:9660:34986":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:9745:8480":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:12054:1418":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:42456:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:558:4473":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"24:2240:5216":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"5:3204:8452":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:10012:5392":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:10551:9220":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"16:2450:6213":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:10197:21479":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:7492:8420":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:45602:7945":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:4652:7049":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:4491:7002":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:6003:7398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"9:357:20326":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:2562:5081":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:22303:8500":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:5435:6292":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:22145:8495":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:7872:8057":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"24:4880:3263":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"1:9033:9024":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:4465:6989":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"24:2675:2486":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"2:2880:5224":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:3257:14569":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:6086:5033":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:11327:8287":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:21084:32819":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:11244:5481":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:41436:183":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:4753:9263":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:11490:5477":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:6320:9474":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:40049:31823":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:5743:8309":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:10988:28151":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:7571:4684":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"18:614:34993":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:9003:21406":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:20853:32978":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"7:79:20304":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:44193:8608":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:14126:6062":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"23:272:1970":{"crate_id":23,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"2:41988:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:7739:4751":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:12071:812":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:12123:14550":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:11639:5449":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:13826:5982":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:3888:6264":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:43833:8583":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:41624:3321":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:4687:7053":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:47613:8035":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:6485:6236":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:40202:3417":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:43416:8485":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:1514:200":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"24:5344:2488":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"6:4589:7044":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:4889:7153":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"3:234:212":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:45863:7960":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:10340:5399":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:7538:7638":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"24:4337:3639":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"24:2041:3327":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"2:42748:8549":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:149:4997":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"5:5325:5009":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:9852:21426":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:41245:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:41487:1941":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:46457:7990":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"18:707:8246":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:4940:7189":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:47505:8033":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:5994:208":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:3679:9236":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"24:2947:3585":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"24:4192:3629":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"2:12842:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:42428:7911":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:9198:28409":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"10:44:6589":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:6602:9350":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"15:288:20418":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"24:5069:2028":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"17:11991:5539":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"11:1838:8450":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"10:36:6588":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:9140:8133":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"11:1831:4683":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:8794:21399":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:47826:8047":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:21034:9191":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"24:3406:251":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"1:1579:8451":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:13922:6009":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:7150:3383":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:41374:8542":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:4831:818":{"crate_id":2,"path":["core","iter"],"kind":"module"},"24:2034:3325":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"11:760:4683":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:9328:2870":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:40263:3423":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:2810:6228":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:22324:8503":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"24:2862:3580":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"24:5368:3294":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"6:5964:7384":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"24:5457:3300":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"2:5610:3409":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:47841:8048":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:8016:9218":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:3846:9241":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:43176:8486":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:6045:7416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"24:94:9191":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"2:43384:2870":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:10165:21457":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:8505:9318":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:44417:4597":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:42027:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"24:2092:2517":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"6:7532:7637":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:10507:8261":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"24:1402:1965":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"6:6165:7453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:1590:1929":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:5988:7396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:6893:6350":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:2788:6227":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"20:357:3339":{"crate_id":20,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"16:5403:5365":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:7438:8470":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:12086:5555":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:2321:190":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:42209:3473":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:12267:5599":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:5845:7314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:9886:21427":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"20:700:236":{"crate_id":20,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"17:11306:5452":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:3447:8100":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:6569:6241":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:41410:7906":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:6721:21333":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:6616:5098":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"5:3720:3458":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:21906:9386":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"20:118:8232":{"crate_id":20,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"16:7544:8425":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:2744:6225":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:7444:3402":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:22915:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:8666:14542":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"24:4168:3627":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"17:12945:5738":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:11175:8122":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:49709:9400":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:47365:8031":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"24:3878:3608":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"18:96:25421":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:4124:3496":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:30281:31853":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:3936:5033":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:4774:6278":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:4138:30638":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:11493:9240":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:12513:5657":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:13274:5452":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"21:2534:4708":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"1:11372:8640":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:22783:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"18:564:5254":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:43398:8482":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"5:3594:3325":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"24:0:1731":{"crate_id":24,"path":["syn"],"kind":"module"},"24:1862:3317":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"1:7744:8614":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:43306:14533":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:12072:1607":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:5574:6234":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"21:140:4719":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"1:3115:9227":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"24:3982:125":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"16:5905:8323":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"24:4296:3636":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"2:2547:240":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:4422:6973":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:11630:8645":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"24:287:35240":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"2:11868:8484":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:2357:184":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"16:6467:8372":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:10787:8617":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:913:9109":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"24:1725:9033":{"crate_id":24,"path":["syn","path","printing","span","QSelfDelimiters"],"kind":"struct"},"16:4986:6285":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:5939:8329":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:13758:5967":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:5982:8332":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:4994:7214":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:3322:3494":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:11612:14545":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:5424:9325":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"24:3253:1875":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"20:708:3505":{"crate_id":20,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"5:1273:9116":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:2789:231":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:5996:7397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:32002:8507":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:40032:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"24:3117:214":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"18:766:25432":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:8713:21397":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:6041:21329":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"18:690:8243":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:4306:6896":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:6844:6344":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"21:2303:2284":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"2:20868:32978":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"6:4498:7005":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:13174:5777":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:7225:8465":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"24:127:1880":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"1:2214:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:2339:6203":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:6268:34923":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:8986:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"24:3849:3606":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"24:3321:3597":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"24:1894:3318":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"6:6729:7534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:7751:9141":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"5:5373:14521":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:11048:21576":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:7067:8417":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:8298:9277":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:40315:3426":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:7394:3404":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"20:771:3342":{"crate_id":20,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"17:10468:5400":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:7287:7621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:42066:9020":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"18:736:25431":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:9481:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:9277:5372":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:5838:7310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:4750:7087":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"24:4936:1915":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"24:54:1969":{"crate_id":24,"path":["syn","token"],"kind":"module"},"2:11104:14531":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:7360:34946":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:11173:21589":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"11:2180:6583":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:21441:9384":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"24:4419:3645":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"1:11251:4485":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:2837:4244":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"5:4074:3325":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:3020:3514":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"20:830:1892":{"crate_id":20,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"5:2962:7661":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:11833:8567":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:2784:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:21072:9391":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"17:14378:6153":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:13693:5957":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:10366:21473":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:2368:9174":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:3212:8450":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"14:7:8913":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"24:5469:3302":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"2:4:1040":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:12671:5410":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:3939:9245":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:7391:21338":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:13055:5754":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:45584:7944":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:41632:3325":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"24:5301:2257":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"6:4789:7109":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:31977:2049":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:1641:4545":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:45500:7941":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"24:1135:8199":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"1:8181:9190":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"9:0:3081":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:10259:9332":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:9173:9018":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:504:21395":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:7006:21336":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"24:3100:3484":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"24:5091:1892":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"17:13778:5975":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"11:749:4685":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:13897:6004":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"24:3049:3589":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"1:10782:8630":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:2722:6224":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:1503:9016":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"24:2998:3586":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"24:4064:3620":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"24:4824:3250":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"1:4646:7517":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:3167:3344":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"24:4530:1952":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"17:11815:5498":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"24:4052:3619":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"16:7884:21344":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:6549:9348":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:6805:7586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:44141:8605":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:20840:4257":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"21:2640:3504":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"17:13451:5821":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:9531:34974":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:9137:5368":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:7431:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:5760:9344":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:1585:8452":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:43681:8573":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:11137:14532":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"5:3800:4683":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:6226:21330":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"24:845:5214":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"16:6742:8388":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"24:3389:3601":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"24:4841:3254":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"17:13667:5951":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"21:958:4725":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"2:32089:4245":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:7651:21342":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"11:793:9109":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"24:4250:3633":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"2:46230:7971":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"9:426:20313":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:12055:1448":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"5:207:4602":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:7237:4685":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:4370:6947":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:7398:3403":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:4805:33230":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:45478:7940":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:46757:7996":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:12280:5603":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:46031:7965":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:11235:8282":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:31941:6585":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:14083:6052":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:14173:6075":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:22585:179":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"16:6600:21332":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:13188:5778":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:6425:8369":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:10109:31062":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"17:14401:6154":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:5390:9323":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:43602:8568":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"24:870:35161":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"6:4520:7018":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:12031:28138":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:9484:112":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"17:13487:5852":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:11719:21419":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:11845:5502":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:10547:8264":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"15:327:8991":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"24:4448:2573":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"1:8415:8112":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:4448:6983":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"11:2168:1880":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:12043:5550":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:3245:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:922:9016":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:13710:5958":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:4032:5009":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:11407:21415":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:7931:31818":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:5440:9326":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:40112:5057":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"24:4987:2444":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"1:2638:9217":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:13228:5783":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:12911:5735":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:6352:8364":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:6650:219":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:3764:6261":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:13010:5745":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:276:1940":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"18:515:5251":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"24:4023:3617":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"24:4904:3268":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"17:13101:5761":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:20900:33151":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:5046:7241":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:6859:7609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:45685:7948":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"24:5474:3304":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"1:4189:9274":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:1138:34446":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"24:5102:1970":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"6:1557:6775":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"24:886:35156":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"1:8244:9237":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"11:644:3325":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:4846:206":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:5808:7300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:7500:8921":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:9984:8539":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:12225:5584":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"23:38:2959":{"crate_id":23,"path":["quote","format_ident"],"kind":"macro"},"2:47113:8029":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"18:727:5270":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:3915:6265":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:8808:9330":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:40504:3431":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:14076:6051":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:482:6672":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:11295:8285":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:6346:8990":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:10498:8485":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:853:3325":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:5578:9329":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"20:788:236":{"crate_id":20,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"16:8072:6450":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"24:4221:3631":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"24:1329:3462":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"24:4849:3256":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"17:11971:5538":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:21685:9390":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"16:5727:8307":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"24:4908:3269":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"2:43804:8575":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:13567:5914":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:3238:1929":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"11:97:8441":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:2172:4621":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"5:7375:3377":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:8181:6254":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"23:0:1143":{"crate_id":23,"path":["quote"],"kind":"module"},"24:3912:3610":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"2:44405:8611":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:9498:3470":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"21:1819:4706":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"2:9740:14597":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:7520:7635":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"24:3287:1929":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"16:8205:21347":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:9500:3471":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:2548:6217":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:10591:4476":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"11:2186:34899":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:5930:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:7694:6251":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"24:4076:3621":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"2:10463:14538":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"24:4564:1897":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"1:5787:9021":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"5:5776:235":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:4194:5033":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"11:817:9112":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:256:34972":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:7530:1974":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"18:609:34991":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"21:2771:1892":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"5:7464:5040":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"24:827:3444":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"23:148:3918":{"crate_id":23,"path":["quote","__private","HasIterator"],"kind":"struct"},"1:4003:9249":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:2826:4241":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"24:4279:3635":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"2:44430:8612":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"20:930:1959":{"crate_id":20,"path":["proc_macro2","Spacing"],"kind":"enum"},"2:39158:201":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:9490:2497":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:3522:9189":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:41387:8619":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:6714:7529":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:41752:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:840:3321":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:9070:5365":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:8981:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:6437:9345":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"24:4876:3262":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"24:5515:2446":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"2:42693:8544":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:10832:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:43976:14557":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:5010:7219":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:11324:8637":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:2209:21485":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:629:8920":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"21:478:4996":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"16:3315:6258":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"24:1746:9034":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"17:10646:5465":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"21:2242:3342":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"5:2170:8456":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:6784:7572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:4951:7194":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:7271:3320":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:42493:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:8559:3897":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:1924:9151":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"24:5349:3292":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"2:4055:4591":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:12059:661":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:2915:3638":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:21467:9393":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:11405:8643":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"24:4865:3259":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"2:8557:3899":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:1595:6799":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:12765:5694":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"24:4869:3260":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"2:43672:8572":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"11:723:8448":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:43356:8552":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:44388:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:1764:628":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:4478:9278":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:5088:6288":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:43448:8559":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:10545:9222":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:4197:3460":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:1067:9116":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:7128:8129":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:2219:4628":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:7318:6380":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:1075:21437":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:10097:21432":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:8926:21403":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:4725:7073":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:9752:21412":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:10430:21510":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:14522:6183":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:12373:5611":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:7582:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"20:797:8234":{"crate_id":20,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"24:4837:3253":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"5:4002:4685":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"24:3015:3587":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"2:42709:8547":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:43502:8562":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:4634:9249":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"24:3999:3615":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"17:13575:5915":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:3069:2504":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:13890:6002":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:2534:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:14420:6159":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:22816:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:1569:6783":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:5891:7335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:4343:6924":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:6189:3411":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"18:0:3089":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:7137:30635":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"24:5200:3289":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"2:42511:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"24:674:35144":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"16:6818:8402":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"24:336:3458":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"2:22258:31832":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:11070:5111":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:13966:6020":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"19:0:1058":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:8115:8434":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"24:3304:3596":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"21:2601:8231":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"17:9921:21447":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:0:3087":{"crate_id":16,"path":["gimli"],"kind":"module"},"24:5510:3298":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"1:4807:5085":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:44010:8596":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"24:2556:3569":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"17:10316:5397":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:7890:3399":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:7090:8418":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"23:35:9191":{"crate_id":23,"path":["quote","ext","private","Sealed"],"kind":"trait"},"1:4709:9305":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:12437:5640":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"24:4832:3252":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"17:11023:5442":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"24:1486:1967":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"type_alias"},"5:1302:8919":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"24:3270:3595":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"24:3236:237":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"24:5017:3277":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"2:41830:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:5827:7302":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"24:4585:2234":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"1:10107:30643":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:6817:9381":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"24:2658:99":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"6:4382:6950":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:8854:8123":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:5866:8321":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:11098:21564":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:13838:5985":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"24:5156:3281":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"16:5634:8298":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:39999:14587":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:11573:8290":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"23:407:4056":{"crate_id":23,"path":["quote","__private","RepInterp"],"kind":"struct"},"24:3895:3609":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"2:43715:8515":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:30153:4548":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:10425:14530":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"24:5503:3296":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"21:2631:236":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"24:2896:3582":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"24:5359:3295":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"2:4449:3488":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:21460:9191":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:14536:6186":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:44153:7930":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:9945:5384":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:4391:6955":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:30187:4549":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"24:3832:3605":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"21:367:4710":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"16:5363:6291":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"24:2845:2221":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"16:7722:6242":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:10577:8562":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:10726:21554":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:43620:8569":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:9051:21382":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"24:910:35159":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"1:11637:8645":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:12065:762":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:1520:6752":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"24:5285:3290":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"1:4712:9278":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:10851:28149":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"24:1445:25458":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"17:9445:21407":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:10318:3325":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:14460:6170":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:7041:8412":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:1690:6865":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:40704:3384":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:39178:204":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:47747:8042":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:12554:5661":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:12067:1548":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:21904:9191":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:434:5319":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:9944:5068":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"11:0:3083":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:6243:1922":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:10036:5386":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:9488:34973":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:43185:8487":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:532:6703":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"24:5144:2101":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"1:11387:8688":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"14:202:2324":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:9496:196":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"24:4858:3258":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"17:10980:5392":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:9488:3463":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:10788:21556":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:6364:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:14221:6112":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"21:2705:3505":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"2:42701:8546":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"24:5466:3301":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"2:45833:7959":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"18:636:5266":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:3989:9247":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:46569:7992":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:10494:8259":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:5317:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:11761:5491":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:12123:5561":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"18:574:5248":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:9208:8137":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:6829:7594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:2782:229":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:2910:5209":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:4426:5035":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:11389:21414":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"20:0:1730":{"crate_id":20,"path":["proc_macro2"],"kind":"module"},"2:44121:8600":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:11910:5525":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:8547:8621":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"20:15:25459":{"crate_id":20,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"6:4919:7174":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"14:0:3085":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:42188:2497":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:14068:6048":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"18:507:5248":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"24:4461:3785":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"17:9912:21429":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:6944:5050":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:5872:7333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:7247:5020":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:3032:6255":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"24:2913:3583":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"24:4574:2110":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"24:3808:3603":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"20:740:2580":{"crate_id":20,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"24:5154:3285":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"16:5049:6287":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:4462:6269":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:8686:21396":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"9:486:20310":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:3049:20466":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"24:4551:1909":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"1:12056:1532":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:45633:7946":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"20:980:3320":{"crate_id":20,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"2:9438:3469":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:12196:5575":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:7054:8414":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:6145:7439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:22882:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:5746:7257":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:8286:8619":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:10777:8628":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:1471:2443":{"crate_id":2,"path":["core","mem"],"kind":"module"},"16:2644:6221":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"24:4325:3638":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"1:12064:766":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"24:3168:2628":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"6:7561:7644":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:12208:5576":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:10685:21517":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:5909:7347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"24:1771:1885":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"21:216:8973":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"2:39200:203":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:5963:21327":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"24:1620:1968":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"2:3285:3492":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:2537:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:7435:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:22185:8498":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:11307:5112":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:10605:14537":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:4438:6977":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:3264:9224":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:2829:3512":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:43652:8570":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:1603:6804":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:39973:14586":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:43782:14556":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:40142:3405":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"24:3970:3614":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"2:21219:4620":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:3073:3330":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"12:0:3084":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:3014:2221":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"24:4431:3646":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"16:6171:196":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:955:9114":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:11381:5460":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"24:104:4314":{"crate_id":24,"path":["syn","token","CustomToken"],"kind":"trait"},"17:2150:21498":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"14:31:8913":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:43194:14529":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:5017:6286":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:45740:7951":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:6513:8373":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:10520:8262":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:30757:185":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:8971:8128":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:2970:25870":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"24:4810:3247":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"2:21335:9191":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:40193:3408":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:11195:7930":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"24:4373:3642":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"24:5476:3305":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"2:39992:8518":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:8765:21398":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"24:5506:3297":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"17:11086:21587":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"8:0:3080":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:6545:6309":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:46199:7970":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"24:3929:3611":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"2:10619:14536":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:12853:5077":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"3:0:453":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:43520:8563":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"24:4854:3257":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"24:5086:2550":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"17:13040:5750":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:13259:5789":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:582:1974":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:43214:14528":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"0:963:1744":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"17:12934:5736":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:4578:9296":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:10575:8266":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:2012:21468":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:45532:7942":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:2035:3458":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:1257:8419":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:1513:6750":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"24:4390:3643":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"24:5146:3283":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"2:45722:7950":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:39470:26160":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:7771:2049":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:9896:21428":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"24:4545:3237":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"17:14110:6059":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:13851:5991":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:3515:4685":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:2872:3366":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"21:107:4716":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"2:6881:3415":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:11555:9241":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"24:4896:3266":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"24:5494:3309":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"1:6433:3386":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:12049:428":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:5648:21324":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:8870:9356":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"11:1822:3320":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"20:802:35020":{"crate_id":20,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"17:11124:21562":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:7555:7643":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:2366:4611":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:40212:3418":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:6574:7471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:5053:7244":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:897:4685":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:4458:6986":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:7782:8426":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"24:4093:3622":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"24:5472:3303":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"2:12722:14595":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:9861:5064":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"9:52:8995":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:42740:8548":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:4628:7047":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:40272:3433":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"}},"external_crates":{"23":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.33/"},"20":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.67/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.12/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.37/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}