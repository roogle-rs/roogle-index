{"root":"0:0:1855","crate_version":"1.0.196","includes_private":false,"index":{"2:12938:34663":{"id":"2:12938:34663","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12877:31442":{"id":"2:12877:31442","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44579:8781","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12974:29288":{"id":"2:12974:29288","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:37225"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12921:28141":{"id":"2:12921:28141","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:15765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12889:2748":{"id":"2:12889:2748","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42427:198","prim@char":"1:12106:458","self::pattern":"2:12541:3824"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5553:35361":{"id":"5:5553:35361","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2040","`String`":"5:7544:250"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2040","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12886:28143":{"id":"2:12886:28143","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:3824"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:15765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12915:28138":{"id":"2:12915:28138","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12106:458","str::splitn":"2:12912:28136","self::pattern":"2:12541:3824"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44447:8774","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:15765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12975:34671":{"id":"2:12975:34671","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4739:34671"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44624:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12936:34662":{"id":"2:12936:34662","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12867:2846":{"id":"2:12867:2846","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:12869:28128","str::split_at_mut":"2:12868:28125"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12950:26989":{"id":"2:12950:26989","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:3824"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12953:28144":{"id":"2:12953:28144","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:3824"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:15765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12850:34652":{"id":"2:12850:34652","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12848:34651"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12903:28134":{"id":"2:12903:28134","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12541:3824","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::split":"2:12897:28130"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44343:8696","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:15765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1855":{"id":"0:0:1855","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[101,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2021\n# use serde_derive::{Deserialize, Serialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.196\")]","#![allow(clippy::branches_sharing_code, clippy::cognitive_complexity,\nclippy::collapsible_match, clippy::derive_partial_eq_without_eq,\nclippy::enum_variant_names, clippy::manual_map,\nclippy::match_like_matches_macro, clippy::needless_pass_by_value,\nclippy::too_many_arguments, clippy::trivially_copy_pass_by_ref,\nclippy::used_underscore_binding, clippy::wildcard_in_or_patterns,\nclippy::unnested_or_patterns,)]","#![allow(clippy::cast_possible_truncation, clippy::checked_conversions,\nclippy::doc_markdown, clippy::enum_glob_use, clippy::indexing_slicing,\nclippy::items_after_statements, clippy::let_underscore_untyped,\nclippy::manual_assert, clippy::map_err_ignore, clippy::match_same_arms,\nclippy::match_wildcard_for_single_variants, clippy::module_name_repetitions,\nclippy::must_use_candidate, clippy::similar_names, clippy::single_match_else,\nclippy::struct_excessive_bools, clippy::too_many_lines,\nclippy::unseparated_literal_suffix, clippy::unused_self, clippy::use_self,\nclippy::wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:964:1844","0:965:1852"],"is_stripped":false}}},"2:12906:34657":{"id":"2:12906:34657","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12541:3824","str::split":"2:12897:28130","prim@char":"1:12106:458","`DoubleEndedIterator`":"2:7934:128","str::rsplit_terminator":"2:12909:34658"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44375:8770","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12947:2104":{"id":"2:12947:2104","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:3824"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12853:2958":{"id":"2:12853:2958","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12096:15767"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12969:27906":{"id":"2:12969:27906","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:965:1852":{"id":"0:965:1852","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[96,0],"end":[101,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"0:8:1969":{"id":"0:8:1969","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[216,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"5:5537:35357":{"id":"5:5537:35357","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2040","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2040","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5552:35360":{"id":"5:5552:35360","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12857:2085":{"id":"2:12857:2085","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42427:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12893:4371":{"id":"2:12893:4371","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42427:198","prim@char":"1:12106:458","self::pattern":"2:12541:3824"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:15765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12845:883":{"id":"2:12845:883","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12106:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12846:2196":{"id":"2:12846:2196","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5554:3489":{"id":"5:5554:3489","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12878:34656":{"id":"2:12878:34656","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44589:8782","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12847:34650":{"id":"2:12847:34650","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12956:34668":{"id":"2:12956:34668","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:3824"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:15765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12943:34666":{"id":"2:12943:34666","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12962:34670":{"id":"2:12962:34670","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:3824"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:15765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12875:32790":{"id":"2:12875:32790","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12876:32822"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44599:8783","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492-0:1019:1976":{"id":"0:492-0:1019:1976","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1019:1976","glob":false}}},"5:5555:2430":{"id":"5:5555:2430","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12970:27907"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1023:2073":{"id":"0:1023:2073","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"2:12866:34655":{"id":"2:12866:34655","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12112:1548","crate::ops::IndexMut":"2:3222:3429","str::slice_unchecked":"2:12865:34654"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12859:28099":{"id":"2:12859:28099","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42427:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12856:28102":{"id":"2:12856:28102","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12123:1653"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12967:27904":{"id":"2:12967:27904","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12933:34661":{"id":"2:12933:34661","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12541:3824","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::match_indices":"2:12930:34660"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44493:8777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:15765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12959:34669":{"id":"2:12959:34669","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:3824"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12909:34658":{"id":"2:12909:34658","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12541:3824","str::split":"2:12897:28130","prim@char":"1:12106:458","str::split_terminator":"2:12906:34657"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44393:8771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:15765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12880:2298":{"id":"2:12880:2298","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:3824"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12869:28128":{"id":"2:12869:28128","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12870:28129"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:964:1844":{"id":"0:964:1844","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[88,0],"end":[93,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"5:5556:2429":{"id":"5:5556:2429","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12971:27908"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12944:34667":{"id":"2:12944:34667","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:3824"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12566:15763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536":{"id":"5:5536","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5537:35357","5:5538:2226","5:5541:35358","5:5544:35359","5:5552:35360","5:5553:35361","5:5554:3489","5:5555:2430","5:5556:2429"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12970:27907":{"id":"2:12970:27907","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12918:28140":{"id":"2:12918:28140","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12927:34659":{"id":"2:12927:34659","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12541:3824","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::matches":"2:12924:2192"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44547:8780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:15765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12973:29287":{"id":"2:12973:29287","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:37225"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5541:35358":{"id":"5:5541:35358","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12942:34665":{"id":"2:12942:34665","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:2226":{"id":"5:5538:2226","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12940:34664":{"id":"2:12940:34664","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12865:34654":{"id":"2:12865:34654","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12112:1548","str::slice_mut_unchecked":"2:12866:34655","crate::ops::Index":"2:40008:2603"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12965:2065":{"id":"2:12965:2065","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12502:134","`FromStr`":"2:12501:3445"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42572:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12501:3445","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12501:3445","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12876:32822":{"id":"2:12876:32822","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12875:32790"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44608:8784","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86-0:994:2070":{"id":"0:86-0:994:2070","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[21,0],"end":[21,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::internals::case::RenameRule","name":"RenameRule","id":"0:994:2070","glob":false}}},"0:493-0:404:1977":{"id":"0:493-0:404:1977","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[14,0],"end":[14,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:404:1977","glob":false}}},"2:12870:28129":{"id":"2:12870:28129","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12869:28128"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12897:28130":{"id":"2:12897:28130","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12541:3824","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::split_whitespace":"2:12875:32790","str::rsplit":"2:12903:28134"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44325:8693","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12930:34660":{"id":"2:12930:34660","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12541:3824","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::rmatch_indices":"2:12933:34661"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44475:8776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12873:2433":{"id":"2:12873:2433","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12106:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44301:8765","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12977:10314":{"id":"2:12977:10314","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4740:10314"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44633:8721","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12848:34651":{"id":"2:12848:34651","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12968:29283":{"id":"2:12968:29283","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40377:28081","Self::is_ascii":"2:12967:27904"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40377:28081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12978:34672":{"id":"2:12978:34672","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4737:34672"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44642:8726","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12972:29286":{"id":"2:12972:29286","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:37225"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12872:2439":{"id":"2:12872:2439","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12106:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44295:8764","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12874:8683":{"id":"2:12874:8683","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44311:2968","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5544:35359":{"id":"5:5544:35359","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12863:28101":{"id":"2:12863:28101","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12868:28125":{"id":"2:12868:28125","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12867:2846","str::split_at_mut_checked":"2:12870:28129"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12883:28142":{"id":"2:12883:28142","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:3824"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12912:28136":{"id":"2:12912:28136","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:3824","str::rsplitn":"2:12915:28138"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44429:8773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:382":{"id":"0:63:382","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1881,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:86-0:994:2070"],"is_stripped":false}}},"2:12861:28100":{"id":"2:12861:28100","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12924:2192":{"id":"2:12924:2192","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12541:3824","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::rmatches":"2:12927:34659"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44529:8779","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12855:340":{"id":"2:12855:340","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12856:28102","`u8`":"1:12123:1653"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12900:28132":{"id":"2:12900:28132","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:3824"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12357:8695","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:15764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12879:32840":{"id":"2:12879:32840","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44617:8785","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12854:34653":{"id":"2:12854:34653","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12971:27908":{"id":"2:12971:27908","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12844":{"id":"2:12844","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12845:883","2:12846:2196","2:12847:34650","2:12848:34651","2:12850:34652","2:12853:2958","2:12854:34653","2:12855:340","2:12856:28102","2:12857:2085","2:12859:28099","2:12861:28100","2:12863:28101","2:12865:34654","2:12866:34655","2:12867:2846","2:12868:28125","2:12869:28128","2:12870:28129","2:12872:2439","2:12873:2433","2:12874:8683","2:12875:32790","2:12876:32822","2:12877:31442","2:12878:34656","2:12879:32840","2:12880:2298","2:12883:28142","2:12886:28143","2:12889:2748","2:12893:4371","2:12897:28130","2:12900:28132","2:12903:28134","2:12906:34657","2:12909:34658","2:12912:28136","2:12915:28138","2:12918:28140","2:12921:28141","2:12924:2192","2:12927:34659","2:12930:34660","2:12933:34661","2:12936:34662","2:12938:34663","2:12940:34664","2:12942:34665","2:12943:34666","2:12944:34667","2:12947:2104","2:12950:26989","2:12953:28144","2:12956:34668","2:12959:34669","2:12962:34670","2:12965:2065","2:12967:27904","2:12968:29283","2:12969:27906","2:12970:27907","2:12971:27908","2:12972:29286","2:12973:29287","2:12974:29288","2:12975:34671","2:12977:10314","2:12978:34672"],"negative":false,"synthetic":false,"blanket_impl":null}}}},"paths":{"2:41078:3507":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:2721:142":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:588:6939":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:1632:7034":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:8270:3531":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:33721:5329":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:44429:8773":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:48718:8255":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:46763:8169":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:14021:5810":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:16049:6373":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"24:1652:3557":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"2:40778:8721":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"24:4856:3341":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"24:89:1986":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"17:12548:22906":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"16:7269:35940":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:7569:9851":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:12561:15765":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:1585:4786":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:4351:7092":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"15:306:21731":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:4841:7311":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:9791:3564":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"18:531:8447":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:4887:10481":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:44589:8782":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:482:5186":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"24:4238:3728":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"16:4774:6484":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"24:3895:3705":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"24:5256:3390":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"16:5121:6495":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:10569:35963":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:3222:3429":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"11:2562:6792":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:11126:22745":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:6071:7607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:42485:3420":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"11:2469:4786":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:2031:22781":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:39922:15789":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:12077:10323":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:4434:7153":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:42543:3996":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"20:787:26935":{"crate_id":20,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"17:13787:5779":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:8615:3420":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:5574:6440":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:3607:3424":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:22733:7886":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:10962:22754":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"24:2976:3683":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"1:12112:1548":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:45056:8814":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"9:450:21622":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"24:620:3420":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"24:4419:3741":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"1:12118:807":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:40204:7975":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:3764:6467":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"20:961:2679":{"crate_id":20,"path":["proc_macro2","Literal"],"kind":"struct"},"1:7599:2073":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:2268:10387":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"20:710:259":{"crate_id":20,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"6:6120:7625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:14208:5855":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:7862:8637":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:4225:10494":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"24:3214:2727":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"16:6456:8581":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:8294:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:48619:8247":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:6260:10091":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:22328:32724":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"16:4417:6474":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"24:5426:3395":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"2:3399:15791":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"24:563:8405":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"7:78:21615":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"18:609:35983":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:4968:7373":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:44137:15751":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:6243:2022":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:22682:7882":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"24:4197:3725":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"21:2788:1992":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"17:14757:6015":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:3798:10462":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:46593:8157":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:48497:8244":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"11:2443:4788":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:32837:8718":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"21:140:4822":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"6:5068:7424":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:6929:6559":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:38764:5337":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:119:16226":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:15345:6174":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:4002:10466":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:7633:7853":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:4557:10501":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:5104:7446":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"18:548:150":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:849:3424":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:16134:6395":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"6:4914:7341":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:9790:22716":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:1691:7070":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:39961:4695":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:40988:10373":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"20:798:259":{"crate_id":20,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"6:5052:7419":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:790:5116":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:31222:32818":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:11412:22774":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:10896:5489":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:4584:7226":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:6499:6459":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"24:2840:2005":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"6:527:6906":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:11269:5491":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:13961:5802":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:15087:6110":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:3576:10427":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:3581:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:43451:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:4440:7155":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"11:2423:3419":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:7905:3503":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"19:0:1142":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:2696:6429":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:2032:205":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:12322:8778":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:8260:3517":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:15244:6148":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:45241:147":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"5:4366:271":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:8239:2757":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:26433:273":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:11109:27005":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:4195:31399":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"24:5534:3405":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"17:15725:6291":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"21:2396:2679":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"24:3452:274":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"2:45262:214":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:34501:4281":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"24:4597:2009":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"16:5995:8503":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:8632:8835":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"21:244:36023":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"2:12501:3445":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:14822:6056":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:12474:5499":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:8455:3991":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:5117:31693":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:4401:7129":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"20:728:2059":{"crate_id":20,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"1:7759:4576":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:4388:7119":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:13882:5517":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:4116:10476":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:7971:4854":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"6:1674:7063":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:10242:5479":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"24:0:1833":{"crate_id":24,"path":["syn"],"kind":"module"},"17:12310:5558":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:5152:7464":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:1496:6947":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:3032:6461":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:1501:6949":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"24:4448:3743":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"24:5558:3411":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"17:13285:5665":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"11:875:10330":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:13922:5797":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"24:2704:105":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"2:23800:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:10618:35975":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:307:1599":{"crate_id":1,"path":["std","thread"],"kind":"module"},"1:3307:10447":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:21677:7879":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:10265:112":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:12536:22907":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"6:7622:7849":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"21:404:36089":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"1:637:10316":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:40377:28081":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"5:7038:5161":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:4776:7277":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:11173:159":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:8076:10092":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:9104:8337":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"5:7477:8678":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:6204:10041":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:47499:8202":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"24:5024:63":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"5:7316:5124":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"24:2806:3675":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"1:8400:7715":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:7462:6604":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:3600:6466":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:5760:22638":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:11576:8474":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:3903:10463":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"24:4544:2193":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"6:6741:7733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:6927:7814":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"24:3129:3690":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"24:561:135":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"24:5151:1992":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"24:5115:2651":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"17:12166:22873":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:533:6909":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:3388:261":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"24:1102:2069":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"6:4947:7358":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:8216:8305":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"21:2346:1992":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"1:859:3419":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:3389:10435":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:580:6934":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:2504:208":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"24:5530:3403":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"24:2275:10408":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"24:4407:3740":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"24:3078:3687":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"24:3027:2678":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"17:13182:5649":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:14455:5896":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:12566:15763":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"23:235:4278":{"crate_id":23,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"2:11113:15758":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:21953:10408":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"6:6012:7574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:6014:16146":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:14778:6025":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:8071:31710":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:909:10326":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:15049:6096":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"24:4566:3325":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"6:4676:7251":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:9256:27833":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:9169:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"24:3180:3691":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"24:3435:3700":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"2:10357:5172":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:4032:10468":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:42425:201":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:12255:8491":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"24:98:3876":{"crate_id":24,"path":["syn","token","private","CustomToken"],"kind":"trait"},"2:3405:15790":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"18:574:5355":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:8990:10574":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:5023:7405":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:15062:6102":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"24:1442:2064":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"6:6059:7600":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:42938:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:2434:10394":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:3184:3420":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:44885:8798":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:31046:3563":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"24:5368:2358":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"2:44343:8696":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:13754:5771":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"24:2653:3671":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"17:15125:6118":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:42493:3424":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:5363:6497":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:5846:10087":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:4889:6488":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:32929:4347":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:42899:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:9962:141":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:12113:1634":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"5:6606:3419":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:2420:10391":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"24:2823:3676":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"24:4004:3712":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"1:6606:9864":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:44220:8701":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:9139:8340":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:48646:8249":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:1708:5137":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"24:5142:3379":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"2:3187:138":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:4830:7303":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"9:486:21621":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:8546:8323":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:7436:6603":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:4303:3597":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"11:2542:6788":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"24:4562:3324":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"24:3112:3689":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"1:1040:8629":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"24:912:36301":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"2:41058:3506":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:4710:7254":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:11945:22832":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:5389:15742":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:12103:22898":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:6332:6439":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"24:1166:8406":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"17:12273:5592":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"24:4866:3358":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"24:1484:26951":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"5:1789:4786":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"11:856:10329":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:41208:3511":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"24:4904:3365":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"16:4862:6487":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:5897:7512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:11226:22792":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:8181:6460":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:41031:10386":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:40847:8725":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"24:559:233":{"crate_id":24,"path":["syn","error","Result"],"kind":"type_alias"},"5:7507:8681":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:2548:6423":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"15:288:21730":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:4847:7314":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"24:3163:235":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"2:21294:32506":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:9996:2596":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:4745:7258":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:15612:6265":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:10051:5473":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:10925:8331":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"16:7568:6456":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:45048:8812":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"20:812:35992":{"crate_id":20,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"14:187:21718":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:12117:702":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:3065:5381":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"20:0:1832":{"crate_id":20,"path":["proc_macro2"],"kind":"module"},"24:5094:3377":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"17:12445:22908":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:22741:7887":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:10950:22760":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:5885:7508":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:1536:10334":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"24:5359:2355":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"2:3801:3419":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:1424:3420":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:46514:8154":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"24:4594:3338":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"2:45060:8815":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"11:1891:4788":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:8396:10528":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"24:928:36303":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"17:13935:5798":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"5:4411:5137":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:7513:8633":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:12129:1708":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"24:2908:3679":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"2:2718:160":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"11:351:35880":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:46362:8148":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:12746:8499":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:13309:5669":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:3315:6464":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:21340:32512":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:15356:6178":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:10701:8839":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:48794:8259":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:10423:5174":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"21:107:4819":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"16:6583:8593":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:2144:4566":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:4806:10482":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"9:177:10072":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:8239:10407":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:42362:8830":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:11117:8140":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"6:5910:7513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:9943:22700":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"18:636:5373":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:40901:8729":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:22370:10694":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:6212:5184":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:7219:2806":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:7660:6609":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"18:507:5355":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:7554:6455":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:2666:5175":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:32847:3612":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:5698:5200":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:40107:221":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:6228:7650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:12828:5592":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:4870:7323":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"24:509:3430":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"5:6868:4793":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:6100:7620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"24:1173:8409":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"1:939:10329":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:10172:5477":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"24:1479:26950":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"16:5088:6494":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"24:3912:3706":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"24:4395:3739":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"1:8866:10551":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:13948:5800":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"18:582:4360":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:3460:5137":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:13395:5685":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:3191:8661":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:40867:8721":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:47623:8204":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:13463:5704":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:6279:6508":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:4814:7294":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:11215:8467":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"24:4967:3372":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"1:11550:10462":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:45297:9603":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:2788:6433":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:1072:9849":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:14001:5807":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:7616:7848":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"11:832:10326":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:44068:33166":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"21:2609:3607":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"0:965:1853":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"16:6041:22641":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:2971:2523":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:2959:3593":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:7802:10322":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:15294:6163":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:3232:6406":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:15671:6281":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:15224:6141":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:11991:5546":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:5866:8531":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:363:4589":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:11743:22865":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:10925:22741":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"24:4308:3733":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"2:46430:8151":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:7206:31394":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:14698:5963":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"7:0:1698":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:4766:10527":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:5634:8508":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:15013:6091":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:4566:7217":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:7096:5208":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:13707:5765":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:4334:3598":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"20:113:8442":{"crate_id":20,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"5:4252:3420":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:14896:6067":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:6171:213":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"20:884:259":{"crate_id":20,"path":["proc_macro2","TokenStream"],"kind":"struct"},"17:13254:5661":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:4610:7237":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:30759:10464":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:1824:10340":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"21:2727:2060":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"6:4878:7327":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:12110:339":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:40859:8726":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:15184:6132":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:7377:3419":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"24:2687:2040":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"16:3049:21778":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"24:4983:3375":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"6:4666:7250":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:48637:8248":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:9651:22713":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"11:2352:10333":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:10633:10408":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:42404:8117":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"20:744:1992":{"crate_id":20,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"1:10682:10529":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:45132:15954":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:4824:7300":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:2275:10388":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"11:2151:10333":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:44157:15750":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:8307:10456":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:13676:5758":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:7441:3480":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:40882:15808":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:21323:32501":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:14324:5874":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:4884:7328":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:2035:204":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"24:4214:3726":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"17:16109:6389":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"24:4477:3745":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"2:41100:3508":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:11631:15754":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:10137:5476":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:10608:22724":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:1914:7876":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:1900:4738":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:10711:8827":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:15374:6181":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:9142:15764":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:5853:3522":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:12486:5569":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:7892:143":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:44239:8702":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:2406:6417":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"24:4069:3716":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"17:10355:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"6:574:6931":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:48703:8254":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:3159:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:11675:5574":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"21:648:3609":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"2:9994:3566":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:4095:5137":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:10706:8841":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:10417:5215":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"6:4932:7352":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:4647:7249":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"24:2087:3426":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"24:4325:3734":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"17:13365:5681":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:41021:5165":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"24:3941:3708":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"2:7325:3516":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"24:4918:3367":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"17:9860:22718":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:40065:219":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:7948:137":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:43162:3566":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"21:2287:1980":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"24:4900:3364":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"24:2286:5323":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"24:4610:1997":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"17:15027:6092":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:3183:2543":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"21:2320:2386":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"2:21547:10408":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:13336:114":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"24:5210:3386":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"1:8563:10540":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"24:260:9841":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"2:23060:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:7714:4590":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"11:299:8652":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"24:4963:3371":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"2:48435:8243":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:46985:8176":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:23242:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:15301:6164":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:3509:10405":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:40784:8722":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:14156:5849":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"11:1887:3419":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"22:0:3309":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"17:15117:6116":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:6934:7817":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:41256:3529":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"11:1728:153":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:867:8658":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:22824:8711":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:13202:5650":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:5419:5473":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:1682:7064":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:8378:8310":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:10957:15760":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"11:123:5104":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:12306:8775":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"18:113:26915":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:7628:4786":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:8920:3420":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:8355:3500":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:13809:5780":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"21:1066:2059":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"5:6969:270":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:40041:217":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:4462:6475":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:5859:7493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:6136:7629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"11:1910:8661":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:4529:7196":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:22277:10692":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"5:1286:10333":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:40823:8102":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"18:766:26925":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"24:2755:3673":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"2:22650:7881":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:45052:8813":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"24:5204:2200":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"17:11307:22777":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:40183:15857":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:7128:8337":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:10746:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:6496:10566":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:6268:35932":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"24:5070:2618":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"1:3557:31667":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:44447:8774":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:12128:858":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:8361:3501":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:9179:159":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:16016:6366":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:11334:6852":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"5:7558:8685":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:10191:10553":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"24:2789:3674":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"11:396:5108":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:14122:5846":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:12220:5556":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:4578:7223":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:14904:6068":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:8928:10577":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:4428:7152":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:22193:10690":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:9730:22714":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:9918:22719":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:6898:7800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:12246:8767":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"14:165:21711":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:42510:3995":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:4497:6476":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:5566:10549":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:9624:22694":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:11549:8472":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"24:5006:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"17:15527:6242":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:7102:22649":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:7925:8265":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:10919:15752":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:40927:8103":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:12115:22899":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:10282:27845":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"5:1455:3419":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:1862:10350":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:8898:8330":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:654:16583":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:7520:8684":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"24:677:36153":{"crate_id":24,"path":["syn","expr","precedence","Precedence"],"kind":"enum"},"24:95:10408":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"17:9968:22720":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:6943:7820":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:6053:227":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:2353:4724":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:43915:8761":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:22238:10691":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:2728:10439":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:15493:6230":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:5017:6492":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"24:5515:3400":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"17:12290:8493":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"18:736:26924":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:3193:140":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:4705:7730":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:10880:8695":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:11469:22823":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"24:904:36304":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"17:12387:22903":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:45040:8810":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"5:1486:8659":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:11014:22747":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:21555:10607":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:3655:5386":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:10337:5482":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:48756:8257":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:1710:7077":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:11414:8354":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:1826:10341":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:44325:8693":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:2228:22798":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:30990:4650":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:2675:10408":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:10784:26998":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"11:844:10328":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:7450:31429":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"24:4354:3736":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"17:3584:22850":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"24:1994:3419":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"2:38599:5335":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:48771:8258":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"24:3248:3693":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"16:7884:22656":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"20:680:3443":{"crate_id":20,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"6:4789:7281":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:11632:8478":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"20:718:3606":{"crate_id":20,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"5:6845:4792":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:10559:22723":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:1546:6971":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:4629:3590":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:7611:3483":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:2428:6418":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:21995:32513":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:9198:8341":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:4998:7394":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"5:2062:10335":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:12119:804":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"20:116:36015":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"1:7918:8827":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:15253:6149":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:357:4588":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"24:5047:2546":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"6:4698:7253":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:6600:22644":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:11476:8663":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:3046:15854":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"20:831:1980":{"crate_id":20,"path":["proc_macro2","imp","Group"],"kind":"enum"},"4:0:3178":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"18:491:8446":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:44194:3506":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:12614:22729":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:3888:6470":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"23:78:2061":{"crate_id":23,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"2:48833:8260":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"24:1940:3417":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"17:14221:5856":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"24:5001:3351":{"crate_id":24,"path":["syn","expr","FieldValue"],"kind":"struct"},"11:2403:3424":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:11679:31699":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"24:5431:3394":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"1:9985:8750":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"16:6226:22642":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:47417:8201":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:6363:227":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:40008:2603":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"24:3837:3701":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"24:4226:3727":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"7:31:21608":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:5941:7534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:7306:4788":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:14041:5811":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"24:4934:2260":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"17:11536:8471":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:10892:10549":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"24:253:9840":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"1:8961:8333":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"23:272:2069":{"crate_id":23,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"2:43169:3574":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:22795:32814":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:15384:6186":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:4060:10471":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"24:4908:2334":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"6:6248:7664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:7371:7832":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:4902:7337":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:1514:6955":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:2438:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:12555:8456":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"21:478:5100":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"17:12380:5563":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:43685:154":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:4377:3560":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:2881:6437":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:40837:8724":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"24:1659:2067":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"2:9651:10084":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:41087:3517":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:11485:22799":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:22597:8705":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:10775:27013":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:2446:10400":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:22107:10606":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:7908:4976":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:3014:3465":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:13347:5673":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:11590:8475":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:588:10313":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:3996:10467":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:3491:8308":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:5705:8824":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"24:4538:3322":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"24:2221:10408":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"17:14385:5888":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:13909:5795":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:10482:10442":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:14346:5885":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:9987:118":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:7613:22652":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"5:5878:4788":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:11672:4735":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"0:964:1846":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"24:566:5314":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"16:2810:6434":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:1968:10368":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:5155:5143":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:4764:7270":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:12230:8483":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:11666:8482":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:501:6886":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:48581:8246":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:5030:3987":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:6467:8582":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"24:2874:3678":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"2:32959:2018":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:495:6884":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"21:1023:3606":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"1:12126:1652":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:21983:7880":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"24:4883:3361":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"17:11113:22746":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:9217:8838":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"24:4991:2015":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"2:23610:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:8115:8644":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:13516:5718":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:45254:234":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:1558:6980":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:6079:7608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"24:1967:3418":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"21:183:4436":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"11:2548:6789":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:14087:5835":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:6376:22643":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:24031:243":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"24:4878:3343":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"2:44933:8807":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:34328:5317":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"24:3418:3699":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"16:6721:22645":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:46408:8150":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:13448:5698":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"18:590:5362":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:43676:8758":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"24:4576:2051":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"11:328:8655":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:557:4573":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:3251:22831":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:14509:5910":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"18:538:5359":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:6753:8599":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"24:4922:3346":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"6:4449:7160":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:7365:7830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:7523:8634":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:40908:15809":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:7855:3505":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:42349:8753":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"24:4110:3719":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"1:10522:4576":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"16:2321:6407":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:47160:8181":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:32846:244":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:12072:10094":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"18:681:8450":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:6711:7711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:13663:5756":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:21958:10610":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"24:952:3380":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"24:3299:1975":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"17:10785:35968":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:44899:15779":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:3346:10443":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:43423:32811":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:12335:5559":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"18:80:26913":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:692:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:9029:8336":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:7067:8627":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:0:314":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:34132:5332":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:5194:211":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"24:2772:123":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"17:10881:22739":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"14:7:9843":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:5067:864":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:42615:3420":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:903:4786":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"24:1369:3562":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"17:12953:5599":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"24:288:36138":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"17:11345:5504":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:1537:6965":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:12131:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:5891:5194":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:45360:8823":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:41653:3492":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:6531:5113":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:10293:2968":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"5:1270:8629":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:15507:6236":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:11085:8774":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:47183:8182":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"24:5417:3396":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"2:42572:233":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:6798:7740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:4977:7379":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:10090:10350":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"17:12596:22728":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:4691:10471":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:3225:8660":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:7041:8622":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:6128:7627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:4986:6491":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:3818:4786":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:4972:10525":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:4108:10474":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:7385:3419":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:1578:3419":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:15329:6171":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"24:5077:3378":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"2:46670:8161":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:11958:5544":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:32873:251":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:14194:5854":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:7544:250":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:5117:7452":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:10813:35965":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:2509:132":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"21:2722:3606":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"16:6844:6550":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"24:5356:2643":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"6:7692:7866":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:4377:10498":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"23:11:3450":{"crate_id":23,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"1:5447:10545":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:15037:6093":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:3141:4694":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:4703:7728":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"5:2048:3558":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:12898:22731":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:1832:1199":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:10726:35956":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:15003:6090":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:3830:6469":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:4866:224":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"11:434:35887":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:2256:8672":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:5033:7411":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:7987:3502":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"18:707:8456":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:4635:10518":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:14878:6062":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:42385:8116":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:11395:22786":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:10974:5491":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:2110:4696":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:43919:8762":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"24:5539:2550":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"2:42196:8109":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"16:5661:8512":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:4585:6479":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:9118:27011":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"24:4180:3724":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"16:7582:6605":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:21284:4360":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"24:5555:3410":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"18:614:35977":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:7388:7843":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:6889:7797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:48741:8256":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:12180:22900":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:38709:5334":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:2966:254":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"9:393:21623":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:7828:6620":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:12345:5562":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:5812:10564":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:5798:6501":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:4212:5137":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:10657:5499":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:2472:6420":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:42979:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"24:1771:10260":{"crate_id":24,"path":["syn","path","printing","span","QSelfDelimiters"],"kind":"struct"},"24:920:36305":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"17:16087:6387":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"10:44:6795":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"5:6688:5113":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"9:357:21637":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:11168:22769":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:8001:3558":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:830:5119":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:22301:10408":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:12121:806":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"24:128:1980":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"1:11083:8329":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:6569:6447":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:13633:5747":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:2676:15814":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:4808:10484":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:40894:8728":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:2712:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:10422:22721":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"18:599:5318":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:5306:210":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"0:0:1855":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"17:12140:22875":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:4810:10485":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:3265:10444":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:43668:8757":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"24:2925:3680":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"16:4921:6489":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:15689:6287":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:11155:8464":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:11429:8851":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:11727:22845":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:6415:8578":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:11030:15757":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"24:4874:3360":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"2:4518:3585":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:40946:8733":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:47082:8179":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:47031:8178":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:21549:10604":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"24:610:3419":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"1:1602:8662":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:2722:6430":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:1664:7057":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:15279:6159":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:4:1125":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:15235:6145":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"11:1107:21701":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:1115:35443":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"24:5397:2375":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"6:4628:7248":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:7324:3515":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"24:3316:3694":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"24:4938:3368":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"21:2444:2060":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"24:3350:3695":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"17:11617:8477":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"24:2942:3681":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"2:1923:4737":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"24:5387:2660":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"17:13235:5656":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:3082:3724":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:41405:3531":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"24:4520:2325":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"1:5481:10547":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:33349:5327":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:5963:22639":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:2933:21776":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:11099:15759":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:2457:111":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:48295:8241":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"21:2653:3439":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"20:840:1992":{"crate_id":20,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"2:22105:10408":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"11:883:10331":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:4449:3577":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:41240:3528":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"24:5542:3407":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"1:3229:27567":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:4602:3589":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:2266:136":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:5928:7525":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:15747:6297":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:46384:8149":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:7896:163":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"11:1142:21702":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:5130:7458":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:4092:3424":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"21:216:10039":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"6:7343:7829":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"11:837:10327":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:6485:4788":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:7645:7855":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"24:2268:2682":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"1:2492:3193":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:2728:264":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"11:1582:21704":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"5:7356:8677":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:41629:3486":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:7859:3504":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:15710:6290":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:43405:3563":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"11:0:3182":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:11527:5221":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:4050:5113":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:401:22711":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"24:3992:3711":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"2:3029:5339":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:21666:10408":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:533:4571":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:21494:10408":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:14057:5816":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:31030:4652":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:6169:7638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:13219:15817":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"21:433:5099":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"17:13724:5768":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:0:3186":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:16170:5666":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"24:5099:2549":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"2:46652:8160":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:3558:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:5015:7400":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:42623:3424":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"24:1817:1985":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"5:4020:4788":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:11426:22821":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:12091:22897":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:2847:10371":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"24:2670:3672":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"1:3566:10406":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:12109:1162":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:7787:10321":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:3226:31971":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:22330:4723":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"17:12396:5564":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:3172:3595":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:44633:8721":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"21:2521:3607":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"2:43435:6634":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:3915:6471":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:595:2073":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:3196:35584":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:16160:6399":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"24:4250:3729":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"20:738:1980":{"crate_id":20,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"24:5241:2377":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"1:11136:8341":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:10973:5216":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:45347:4699":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:23151:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:6492:3486":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"9:507:6855":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:22544:8704":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"5:1387:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:8362:10491":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"24:5162:2069":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"24:5126:3053":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"17:14497:5903":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"21:2618:8441":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"24:1375:36150":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"2:39343:5338":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:914:10081":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:44475:8776":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"24:5129:2127":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"17:11767:22867":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"5:2703:7873":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"24:1908:3416":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"2:38654:5336":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:2380:6416":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:31058:32846":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:149:5101":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:42326:32796":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:6944:35904":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:9096:1986":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:9464:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:44642:8726":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:13684:5760":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:32823:33864":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"14:221:6740":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"24:4852:3357":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"2:47687:8206":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"18:727:5377":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:8399:33856":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:45120:8819":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:45095:129":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:8290:8781":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"5:3753:10335":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"24:4081:3717":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"24:1525:2066":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"type_alias"},"2:41138:3520":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"18:671:26927":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:43900:8133":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"11:2304:8629":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:14181:5852":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"23:504:4274":{"crate_id":23,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"2:42821:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:12572:22911":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:42704:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"21:2708:2059":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"2:3315:218":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"13:110:35893":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"20:910:1980":{"crate_id":20,"path":["proc_macro2","Group"],"kind":"struct"},"1:12120:805":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:12116:700":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"18:660:26926":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:10102:5475":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:1094:22750":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:13765:5772":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"11:1160:9849":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:12029:5548":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"21:961:4828":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"17:15868:6315":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"14:160:9843":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:41188:3534":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"11:1917:8662":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:1576:6990":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:4297:10497":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"24:879:5321":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"2:22845:8714":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:44229:15756":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:11701:22864":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:23515:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:4686:7252":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:2450:6419":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:7090:8628":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:15337:6173":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:4806:15802":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:14950:6077":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:40151:3470":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:2618:6426":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:6560:5103":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:6576:3512":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:44128:8698":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:12356:8497":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:3667:4788":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:4745:6483":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:6696:6538":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:5939:8539":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:8422:8311":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:918:10082":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:3738:3558":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"5:5808:258":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:10716:22725":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:6263:7675":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"18:644:5355":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:5111:7449":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"24:5120:2654":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"2:44547:8780":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:4217:10493":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:6037:5200":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:21321:32515":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:10246:10413":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:2435:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"24:4951:3370":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"16:8154:22657":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:12052:5549":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:11890:5224":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:1718:7081":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:2688:9862":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:2526:6422":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"24:5510:3399":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"16:5588:6443":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:1795:642":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:5982:7551":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:43395:8121":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:48677:8252":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:10724:8847":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"5:212:4704":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:5123:7455":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:10775:22726":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:1809:666":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:6531:8591":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"18:96:26914":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"9:52:10061":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"21:2551:4811":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"2:4195:108":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:4516:7191":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:16076:6382":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:40025:220":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:4701:7726":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:12560:22940":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"5:1516:10082":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:6718:7715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:10803:22727":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"11:1025:10332":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:10035:5472":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:880:8659":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"20:940:2058":{"crate_id":20,"path":["proc_macro2","Spacing"],"kind":"enum"},"2:3418:33174":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"11:2369:21706":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:42860:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:6963:5207":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:15903:6345":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:11497:5507":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"23:38:3057":{"crate_id":23,"path":["quote","format_ident"],"kind":"macro"},"2:41156:8738":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:9084:31709":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:9990:118":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"24:5561:67":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"6:6837:7757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:6391:3535":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:3797:6468":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:5816:8524":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:3470:3596":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:22706:8709":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:45305:8143":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"20:990:3419":{"crate_id":20,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"1:5374:127":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"24:4628:2253":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"17:12009:5499":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"23:344:1238":{"crate_id":23,"path":["quote","quote"],"kind":"macro"},"6:0:888":{"crate_id":6,"path":["libc"],"kind":"module"},"24:3333:2029":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"11:102:8651":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:634:9850":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:7650:5210":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:9054:4570":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"11:1676:5110":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:2154:8665":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:7694:6457":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:3217:8662":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:3393:144":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"24:4930:3347":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"24:1569:3004":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"24:1657:1835":{"crate_id":24,"path":["syn","parse_macro_input"],"kind":"macro"},"1:4769:10500":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"21:2259:3442":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"1:6136:5195":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:44249:15755":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:13896:5794":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:4375:7109":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:44821:8796":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:34674:5316":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"24:4891:3363":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"2:6587:4812":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:43057:10086":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:569:6929":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"3:234:233":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:2977:5191":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:44393:8771":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:6792:8611":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:5148:31693":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:507:6889":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:7677:217":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"23:150:4019":{"crate_id":23,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"17:11449:5350":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"15:0:3185":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:12125:1651":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:11444:9613":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:15980:6359":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:12111:1515":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:5921:7521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:42555:4712":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:8942:8332":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:1446:153":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:32848:252":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:11456:8853":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:12541:3824":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:42213:10457":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"24:5146:2649":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"17:435:5426":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:44579:8781":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:12106:458":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"24:5547:3408":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"16:7054:8624":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:16123:6393":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"5:1439:3424":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:47007:8177":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"24:3975:3710":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"24:4887:3362":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"6:548:6918":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:9493:5214":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:32816:2757":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"5:1477:8658":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"24:2602:3668":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"21:2793:2679":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"2:31620:4360":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"24:4156:3722":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"2:4988:33480":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:14399:5889":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"24:53:2068":{"crate_id":24,"path":["syn","token"],"kind":"module"},"24:4139:3721":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"2:12357:8695":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:13145:162":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:7985:27569":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:5955:7544":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:6423:183":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:7432:3476":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:46909:8173":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:4454:3578":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:15631:6270":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"11:2140:10332":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:7598:7845":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:6582:8689":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"6:7651:7856":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:504:4566":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:15311:6167":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:3003:4344":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:6658:7682":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"24:4942:3348":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"24:2721:2374":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"2:8043:176":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:7277:4701":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:7610:9867":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:40012:8719":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:46318:8146":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"24:4831:3353":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"2:22316:10693":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:13419:5687":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:31592:203":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:7671:3485":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:1939:9859":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"18:521:26928":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:42501:3419":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:6687:8597":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:5026:10449":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"5:3230:35588":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:15133:6120":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:8605:8832":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:5867:7495":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"11:2554:35884":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"24:4998:2603":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"24:4342:3735":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"5:2236:34405":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:41051:10404":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"24:5212:3388":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"2:44773:8795":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:11052:22725":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:11204:8350":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:6513:8583":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:8352:3497":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:42242:2059":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"24:5552:3409":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"1:10884:9858":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"16:5049:6493":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:9646:33853":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:2351:4723":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:11978:22830":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:1528:6960":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:1990:186":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:2474:7870":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:6425:8579":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:44617:8785":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"9:426:21624":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:12784:8500":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"24:4979:3374":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"17:12921:5559":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"20:956:1992":{"crate_id":20,"path":["proc_macro2","Ident"],"kind":"struct"},"1:11154:8349":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"16:6960:22646":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:33955:3466":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"5:3155:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:6346:10056":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:9759:22715":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:6222:7649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:15645:6272":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:8356:10499":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"24:2019:3422":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"17:14934:6074":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:6764:7734":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:13167:33557":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:32776:6791":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:4783:7278":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"11:811:4786":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"24:2585:3667":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"2:22430:10686":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"6:6107:7621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:4054:10470":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"24:4915:3345":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"2:22:740":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:13162:5639":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:2806:135":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"16:4806:6485":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"21:2657:3605":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"17:11645:8479":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:12088:27007":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:6261:10040":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:41644:3490":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:2983:26974":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:8277:2968":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:4908:7338":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:62:16172":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:11065:5493":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:22415:10408":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:10736:8265":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:22779:32839":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:7006:22648":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:48692:8253":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"10:36:6794":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:7708:6458":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:4237:15793":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:3051:15855":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:40795:8723":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:14312:5872":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:1703:7074":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:15321:6170":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:12107:1669":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"24:4279:3731":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"24:3146:3586":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"2:9031:3997":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:6352:10696":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:43478:135":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:16180:5671":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"24:2619:3669":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"21:2747:3441":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"1:640:10317":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:40807:32854":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:7722:6448":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:9943:233":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2:47653:8205":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:12659:22698":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:4557:6478":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:12546:15764":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:5648:22636":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:6545:6515":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:47129:8180":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:32812:2148":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:14235:5859":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:21675:10605":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:13989:5806":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:13145:1992":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:40974:8734":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"24:3282:261":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"1:10111:31725":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:5612:6445":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:10440:5175":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:12283:8772":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:4955:7363":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"24:3367:3696":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"23:322:2682":{"crate_id":23,"path":["quote","spanned","Spanned"],"kind":"trait"},"5:2973:34408":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:3433:3594":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:2504:6421":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"24:2959:3682":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"2:41231:3527":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:5146:7461":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:48373:8242":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:13856:5786":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:14470:5900":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"24:4098:3718":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"2:9992:127":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:42553:3999":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:41622:3484":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:14765:6018":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"18:755:8463":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"20:750:2679":{"crate_id":20,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"1:5497:10548":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"11:1883:3420":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"24:3095:3688":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"2:44848:8797":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:44207:15747":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:15546:6248":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:41638:3488":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:4893:7331":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:8370:10460":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:15079:6107":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:13097:5622":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:3548:3571":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:44375:8770":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:4171:33871":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:14989:6086":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:44599:8783":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:12972:5602":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:6781:7735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"11:2326:10332":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:12772:118":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"13:226:6787":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:2596:6425":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:11399:22775":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:9061:26990":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:22459:10687":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:15108:6115":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:22831:7899":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"24:4975:3350":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"2:45068:8817":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:4573:3587":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:16062:6379":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:44920:8803":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:44727:8786":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"24:2857:3677":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"2:34847:3737":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"23:0:1238":{"crate_id":23,"path":["quote"],"kind":"module"},"23:345:2680":{"crate_id":23,"path":["quote","quote_spanned"],"kind":"macro"},"17:10852:22738":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:5969:7545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:10643:246":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:15160:6124":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:41109:3509":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:15566:6251":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:7639:7854":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:10203:150":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"18:515:5358":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:2644:6427":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:33535:5328":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:48185:8240":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:42476:171":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:13334:5672":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:7669:5212":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"14:40:1992":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:5345:5113":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"20:513:3439":{"crate_id":20,"path":["proc_macro2","LexError"],"kind":"struct"},"24:1169:8407":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"2:4183:33858":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:4738:7256":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"24:2138:2616":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"2:22718:32780":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:3041:15853":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"24:4947:3369":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"17:11243:22780":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:44953:8808":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:44608:8784":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:6819:7746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"24:3384:3697":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"2:45244:226":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:22857:10465":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:1063:10333":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:2652:5188":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:44269:8136":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:5905:8533":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"24:4987:3376":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"2:43707:8759":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:12418:22916":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"21:2595:3608":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"6:5140:7459":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:32961:113":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:1607:2029":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:1591:7002":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:14413:5892":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"24:4827:3352":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"2:7934:128":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:10432:35972":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"14:202:2426":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"24:4371:3737":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"11:1566:21703":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:5982:8542":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:5384:22635":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:15519:6239":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:43715:8760":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"5:2975:7872":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:7348:217":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:15200:6134":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:12066:15915":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"23:239:4280":{"crate_id":23,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"23:46:3451":{"crate_id":23,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"16:4344:6473":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:32830:3586":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"1:6228:5199":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"18:652:5355":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:11194:22770":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"21:53:4812":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"24:4057:3715":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"2:44756:8794":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"18:564:5361":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:6017:22640":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:3305:10446":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"24:5573:2548":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"24:944:36306":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"16:6318:6511":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:4582:3588":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"11:774:8658":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:10667:35969":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:46961:8175":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:12105:1044":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:5435:6498":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:8351:8831":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:47387:8200":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:1024:5113":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:40958:32821":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:10756:126":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"1:6710:240":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:3460:22834":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:2418:4714":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:4496:7182":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:45072:8818":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:42179:8107":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"5:7013:5158":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"24:5163:2333":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"24:5527:3402":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"2:46492:8153":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:4613:6480":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:44742:8792":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"24:5524:3401":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"1:6662:10571":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:13194:212":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:44295:8764":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"24:4631:2332":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"17:16146:6398":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:11001:22748":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"24:4835:3354":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"17:11779:5510":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:11657:8481":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"24:5392:2372":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"2:4218:4693":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:10109:27844":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"24:337:3558":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"11:2383:3420":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"5:1315:9849":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:7015:6564":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:41128:3519":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"24:2080:3424":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"24:4383:3738":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"17:4928:22917":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:14843:6061":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:4719:6482":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:11369:5506":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:7738:4579":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:40875:8727":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:40190:7974":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:2546:209":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"24:5065:2659":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"8:0:3179":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:10471:35966":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:5004:7397":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:44493:8777":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"24:2993:3684":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"17:10988:22749":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"18:690:8453":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:9998:3574":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"24:4436:3742":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"24:1792:10261":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"21:992:259":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"17:15842:5622":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"23:407:4159":{"crate_id":23,"path":["quote","__private","RepInterp"],"kind":"struct"},"11:800:4788":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:12301:8494":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:11686:8856":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"20:704:8443":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"2:3010:4346":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"11:2536:1980":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:723:151":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:15177:6131":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:41429:3533":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:13347:5184":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:1634:2545":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:10006:3573":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"21:1836:4809":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"16:5403:5472":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"24:5208:3384":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"1:1887:10356":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"5:40:4702":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:475:1981":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:5075:7427":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:4381:5139":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:12850:5556":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:4364:7101":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:12096:15767":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:12872:5594":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"15:394:21740":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:41671:3496":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"24:5536:3406":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"17:12459:5491":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:12718:22730":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"21:2742:1980":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"2:44301:8765":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:2169:22810":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:3019:5326":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:6666:7687":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:951:10331":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"11:430:35891":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:41615:8745":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"6:563:6926":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"24:4843:3340":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"1:9043:10088":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:6682:7699":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:0:3187":{"crate_id":17,"path":["object"],"kind":"module"},"5:7340:3419":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:8872:206":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"10:0:3181":{"crate_id":10,"path":["adler"],"kind":"module"},"17:14282:5866":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:12930:22732":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:4922:7346":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:43500:3565":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"16:2305:21775":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:42743:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:41147:3521":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:12130:1258":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"9:330:6832":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:34073:5331":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:21568:7879":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:13869:5789":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:5691:227":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:4755:7265":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"24:4624:3339":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"24:5042:2000":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"21:2648:259":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"1:11364:5219":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"24:4494:2672":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"6:4473:7174":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"24:3958:3709":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"17:12244:8487":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:4523:7194":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:2979:3687":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:596:6943":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:7668:7861":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"20:895:2060":{"crate_id":20,"path":["proc_macro2","TokenTree"],"kind":"enum"},"17:9678:22701":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:4527:6477":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:7768:6446":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:46563:8156":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"5:5651:4792":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:15480:6224":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:6877:10602":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:6361:8575":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:11256:22779":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:2766:6432":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:3232:27566":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:2969:21777":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"11:2124:8629":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:5673:6444":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:1885:4862":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:10766:8306":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:12999:5603":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:48543:8245":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:44168:8134":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:11439:22793":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:2864:6436":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:5777:5137":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:6156:8569":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:11381:8848":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:41270:3530":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:256:35970":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:6893:6556":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:8283:8693":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:13504:5715":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:21306:32506":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:2436:10395":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:45044:8811":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:41199:3525":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:10016:22695":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:13648:5751":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:11598:15753":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:7679:7862":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:8936:3419":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:48043:8239":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"24:2011:3420":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"2:10992:8696":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:8523:8129":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:21352:32510":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"20:821:2059":{"crate_id":20,"path":["proc_macro2","imp","Span"],"kind":"enum"},"1:4981:10526":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:8884:8329":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:42156:168":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:14251:5861":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:1604:7009":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:5829:7468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:945:10330":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:6386:6513":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:1581:4788":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:1521:6957":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:13383:5682":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:12104:408":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"11:1923:2029":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"5:6878:4794":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:15990:6360":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"24:2738:115":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"1:7733:4577":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"24:5532:3404":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"2:10000:3575":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:4535:10500":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:44910:8799":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:9234:31726":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"24:4045:3714":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"5:3251:2029":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"11:710:10081":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:22758:32799":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:6352:8574":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:11611:10463":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:4461:7165":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:9174:242":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:11690:22863":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:123:16227":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:1203:22755":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"24:96:4418":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"24:936:36302":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"2:3190:139":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:23895:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:5682:5137":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:12600:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:683:257":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:1697:7073":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"20:849:2679":{"crate_id":20,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"17:16098:6388":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"16:5322:6496":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"24:877:10408":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"1:2271:4729":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:2284:21750":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:4777:726":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:922:10327":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:2907:6438":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:34014:5330":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:46338:8147":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:14633:5912":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:5512:112":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:10915:22740":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:7604:7846":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:42782:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:42554:3998":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:11088:5495":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:4528:3586":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:2339:6409":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:6913:7805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"14:215:8649":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:44311:2968":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:2359:6415":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"24:4591:3337":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"17:14662:5932":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:12701:5588":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:6868:7783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:7993:9863":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:6401:6441":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:4989:7388":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"5:7286:3419":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:41170:3523":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:10207:5478":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:2670:6428":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:2540:202":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"24:5246:3389":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"1:3736:10458":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:12055:9614":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:46633:8159":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"20:889:2059":{"crate_id":20,"path":["proc_macro2","Span"],"kind":"struct"},"2:11071:8773":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:13832:5785":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:14887:6066":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:44529:8779":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:4724:7255":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:12324:8495":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:2584:10438":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:536:8502":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"24:3061:3686":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"2:44283:8763":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:4949:6490":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"24:4571:2006":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"24:5216:3383":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"18:719:5374":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:15367:6179":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:23705:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:48657:8250":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:13121:5636":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:0:540":{"crate_id":2,"path":["core"],"kind":"module"},"17:15961:5649":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"2:23990:7900":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:16004:6364":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"24:5353:210":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"11:787:8659":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:5634:7636":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:31116:32838":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"24:3854:3702":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"6:6700:7706":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"24:1527:3547":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"5:5962:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:8974:10575":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:13491:5714":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:489:6881":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:11932:22833":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:12153:22874":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:12684:5440":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"5:266:5113":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:21338:32504":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:12124:1650":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:44147:8700":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:2715:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:47577:8203":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:10479:10446":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"16:8050:3323":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"18:481:8445":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"20:356:3439":{"crate_id":20,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"16:5830:8525":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:7389:33165":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"24:3010:2377":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"2:4445:228":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:6691:7705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:5993:5143":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"24:5206:3385":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"24:4168:3723":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"1:5637:10550":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:415:182":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:8195:8648":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:6804:7742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:6118:5137":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"24:861:3545":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"1:3344:10442":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:1495:10326":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:1975:713":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:9481:136":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"5:1527:217":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:11667:8355":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:42665:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"24:4122:3720":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"14:0:3184":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:11523:8469":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:45076:8140":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"20:934:2386":{"crate_id":20,"path":["proc_macro2","Punct"],"kind":"struct"},"17:14969:6078":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:10251:8691":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:6961:7823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:41663:3494":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"11:364:5106":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:8227:8306":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"24:5407:3393":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"5:7326:34404":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:14359:5886":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:11714:22829":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:5085:7432":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:11041:5499":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:1301:10332":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:4233:10495":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:4967:426":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:12410:5567":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:10788:3420":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:483:6878":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:15589:6264":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:48666:8251":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:10984:5217":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:40129:223":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"11:490:151":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:44624:8727":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:7556:7844":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:8473:8320":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:4046:10469":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:5009:7399":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:6818:8612":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:46939:8174":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:7503:6453":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:11462:8854":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"11:673:3420":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:3267:10445":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:15212:6140":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:9320:4862":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"24:4848:3356":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"1:12127:1649":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:1574:3420":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:6813:7745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:11274:2363":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"21:367:4813":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"16:6901:6449":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:7736:6612":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"24:5568:3398":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"17:14786:6026":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:1507:6952":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"11:700:3419":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:12202:22901":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:8281:6662":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:10812:3424":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"24:4016:3713":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"17:14485:5559":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:7657:7857":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:2744:6431":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:12612:15772":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:8302:10459":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:13441:4700":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:12584:22910":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"21:2661:3419":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"17:16032:6371":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:7053:9866":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"11:2231:8663":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:11800:5512":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"24:1523:3432":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"23:281:2069":{"crate_id":23,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"2:10211:154":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:10510:22722":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"24:960:3381":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"1:11097:8330":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:2183:8667":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:6159:7635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:8167:22658":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:34191:5333":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:43460:3563":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:13386:149":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:7713:10408":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"24:4955:3349":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"24:1542:3548":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"1:4864:5192":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:6047:7595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:7474:22651":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:1590:8660":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"24:4267:3730":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"2:3378:15856":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"9:0:3180":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:5891:7511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:15943:5639":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"6:4549:7207":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:5992:7558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:15432:6223":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:14266:5865":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:41221:3526":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"24:3866:3703":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"2:21496:10608":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:511:22712":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:7913:10403":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:4053:6472":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"24:4620:2209":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"1:7824:9858":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"5:281:2040":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:12122:802":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:12123:1653":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:6114:7622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:10374:10551":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"11:1087:35892":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:5712:8514":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:1596:7004":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:40085:222":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:9813:22717":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:6086:7609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:8207:3483":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:5967:3510":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:7360:35923":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:1734:7086":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:2724:265":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"20:781:3442":{"crate_id":20,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"17:15267:6156":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:2197:22776":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:13695:5763":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"11:1066:21700":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:7610:7847":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:4556:7210":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:8072:6656":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:10002:213":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:46815:8171":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"21:2772:2058":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"1:8912:8331":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"24:4895:3344":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"2:9944:3571":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:10837:8693":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:14099:5837":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:4480:7178":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:44119:8697":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:41179:3524":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:6879:6554":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:47263:8183":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:4543:7204":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:15192:6133":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:0:1540":{"crate_id":1,"path":["std"],"kind":"module"},"1:4094:10472":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"9:237:8129":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:6532:5204":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:13083:5621":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:6609:10569":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"21:1202:215":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"5:1151:35444":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"21:1403:2073":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"2:41415:3532":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:46863:8172":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:22464:10685":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"24:345:36307":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"17:14439:5894":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"24:1637:3544":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"24:3924:3707":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"16:7391:22650":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:8081:10440":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"13:0:3177":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:43660:8755":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:3461:6465":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:836:3420":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:42640:203":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"24:153:1986":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"6:1650:7046":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:4535:7199":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:6915:6450":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:45335:8822":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:4835:6486":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:621:9857":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"24:5402:2376":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"17:10067:5474":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:7534:6454":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:2972:2235":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:10476:10444":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"17:13026:5609":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:46793:8170":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"24:2636:3670":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"17:14170:5851":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:14145:5847":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:42631:3419":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:12758:5590":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:11321:5499":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:13056:5613":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:1570:6988":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:11563:8473":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:12510:5570":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"24:2568:3746":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"1:893:4788":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:7294:8676":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"23:148:4020":{"crate_id":23,"path":["quote","__private","HasIterator"],"kind":"struct"},"2:46462:8152":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"11:2569:3476":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:46615:8158":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:5005:5137":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:3687:5113":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:4808:7292":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:41280:3514":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"23:35:10408":{"crate_id":23,"path":["quote","ext","private","Sealed"],"kind":"trait"},"1:4246:10496":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:15855:5636":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"16:6968:22647":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:9048:114":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:15:2821":{"crate_id":2,"path":["core","write"],"kind":"macro"},"24:5434:1975":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"1:10990:5218":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:9091:10090":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:31024:4651":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:645:10318":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:12264:8492":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"24:4911:3366":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"16:6189:8572":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:36723:3739":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"21:2032:4810":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"1:7976:8829":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"11:1051:10333":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"24:4870:3359":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"6:5044:7417":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:7318:6586":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"5:7491:32821":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:886:5121":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:13478:5710":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"21:2767:2386":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"11:1603:21705":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:8621:8328":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:14373:5887":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:6742:8598":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:2574:6424":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:32928:3613":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:4104:10473":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:7965:126":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:4616:7239":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"20:914:3441":{"crate_id":20,"path":["proc_macro2","Delimiter"],"kind":"enum"},"6:4939:1112":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:3432:3490":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:4506:7188":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:43697:8129":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:15101:6113":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:12127:22876":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:22666:8706":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:5819:10565":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:23424:197":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"6:4860:7319":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:3594:3420":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:10315:5481":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:45064:8816":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:12191:5551":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"18:0:3188":{"crate_id":18,"path":["memchr"],"kind":"module"},"21:0:1186":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"16:7492:8630":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:3012:135":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"24:3044:3685":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"16:4641:6481":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:5974:7546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"18:624:35978":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:41118:3518":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:45318:178":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:9488:10403":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"5:7460:4580":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:12432:22909":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"11:687:3424":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"24:4533:3323":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"1:1054:10332":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:9891:22697":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:8296:10460":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:4449:10492":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:1802:4647":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:3801:10461":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:4595:7231":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:46717:8162":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"24:5411:2547":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"24:5564:3397":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"6:555:6921":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:12366:22902":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:8205:22659":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:11387:10554":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:2961:116":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:9164:184":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:11755:22866":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:15659:6279":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"15:327:10057":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:43018:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:5743:8519":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:7621:22653":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"5:1131:34410":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:46532:8155":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:8344:8830":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"20:807:8444":{"crate_id":20,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"6:4854:7316":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:261:35951":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:43176:3575":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:13322:5671":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:4603:7235":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:7808:10358":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:13584:5722":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:7284:3995":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:2341:643":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:1639:7038":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:10520:35976":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:3343:4786":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:11590:10461":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"24:956:3052":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"17:14426:5893":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:13436:5695":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"11:1007:8629":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:5461:10546":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:542:6915":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:7644:4787":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:7651:22654":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:8134:8647":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:42564:4581":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:11693:8856":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:4800:7288":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:14296:5868":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:7782:8636":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:7702:7868":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:22969:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"24:4465:3744":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"2:9459:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:1913:17575":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:2832:6435":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:5727:8517":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"11:1903:8660":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:9006:10576":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:22384:4723":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"24:4839:3355":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"1:6676:5205":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:11459:22822":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:15733:6294":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:12797:5591":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:12082:9855":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"24:4028:132":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"5:1685:5113":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:14921:6069":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:11294:22778":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:3010:233":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"5:4444:5139":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:928:10328":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:1505:10081":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"24:3265:260":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"16:6083:21749":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:6315:5200":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"3:0:485":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"24:4507:3885":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"16:6485:6442":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:7597:35905":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:8097:8641":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:13976:5805":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"5:5393:15743":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"5:4182:5137":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"11:1896:4786":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:11817:22868":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:13218:5654":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"24:4971:3373":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"5:7444:3477":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:4455:7162":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:10907:26996":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"11:742:10082":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:7935:8828":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:13297:5666":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"24:5341:3391":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"16:7792:22655":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:40941:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:15535:6243":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"14:31:9843":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:7342:35907":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"24:3878:3704":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"24:2891:138":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"17:12077:22888":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:9559:22696":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:13273:5662":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:10455:5179":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:23333:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:4773:22912":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:10941:22742":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:5696:22637":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"24:4604:1836":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"20:714:3439":{"crate_id":20,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"24:4296:3732":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"17:11507:5508":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:43155:2596":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:15557:6249":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:7544:8635":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:47837:8207":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:44705:15778":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"12:0:3183":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:903:3420":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:15680:6285":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:11027:5463":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:7533:5144":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:10004:3572":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:15287:6162":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"24:3231:2007":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"24:4861:3342":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"17:13742:5769":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:1596:8661":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"18:699:8454":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:13407:5686":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"24:3401:3698":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"24:5214:3387":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"24:3197:3692":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"6:4488:7180":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:11604:8476":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"20:686:3558":{"crate_id":20,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"2:47341:8199":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:11141:22768":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:2795:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:786:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"}},"external_crates":{"23":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.35/"},"20":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.78/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.12/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.48/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}